{"version":3,"file":"static/js/584.f1f674d7.chunk.js","mappings":"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","sources":["services/api.js","components/Login.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      \n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                \n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, { content: eventData.response });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString(),\n                    });\n                  }\n                  return { result: eventData.fullResponse || fullResponse };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return { result: fullResponse };\n\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n      \n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          data\n        );\n\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n            await new Promise((resolve) => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n          );\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n","import React, { useState } from \"react\";\nimport { handleAPIError } from \"../services/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\nconst Login = ({ onLoginSuccess, onSwitchToSignup }) => {\n  const { login } = useAuth();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await login(formData);\n      console.log(\"로그인 성공:\", response);\n\n      if (onLoginSuccess) {\n        onLoginSuccess(response);\n      }\n    } catch (error) {\n      const apiError = handleAPIError(error);\n      setError(apiError.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white\">\n            로그인\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600 dark:text-gray-300\">\n            TITLE-NOMICS AI 제목 생성 시스템\n          </p>\n        </div>\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"space-y-4\">\n            <div>\n              <label\n                htmlFor=\"email\"\n                className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n              >\n                이메일\n              </label>\n              <input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                required\n                value={formData.email}\n                onChange={handleInputChange}\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm transition-colors duration-200\"\n                placeholder=\"이메일 주소\"\n              />\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"password\"\n                className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n              >\n                비밀번호\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                required\n                value={formData.password}\n                onChange={handleInputChange}\n                className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm transition-colors duration-200\"\n                placeholder=\"비밀번호\"\n              />\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 dark:bg-red-900 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 px-4 py-3 rounded relative\">\n              {error}\n            </div>\n          )}\n\n          <div>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? \"로그인 중...\" : \"로그인\"}\n            </button>\n          </div>\n\n          <div className=\"text-center space-y-2\">\n            <button\n              type=\"button\"\n              onClick={() => window.location.href = '/signup'}\n              className=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 text-sm transition-colors duration-200\"\n            >\n              계정이 없으신가요? 회원가입\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["API_BASE_URL","process","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","_error$config","_error$response2","message","code","data","Promise","reject","projectAPI","getProjects","async","get","getProject","projectId","createProject","post","projectData","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","arguments","length","undefined","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","map","_ref","stepOrder","updatedCards","all","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","historyLength","chat_history","timestamp","Date","toISOString","mode","_error$response3","_error$response4","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","streamingUrl","fetch","body","JSON","stringify","ok","Error","statusText","contentType","includes","reader","getReader","decoder","TextDecoder","buffer","fullResponse","done","value","read","decode","stream","lines","split","pop","line","startsWith","eventData","parse","slice","type","content","result","parseError","releaseLock","streamError","fallbackResponse","words","i","word","resolve","setTimeout","model_info","performance_metrics","fallbackError","getExecutionStatus","output","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","handleAPIError","_error$response5","_error$response6","_error$response7","_error$response8","_error$response9","_error$message","_error$message2","statusCode","errorType","_error$response$data","_error$response$data2","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","description","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","onLoginSuccess","onSwitchToSignup","login","useAuth","formData","setFormData","useState","password","loading","setLoading","setError","handleInputChange","e","target","prev","_jsx","className","children","_jsxs","onSubmit","preventDefault","apiError","htmlFor","required","onChange","placeholder","disabled","onClick","window","location","href"],"sourceRoot":""}