{"version":3,"file":"static/js/986.2e1dfc23.chunk.js","mappings":"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","sources":["../node_modules/@heroicons/react/24/outline/esm/BookmarkIcon.js","components/CreateProject.js","services/api.js"],"sourcesContent":["import * as React from \"react\";\nfunction BookmarkIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0 1 11.186 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(BookmarkIcon);\nexport default ForwardRef;","import React, { useState, useRef, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  PlusIcon,\n  XMarkIcon,\n  BookmarkIcon,\n  HashtagIcon,\n} from \"@heroicons/react/24/outline\";\nimport { projectAPI, handleAPIError } from \"../services/api\";\n\nconst CreateProject = ({ isOpen, onClose, onSuccess }) => {\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    tags: [],\n  });\n  const [tagInput, setTagInput] = useState(\"\");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim()) {\n      toast.error(\"프로젝트 이름을 입력해주세요.\");\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const response = await projectAPI.createProject(formData);\n      toast.success(\"프로젝트가 생성되었습니다!\");\n      onSuccess?.(response);\n      onClose();\n    } catch (error) {\n      console.error(\"프로젝트 생성 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTagAdd = (e) => {\n    if (e.key === \"Enter\" && tagInput.trim()) {\n      e.preventDefault();\n      const newTag = tagInput.trim();\n      if (!formData.tags.includes(newTag)) {\n        setFormData((prev) => ({\n          ...prev,\n          tags: [...prev.tags, newTag],\n        }));\n      }\n      setTagInput(\"\");\n    }\n  };\n\n  const handleTagRemove = (tagToRemove) => {\n    setFormData((prev) => ({\n      ...prev,\n      tags: prev.tags.filter((tag) => tag !== tagToRemove),\n    }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white dark:bg-dark-secondary rounded-2xl max-w-md w-full shadow-xl dark:shadow-none transform transition-all duration-300\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center\">\n                <BookmarkIcon className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  새 프로젝트 생성\n                </h3>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  AI 제목 생성 프로젝트를 만들어보세요\n                </p>\n              </div>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-tertiary transition-colors\"\n            >\n              <XMarkIcon className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {/* 프로젝트 이름 */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-semibold text-gray-800 dark:text-gray-200\">\n              프로젝트 이름 <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) =>\n                setFormData((prev) => ({ ...prev, name: e.target.value }))\n              }\n              className=\"w-full px-4 py-3 rounded-xl bg-gray-50 dark:bg-dark-tertiary text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200\"\n              placeholder=\"예: 서울경제신문 제목 생성\"\n              required\n            />\n          </div>\n\n          {/* 프로젝트 설명 */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-semibold text-gray-800 dark:text-gray-200\">\n              프로젝트 설명\n            </label>\n            <textarea\n              value={formData.description}\n              onChange={(e) =>\n                setFormData((prev) => ({\n                  ...prev,\n                  description: e.target.value,\n                }))\n              }\n              className=\"w-full px-4 py-3 rounded-xl bg-gray-50 dark:bg-dark-tertiary text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200 resize-none\"\n              placeholder=\"프로젝트에 대한 간단한 설명을 입력하세요\"\n              rows={4}\n            />\n          </div>\n\n          {/* 해시태그 */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center text-sm font-semibold text-gray-800 dark:text-gray-200\">\n              <HashtagIcon className=\"h-4 w-4 mr-2 text-gray-500 dark:text-gray-400\" />\n              태그\n            </label>\n            <div className=\"space-y-3\">\n              {/* 태그 입력 */}\n              <input\n                type=\"text\"\n                value={tagInput}\n                onChange={(e) => setTagInput(e.target.value)}\n                onKeyPress={handleTagAdd}\n                className=\"w-full px-4 py-3 rounded-xl bg-gray-50 dark:bg-dark-tertiary text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-200\"\n                placeholder=\"태그를 입력하고 Enter를 누르세요\"\n              />\n\n              {/* 태그 목록 */}\n              {formData.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"inline-flex items-center px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full\"\n                    >\n                      #{tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleTagRemove(tag)}\n                        className=\"ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200\"\n                      >\n                        <XMarkIcon className=\"h-3 w-3\" />\n                      </button>\n                    </span>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* 버튼 */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-6 py-2.5 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-dark-tertiary rounded-lg hover:bg-gray-200 dark:hover:bg-dark-primary transition-colors font-medium\"\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading || !formData.name.trim()}\n              className=\"px-6 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-medium shadow-lg hover:shadow-xl flex items-center gap-2\"\n            >\n              {loading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  생성 중...\n                </>\n              ) : (\n                <>\n                  <PlusIcon className=\"h-4 w-4\" />\n                  생성하기\n                </>\n              )}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateProject;\n","import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      \n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                \n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, { content: eventData.response });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString(),\n                    });\n                  }\n                  return { result: eventData.fullResponse || fullResponse };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return { result: fullResponse };\n\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n      \n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          data\n        );\n\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n            await new Promise((resolve) => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n          );\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n"],"names":["BookmarkIcon","_ref","svgRef","title","titleId","props","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","isOpen","onClose","onSuccess","loading","setLoading","useState","formData","setFormData","name","description","tags","tagInput","setTagInput","_jsx","className","children","_jsxs","onClick","XMarkIcon","onSubmit","async","e","preventDefault","trim","response","projectAPI","createProject","toast","success","error","console","errorInfo","handleAPIError","message","type","value","onChange","prev","target","placeholder","required","rows","HashtagIcon","onKeyPress","key","newTag","includes","length","map","tag","index","handleTagRemove","tagToRemove","filter","disabled","_Fragment","PlusIcon","API_BASE_URL","process","api","axios","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","log","method","toUpperCase","url","status","_error$response","_error$config","_error$response2","code","data","Promise","reject","getProjects","get","getProject","projectId","post","projectData","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","arguments","undefined","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","stepOrder","updatedCards","all","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","historyLength","chat_history","timestamp","Date","toISOString","mode","_error$response3","_error$response4","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","streamingUrl","fetch","body","JSON","stringify","ok","Error","statusText","contentType","reader","getReader","decoder","TextDecoder","buffer","fullResponse","done","read","decode","stream","lines","split","pop","line","startsWith","eventData","parse","slice","content","result","parseError","releaseLock","streamError","fallbackResponse","words","i","word","resolve","setTimeout","model_info","performance_metrics","fallbackError","getExecutionStatus","output","authAPI","isAuthenticated","getCurrentUser","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","_error$response5","_error$response6","_error$response7","_error$response8","_error$response9","_error$message","_error$message2","statusCode","errorType","_error$response$data","_error$response$data2","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","project","_project$name","_project$description","_project$tags","some","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare"],"sourceRoot":""}