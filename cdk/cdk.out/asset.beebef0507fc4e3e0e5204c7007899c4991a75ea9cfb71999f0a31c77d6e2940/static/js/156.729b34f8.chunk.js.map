{"version":3,"file":"static/js/156.729b34f8.chunk.js","mappings":"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","sources":["components/UserDashboard.js","components/LoadingSpinner.js"],"sourcesContent":["/**\n * 일반 사용자 대시보드 컴포넌트\n * - 계정 정보 표시 및 수정\n * - 사용량 정보 및 통계\n * - 구독 정보 확인\n */\n\nimport React, { useState, useEffect } from \"react\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport DarkModeToggle from \"./DarkModeToggle\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst UserDashboard = () => {\n  const { user, getAuthToken } = useAuth();\n  const navigate = useNavigate();\n\n  const [loading, setLoading] = useState(true);\n  const [userProfile, setUserProfile] = useState(null);\n  const [usageData, setUsageData] = useState(null);\n  const [subscriptionData, setSubscriptionData] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editForm, setEditForm] = useState({ name: \"\" });\n  const [usagePeriod, setUsagePeriod] = useState(\"month\");\n\n  useEffect(() => {\n    loadDashboardData();\n  }, [usagePeriod]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      const token = await getAuthToken();\n\n      // 병렬로 데이터 로드\n      const [profileRes, usageRes, subscriptionRes] = await Promise.all([\n        fetch(`${process.env.REACT_APP_API_URL}/user/profile`, {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n        fetch(\n          `${process.env.REACT_APP_API_URL}/user/usage?period=${usagePeriod}`,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        ),\n        fetch(`${process.env.REACT_APP_API_URL}/user/subscription`, {\n          headers: { Authorization: `Bearer ${token}` },\n        }),\n      ]);\n\n      const profile = await profileRes.json();\n      const usage = await usageRes.json();\n      const subscription = await subscriptionRes.json();\n\n      setUserProfile(profile);\n      setUsageData(usage);\n      setSubscriptionData(subscription);\n      setEditForm({ name: profile.name || \"\" });\n    } catch (error) {\n      console.error(\"대시보드 데이터 로드 오류:\", error);\n      toast.error(\"데이터를 불러오는데 실패했습니다.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleProfileUpdate = async () => {\n    try {\n      const token = await getAuthToken();\n\n      const response = await fetch(\n        `${process.env.REACT_APP_API_URL}/user/profile`,\n        {\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify(editForm),\n        }\n      );\n\n      if (response.ok) {\n        toast.success(\"프로필이 업데이트되었습니다.\");\n        setIsEditing(false);\n        loadDashboardData();\n      } else {\n        toast.error(\"프로필 업데이트에 실패했습니다.\");\n      }\n    } catch (error) {\n      console.error(\"프로필 업데이트 오류:\", error);\n      toast.error(\"프로필 업데이트에 실패했습니다.\");\n    }\n  };\n\n  const formatDate = (dateString) => {\n    if (!dateString) return \"-\";\n    return new Date(dateString).toLocaleDateString(\"ko-KR\");\n  };\n\n  const formatNumber = (number) => {\n    if (typeof number !== \"number\") return \"0\";\n    return number.toLocaleString();\n  };\n\n  const getUsageBarWidth = (used, limit) => {\n    if (!limit) return 0;\n    return Math.min((used / limit) * 100, 100);\n  };\n\n  const getUsageColor = (percentage) => {\n    if (percentage >= 90) return \"bg-red-500\";\n    if (percentage >= 70) return \"bg-yellow-500\";\n    return \"bg-blue-500\";\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-dark-primary flex items-center justify-center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-dark-primary\">\n      {/* 헤더 */}\n      <div className=\"bg-white dark:bg-dark-secondary shadow-sm border-b border-gray-200 dark:border-dark-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-4\">\n              <button\n                onClick={() => navigate(\"/chat\")}\n                className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\n              >\n                ← 채팅으로 돌아가기\n              </button>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600 dark:text-gray-300\">\n                {user?.name || user?.email}\n              </span>\n              <DarkModeToggle />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 메인 컨텐츠 */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            대시보드\n          </h1>\n          <p className=\"mt-2 text-gray-600 dark:text-gray-300\">\n            계정 정보와 사용량을 확인하고 관리하세요.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* 계정 정보 */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white dark:bg-dark-secondary rounded-lg shadow-sm border border-gray-200 dark:border-dark-border\">\n              <div className=\"px-6 py-4 border-b border-gray-200 dark:border-dark-border\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    계정 정보\n                  </h2>\n                  <button\n                    onClick={() => setIsEditing(!isEditing)}\n                    className=\"text-sm text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\"\n                  >\n                    {isEditing ? \"취소\" : \"수정\"}\n                  </button>\n                </div>\n              </div>\n              <div className=\"px-6 py-4 space-y-4\">\n                {isEditing ? (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                        이름\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={editForm.name}\n                        onChange={(e) =>\n                          setEditForm({ ...editForm, name: e.target.value })\n                        }\n                        className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm bg-white dark:bg-dark-tertiary text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400\"\n                      />\n                    </div>\n                    <div className=\"flex space-x-3\">\n                      <button\n                        onClick={handleProfileUpdate}\n                        className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors\"\n                      >\n                        저장\n                      </button>\n                      <button\n                        onClick={() => setIsEditing(false)}\n                        className=\"flex-1 bg-gray-300 text-gray-700 px-4 py-2 rounded-md hover:bg-gray-400 transition-colors\"\n                      >\n                        취소\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        이메일\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white\">\n                        {userProfile?.email || \"-\"}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        이름\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white\">\n                        {userProfile?.name || \"-\"}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        계정 타입\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white\">\n                        <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                          일반 사용자\n                        </span>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        가입일\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white\">\n                        {formatDate(userProfile?.created_at)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 사용량 정보 */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white dark:bg-dark-secondary rounded-lg shadow-sm border border-gray-200 dark:border-dark-border\">\n              <div className=\"px-6 py-4 border-b border-gray-200 dark:border-dark-border\">\n                <div className=\"flex justify-between items-center\">\n                  <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                    사용량 정보\n                  </h2>\n                  <select\n                    value={usagePeriod}\n                    onChange={(e) => setUsagePeriod(e.target.value)}\n                    className=\"text-sm border border-gray-300 dark:border-dark-border rounded-md px-2 py-1 bg-white dark:bg-dark-tertiary text-gray-900 dark:text-white\"\n                  >\n                    <option value=\"day\">최근 1일</option>\n                    <option value=\"week\">최근 1주</option>\n                    <option value=\"month\">최근 1개월</option>\n                  </select>\n                </div>\n              </div>\n              <div className=\"px-6 py-4\">\n                {usageData ? (\n                  <div className=\"space-y-6\">\n                    {/* 토큰 사용량 */}\n                    <div>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                          토큰 사용량\n                        </span>\n                        <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                          {formatNumber(usageData.total_tokens)} /{\" \"}\n                          {formatNumber(usageData.token_limit)}\n                        </span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 dark:bg-dark-tertiary rounded-full h-2\">\n                        <div\n                          className={`h-2 rounded-full transition-all duration-300 ${getUsageColor(\n                            usageData.usage_percentage\n                          )}`}\n                          style={{\n                            width: `${getUsageBarWidth(\n                              usageData.total_tokens,\n                              usageData.token_limit\n                            )}%`,\n                          }}\n                        ></div>\n                      </div>\n                      <div className=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                        {usageData.usage_percentage.toFixed(1)}% 사용\n                      </div>\n                    </div>\n\n                    {/* 요청 횟수 */}\n                    <div>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                          요청 횟수\n                        </span>\n                        <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                          {formatNumber(usageData.total_requests)}회\n                        </span>\n                      </div>\n                    </div>\n\n                    {/* 일별 사용량 차트 (간단한 형태) */}\n                    {Object.keys(usageData.daily_usage || {}).length > 0 && (\n                      <div>\n                        <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                          일별 사용량\n                        </h3>\n                        <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                          {Object.entries(usageData.daily_usage)\n                            .sort(([a], [b]) => b.localeCompare(a))\n                            .map(([date, data]) => (\n                              <div\n                                key={date}\n                                className=\"flex justify-between items-center text-sm\"\n                              >\n                                <span className=\"text-gray-600 dark:text-gray-400\">\n                                  {formatDate(date)}\n                                </span>\n                                <div className=\"text-right\">\n                                  <div className=\"text-gray-900 dark:text-white\">\n                                    {formatNumber(data.tokens)} 토큰\n                                  </div>\n                                  <div className=\"text-gray-500 dark:text-gray-400\">\n                                    {formatNumber(data.requests)}회\n                                  </div>\n                                </div>\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                    사용량 데이터를 불러올 수 없습니다.\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* 구독 정보 */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-white dark:bg-dark-secondary rounded-lg shadow-sm border border-gray-200 dark:border-dark-border\">\n              <div className=\"px-6 py-4 border-b border-gray-200 dark:border-dark-border\">\n                <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  구독 정보\n                </h2>\n              </div>\n              <div className=\"px-6 py-4\">\n                {subscriptionData ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        플랜\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white capitalize\">\n                        <span\n                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            subscriptionData.plan_type === \"free\"\n                              ? \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\"\n                              : \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n                          }`}\n                        >\n                          {subscriptionData.plan_type === \"free\"\n                            ? \"무료 플랜\"\n                            : \"프리미엄 플랜\"}\n                        </span>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        상태\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white\">\n                        <span\n                          className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            subscriptionData.status === \"active\"\n                              ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n                              : \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n                          }`}\n                        >\n                          {subscriptionData.status === \"active\"\n                            ? \"활성\"\n                            : \"비활성\"}\n                        </span>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        시작일\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white\">\n                        {formatDate(subscriptionData.start_date)}\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        만료일\n                      </div>\n                      <div className=\"text-gray-900 dark:text-white\">\n                        {formatDate(subscriptionData.expiry_date)}\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                    구독 정보를 불러올 수 없습니다.\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserDashboard;\n","import React from \"react\";\n\nconst LoadingSpinner = ({ message = \"로딩 중...\" }) => {\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-dark-primary flex items-center justify-center transition-colors duration-300\">\n      <div className=\"text-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n        <p className=\"text-gray-600 dark:text-gray-300\">{message}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n"],"names":["UserDashboard","user","getAuthToken","useAuth","navigate","useNavigate","loading","setLoading","useState","userProfile","setUserProfile","usageData","setUsageData","subscriptionData","setSubscriptionData","isEditing","setIsEditing","editForm","setEditForm","name","usagePeriod","setUsagePeriod","useEffect","loadDashboardData","async","token","profileRes","usageRes","subscriptionRes","Promise","all","fetch","headers","Authorization","profile","json","usage","subscription","error","console","toast","formatDate","dateString","Date","toLocaleDateString","formatNumber","number","toLocaleString","_jsx","className","children","LoadingSpinner","_jsxs","onClick","email","DarkModeToggle","type","value","onChange","e","target","method","body","JSON","stringify","ok","success","created_at","total_tokens","token_limit","percentage","usage_percentage","style","width","used","limit","Math","min","toFixed","total_requests","Object","keys","daily_usage","length","entries","sort","_ref","_ref2","a","b","localeCompare","map","_ref3","date","data","tokens","requests","plan_type","status","start_date","expiry_date","getUsageBarWidth","message"],"sourceRoot":""}