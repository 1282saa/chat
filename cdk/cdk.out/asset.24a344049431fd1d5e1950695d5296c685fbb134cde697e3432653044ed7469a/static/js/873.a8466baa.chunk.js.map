{"version":3,"file":"static/js/873.a8466baa.chunk.js","mappings":"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","sources":["pages/Dashboard/components/MetricCard.js","pages/Dashboard/components/QuotaGauge.js","pages/Dashboard/components/UsageChart.js","pages/Dashboard/components/LogTable.js","pages/Dashboard/index.js"],"sourcesContent":["import React from 'react';\nimport { ArrowUpIcon, ArrowDownIcon } from '@heroicons/react/24/solid';\n\nconst MetricCard = ({ title, value, icon: Icon, trend, color = 'blue' }) => {\n  const isPositive = trend && trend.startsWith('+');\n  const isNegative = trend && trend.startsWith('-');\n\n  const colorStyles = {\n    blue: 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400',\n    green: 'bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400',\n    purple: 'bg-purple-50 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400',\n    orange: 'bg-orange-50 dark:bg-orange-900/20 text-orange-600 dark:text-orange-400',\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"mt-2 text-3xl font-bold text-gray-900 dark:text-white\">{value}</p>\n          {trend && (\n            <div className=\"mt-2 flex items-center text-sm\">\n              {isPositive && (\n                <>\n                  <ArrowUpIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                  <span className=\"text-green-600 dark:text-green-400 font-medium\">{trend}</span>\n                </>\n              )}\n              {isNegative && (\n                <>\n                  <ArrowDownIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                  <span className=\"text-red-600 dark:text-red-400 font-medium\">{trend}</span>\n                </>\n              )}\n              <span className=\"text-gray-500 dark:text-gray-400 ml-2\">vs 어제</span>\n            </div>\n          )}\n        </div>\n        <div className={`p-3 rounded-lg ${colorStyles[color]}`}>\n          <Icon className=\"h-6 w-6\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MetricCard;","import React from 'react';\nimport { RadialBarChart, RadialBar, ResponsiveContainer } from 'recharts';\n\nconst QuotaGauge = ({ used, limit }) => {\n  const percentage = (used / limit) * 100;\n  const data = [\n    {\n      name: '사용량',\n      value: percentage,\n      fill: percentage >= 80 ? '#f97316' : '#3b82f6', // orange-500 or blue-500\n    },\n  ];\n\n  const formatNumber = (num) => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num.toString();\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n      <div className=\"mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">월간 토큰 한도</h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n          {formatNumber(used)} / {formatNumber(limit)} 토큰 사용됨\n        </p>\n      </div>\n      \n      <div className=\"relative h-48\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <RadialBarChart\n            cx=\"50%\"\n            cy=\"50%\"\n            innerRadius=\"60%\"\n            outerRadius=\"90%\"\n            data={data}\n            startAngle={90}\n            endAngle={-270}\n          >\n            <RadialBar\n              dataKey=\"value\"\n              cornerRadius={10}\n              fill={data[0].fill}\n            />\n          </RadialBarChart>\n        </ResponsiveContainer>\n        \n        {/* Center text */}\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className={`text-2xl font-bold ${\n              percentage >= 80 \n                ? 'text-orange-600 dark:text-orange-400' \n                : 'text-blue-600 dark:text-blue-400'\n            }`}>\n              {percentage.toFixed(1)}%\n            </div>\n            <div className=\"text-sm text-gray-500 dark:text-gray-400\">사용됨</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Progress indicator */}\n      <div className=\"mt-4\">\n        <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-400 mb-2\">\n          <span>0</span>\n          <span>{formatNumber(limit)}</span>\n        </div>\n        <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n          <div\n            className={`h-2 rounded-full transition-all duration-300 ${\n              percentage >= 80 \n                ? 'bg-orange-500' \n                : 'bg-blue-500'\n            }`}\n            style={{ width: `${Math.min(percentage, 100)}%` }}\n          ></div>\n        </div>\n      </div>\n\n      {percentage >= 80 && (\n        <div className=\"mt-3 p-3 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg\">\n          <p className=\"text-sm text-orange-800 dark:text-orange-200\">\n            ⚠️ 토큰 사용량이 80%를 초과했습니다. 플랜 업그레이드를 고려해보세요.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default QuotaGauge;","import React from 'react';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst UsageChart = ({ data }) => {\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return `${date.getMonth() + 1}/${date.getDate()}`;\n  };\n\n  const formatNumber = (num) => {\n    if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num.toString();\n  };\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n          <p className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">{formatDate(label)}</p>\n          {payload.map((entry, index) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {entry.value.toLocaleString()}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6\">\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">사용량 추이</h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">최근 30일간 토큰 및 요청 사용량</p>\n      </div>\n\n      <div className=\"h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n            <defs>\n              <linearGradient id=\"tokensGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3} />\n                <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0} />\n              </linearGradient>\n              <linearGradient id=\"requestsGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#10b981\" stopOpacity={0.3} />\n                <stop offset=\"95%\" stopColor=\"#10b981\" stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            \n            <CartesianGrid \n              strokeDasharray=\"3 3\" \n              stroke=\"#e5e7eb\" \n              className=\"dark:stroke-gray-600\" \n            />\n            \n            <XAxis\n              dataKey=\"date\"\n              tickFormatter={formatDate}\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 12, fill: '#6b7280' }}\n              className=\"dark:fill-gray-400\"\n            />\n            \n            <YAxis\n              yAxisId=\"tokens\"\n              orientation=\"left\"\n              tickFormatter={formatNumber}\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 12, fill: '#6b7280' }}\n              className=\"dark:fill-gray-400\"\n            />\n            \n            <YAxis\n              yAxisId=\"requests\"\n              orientation=\"right\"\n              tickFormatter={formatNumber}\n              axisLine={false}\n              tickLine={false}\n              tick={{ fontSize: 12, fill: '#6b7280' }}\n              className=\"dark:fill-gray-400\"\n            />\n            \n            <Tooltip content={<CustomTooltip />} />\n            \n            <Area\n              yAxisId=\"tokens\"\n              type=\"monotone\"\n              dataKey=\"tokens\"\n              stroke=\"#3b82f6\"\n              strokeWidth={2}\n              fillOpacity={1}\n              fill=\"url(#tokensGradient)\"\n              name=\"토큰\"\n            />\n            \n            <Area\n              yAxisId=\"requests\"\n              type=\"monotone\"\n              dataKey=\"requests\"\n              stroke=\"#10b981\"\n              strokeWidth={2}\n              fillOpacity={0.6}\n              fill=\"url(#requestsGradient)\"\n              name=\"요청\"\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n\n      {/* Legend */}\n      <div className=\"flex justify-center mt-4 space-x-6\">\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 bg-blue-500 rounded mr-2\"></div>\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">토큰</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 bg-green-500 rounded mr-2\"></div>\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">요청</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UsageChart;","import React, { useState } from 'react';\nimport { CheckCircleIcon, XCircleIcon, ClockIcon } from '@heroicons/react/24/outline';\n\nconst LogTable = ({ logs }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n\n  const formatDate = (dateStr) => {\n    const date = new Date(dateStr);\n    return date.toLocaleString('ko-KR', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const formatDuration = (ms) => {\n    if (ms < 1000) return `${ms}ms`;\n    return `${(ms / 1000).toFixed(1)}s`;\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'success':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />;\n      case 'error':\n        return <XCircleIcon className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <ClockIcon className=\"h-5 w-5 text-yellow-500\" />;\n    }\n  };\n\n  const getStatusBadge = (status) => {\n    const styles = {\n      success: 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-200',\n      error: 'bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-200',\n      pending: 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200',\n    };\n\n    const labels = {\n      success: '성공',\n      error: '오류',\n      pending: '대기',\n    };\n\n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${styles[status]}`}>\n        {labels[status]}\n      </span>\n    );\n  };\n\n  const totalPages = Math.ceil(logs.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const currentLogs = logs.slice(startIndex, startIndex + itemsPerPage);\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm\">\n      <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">최근 호출 로그</h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400\">최근 {logs.length}건의 API 호출 기록</p>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-700\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                시간\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                모델\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                토큰\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                응답시간\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                상태\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n            {currentLogs.map((log) => (\n              <tr key={log.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-150\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900 dark:text-white\">\n                    {formatDate(log.timestamp)}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {log.model}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900 dark:text-white\">\n                    {log.tokens.toLocaleString()}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900 dark:text-white\">\n                    {formatDuration(log.duration)}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    {getStatusIcon(log.status)}\n                    <div className=\"ml-2\">\n                      {getStatusBadge(log.status)}\n                    </div>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Pagination */}\n      {totalPages > 1 && (\n        <div className=\"px-6 py-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-gray-700 dark:text-gray-300\">\n              {startIndex + 1}-{Math.min(startIndex + itemsPerPage, logs.length)} of {logs.length} 결과\n            </div>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                disabled={currentPage === 1}\n                className=\"px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                이전\n              </button>\n              <span className=\"px-3 py-1 text-sm text-gray-700 dark:text-gray-300\">\n                {currentPage} / {totalPages}\n              </span>\n              <button\n                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                disabled={currentPage === totalPages}\n                className=\"px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                다음\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LogTable;","import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport MetricCard from './components/MetricCard';\nimport QuotaGauge from './components/QuotaGauge';\nimport UsageChart from './components/UsageChart';\nimport LogTable from './components/LogTable';\nimport { getUsage } from '../../services/api';\nimport { ChartBarIcon, SparklesIcon } from '@heroicons/react/24/outline';\n\nconst Dashboard = () => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [usage, setUsage] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchUsageData = async () => {\n      try {\n        setLoading(true);\n        const data = await getUsage('month');\n        setUsage(data);\n      } catch (err) {\n        setError('사용량 데이터를 불러오는데 실패했습니다.');\n        console.error('Usage fetch error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsageData();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"animate-pulse\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"bg-white dark:bg-gray-800 rounded-lg p-6 h-32\"></div>\n          ))}\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 bg-white dark:bg-gray-800 rounded-lg p-6 h-80\"></div>\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 h-80\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-400 px-4 py-3 rounded relative\">\n        {error}\n      </div>\n    );\n  }\n\n  // Mock data for development\n  const mockData = {\n    todayRequests: 127,\n    todayTokens: 45320,\n    monthlyLimit: 1000000,\n    monthlyUsed: 523400,\n    chartData: Array.from({ length: 30 }, (_, i) => ({\n      date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      tokens: Math.floor(Math.random() * 30000) + 10000,\n      requests: Math.floor(Math.random() * 100) + 50\n    })),\n    recentLogs: Array.from({ length: 20 }, (_, i) => ({\n      id: `log-${i}`,\n      timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n      model: ['Claude 3 Sonnet', 'Claude 3.5 Haiku', 'Claude 3 Opus'][Math.floor(Math.random() * 3)],\n      tokens: Math.floor(Math.random() * 5000) + 1000,\n      duration: Math.floor(Math.random() * 3000) + 500,\n      status: Math.random() > 0.1 ? 'success' : 'error'\n    }))\n  };\n\n  const data = usage || mockData;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Page Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">대시보드</h1>\n        <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n          {user?.name || user?.email?.split('@')[0] || '사용자'}님의 사용 현황을 확인하세요\n        </p>\n      </div>\n\n      {/* Metric Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-6\">\n        <MetricCard\n          title=\"오늘 호출 수\"\n          value={data.todayRequests.toLocaleString()}\n          icon={ChartBarIcon}\n          trend=\"+12%\"\n          color=\"blue\"\n        />\n        <MetricCard\n          title=\"오늘 토큰 수\"\n          value={data.todayTokens.toLocaleString()}\n          icon={SparklesIcon}\n          trend=\"+8%\"\n          color=\"green\"\n        />\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Usage Chart - Takes 3 columns on large screens */}\n        <div className=\"lg:col-span-3\">\n          <UsageChart data={data.chartData} />\n        </div>\n\n        {/* Right Column - Quota Gauge only */}\n        <div className=\"lg:col-span-1\">\n          <QuotaGauge\n            used={data.monthlyUsed}\n            limit={data.monthlyLimit}\n          />\n        </div>\n      </div>\n\n      {/* Log Table */}\n      <div className=\"mt-6\">\n        <LogTable logs={data.recentLogs} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"names":["_ref","title","value","icon","Icon","trend","color","isPositive","startsWith","isNegative","_jsx","className","children","_jsxs","_Fragment","ArrowUpIcon","ArrowDownIcon","blue","green","purple","orange","used","limit","percentage","data","name","fill","formatNumber","num","toFixed","toString","ResponsiveContainer","width","height","RadialBarChart","cx","cy","innerRadius","outerRadius","startAngle","endAngle","RadialBar","dataKey","cornerRadius","style","Math","min","formatDate","dateStr","date","Date","getMonth","getDate","CustomTooltip","_ref2","active","payload","label","length","map","entry","index","toLocaleString","AreaChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","stroke","XAxis","tickFormatter","axisLine","tickLine","tick","fontSize","YAxis","yAxisId","orientation","Tooltip","content","Area","type","strokeWidth","fillOpacity","logs","currentPage","setCurrentPage","useState","getStatusIcon","status","CheckCircleIcon","XCircleIcon","ClockIcon","totalPages","ceil","startIndex","currentLogs","slice","log","timestamp","month","day","hour","minute","model","tokens","ms","duration","success","error","pending","onClick","prev","max","disabled","Dashboard","_user$email","user","useAuth","loading","setLoading","usage","setUsage","setError","useEffect","async","getUsage","err","console","fetchUsageData","Array","_","i","mockData","todayRequests","todayTokens","monthlyLimit","monthlyUsed","chartData","from","now","toISOString","split","floor","random","requests","recentLogs","email","MetricCard","ChartBarIcon","SparklesIcon","UsageChart","QuotaGauge","LogTable"],"sourceRoot":""}