{"version":3,"file":"static/js/451.8ddd854c.chunk.js","mappings":"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","sources":["components/chat/ConversationDrawer.js","hooks/useConversations.js","components/ModelSelector.js","utils/clipboard.js","hooks/useChat.js","hooks/useOrchestration.js","hooks/useWebSocket.js","components/SimpleChatMessage.js","components/chat/ChatWindow.js","hooks/useMessages.js","components/PromptCardManager.js","components/AdminView.js","components/UserView.js","components/ProjectDetail.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useConversations } from \"../../hooks/useConversations\";\nimport { useConversationContext } from \"../../contexts/ConversationContext\";\nimport { conversationAPI } from \"../../services/api\";\n\nconst ConversationDrawer = ({\n  isOpen,\n  onClose,\n  className = \"\",\n  onCollapsedChange,\n}) => {\n  const {\n    conversations,\n    loading,\n    error,\n    hasMore,\n    loadMore,\n    createConversation,\n    deleteConversation,\n    updateConversation,\n  } = useConversations();\n\n  const { currentConversationId, setCurrentConversation } =\n    useConversationContext();\n\n  const [isCreating, setIsCreating] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [createError, setCreateError] = useState(null);\n  const [deletingId, setDeletingId] = useState(null);\n  const [deleteError, setDeleteError] = useState(null);\n  const [activeMenuId, setActiveMenuId] = useState(null);\n  const [editingId, setEditingId] = useState(null);\n  const [editingTitle, setEditingTitle] = useState(\"\");\n\n  // 대화 목록 스크롤을 위한 ref\n  const conversationListRef = useRef(null);\n\n  // 새 대화가 추가될 때마다 맨 아래로 스크롤\n  useEffect(() => {\n    if (\n      conversationListRef.current &&\n      conversations.length > 0 &&\n      !isCollapsed\n    ) {\n      conversationListRef.current.scrollTop =\n        conversationListRef.current.scrollHeight;\n    }\n  }, [conversations.length, isCollapsed]);\n\n  // 외부 클릭 시 메뉴 닫기\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (activeMenuId && !event.target.closest(\".conversation-menu\")) {\n        setActiveMenuId(null);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [activeMenuId]);\n\n  // 새 대화 생성\n  const handleNewChat = async () => {\n    if (isCreating) return;\n\n    setIsCreating(true);\n    setCreateError(null);\n\n    try {\n      console.log(\"🔍 [DEBUG] 새 대화 생성 시작\");\n      const newConversation = await createConversation(\"새 대화\");\n      console.log(\"🔍 [DEBUG] 새 대화 생성 완료:\", {\n        newConversation,\n        conversationId: newConversation?.id,\n        conversationIdType: typeof newConversation?.id,\n        isConversationIdNull: newConversation?.id === null,\n        isConversationIdUndefined: newConversation?.id === undefined,\n      });\n\n      console.log(\n        \"🔍 [DEBUG] setCurrentConversation 호출 전 - 현재 ID:\",\n        currentConversationId\n      );\n      setCurrentConversation(newConversation.id);\n      console.log(\n        \"🔍 [DEBUG] setCurrentConversation 호출 완료 - 새 ID:\",\n        newConversation.id\n      );\n\n      if (window.innerWidth < 768) {\n        onClose();\n      }\n    } catch (error) {\n      console.error(\"새 대화 생성 실패:\", error);\n      setCreateError(\"새 대화를 생성할 수 없습니다. 다시 시도해주세요.\");\n      setTimeout(() => setCreateError(null), 3000);\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  // 대화 선택\n  const handleSelectConversation = (conversationId) => {\n    setCurrentConversation(conversationId);\n\n    if (window.innerWidth < 768) {\n      onClose();\n    }\n  };\n\n  // 대화 삭제\n  const handleDeleteConversation = async (conversationId, event) => {\n    event.stopPropagation(); // 대화 선택을 방지\n\n    if (!window.confirm(\"이 대화를 삭제하시겠습니까?\")) {\n      return;\n    }\n\n    setDeletingId(conversationId);\n    setDeleteError(null);\n    setActiveMenuId(null); // 메뉴 닫기\n\n    try {\n      await deleteConversation(conversationId);\n\n      // 현재 선택된 대화가 삭제된 경우 첫 번째 대화로 이동\n      if (\n        currentConversationId === conversationId &&\n        conversations.length > 1\n      ) {\n        const remainingConversations = conversations.filter(\n          (conv) => conv.id !== conversationId\n        );\n        if (remainingConversations.length > 0) {\n          setCurrentConversation(remainingConversations[0].id);\n        }\n      }\n\n      console.log(\"대화 삭제 완료:\", conversationId);\n    } catch (error) {\n      console.error(\"대화 삭제 중 오류:\", error);\n      // 일반적으로 API 오류가 발생해도 로컬에서는 삭제되므로 에러 표시하지 않음\n      // setDeleteError('대화를 삭제할 수 없습니다. 다시 시도해주세요.');\n      // setTimeout(() => setDeleteError(null), 3000);\n    } finally {\n      setDeletingId(null);\n    }\n  };\n\n  // 대화 수정 시작\n  const handleStartEdit = (conversationId, currentTitle, event) => {\n    event.stopPropagation();\n    setEditingId(conversationId);\n    setEditingTitle(currentTitle);\n    setActiveMenuId(null); // 메뉴 닫기\n  };\n\n  // 대화 수정 완료\n  const handleSaveEdit = async (conversationId) => {\n    if (!editingTitle.trim()) {\n      setEditingId(null);\n      setEditingTitle(\"\");\n      return;\n    }\n\n    try {\n      // API 호출로 대화 제목 업데이트\n      console.log(\"대화 제목 업데이트:\", conversationId, editingTitle);\n      await conversationAPI.updateConversation(conversationId, {\n        title: editingTitle,\n      });\n\n      // 로컬 상태도 업데이트\n      updateConversation(conversationId, { title: editingTitle });\n\n      setEditingId(null);\n      setEditingTitle(\"\");\n\n      console.log(\"대화 제목 수정 완료\");\n    } catch (error) {\n      console.error(\"대화 제목 수정 중 오류:\", error);\n      // 사용자에게 에러 표시\n      alert(\"제목 수정에 실패했습니다. 다시 시도해주세요.\");\n    }\n  };\n\n  // 대화 수정 취소\n  const handleCancelEdit = () => {\n    setEditingId(null);\n    setEditingTitle(\"\");\n  };\n\n  // 메뉴 토글\n  const handleToggleMenu = (conversationId, event) => {\n    event.stopPropagation();\n    setActiveMenuId(activeMenuId === conversationId ? null : conversationId);\n  };\n\n  // 대화를 날짜별로 그룹화\n  const groupConversationsByDate = (conversations) => {\n    const groups = {};\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    conversations.forEach((conversation) => {\n      const date = new Date(\n        conversation.lastActivityAt || conversation.createdAt\n      );\n      const isToday = date.toDateString() === today.toDateString();\n      const isYesterday = date.toDateString() === yesterday.toDateString();\n\n      let key;\n      if (isToday) {\n        key = \"Today\";\n      } else if (isYesterday) {\n        key = \"Yesterday\";\n      } else {\n        const monthYear = date.toLocaleDateString(\"ko-KR\", {\n          year: \"numeric\",\n          month: \"2-digit\",\n        });\n        key = monthYear;\n      }\n\n      if (!groups[key]) {\n        groups[key] = [];\n      }\n      groups[key].push(conversation);\n    });\n\n    return groups;\n  };\n\n  const conversationGroups = groupConversationsByDate(conversations);\n\n  return (\n    <>\n      {/* 모바일 오버레이 */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/40 backdrop-blur-sm z-40 md:hidden transition-opacity duration-300\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* 드로어 컨테이너 */}\n      <div\n        className={`\n        conversation-drawer\n        fixed top-0 left-0 h-full z-[9999]\n        bg-[#0d1117]\n        border-r border-[#21262d] shadow-[inset_0_0_16px_rgba(0,0,0,0.4)]\n        transform transition-all duration-500 ease-out\n        ${isOpen ? \"translate-x-0\" : \"-translate-x-full\"}\n        md:translate-x-0\n        ${isCollapsed ? \"w-14\" : \"w-full md:w-64\"}\n        ${className}\n      `}\n        style={{ overscrollBehavior: \"contain\" }}\n      >\n        {/* 헤더 - 접힌 상태에서는 숨김 */}\n        {!isCollapsed && (\n          <div className=\"flex items-center justify-between p-5 border-b border-[#21262d] relative transition-opacity duration-300 ease-in-out\">\n            <h1 className=\"text-xl font-semibold tracking-tight text-[#e6edf3]\">\n              TITLE-NOMICS\n            </h1>\n\n            {/* 미니멀 토글 버튼 */}\n            <button\n              onClick={() => {\n                const newCollapsed = !isCollapsed;\n                setIsCollapsed(newCollapsed);\n                if (onCollapsedChange) {\n                  onCollapsedChange(newCollapsed);\n                }\n              }}\n              className=\"w-10 h-10 py-2 rounded-full bg-transparent hover:bg-[#11161f] transition-colors duration-200 flex items-center justify-center group\"\n              title=\"사이드바 접기\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth=\"1.5\"\n                stroke=\"currentColor\"\n                className=\"w-6 h-6 text-[#88929d] group-hover:text-[#e6edf3] transition-colors duration-200\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\"\n                />\n              </svg>\n            </button>\n          </div>\n        )}\n\n        {/* 접힌 상태 전용 토글 버튼 */}\n        {isCollapsed && (\n          <div className=\"p-2 flex justify-center border-b border-[#21262d]\">\n            <button\n              onClick={() => {\n                const newCollapsed = !isCollapsed;\n                setIsCollapsed(newCollapsed);\n                if (onCollapsedChange) {\n                  onCollapsedChange(newCollapsed);\n                }\n              }}\n              className=\"w-10 h-10 py-2 rounded-full bg-transparent hover:bg-[#11161f] transition-colors duration-200 flex items-center justify-center group\"\n              title=\"사이드바 펼치기\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n                strokeWidth=\"1.5\"\n                stroke=\"currentColor\"\n                className=\"w-6 h-6 text-[#88929d] group-hover:text-[#e6edf3] transition-colors duration-200 rotate-180\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  d=\"M18.75 19.5l-7.5-7.5 7.5-7.5m-6 15L5.25 12l7.5-7.5\"\n                />\n              </svg>\n            </button>\n          </div>\n        )}\n\n        {/* 새 대화 버튼 */}\n        {!isCollapsed && (\n          <div className=\"p-4 border-b border-[#21262d] transition-opacity duration-300 ease-in-out\">\n            <button\n              onClick={handleNewChat}\n              disabled={isCreating}\n              className=\"group w-full flex items-center justify-start gap-3 px-3 py-2.5 text-[#e6edf3] hover:bg-[#21262d] disabled:bg-[#374151] rounded-lg text-sm transition-all duration-200 focus:outline-none border border-[#6e7681] hover:border-[#8b949e]\"\n              title=\"새 채팅\"\n            >\n              {isCreating ? (\n                <>\n                  <div className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-[#e6edf3]\"></div>\n                  </div>\n                  <span className=\"font-medium\">생성 중...</span>\n                </>\n              ) : (\n                <>\n                  <div className=\"flex-shrink-0 w-5 h-5 flex items-center justify-center\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      strokeWidth=\"2\"\n                      stroke=\"currentColor\"\n                      className=\"h-4 w-4 group-hover:scale-110 transition-transform duration-200\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        d=\"M12 4.5v15m7.5-7.5h-15\"\n                      />\n                    </svg>\n                  </div>\n                  <span className=\"font-medium\">새 채팅</span>\n                </>\n              )}\n            </button>\n\n            {(createError || deleteError) && (\n              <div className=\"mt-2 p-2 bg-red-500/10 border border-red-500/20 rounded text-center\">\n                <p className=\"text-xs text-red-400\">\n                  {createError || deleteError}\n                </p>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* 대화 목록 */}\n        <div\n          ref={conversationListRef}\n          className=\"flex flex-col gap-0.5 overflow-y-auto h-[calc(100vh-210px)] custom-scrollbar\"\n          onScroll={(e) => e.stopPropagation()}\n        >\n          <style jsx>{`\n            /* CSS Custom Properties for Design System */\n            .conversation-drawer {\n              --color-bg-primary: #0d1117;\n              --color-bg-secondary: #11161f;\n              --color-bg-tertiary: #161b22;\n              --color-border: #21262d;\n              --color-text-primary: #e6edf3;\n              --color-text-secondary: #88929d;\n              --color-accent: #10b981;\n              --color-accent-hover: #059669;\n              --color-danger: #f85149;\n              --shadow-depth: inset 0 0 16px rgba(0, 0, 0, 0.4);\n            }\n\n            .custom-scrollbar::-webkit-scrollbar {\n              width: 8px;\n            }\n            .custom-scrollbar::-webkit-scrollbar-track {\n              background: transparent;\n              border-radius: 4px;\n            }\n            .custom-scrollbar::-webkit-scrollbar-thumb {\n              background: var(--color-border);\n              border-radius: 4px;\n              border: 1px solid var(--color-bg-primary);\n            }\n            .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n              background: #30363d;\n            }\n            .custom-scrollbar::-webkit-scrollbar-thumb:active {\n              background: #484f58;\n            }\n            .custom-scrollbar::-webkit-scrollbar-corner {\n              background: transparent;\n            }\n\n            /* 사이드바 스크롤 격리 */\n            .custom-scrollbar {\n              overscroll-behavior: contain;\n              scroll-behavior: smooth;\n            }\n          `}</style>\n\n          {error && !isCollapsed && (\n            <div className=\"p-4 text-center bg-red-900/30 rounded-lg border border-red-700/50 mb-4\">\n              <div className=\"text-red-300 text-sm font-medium\">{error}</div>\n            </div>\n          )}\n\n          {conversations.length === 0 && !loading && !error && !isCollapsed && (\n            <div className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 mx-auto mb-4 bg-gradient-to-br from-gray-800/50 to-gray-900/50 rounded-2xl flex items-center justify-center shadow-lg border border-gray-700/30\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                  strokeWidth=\"1.5\"\n                  stroke=\"currentColor\"\n                  className=\"h-6 w-6 text-gray-400\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    d=\"M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 0 1-.825-.242m9.345-8.334a2.126 2.126 0 0 0-.476-.095 48.64 48.64 0 0 0-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0 0 11.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155\"\n                  />\n                </svg>\n              </div>\n              <h3 className=\"text-sm font-medium text-white mb-2 drop-shadow\">\n                아직 대화가 없습니다\n              </h3>\n              <p className=\"text-xs text-gray-400 leading-snug opacity-80\">\n                새 대화를 시작해서 AI와 대화해보세요!\n              </p>\n            </div>\n          )}\n\n          {/* 로딩 상태 */}\n          {loading && conversations.length === 0 && !isCollapsed && (\n            <div className=\"flex flex-col gap-1\">\n              {[...Array(5)].map((_, i) => (\n                <div\n                  key={i}\n                  className=\"w-full h-10 px-3 bg-gray-900/40 animate-pulse flex items-center\"\n                >\n                  <div className=\"h-3 bg-gray-700/40 rounded w-3/4\"></div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* 딥시크 스타일 대화 목록 */}\n          {!isCollapsed && conversations.length > 0 && (\n            <div className=\"flex flex-col gap-1 transition-opacity duration-300 ease-in-out\">\n              {Object.entries(conversationGroups).map(\n                ([groupTitle, groupConversations]) => (\n                  <div key={groupTitle}>\n                    {/* 날짜 그룹 헤더 */}\n                    <div className=\"text-xs text-white/40 uppercase tracking-wide py-2 px-3 font-medium\">\n                      {groupTitle}\n                    </div>\n\n                    {/* 그룹 내 대화들 */}\n                    {groupConversations.map((conversation) => (\n                      <div\n                        key={conversation.id}\n                        className={`\n                        flex items-center justify-between h-10 px-3 py-2 text-sm transition-colors duration-200 relative\n                        ${\n                          currentConversationId === conversation.id\n                            ? \"bg-[#161b22] text-[#e6edf3] relative before:absolute before:left-0 before:top-0 before:bottom-0 before:w-[2px] before:bg-[#10b981]\"\n                            : \"text-[#88929d] hover:bg-[#11161f] hover:text-[#e6edf3]\"\n                        }\n                      `}\n                      >\n                        {editingId === conversation.id ? (\n                          // 수정 모드\n                          <div className=\"flex-1 flex items-center gap-2\">\n                            <input\n                              type=\"text\"\n                              value={editingTitle}\n                              onChange={(e) => setEditingTitle(e.target.value)}\n                              onKeyPress={(e) => {\n                                if (e.key === \"Enter\") {\n                                  handleSaveEdit(conversation.id);\n                                } else if (e.key === \"Escape\") {\n                                  handleCancelEdit();\n                                }\n                              }}\n                              className=\"flex-1 bg-[#0d1117] border border-[#21262d] rounded px-2 py-1 text-sm text-[#e6edf3] focus:outline-none focus:border-[#10b981]\"\n                              autoFocus\n                            />\n                            <button\n                              onClick={() => handleSaveEdit(conversation.id)}\n                              className=\"p-1 text-[#10b981] hover:bg-[#161b22] rounded\"\n                              title=\"저장\"\n                            >\n                              <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                strokeWidth=\"2\"\n                                stroke=\"currentColor\"\n                                className=\"h-4 w-4\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  d=\"m4.5 12.75 6 6 9-13.5\"\n                                />\n                              </svg>\n                            </button>\n                            <button\n                              onClick={handleCancelEdit}\n                              className=\"p-1 text-[#88929d] hover:text-[#f85149] hover:bg-[#161b22] rounded\"\n                              title=\"취소\"\n                            >\n                              <svg\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                fill=\"none\"\n                                viewBox=\"0 0 24 24\"\n                                strokeWidth=\"2\"\n                                stroke=\"currentColor\"\n                                className=\"h-4 w-4\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  d=\"M6 18L18 6M6 6l12 12\"\n                                />\n                              </svg>\n                            </button>\n                          </div>\n                        ) : (\n                          // 일반 모드\n                          <>\n                            <button\n                              onClick={() =>\n                                handleSelectConversation(conversation.id)\n                              }\n                              className=\"flex-1 text-left truncate focus:outline-none py-2\"\n                              title={conversation.title}\n                            >\n                              <span className=\"truncate text-sm font-medium\">\n                                {conversation.title || \"새 대화\"}\n                              </span>\n                            </button>\n\n                            {/* 메뉴 버튼 */}\n                            <div className=\"conversation-menu relative\">\n                              <button\n                                onClick={(e) =>\n                                  handleToggleMenu(conversation.id, e)\n                                }\n                                className=\"ml-2 py-2 px-2 text-[#88929d] hover:text-[#e6edf3] transition-colors duration-200 flex-shrink-0 rounded-md hover:bg-[#161b22]\"\n                                title=\"메뉴\"\n                              >\n                                <svg\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  fill=\"none\"\n                                  viewBox=\"0 0 24 24\"\n                                  strokeWidth=\"1.5\"\n                                  stroke=\"currentColor\"\n                                  className=\"h-5 w-5\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    d=\"M6.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM12.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0ZM18.75 12a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z\"\n                                  />\n                                </svg>\n                              </button>\n\n                              {/* 드롭다운 메뉴 */}\n                              {activeMenuId === conversation.id && (\n                                <div className=\"absolute right-0 top-full mt-1 bg-[#21262d] border border-[#30363d] rounded-md shadow-lg z-50 min-w-[120px]\">\n                                  <button\n                                    onClick={(e) =>\n                                      handleStartEdit(\n                                        conversation.id,\n                                        conversation.title,\n                                        e\n                                      )\n                                    }\n                                    className=\"w-full px-3 py-2 text-sm text-[#e6edf3] hover:bg-[#30363d] flex items-center gap-2 transition-colors duration-200\"\n                                  >\n                                    <svg\n                                      xmlns=\"http://www.w3.org/2000/svg\"\n                                      fill=\"none\"\n                                      viewBox=\"0 0 24 24\"\n                                      strokeWidth=\"1.5\"\n                                      stroke=\"currentColor\"\n                                      className=\"h-4 w-4\"\n                                    >\n                                      <path\n                                        strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\"\n                                        d=\"m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10\"\n                                      />\n                                    </svg>\n                                    수정\n                                  </button>\n                                  <button\n                                    onClick={(e) =>\n                                      handleDeleteConversation(\n                                        conversation.id,\n                                        e\n                                      )\n                                    }\n                                    disabled={deletingId === conversation.id}\n                                    className=\"w-full px-3 py-2 text-sm text-[#f85149] hover:bg-[#30363d] flex items-center gap-2 transition-colors duration-200 disabled:opacity-50\"\n                                  >\n                                    {deletingId === conversation.id ? (\n                                      <div className=\"animate-spin rounded-full h-4 w-4 border-b border-[#f85149]\"></div>\n                                    ) : (\n                                      <svg\n                                        xmlns=\"http://www.w3.org/2000/svg\"\n                                        fill=\"none\"\n                                        viewBox=\"0 0 24 24\"\n                                        strokeWidth=\"1.5\"\n                                        stroke=\"currentColor\"\n                                        className=\"h-4 w-4\"\n                                      >\n                                        <path\n                                          strokeLinecap=\"round\"\n                                          strokeLinejoin=\"round\"\n                                          d=\"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\"\n                                        />\n                                      </svg>\n                                    )}\n                                    삭제\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )\n              )}\n            </div>\n          )}\n\n          {/* 접힌 상태 새 대화 버튼만 표시 */}\n          {isCollapsed && (\n            <div className=\"flex flex-col items-center p-2 transition-opacity duration-300 ease-in-out\">\n              <button\n                onClick={handleNewChat}\n                disabled={isCreating}\n                className=\"w-10 h-10 bg-[#21262d] hover:bg-[#30363d] disabled:bg-[#374151] text-white rounded-full flex items-center justify-center transition-colors duration-200 focus:outline-none border border-[#30363d] hover:border-[#444c56]\"\n                title=\"새 대화\"\n              >\n                {isCreating ? (\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                ) : (\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    strokeWidth=\"2\"\n                    stroke=\"currentColor\"\n                    className=\"h-6 w-6\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      d=\"M12 4.5v15m7.5-7.5h-15\"\n                    />\n                  </svg>\n                )}\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* 추가 로딩 인디케이터 - 더 많은 대화 로드 시 */}\n        {loading && conversations.length > 0 && (\n          <div className=\"p-4 text-center\">\n            <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-300 mx-auto\"></div>\n          </div>\n        )}\n\n        {/* 더 보기 버튼 */}\n        {hasMore && !loading && conversations.length > 0 && !isCollapsed && (\n          <div className=\"p-4 text-center\">\n            <button\n              onClick={loadMore}\n              className=\"text-xs text-white/60 hover:text-white/80 transition-colors duration-200 px-3 py-1.5 hover:bg-gray-800/40 rounded\"\n            >\n              더 보기\n            </button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ConversationDrawer;\n","import { useState, useEffect, useCallback } from 'react';\nimport { conversationAPI, mockConversations } from '../services/api';\n\n/**\n * 대화 목록 관리를 위한 커스텀 훅\n * 무한 스크롤과 실시간 업데이트 지원\n */\nexport const useConversations = () => {\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 대화 목록 초기 로드\n  const loadConversations = useCallback(async (reset = false) => {\n    if (loading) return;\n    \n    setLoading(true);\n    setError(null);\n\n    try {\n      const cursor = reset ? null : nextCursor;\n      const response = await conversationAPI.getConversations(cursor);\n      \n      if (reset) {\n        setConversations(response.conversations);\n      } else {\n        setConversations(prev => [...prev, ...response.conversations]);\n      }\n      \n      setHasMore(response.hasMore);\n      setNextCursor(response.nextCursor);\n      \n    } catch (err) {\n      console.error('대화 목록 로드 실패:', err);\n      console.error('Error details:', {\n        message: err.message,\n        status: err.response?.status,\n        data: err.response?.data,\n        config: err.config\n      });\n      \n      // 상세한 에러 메시지 제공\n      let errorMessage = '대화 목록을 불러오는데 실패했습니다.';\n      if (err.code === 'ERR_NETWORK') {\n        errorMessage = '네트워크 연결을 확인해주세요.';\n      } else if (err.response?.status === 403) {\n        errorMessage = '접근 권한이 없습니다.';\n      } else if (err.response?.status >= 500) {\n        errorMessage = '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';\n      }\n      \n      setError(errorMessage);\n      \n      // API 실패시 mock 데이터로 fallback\n      if (reset) {\n        console.log('API 실패, mock 데이터 사용');\n        setConversations(mockConversations);\n        setHasMore(false);\n        setNextCursor(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, nextCursor]);\n\n  // 새 대화 생성\n  const createConversation = useCallback(async (title) => {\n    try {\n      const response = await conversationAPI.createConversation(title);\n      const newConversation = {\n        id: response.conversationId,\n        title: response.title,\n        startedAt: response.startedAt,\n        lastActivityAt: response.lastActivityAt,\n        tokenSum: 0\n      };\n      \n      // 새 대화를 목록 맨 앞에 추가\n      setConversations(prev => [newConversation, ...prev]);\n      \n      return newConversation;\n    } catch (err) {\n      console.error('대화 생성 실패:', err);\n      \n      // API 실패시 mock 데이터로 fallback\n      const mockConversation = {\n        id: Date.now().toString(),\n        title: title || 'New Conversation',\n        startedAt: new Date().toISOString(),\n        lastActivityAt: new Date().toISOString(),\n        tokenSum: 0\n      };\n      \n      setConversations(prev => [mockConversation, ...prev]);\n      return mockConversation;\n    }\n  }, []);\n\n  // 대화 업데이트 (마지막 활동 시간, 제목 등)\n  const updateConversation = useCallback((conversationId, updates) => {\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === conversationId \n          ? { ...conv, ...updates, lastActivityAt: new Date().toISOString() }\n          : conv\n      )\n    );\n  }, []);\n\n  // 대화 삭제\n  const deleteConversation = useCallback(async (conversationId) => {\n    try {\n      // API 호출로 실제 삭제 시도\n      await conversationAPI.deleteConversation(conversationId);\n      console.log('API 삭제 성공:', conversationId);\n    } catch (err) {\n      console.warn('API 삭제 실패, 로컬에서만 삭제:', err);\n      // API 실패 시에도 로컬에서는 삭제 진행\n    }\n    \n    // API 성공/실패 관계없이 UI에서 제거\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n    \n    return true;\n  }, []);\n\n  // 대화 삭제 (UI에서만 제거, 실제 삭제는 별도 구현)\n  const removeConversation = useCallback((conversationId) => {\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n  }, []);\n\n  // 다음 페이지 로드 (무한 스크롤)\n  const loadMore = useCallback(() => {\n    if (hasMore && !loading) {\n      loadConversations(false);\n    }\n  }, [hasMore, loading, loadConversations]);\n\n  // 새로고침\n  const refresh = useCallback(() => {\n    loadConversations(true);\n  }, [loadConversations]);\n\n  // 초기 로드\n  useEffect(() => {\n    loadConversations(true);\n  }, []);\n\n  return {\n    conversations,\n    loading,\n    error,\n    hasMore,\n    loadMore,\n    refresh,\n    createConversation,\n    updateConversation,\n    deleteConversation,\n    removeConversation\n  };\n};","import React, { useState } from \"react\";\nimport { ChevronDownIcon, SparklesIcon } from \"@heroicons/react/24/outline\";\n\nconst MODELS = [\n  // Anthropic Claude 모델들 (추천)\n  {\n    id: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    name: \"Claude 3.5 Sonnet v2\",\n    provider: \"Anthropic\",\n    category: \"premium\",\n    speed: \"빠름\",\n    quality: \"최고\",\n    description: \"텍스트 생성, 다국어 지원, 복잡한 추론에 최적\",\n    recommended: true,\n  },\n  {\n    id: \"anthropic.claude-3-5-haiku-20241022-v1:0\",\n    name: \"Claude 3.5 Haiku\",\n    provider: \"Anthropic\",\n    category: \"fast\",\n    speed: \"매우 빠름\",\n    quality: \"좋음\",\n    description: \"빠른 응답, 텍스트 생성에 최적화\",\n    recommended: true,\n  },\n  {\n    id: \"anthropic.claude-sonnet-4-v1:0\",\n    name: \"Claude Sonnet 4\",\n    provider: \"Anthropic\",\n    category: \"premium\",\n    speed: \"보통\",\n    quality: \"최고\",\n    description: \"최신 모델로 향상된 텍스트 생성, 실시간 지원\",\n    new: true,\n  },\n  {\n    id: \"anthropic.claude-opus-4-v1:0\",\n    name: \"Claude Opus 4\",\n    provider: \"Anthropic\",\n    category: \"premium\",\n    speed: \"느림\",\n    quality: \"최고\",\n    description: \"최고 성능이 필요한 복잡한 제목 생성\",\n    new: true,\n  },\n  {\n    id: \"anthropic.claude-3-opus-20240229-v1:0\",\n    name: \"Claude 3 Opus\",\n    provider: \"Anthropic\",\n    category: \"premium\",\n    speed: \"느림\",\n    quality: \"최고\",\n    description: \"이미지를 텍스트 및 코드로 변환, 복잡한 추론\",\n  },\n  {\n    id: \"anthropic.claude-3-sonnet-20240229-v1:0\",\n    name: \"Claude 3 Sonnet\",\n    provider: \"Anthropic\",\n    category: \"balanced\",\n    speed: \"보통\",\n    quality: \"좋음\",\n    description: \"균형잡힌 성능과 속도\",\n  },\n  {\n    id: \"anthropic.claude-3-haiku-20240307-v1:0\",\n    name: \"Claude 3 Haiku\",\n    provider: \"Anthropic\",\n    category: \"fast\",\n    speed: \"빠름\",\n    quality: \"보통\",\n    description: \"대화, 채팅 최적화\",\n  },\n\n  // Amazon Nova 모델들\n  {\n    id: \"amazon.nova-pro-v1:0\",\n    name: \"Nova Pro\",\n    provider: \"Amazon\",\n    category: \"balanced\",\n    speed: \"빠름\",\n    quality: \"좋음\",\n    description: \"텍스트 생성, 코드 생성, 복잡한 추론\",\n    recommended: true,\n  },\n  {\n    id: \"amazon.nova-lite-v1:0\",\n    name: \"Nova Lite\",\n    provider: \"Amazon\",\n    category: \"fast\",\n    speed: \"매우 빠름\",\n    quality: \"보통\",\n    description: \"가벼운 모델로 빠른 응답, 다국어 지원\",\n  },\n  {\n    id: \"amazon.nova-micro-v1:0\",\n    name: \"Nova Micro\",\n    provider: \"Amazon\",\n    category: \"fast\",\n    speed: \"초고속\",\n    quality: \"기본\",\n    description: \"초경량 모델로 매우 빠른 응답\",\n  },\n\n  // Meta Llama 모델들\n  {\n    id: \"meta.llama3-3-70b-instruct-v1:0\",\n    name: \"Llama 3.3 70B\",\n    provider: \"Meta\",\n    category: \"balanced\",\n    speed: \"보통\",\n    quality: \"좋음\",\n    description: \"툴 사용, 코드 생성, 고급 추론\",\n  },\n  {\n    id: \"meta.llama3-2-3b-instruct-v1:0\",\n    name: \"Llama 3.2 3B\",\n    provider: \"Meta\",\n    category: \"fast\",\n    speed: \"빠름\",\n    quality: \"보통\",\n    description: \"경량 모델로 빠른 처리\",\n  },\n];\n\nconst ModelSelector = ({ selectedModel, onModelChange }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [filter, setFilter] = useState(\"all\");\n\n  console.log(\"🤖 ModelSelector 렌더링됨:\", { selectedModel, isOpen });\n\n  const currentModel =\n    MODELS.find((model) => model.id === selectedModel) || MODELS[0];\n\n  const filteredModels = MODELS.filter((model) => {\n    if (filter === \"all\") return true;\n    return model.provider.toLowerCase() === filter;\n  });\n\n  const handleModelSelect = (modelId) => {\n    onModelChange(modelId);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* 모델 선택 버튼 - 컴팩트 버전 */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center gap-2 px-3 py-1.5 bg-gray-100 dark:bg-gray-800 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600 shadow-sm transition-all duration-200 text-xs\"\n        title={`${currentModel.name} (${currentModel.provider})`}\n      >\n        <SparklesIcon className=\"h-3.5 w-3.5 text-blue-600 dark:text-blue-400\" />\n        <span className=\"text-gray-700 dark:text-gray-300 font-medium\">\n          {currentModel.name.replace(/Claude |Llama |Nova /, \"\")}\n        </span>\n        <ChevronDownIcon\n          className={`h-3 w-3 text-gray-500 transition-transform ${\n            isOpen ? \"rotate-180\" : \"\"\n          }`}\n        />\n      </button>\n\n      {/* 드롭다운 메뉴 */}\n      {isOpen && (\n        <div className=\"absolute bottom-full left-0 mb-2 bg-white dark:bg-dark-secondary  rounded-lg shadow-lg z-50 max-h-[400px] overflow-hidden min-w-[300px]\">\n          {/* 필터 버튼들 */}\n          <div className=\"p-3 \">\n            <div className=\"flex gap-1 text-xs\">\n              {[\n                { key: \"all\", label: \"전체\" },\n                { key: \"anthropic\", label: \"Anthropic\" },\n                { key: \"amazon\", label: \"Amazon\" },\n                { key: \"meta\", label: \"Meta\" },\n              ].map((filterOption) => (\n                <button\n                  key={filterOption.key}\n                  onClick={() => setFilter(filterOption.key)}\n                  className={`px-2 py-1 rounded transition-colors ${\n                    filter === filterOption.key\n                      ? \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\"\n                      : \"text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-dark-tertiary\"\n                  }`}\n                >\n                  {filterOption.label}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* 모델 목록 */}\n          <div className=\"max-h-[300px] overflow-y-auto\">\n            {filteredModels.map((model) => (\n              <button\n                key={model.id}\n                onClick={() => handleModelSelect(model.id)}\n                className={`w-full p-3 text-left hover:bg-gray-50 dark:hover:bg-gray-700 last:border-b-0 transition-colors ${\n                  model.id === selectedModel\n                    ? \"bg-blue-50 dark:bg-blue-900/20\"\n                    : \"\"\n                }`}\n              >\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"mb-1\">\n                    <span className=\"font-medium text-gray-900 dark:text-white\">\n                      {model.name}\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400 mb-1\">\n                    {model.provider} • 속도: {model.speed} • 품질:{\" \"}\n                    {model.quality}\n                  </div>\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    {model.description}\n                  </div>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* 배경 클릭 시 닫기 */}\n      {isOpen && (\n        <div className=\"fixed inset-0 z-40\" onClick={() => setIsOpen(false)} />\n      )}\n    </div>\n  );\n};\n\nexport default ModelSelector;\n","import { toast } from \"react-hot-toast\";\n\n/**\n * 텍스트를 클립보드에 복사하는 유틸리티 함수\n * @param {string} text - 복사할 텍스트\n * @param {string} successMessage - 성공 시 표시할 메시지\n * @param {string} errorMessage - 실패 시 표시할 메시지\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyToClipboard = async (\n  text,\n  successMessage = \"클립보드에 복사되었습니다!\",\n  errorMessage = \"복사에 실패했습니다.\"\n) => {\n  try {\n    await navigator.clipboard.writeText(text);\n    toast.success(successMessage);\n    return true;\n  } catch (error) {\n    console.error(\"복사 실패:\", error);\n    toast.error(errorMessage);\n    return false;\n  }\n};\n\n/**\n * 제목만 추출하여 복사하는 함수\n * @param {string} text - 전체 텍스트\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyTitlesOnly = async (text) => {\n  const extractedTitles = extractTitles(text);\n  const textToCopy =\n    extractedTitles.length > 0 ? extractedTitles.join(\"\\n\") : text;\n  return copyToClipboard(textToCopy, \"제목이 클립보드에 복사되었습니다!\");\n};\n\n/**\n * 텍스트에서 제목을 추출하는 함수\n * @param {string} text - 원본 텍스트\n * @returns {Array<string>} - 추출된 제목 배열\n */\nexport const extractTitles = (text) => {\n  const titles = [];\n\n  // 1. 번호 형식: \"1. [제목]\"\n  const numberedMatches = text.match(/^\\d+\\.\\s+(.+?)(?=\\n\\s*-|$)/gm);\n  if (numberedMatches) {\n    numberedMatches.forEach((match) => {\n      const title = match.replace(/^\\d+\\.\\s+/, \"\").trim();\n      if (title && !title.includes(\"품질 평가\")) {\n        titles.push(title);\n      }\n    });\n  }\n\n  // 2. Bullet 형식: \"• [제목]\"\n  if (titles.length === 0) {\n    const bulletMatches = text.match(/• \"([^\"]+)\"/g);\n    if (bulletMatches) {\n      bulletMatches.forEach((match) => {\n        const title = match.replace(/• \"(.+)\"/, \"$1\").trim();\n        if (title) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  // 3. 일반 Bullet 형식\n  if (titles.length === 0) {\n    const simpleBulletMatches = text.match(/• ([^\\n]+)/g);\n    if (simpleBulletMatches) {\n      simpleBulletMatches.forEach((match) => {\n        const title = match.replace(\"• \", \"\").trim();\n        if (title && !title.includes(\"이유:\") && title.length < 100) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  return titles;\n};\n","import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\nimport { crewAPI, handleAPIError } from \"../services/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\n/**\n * 멀티-에이전트 AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processMultiAgentResponse = (result) => {\n  if (!result) {\n    console.error(\"멀티-에이전트 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date().toISOString(),\n      isError: true,\n    };\n  }\n\n  // 멀티-에이전트 결과 구성\n  const agentResults = result.agentResults || {};\n  const finalTitles = result.finalTitles || {};\n  const tokenUsage = result.tokenUsage || 0;\n\n  // 에이전트별 결과를 포맷팅\n  const agentSummary = Object.keys(agentResults).map((agentType) => {\n    const agentResult = agentResults[agentType];\n    const titles = finalTitles[agentType] || [];\n\n    return {\n      agentType,\n      agentName: getAgentName(agentType),\n      result: agentResult?.content || \"결과 없음\",\n      titles: titles,\n      tokenCount: agentResult?.tokenCount || 0,\n    };\n  });\n\n  // 전체 제목 목록 생성\n  const allTitles = Object.values(finalTitles).flat();\n\n  return {\n    id: \"multi-agent-\" + Date.now(),\n    type: \"assistant\",\n    content: formatMultiAgentContent(agentSummary, allTitles),\n    timestamp: new Date(),\n    // 멀티-에이전트 특화 데이터\n    isMultiAgent: true,\n    agentResults: agentSummary,\n    allTitles: allTitles,\n    tokenUsage: tokenUsage,\n  };\n};\n\n/**\n * 에이전트 타입을 한국어 이름으로 변환\n */\nconst getAgentName = (agentType) => {\n  const agentNames = {\n    journalism: \"📰 저널리즘 충실형\",\n    balanced: \"⚖️ 균형잡힌 후킹형\",\n    click: \"🎯 클릭유도형\",\n    seo: \"🔍 SEO/AEO 최적화형\",\n    social: \"📱 소셜미디어 공유형\",\n  };\n  return agentNames[agentType] || `🤖 ${agentType}`;\n};\n\n/**\n * 멀티-에이전트 결과를 UI 표시용 텍스트로 포맷팅\n */\nconst formatMultiAgentContent = (agentSummary, allTitles) => {\n  let content = \"🚀 **멀티-에이전트 분석 완료**\\n\\n\";\n\n  // 전체 제목 요약\n  if (allTitles.length > 0) {\n    content += \"📋 **생성된 제목 목록:**\\n\";\n    allTitles.forEach((title, index) => {\n      content += `${index + 1}. ${title}\\n`;\n    });\n    content += \"\\n\";\n  }\n\n  // 에이전트별 상세 결과\n  content += \"🔍 **에이전트별 분석 결과:**\\n\\n\";\n  agentSummary.forEach((agent) => {\n    content += `### ${agent.agentName}\\n`;\n    if (agent.titles.length > 0) {\n      content += \"**생성 제목:**\\n\";\n      agent.titles.forEach((title) => {\n        content += `• ${title}\\n`;\n      });\n    }\n    content += `**토큰 사용량:** ${agent.tokenCount}개\\n\\n`;\n  });\n\n  return content;\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (\n  projectId,\n  projectName,\n  promptCards = [],\n  conversationId = null\n) => {\n  const { user } = useAuth(); // Add user from AuthContext\n\n  // 디버깅 로그 (첫 번째 렌더링에만)\n  const isFirstRender = useRef(true);\n  if (isFirstRender.current) {\n    console.log(\"useChat 초기화:\", {\n      projectId,\n      projectName,\n      promptCardsLength: promptCards?.length,\n      conversationId,\n      userId: user?.id,\n    });\n    isFirstRender.current = false;\n  }\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const [inputHeight, setInputHeight] = useState(24); // 동적 높이 관리\n  const [selectedModel, setSelectedModel] = useState(\n    \"anthropic.claude-3-5-sonnet-20241022-v2:0\"\n  );\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 사용자 스크롤 상태 추적\n  const [isUserScrolling, setIsUserScrolling] = useState(false);\n  const scrollContainerRef = useRef(null);\n  const lastScrollTopRef = useRef(0);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener,\n  } = useWebSocket(projectId);\n\n  // 초기 메시지 설정 - projectId 변경시에만 초기화\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectId]); // projectName 대신 projectId 사용\n\n  // 사용자 스크롤 감지 함수\n  const handleScroll = useCallback(() => {\n    if (!scrollContainerRef.current) return;\n\n    const container = scrollContainerRef.current;\n    const currentScrollTop = container.scrollTop;\n    const maxScrollTop = container.scrollHeight - container.clientHeight;\n\n    // 사용자가 수동으로 스크롤했는지 감지\n    if (Math.abs(currentScrollTop - lastScrollTopRef.current) > 2) {\n      const isAtBottom = currentScrollTop >= maxScrollTop - 20;\n\n      // 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\n      setIsUserScrolling(!isAtBottom);\n    }\n\n    lastScrollTopRef.current = currentScrollTop;\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    // 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n    if (!isUserScrolling && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [isUserScrolling]);\n\n  // 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log(\"WebSocket 메시지 수신:\", data);\n\n        const currentStreamingId = streamingMessageIdRef.current;\n\n        switch (data.type) {\n          case \"stream_start\":\n            console.log(\"WebSocket 스트리밍 시작\");\n            break;\n\n          case \"progress\":\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n\n          case \"stream_chunk\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                console.log(\"스트림 청크 처리:\", {\n                  currentStreamingId,\n                  streamingMsgIndex,\n                  messagesLength: prev.length,\n                  content: data.content,\n                });\n\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent =\n                    updatedMessages[streamingMsgIndex].content || \"\";\n\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true,\n                  };\n\n                  console.log(\n                    \"메시지 업데이트됨:\",\n                    updatedMessages[streamingMsgIndex]\n                  );\n                } else {\n                  console.log(\n                    \"스트리밍 메시지를 찾을 수 없음, 메시지 ID들:\",\n                    prev.map((m) => m.id)\n                  );\n                }\n\n                return updatedMessages;\n              });\n              // 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n              if (!isUserScrolling) {\n                scrollToBottom();\n              }\n            } else {\n              console.log(\"currentStreamingId가 null임\");\n            }\n            break;\n\n          case \"stream_complete\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date().toISOString(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n\n          case \"error\":\n            console.error(\"WebSocket 스트리밍 오류:\", data.message);\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  // 오류 유형에 따른 사용자 메시지 결정\n                  let errorContent =\n                    \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\";\n\n                  if (\n                    data.message?.includes(\"401\") ||\n                    data.message?.includes(\"Unauthorized\")\n                  ) {\n                    errorContent =\n                      \"인증이 만료되었습니다. 다시 로그인해주세요.\";\n                  } else if (\n                    data.message?.includes(\"timeout\") ||\n                    data.message?.includes(\"시간 초과\")\n                  ) {\n                    errorContent =\n                      \"처리 시간이 초과되었습니다. 요청을 단순화하거나 잠시 후 다시 시도해주세요.\";\n                  } else if (\n                    data.message?.includes(\"rate limit\") ||\n                    data.message?.includes(\"제한\")\n                  ) {\n                    errorContent =\n                      \"요청 한도에 도달했습니다. 잠시 후 다시 시도해주세요.\";\n                  }\n\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: errorContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date().toISOString(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n\n            // 사용자 친화적인 토스트 메시지\n            const toastMessage = data.message?.includes(\"401\")\n              ? \"인증이 만료되었습니다\"\n              : \"처리 중 오류가 발생했습니다\";\n            toast.error(toastMessage);\n            break;\n\n          default:\n            console.log(\"알 수 없는 WebSocket 메시지 타입:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"WebSocket 메시지 파싱 오류:\", error);\n      }\n    };\n\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n          console.log(\n            \"스트리밍 메시지 업데이트 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\n      if (!isUserScrolling) {\n        scrollToBottom();\n      }\n    },\n    [scrollToBottom, isUserScrolling]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date().toISOString(),\n          };\n          console.log(\n            \"스트리밍 완료 처리 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\n            \"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\",\n            currentStreamingId\n          );\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n\n      // 입력 활성화\n      console.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");\n      setCanSendMessage(true);\n\n      // 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\n      scrollToBottom();\n    },\n    [scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log(\"생성 중단 요청\");\n\n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n\n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n\n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content:\n              updatedMessages[streamingMsgIndex].content +\n              \"\\n\\n[생성이 중단되었습니다]\",\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date().toISOString(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n    }\n\n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n\n    // orchestration 상태 리셋\n    resetOrchestration();\n\n    toast.success(\"생성이 중단되었습니다\");\n  }, [resetOrchestration]);\n\n  /**\n   * 입력창 높이 자동 조절\n   */\n  const adjustInputHeight = useCallback((value) => {\n    if (!value.trim()) {\n      setInputHeight(24); // 기본 높이\n      return;\n    }\n\n    // 줄 수 계산 (대략적)\n    const lines = value.split(\"\\n\").length;\n    const charBasedLines = Math.ceil(value.length / 80); // 80자당 1줄로 추정\n    const estimatedLines = Math.max(lines, charBasedLines);\n\n    // 높이 계산 (lineHeight: 1.4, fontSize: 16px)\n    let calculatedHeight;\n    if (estimatedLines <= 3) {\n      calculatedHeight = 24 + (estimatedLines - 1) * 22; // 기본 + 추가 줄\n    } else if (estimatedLines <= 10) {\n      calculatedHeight = 150 + (estimatedLines - 6) * 15; // 중간 범위\n    } else {\n      calculatedHeight = Math.min(400, 150 + (estimatedLines - 6) * 12); // 최대 400px\n    }\n\n    setInputHeight(Math.max(24, calculatedHeight));\n  }, []);\n\n  /**\n   * 입력값 변경 처리\n   */\n  const handleInputChange = useCallback(\n    (value) => {\n      setInputValue(value);\n      adjustInputHeight(value);\n    },\n    [adjustInputHeight]\n  );\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"해들 전송 호출:\", {\n      inputValue: inputValue.trim(),\n      isGenerating,\n      canSendMessage,\n    });\n\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"전송 중단: 조건 부족\");\n      return;\n    }\n\n    // 입력 비활성화\n    console.log(\"입력 비활성화\");\n    setCanSendMessage(false);\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date().toISOString(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date().toISOString(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n    setInputHeight(24); // 입력창 높이 초기화\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages\n      .filter((msg) => !msg.isLoading && !msg.isError && !msg.isStreaming)\n      .map((msg) => ({\n        role: msg.type === \"user\" ? \"user\" : \"assistant\",\n        content: msg.content,\n      }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n\n    console.log(\"대화 히스토리 생성:\", {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6), // 최근 6개만 로그에 표시\n    });\n\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const safePromptCards = Array.isArray(promptCards) ? promptCards : [];\n      const activePromptCards = safePromptCards\n        .filter((card) => card.isActive !== false && card.enabled !== false)\n        .map((card) => ({\n          promptId: card.promptId || card.prompt_id,\n          title: card.title || \"Untitled\",\n          prompt_text: card.prompt_text || card.content || \"\",\n          tags: card.tags || [],\n          isActive: card.isActive !== false,\n          stepOrder: card.stepOrder || 0,\n        }))\n        .filter((card) => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n        .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n\n      console.log(\"대화 전송 데이터 확인:\", {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map((card) => ({\n          id: card.promptId,\n          title: card.title,\n          contentLength: card.prompt_text.length,\n          stepOrder: card.stepOrder,\n          hasContent: !!card.prompt_text.trim(),\n        })),\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");\n        console.log(\"🔍 [DEBUG] 스트리밍 매개변수 상세 확인:\", {\n          projectId,\n          userInput: userMessage.content,\n          conversationId: conversationId,\n          userSub: user?.id,\n          historyLength: trimmedChatHistory.length,\n          promptCardsLength: activePromptCards.length,\n          conversationIdType: typeof conversationId,\n          conversationIdValue: conversationId,\n          isConversationIdNull: conversationId === null,\n          isConversationIdUndefined: conversationId === undefined,\n        });\n\n        const success = wsStartStreaming(\n          userMessage.content,\n          trimmedChatHistory,\n          activePromptCards,\n          selectedModel,\n          conversationId, // Add conversationId\n          user?.id // Add userSub from AuthContext\n        );\n\n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");\n        }\n      } else {\n        console.log(\"WebSocket 미연결, SSE 모드 사용\");\n      }\n\n      // 🌟 멀티-에이전트 시스템 실행\n      console.log(\"멀티-에이전트 시스템 실행 시작\");\n\n      // 1. 먼저 프롬프트 카드들을 crew 인스턴스로 생성\n      if (activePromptCards.length > 0) {\n        try {\n          console.log(\"프롬프트 카드 → 크루 인스턴스 변환 시도\");\n          await crewAPI.createCrewInstance(projectId, activePromptCards);\n          console.log(\"크루 인스턴스 생성 완료\");\n        } catch (instanceError) {\n          console.log(\"크루 인스턴스 생성 실패:\", instanceError.message);\n\n          // 401 인증 오류인 경우 처리 중단\n          if (instanceError.response?.status === 401) {\n            const { shouldRedirect } = await handleAPIError(instanceError);\n            if (shouldRedirect) {\n              return;\n            }\n          }\n\n          // 다른 오류는 로그만 남기고 계속 진행 (이미 존재하는 경우 등)\n          console.log(\"크루 인스턴스 관련 오류이지만 계속 진행합니다\");\n        }\n      }\n\n      // 2. 멀티-에이전트 병렬 실행\n      const multiAgentResult = await crewAPI.executeMultiAgent(\n        projectId,\n        userMessage.content,\n        (progress) => {\n          // 진행상황 업데이트 (옵션)\n          console.log(\"멀티-에이전트 진행상황:\", progress);\n        }\n      );\n\n      console.log(\"멀티-에이전트 실행 완료:\", multiAgentResult);\n\n      // 3. 결과를 UI 메시지로 변환\n      const assistantMessage = processMultiAgentResponse(multiAgentResult);\n\n      // 4. 스트리밍 메시지를 최종 결과로 교체\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageIdRef.current\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = assistantMessage;\n        } else {\n          updatedMessages.push(assistantMessage);\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n      setCanSendMessage(true);\n\n      // 성공 토스트\n      toast.success(\n        `${\n          Object.keys(multiAgentResult.agentResults || {}).length\n        }개 에이전트 분석 완료!`\n      );\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // API 오류 처리 위임\n      const { userMessage: errorUserMessage, shouldRedirect } =\n        await handleAPIError(error);\n\n      // 인증 오류로 리다이렉트가 필요한 경우\n      if (shouldRedirect) {\n        return;\n      }\n\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: errorUserMessage,\n        timestamp: new Date().toISOString(),\n        isError: true,\n        errorDetails: {\n          message: error.message,\n          status: error.response?.status,\n          code: error.code,\n        },\n      };\n\n      setMessages((prev) => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(\n          (msg) => msg.id !== currentStreamingId\n        );\n        return [...filteredMessages, errorMessage];\n      });\n\n      streamingMessageIdRef.current = null;\n\n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n\n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    handleInputChange, // 새로운 입력 핸들러\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    inputHeight, // 동적 높이\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError,\n    // 스크롤 관련 추가\n    scrollContainerRef,\n    handleScroll,\n    isUserScrolling,\n    // 모델 선택 관련 추가\n    selectedModel,\n    setSelectedModel,\n  };\n};\n","import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history, useStreaming)\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(\n    async (userInput, options = {}) => {\n      if (!userInput.trim()) {\n        toast.error(\"메시지를 입력해주세요.\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        // chat_history, prompt_cards, userInput, modelId를 포함하는 data 객체 생성\n        const data = {\n          userInput: userInput,\n          chat_history: options.chat_history || [],\n          prompt_cards: options.prompt_cards || [],\n          modelId: options.modelId || null,\n        };\n\n        console.log(\"🚀 대화 생성 요청 시작:\", {\n          projectId,\n          inputLength: userInput.length,\n          historyLength: data.chat_history.length,\n          promptCardsCount: data.prompt_cards.length,\n          useStreaming: options.useStreaming === true,\n          modelId: data.modelId,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 🔧 스트리밍 사용 여부 확인 - 더 안전한 로직\n        if (options.useStreaming === true) {\n          setIsStreaming(true);\n\n          // 스트리밍 콜백 함수 설정\n          const onChunk = options.onChunk || (() => {});\n          const onError = (error) => {\n            console.error(\"🔧 스트리밍 오류 처리:\", error);\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 🔧 개선: 오류 타입에 따른 적절한 메시지\n            if (\n              error.message?.includes(\"Gateway Timeout\") ||\n              error.message?.includes(\"504\") ||\n              error.code === \"ECONNABORTED\"\n            ) {\n              toast.error(\n                \"서버 응답 시간이 초과되었습니다. 요청을 간단히 하거나 잠시 후 다시 시도해주세요.\"\n              );\n            } else if (\n              error.message?.includes(\"CORS\") ||\n              error.message?.includes(\"Network Error\")\n            ) {\n              toast.error(\n                \"서버 연결에 문제가 있습니다. 새로고침 후 다시 시도해주세요.\"\n              );\n            } else {\n              toast.error(\n                \"처리 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\"\n              );\n            }\n\n            if (options.onError) options.onError(error);\n          };\n\n          const onComplete = (response) => {\n            console.log(\"✅ 스트리밍 완료:\", {\n              resultLength: response.result?.length || 0,\n              timestamp: new Date().toISOString(),\n            });\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"COMPLETED\");\n            if (options.onComplete) options.onComplete(response);\n          };\n\n          try {\n            // 🔧 개선: 스트리밍 API 호출 (내부에서 폴백 처리됨)\n            return await generateAPI.generateTitleStream(\n              projectId,\n              data,\n              onChunk,\n              onError,\n              onComplete\n            );\n          } catch (streamError) {\n            console.error(\"🔧 스트리밍 최종 실패:\", streamError);\n\n            // 🔧 스트리밍 완전 실패 시에도 폴백이 내부에서 처리되므로\n            // 여기서는 사용자에게 알림만\n            setIsStreaming(false);\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 최종 실패 메시지\n            toast.error(\n              \"서비스에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n            );\n            throw streamError;\n          }\n        }\n\n        // 🔧 일반 API 호출 (스트리밍 미사용)\n        console.log(\"📄 일반 API 호출 시작...\");\n        const response = await generateAPI.generateTitle(projectId, data);\n\n        console.log(\"✅ 대화 생성 완료:\", {\n          mode: response.mode,\n          message: response.message,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setExecutionStatus(\"COMPLETED\");\n\n        return response;\n      } catch (error) {\n        console.error(\"❌ 제목 생성 실패:\", {\n          error: error.message,\n          code: error.code,\n          status: error.response?.status,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setIsStreaming(false);\n        setExecutionStatus(\"FAILED\");\n\n        // 🔧 개선: 상세한 오류 처리\n        if (error.response?.status === 504) {\n          toast.error(\n            \"서버 응답 시간이 초과되었습니다. 입력을 간소화하거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (\n          error.message?.includes(\"CORS\") ||\n          error.code === \"ERR_NETWORK\"\n        ) {\n          toast.error(\n            \"서버 연결에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\"\n          );\n        } else if (\n          error.response?.status === 400 &&\n          error.response?.data?.setup_required\n        ) {\n          toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");\n        } else if (error.code === \"ECONNABORTED\") {\n          toast.error(\n            \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 500) {\n          toast.error(\n            \"서버에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 403) {\n          toast.error(\"권한이 없습니다. 로그인 상태를 확인해주세요.\");\n        } else if (error.response?.status === 429) {\n          toast.error(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");\n        } else {\n          toast.error(\n            \"처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\"\n          );\n        }\n\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionArn, onComplete, onError) => {\n      // 스트리밍 모드에서는 폴링이 필요 없음\n      if (isStreaming) {\n        return;\n      }\n\n      const poll = async () => {\n        try {\n          const result = await generateAPI.getExecutionStatus(executionArn);\n\n          setExecutionStatus(result.status);\n\n          if (result.status === \"SUCCEEDED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (result.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"처리 실패\"));\n            }\n          } else if (result.status === \"RUNNING\") {\n            // 3초 후 다시 폴링\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"실행 상태 조회 실패:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId, isStreaming]\n  );\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setIsStreaming(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    isStreaming,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n","import { useState, useEffect, useRef, useCallback } from \"react\";\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = (projectId) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(async () => {\n    const wsUrl =\n      process.env.REACT_APP_WS_URL ||\n      \"wss://your-websocket-api.execute-api.us-east-1.amazonaws.com/prod\";\n    \n    // URL 형식 검증 및 정규화\n    if (!wsUrl.startsWith(\"wss://\") && !wsUrl.startsWith(\"ws://\")) {\n      console.error(\"잘못된 WebSocket URL 형식:\", wsUrl);\n      return null;\n    }\n    \n    // 끝에 슬래시 제거\n    let normalizedUrl = wsUrl.replace(/\\/$/, \"\");\n    \n    // 개발 모드에서 인증 스킵\n    if (process.env.REACT_APP_SKIP_AUTH === 'true') {\n      console.log(\"🔓 개발 모드: WebSocket 인증 스킵\");\n    } else {\n      // 인증 토큰을 쿼리 파라미터로 추가\n      try {\n        const { fetchAuthSession } = await import('aws-amplify/auth');\n        const session = await fetchAuthSession();\n        const token = session?.tokens?.idToken?.toString();\n        \n        if (token) {\n          // URL에 토큰을 쿼리 파라미터로 추가\n          normalizedUrl += `?token=${encodeURIComponent(token)}`;\n          console.log(\"✅ WebSocket URL에 인증 토큰 추가됨\");\n        } else {\n          console.log(\"⚠️ 인증 토큰이 없음 - 공개 WebSocket 연결 시도\");\n        }\n      } catch (authError) {\n        console.log(\"📝 인증 토큰 가져오기 실패:\", authError.message);\n      }\n    }\n    \n    console.log(\"WebSocket URL 확인:\", normalizedUrl.replace(/token=[^&]+/, 'token=***'));\n    console.log(\"환경변수 REACT_APP_WS_URL:\", process.env.REACT_APP_WS_URL);\n    \n    return normalizedUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(async () => {\n    // 이미 연결 중이거나 연결된 경우 중복 연결 방지\n    if (wsRef.current?.readyState === WebSocket.OPEN || \n        wsRef.current?.readyState === WebSocket.CONNECTING) {\n      console.log(\"이미 연결된 WebSocket이 있습니다 (readyState:\", wsRef.current.readyState, \")\");\n      return;\n    }\n\n    // 이전 연결이 있다면 정리\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const wsUrl = await getWebSocketUrl();\n      \n      if (!wsUrl) {\n        setError(\"유효하지 않은 WebSocket URL\");\n        setIsConnecting(false);\n        return;\n      }\n\n      console.log(\"WebSocket 연결 시도:\", wsUrl);\n      console.log(\"브라우저 WebSocket 지원:\", !!window.WebSocket);\n\n      // 연결 시도 시간 기록\n      window.wsConnectStart = Date.now();\n\n      wsRef.current = new WebSocket(wsUrl);\n\n      // 연결 상태 모니터링\n      const connectionTimeout = setTimeout(() => {\n        if (wsRef.current?.readyState === WebSocket.CONNECTING) {\n          console.error(\"WebSocket 연결 시간 초과\");\n          wsRef.current.close();\n          setError(\"연결 시간이 초과되었습니다\");\n          setIsConnecting(false);\n        }\n      }, 10000); // 10초 타임아웃\n\n      wsRef.current.onopen = (event) => {\n        clearTimeout(connectionTimeout);\n        console.log(\"🟢 WebSocket 연결 성공!\");\n        console.log(\"- Event:\", event);\n        console.log(\"- URL:\", wsRef.current?.url);\n        console.log(\"- Protocol:\", wsRef.current?.protocol);\n        console.log(\"- Extensions:\", wsRef.current?.extensions);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onclose = (event) => {\n        clearTimeout(connectionTimeout);\n        const connectionDuration = Date.now() - (window.wsConnectStart || 0);\n        \n        console.log(\"🔴 WebSocket 연결 종료:\");\n        console.log(\"- Code:\", event.code);\n        console.log(\"- Reason:\", event.reason || \"(no reason provided)\");\n        console.log(\"- WasClean:\", event.wasClean);\n        console.log(\"- Connection duration:\", connectionDuration + \"ms\");\n        \n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 즉시 종료된 경우 (500ms 이내) - 서버 문제\n        if (connectionDuration < 500) {\n          console.error(\"⚠️ WebSocket이 즉시 종료됨 - 서버 문제 가능성\");\n          \n          // 특정 에러 코드에 따른 세분화된 에러 메시지\n          let errorMessage = \"서버 연결에 실패했습니다.\";\n          switch(event.code) {\n            case 1006:\n              errorMessage = \"비정상적인 연결 종료 (네트워크 문제 가능성)\";\n              break;\n            case 1002:\n              errorMessage = \"프로토콜 오류\";\n              break;\n            case 1003:\n              errorMessage = \"지원하지 않는 데이터 타입\";\n              break;\n            case 1011:\n              errorMessage = \"서버 내부 오류\";\n              break;\n            case 1001:\n              errorMessage = \"서버가 종료되었습니다\";\n              break;\n            case 1012:\n              errorMessage = \"서버 재시작 중입니다\";\n              break;\n            case 1013:\n              errorMessage = \"나중에 다시 시도해주세요\";\n              break;\n            case 1014:\n              errorMessage = \"잘못된 게이트웨이\";\n              break;\n            case 1015:\n              errorMessage = \"TLS 연결 실패\";\n              break;\n          }\n          \n          setError(errorMessage);\n          return;\n        }\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (\n          event.code !== 1000 &&\n          reconnectAttempts.current < maxReconnectAttempts\n        ) {\n          const delay = Math.min(\n            1000 * Math.pow(2, reconnectAttempts.current),\n            30000\n          );\n          console.log(\n            `🔄 ${delay}ms 후 재연결 시도 (${\n              reconnectAttempts.current + 1\n            }/${maxReconnectAttempts})`\n          );\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        } else if (reconnectAttempts.current >= maxReconnectAttempts) {\n          setError(\"최대 재연결 시도 횟수에 도달했습니다.\");\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        clearTimeout(connectionTimeout);\n        console.error(\"💥 WebSocket 오류:\", error);\n        console.log(\"- ReadyState:\", wsRef.current?.readyState);\n        console.log(\"- URL:\", wsRef.current?.url);\n        setError(\"WebSocket 연결 오류가 발생했습니다\");\n        setIsConnecting(false);\n      };\n\n    } catch (err) {\n      console.error(\"💥 WebSocket 생성 실패:\", err);\n      setError(\"WebSocket 연결에 실패했습니다: \" + err.message);\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error(\"WebSocket이 연결되지 않았습니다\");\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback(\n    (userInput, chatHistory = [], promptCards = [], modelId = null, conversationId = null, userSub = null) => {\n      if (!isConnected) {\n        setError(\"WebSocket 연결이 필요합니다\");\n        return false;\n      }\n\n      const message = {\n        action: \"stream\",\n        projectId,\n        userInput,\n        chat_history: chatHistory,\n        prompt_cards: promptCards,\n        modelId: modelId,\n        conversationId: conversationId,\n        userSub: userSub,\n      };\n\n      console.log('WebSocket 메시지 전송:', {\n        action: message.action,\n        projectId: message.projectId,\n        inputLength: userInput.length,\n        historyLength: chatHistory.length,\n        promptCardsCount: promptCards.length,\n        conversationId: message.conversationId,\n        userSub: message.userSub\n      });\n\n      return sendMessage(message);\n    },\n    [isConnected, projectId, sendMessage]\n  );\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    // 초기 연결 지연을 통해 React strict mode 이슈 회피\n    const timer = setTimeout(() => {\n      connect();\n    }, 100);\n    \n    return () => {\n      clearTimeout(timer);\n      disconnect();\n    };\n  }, []); // 의존성 배열을 빈 배열로 변경\n\n  // projectId 변경 시 재연결 (이전 값과 비교하여 실제 변경시에만)\n  const prevProjectIdRef = useRef(projectId);\n  useEffect(() => {\n    if (prevProjectIdRef.current !== projectId && isConnected && projectId) {\n      console.log('ProjectId 변경됨, 재연결 중:', prevProjectIdRef.current, '->', projectId);\n      disconnect();\n      setTimeout(connect, 200);\n    }\n    prevProjectIdRef.current = projectId;\n  }, [projectId, isConnected]); // connect, disconnect 의존성 제거\n\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener,\n  };\n};\n","import React, { useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport {\n  ExclamationTriangleIcon,\n} from \"@heroicons/react/24/outline\";\n\n// 타임스탬프 포맷팅 유틸리티 함수\nconst formatTimestamp = (timestamp) => {\n  if (!timestamp) return \"\";\n\n  try {\n    // 이미 Date 객체인 경우\n    if (timestamp instanceof Date) {\n      return timestamp.toLocaleTimeString('ko-KR', { \n        hour: '2-digit', \n        minute: '2-digit',\n        hour12: false \n      });\n    }\n\n    // 문자열인 경우 Date 객체로 변환\n    if (typeof timestamp === \"string\") {\n      const date = new Date(timestamp);\n      return isNaN(date.getTime()) ? \"\" : date.toLocaleTimeString('ko-KR', { \n        hour: '2-digit', \n        minute: '2-digit',\n        hour12: false \n      });\n    }\n\n    // 숫자인 경우 (타임스탬프)\n    if (typeof timestamp === \"number\") {\n      return new Date(timestamp).toLocaleTimeString('ko-KR', { \n        hour: '2-digit', \n        minute: '2-digit',\n        hour12: false \n      });\n    }\n\n    return \"\";\n  } catch (error) {\n    console.warn(\"타임스탬프 포맷 오류:\", error);\n    return \"\";\n  }\n};\n\nconst SimpleChatMessage = ({ message, onCopyMessage, onCopyTitle, copiedMessage }) => {\n  // 사용자가 대화창에서 전송한 메시지면 사용자 메시지!\n  const isUser = message.role === \"user\" || message.type === \"user\";\n  const isError = message.role === \"error\";\n  const isLoading = message.isLoading || false;\n  \n  // 버튼 상태 관리\n  const [likeClicked, setLikeClicked] = useState(false);\n  const [dislikeClicked, setDislikeClicked] = useState(false);\n  const [copyClicked, setCopyClicked] = useState(false);\n  \n  // 복사 기능\n  const handleCopyClick = async () => {\n    try {\n      await navigator.clipboard.writeText(message.content);\n      setCopyClicked(true);\n      setTimeout(() => setCopyClicked(false), 1000);\n      // 팝업 알림 없이 복사만 실행\n    } catch (err) {\n      console.error('복사 실패:', err);\n    }\n  };\n  \n  // 좋아요 클릭\n  const handleLikeClick = () => {\n    setLikeClicked(true);\n    setDislikeClicked(false); // 반대 버튼 비활성화\n    setTimeout(() => setLikeClicked(false), 2000);\n  };\n  \n  // 싫어요 클릭\n  const handleDislikeClick = () => {\n    setDislikeClicked(true);\n    setLikeClicked(false); // 반대 버튼 비활성화\n    setTimeout(() => setDislikeClicked(false), 2000);\n  };\n  \n\n  return (\n    <div className={`flex ${isUser ? \"justify-end\" : \"justify-start\"} mb-3`}>\n      {isUser ? (\n        // 사용자 메시지 - 우측 말풍선\n        <div className=\"max-w-[70%]\">\n          <div \n            className=\"bg-[#5E89FF] text-white rounded-2xl px-4 py-2 shadow-md\"\n          >\n            <div className=\"text-[15px] font-normal leading-[1.5] whitespace-pre-wrap break-words\">\n              {message.content}\n            </div>\n            {/* 타임스탬프 - 말풍선 내부 하단 */}\n            {message.timestamp && (\n              <div className=\"text-[12px] text-white/70 mt-1 text-right\">\n                {formatTimestamp(message.timestamp)}\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        // AI 메시지 - 좌측 플랫형 답변\n        <div className=\"w-full max-w-[75%]\">\n          <div \n            className=\"bg-transparent dark:bg-transparent\" \n            aria-live=\"polite\"\n          >\n            {isError ? (\n              <div className=\"text-red-600 dark:text-red-400\">\n                <div className=\"flex items-center mb-2\">\n                  <ExclamationTriangleIcon className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-[14px] font-semibold\">오류가 발생했습니다</span>\n                </div>\n                <div className=\"text-[15px] font-normal leading-[1.5]\">{message.content}</div>\n              </div>\n            ) : isLoading ? (\n              // 예쁜 로딩 애니메이션 - 제미나이 스타일\n              <div className=\"flex items-start gap-3\">\n                {/* AI 아이콘 */}\n                <div className=\"flex-shrink-0 w-8 h-8 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full flex items-center justify-center shadow-sm\">\n                  <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456z\" />\n                  </svg>\n                </div>\n                \n                {/* 로딩 애니메이션 */}\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-1 mb-2\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n                  </div>\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">AI가 답변을 생성하고 있습니다...</span>\n                </div>\n              </div>\n            ) : (\n              // 일반 AI 응답 - 제미나이 스타일 로고 포함\n              <div className=\"flex items-start gap-3\">\n                {/* AI 아이콘 */}\n                <div className=\"flex-shrink-0 w-8 h-8 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full flex items-center justify-center shadow-sm mt-1\">\n                  <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.847a4.5 4.5 0 003.09 3.09L15.75 12l-2.847.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456z\" />\n                  </svg>\n                </div>\n                \n                {/* 답변 내용 */}\n                <div className=\"flex-1 text-[#202124] dark:text-[#E5E7EB] prose prose-sm max-w-none\">\n                  <div className=\"text-[15px] font-normal leading-[1.6] whitespace-pre-wrap [&>p]:mb-3 [&>ul]:mb-3 [&>ol]:mb-3 [&>h1]:text-[18px] [&>h1]:font-semibold [&>h1]:mb-3 [&>h2]:text-[16px] [&>h2]:font-semibold [&>h2]:mb-2 [&>h3]:text-[15px] [&>h3]:font-medium [&>h3]:mb-2\">\n                    <ReactMarkdown>{message.content}</ReactMarkdown>\n                  </div>\n                </div>\n              </div>\n            )}\n            {/* 타임스탬프 - 아이콘 위치에 맞춘 여백 */}\n            {message.timestamp && (\n              <div className=\"text-[12px] text-gray-500 dark:text-gray-400 mt-1 ml-11\">\n                {formatTimestamp(message.timestamp)}\n              </div>\n            )}\n          </div>\n          \n          {/* AI 메시지 하단 액션 버튼들 - GPT 스타일 */}\n          {!isError && !isLoading && (\n            <div className=\"flex items-center gap-1 mt-2 ml-11\">\n              {/* 복사 버튼 */}\n              <button\n                onClick={handleCopyClick}\n                className={`p-1.5 rounded transition-all duration-200 transform ${\n                  copyClicked\n                    ? \"text-green-500 bg-green-100 dark:bg-green-900/30 scale-110\"\n                    : \"text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                }`}\n                title={copyClicked ? \"복사됨!\" : \"복사\"}\n              >\n                <svg \n                  className=\"w-4 h-4\" \n                  fill=\"none\" \n                  viewBox=\"0 0 24 24\" \n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                >\n                  {copyClicked ? (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n                  ) : (\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\" />\n                  )}\n                </svg>\n              </button>\n              \n              {/* 좋아요 버튼 */}\n              <button\n                onClick={handleLikeClick}\n                className={`p-1.5 rounded transition-all duration-300 transform ${\n                  likeClicked\n                    ? \"text-blue-500 bg-blue-100 dark:bg-blue-900/30 scale-110 animate-pulse\"\n                    : \"text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                }`}\n                title={likeClicked ? \"좋아요!\" : \"좋아요\"}\n              >\n                <svg \n                  className=\"w-4 h-4\" \n                  fill={likeClicked ? \"currentColor\" : \"none\"}\n                  viewBox=\"0 0 24 24\" \n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5\" />\n                </svg>\n              </button>\n              \n              {/* 싫어요 버튼 */}\n              <button\n                onClick={handleDislikeClick}\n                className={`p-1.5 rounded transition-all duration-300 transform ${\n                  dislikeClicked\n                    ? \"text-red-500 bg-red-100 dark:bg-red-900/30 scale-110 border-2 border-red-300 animate-pulse\"\n                    : \"text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\"\n                }`}\n                title={dislikeClicked ? \"싫어요!\" : \"싫어요\"}\n              >\n                <svg \n                  className=\"w-4 h-4 rotate-180\" \n                  fill={dislikeClicked ? \"currentColor\" : \"none\"}\n                  viewBox=\"0 0 24 24\" \n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.60L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5\" />\n                </svg>\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleChatMessage;","import React, { useState, useCallback } from \"react\";\nimport { ChatBubbleLeftRightIcon, SparklesIcon, PaperAirplaneIcon, StopIcon } from \"@heroicons/react/24/outline\";\nimport ConversationDrawer from \"./ConversationDrawer\";\nimport ModelSelector from \"../ModelSelector\";\nimport { useChat } from \"../../hooks/useChat\";\nimport { useMessages } from \"../../hooks/useMessages\";\nimport { useConversationContext } from \"../../contexts/ConversationContext\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport SimpleChatMessage from \"../SimpleChatMessage\";\n\nconst ChatWindow = ({ projectId, projectName, promptCards = [] }) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  // Auth context for user info\n  const { user } = useAuth();\n\n  // Conversation context\n  const { currentConversationId, addMessage } = useConversationContext();\n\n  // Messages hook for current conversation\n  const {\n    messages: historicalMessages,\n    loading: messagesLoading,\n  } = useMessages(currentConversationId);\n\n  // Chat hook for sending messages\n  const {\n    messages: chatMessages,\n    inputValue,\n    handleInputChange,\n    copiedMessage,\n    isGenerating,\n    inputHeight,\n    handleSendMessage: originalHandleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    wsConnected,\n    wsConnecting,\n    selectedModel,\n    setSelectedModel,\n  } = useChat(projectId, projectName, promptCards, currentConversationId);\n\n  // 통합된 메시지 목록 (과거 메시지 + 현재 세션 메시지)\n  const allMessages = [...historicalMessages, ...chatMessages];\n\n  // 메시지 전송 핸들러 (conversation 정보 포함)\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n\n    // 현재 대화 ID와 사용자 정보 포함하여 메시지 전송\n    const messageData = {\n      userInput: inputValue,\n      projectId,\n      conversationId: currentConversationId,\n      userSub: user?.id || \"anonymous\",\n      chat_history: allMessages.map((msg) => ({\n        role: msg.role,\n        content: msg.content,\n      })),\n      prompt_cards: promptCards,\n    };\n\n    // 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      id: Date.now().toString(),\n      role: \"user\",\n      content: inputValue,\n      timestamp: new Date().toISOString(),\n    };\n    addMessage(userMessage);\n\n    // 원래 핸들러 호출 (수정된 데이터로)\n    await originalHandleSendMessage(messageData);\n  }, [\n    inputValue,\n    isGenerating,\n    currentConversationId,\n    allMessages,\n    promptCards,\n    addMessage,\n    originalHandleSendMessage,\n    projectId,\n    user?.id,\n  ]);\n\n  return (\n    <div className=\"flex h-full overflow-hidden\">\n      {/* 대화 드로어 */}\n      <ConversationDrawer onCollapsedChange={setSidebarCollapsed} />\n\n      {/* 메인 채팅 영역 */}\n      <div className={`flex-1 flex flex-col bg-gray-50 dark:bg-dark-primary transition-all duration-500 ease-out relative ${\n        sidebarCollapsed ? \"md:ml-14\" : \"md:ml-64\"\n      }`}>\n        {/* 메시지 영역 */}\n        <div className=\"flex-1 overflow-y-auto px-4 md:px-6 py-4 min-h-0 bg-gray-50 dark:bg-dark-primary transition-all duration-300 pt-4 pb-40\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            {allMessages.length === 0 && !messagesLoading ? (\n              // 빈 상태 - 새 대화 시작\n              <div className=\"flex flex-col items-center justify-center min-h-[calc(100vh-280px)]\">\n                <div className=\"bg-white dark:bg-dark-secondary rounded-2xl shadow-md p-8 max-w-3xl w-full mx-auto transition-colors duration-300\">\n                  <div className=\"flex justify-center mb-6\">\n                    <div className=\"bg-blue-100 dark:bg-dark-tertiary p-3 rounded-full\">\n                      <ChatBubbleLeftRightIcon className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n                    </div>\n                  </div>\n                  <h2 className=\"text-xl font-semibold text-center text-gray-800 dark:text-white mb-4\">\n                    AI 헤드라인 어시스턴트\n                  </h2>\n                  <p className=\"text-gray-600 dark:text-gray-300 text-center mb-6\">\n                    본문을 입력하면 AI가 최적의 헤드라인을 제안해 드립니다.\n                  </p>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start p-3 bg-gray-50 dark:bg-dark-tertiary rounded-lg\">\n                      <div className=\"mr-3 mt-1\">\n                        <SparklesIcon className=\"h-5 w-5 text-blue-500 dark:text-blue-400\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                          <span className=\"font-medium\">시작하는 방법:</span>{\" \"}\n                          아래 입력창에 본문을 붙여넣고 전송 버튼을 클릭하세요\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start p-3 bg-gray-50 dark:bg-dark-tertiary rounded-lg\">\n                      <div className=\"mr-3 mt-1\">\n                        <SparklesIcon className=\"h-5 w-5 text-blue-500 dark:text-blue-400\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                          <span className=\"font-medium\">대화 기록:</span> 좌측\n                          메뉴에서 이전 대화를 확인하고 이어서 대화할 수\n                          있습니다\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              // 메시지 목록\n              <div className=\"space-y-6 pt-4\">\n                {allMessages.map((message) => (\n                  <SimpleChatMessage\n                    key={message.id}\n                    message={message}\n                    onCopyMessage={handleCopyMessage}\n                    onCopyTitle={handleCopyTitle}\n                    copiedMessage={copiedMessage}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* 고정된 하단 입력 영역 - DeepSeek 스타일 */}\n        <div className={`absolute bottom-0 left-0 right-0 bg-gray-50 dark:bg-dark-primary border-t border-gray-200 dark:border-gray-700 transition-all duration-500`}>\n          <div className=\"w-full max-w-4xl mx-auto px-4 md:px-6 py-6\">\n            {/* 둥근 모서리 통짜 입력창 */}\n            <div className=\"w-full rounded-2xl bg-white dark:bg-[#2E333D] border border-gray-200 dark:border-transparent shadow-sm dark:shadow-none transition-all duration-200\">\n              {/* 메인 입력 영역 */}\n              <div className=\"flex items-center gap-3 px-5 py-4\">\n                {/* 글 입력 영역 */}\n                <textarea\n                  value={inputValue}\n                  onChange={(e) => handleInputChange(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder={\n                    isGenerating\n                      ? \"생성 중입니다...\"\n                      : \"기사 본문을 입력하세요...\"\n                  }\n                  className=\"flex-1 resize-none bg-transparent text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none appearance-none\"\n                  rows={1}\n                  style={{\n                    height: `${Math.max(inputHeight || 24, 24)}px`,\n                    minHeight: \"24px\",\n                    maxHeight: \"200px\",\n                    lineHeight: \"1.5\",\n                    overflowY: inputHeight > 120 ? \"auto\" : \"hidden\"\n                  }}\n                  disabled={isGenerating}\n                />\n\n                {/* 전송/중단 버튼 */}\n                {isGenerating ? (\n                  <button\n                    onClick={handleStopGeneration}\n                    className=\"shrink-0 rounded-full p-2.5 bg-red-500 hover:bg-red-600 text-white transition-all duration-200\"\n                  >\n                    <StopIcon className=\"w-4 h-4\" />\n                  </button>\n                ) : (\n                  <button\n                    onClick={handleSendMessage}\n                    disabled={!inputValue.trim()}\n                    className={`shrink-0 rounded-full p-2.5 transition-all duration-200 ${\n                      inputValue.trim()\n                        ? \"bg-[#5E89FF] hover:bg-[#4A7BFF] text-white\"\n                        : \"bg-gray-300 dark:bg-gray-600 text-gray-500 dark:text-gray-400 cursor-not-allowed\"\n                    }`}\n                  >\n                    <PaperAirplaneIcon className=\"w-4 h-4\" />\n                  </button>\n                )}\n              </div>\n\n              {/* 하단 정보 영역 - 입력창 안에 위치 */}\n              <div className=\"flex items-center justify-between px-5 pb-3 pt-1\">\n                <div className=\"flex items-center gap-3\">\n                  {/* 모델 선택기 */}\n                  <div className=\"scale-90 origin-left\">\n                    <ModelSelector\n                      selectedModel={selectedModel}\n                      onModelChange={setSelectedModel}\n                    />\n                  </div>\n                  \n                  {/* 글자 수 표시 */}\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {inputValue.length}자\n                  </div>\n                </div>\n\n                {/* 연결 상태 */}\n                <div className=\"flex items-center gap-1.5\">\n                  {wsConnecting ? (\n                    <>\n                      <div className=\"w-1.5 h-1.5 bg-yellow-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-xs text-yellow-600 dark:text-yellow-400\">연결 중</span>\n                    </>\n                  ) : wsConnected ? (\n                    <>\n                      <div className=\"w-1.5 h-1.5 bg-green-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-xs text-green-600 dark:text-green-400\">실시간 스트리밍</span>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"w-1.5 h-1.5 bg-gray-400 rounded-full\"></div>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400\">일반 모드</span>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            {/* 하단 경고 문구 */}\n            <div className=\"text-center mt-4\">\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                AI는 실수를 할 수 있습니다. 중요한 정보는 재차 확인하세요.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { conversationAPI, mockMessages } from \"../services/api\";\n\n/**\n * 특정 대화의 메시지 관리를 위한 커스텀 훅\n * 페이지네이션과 실시간 메시지 추가 지원\n */\nexport const useMessages = (conversationId) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 메시지 로드\n  const loadMessages = useCallback(\n    async (reset = false) => {\n      if (!conversationId || loading) {\n        console.log(\"useMessages - 메시지 로드 중단:\", {\n          conversationId,\n          loading,\n        });\n        return;\n      }\n\n      console.log(\"useMessages - 메시지 로드 시작:\", {\n        conversationId,\n        reset,\n        cursor: reset ? null : nextCursor,\n        currentMessagesCount: messages.length,\n      });\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const cursor = reset ? null : nextCursor;\n        const response = await conversationAPI.getMessages(\n          conversationId,\n          cursor\n        );\n\n        console.log(\"useMessages - API 응답:\", {\n          conversationId,\n          messagesReceived: response.messages?.length || 0,\n          hasMore: response.hasMore,\n          nextCursor: response.nextCursor,\n          reset,\n        });\n\n        if (reset) {\n          setMessages(response.messages);\n        } else {\n          // 이전 메시지들을 앞에 추가 (페이지네이션)\n          setMessages((prev) => [...response.messages, ...prev]);\n        }\n\n        setHasMore(response.hasMore);\n        setNextCursor(response.nextCursor);\n      } catch (err) {\n        console.error(\"메시지 로드 실패:\", err);\n        console.error(\"실패한 conversationId:\", conversationId);\n        setError(\"메시지를 불러오는데 실패했습니다.\");\n\n        // API 실패시 mock 데이터로 fallback\n        const conversationMessages = mockMessages[conversationId] || [];\n        console.log(\"useMessages - Mock 데이터 사용:\", {\n          conversationId,\n          mockMessagesCount: conversationMessages.length,\n        });\n\n        if (reset) {\n          setMessages(conversationMessages);\n          setHasMore(false);\n          setNextCursor(null);\n        }\n      } finally {\n        setLoading(false);\n      }\n    },\n    [conversationId, loading, nextCursor, messages.length]\n  );\n\n  // 새 메시지 추가 (실시간)\n  const addMessage = useCallback((message) => {\n    const newMessage = {\n      id: message.timestamp || new Date().toISOString(),\n      role: message.role,\n      content: message.content,\n      tokenCount: message.tokenCount || 0,\n      timestamp: message.timestamp || new Date().toISOString(),\n    };\n\n    setMessages((prev) => [...prev, newMessage]);\n    return newMessage;\n  }, []);\n\n  // 메시지 업데이트 (스트리밍 중 내용 업데이트)\n  const updateMessage = useCallback((messageId, updates) => {\n    setMessages((prev) =>\n      prev.map((msg) => (msg.id === messageId ? { ...msg, ...updates } : msg))\n    );\n  }, []);\n\n  // 메시지 삭제\n  const removeMessage = useCallback((messageId) => {\n    setMessages((prev) => prev.filter((msg) => msg.id !== messageId));\n  }, []);\n\n  // 이전 메시지 로드 (스크롤 최상단에서)\n  const loadPreviousMessages = useCallback(() => {\n    if (hasMore && !loading) {\n      return loadMessages(false);\n    }\n    return Promise.resolve();\n  }, [hasMore, loading, loadMessages]);\n\n  // 메시지 초기화 (새 대화 시작시)\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setHasMore(true);\n    setNextCursor(null);\n    setError(null);\n  }, []);\n\n  // conversationId 변경시 메시지 로드\n  useEffect(() => {\n    console.log(\"🔍 [DEBUG] useMessages - conversationId 변경 감지:\", {\n      conversationId,\n      conversationIdType: typeof conversationId,\n      isConversationIdNull: conversationId === null,\n      isConversationIdUndefined: conversationId === undefined,\n      previousConversationId: conversationId, // 이전 값을 추적하기 어려우므로 현재 값만 표시\n    });\n\n    if (conversationId) {\n      console.log(\n        \"🔍 [DEBUG] useMessages - 메시지 클리어 및 로드 시작:\",\n        conversationId\n      );\n      clearMessages();\n      loadMessages(true);\n    } else {\n      console.log(\n        \"🔍 [DEBUG] useMessages - conversationId가 null/undefined, 메시지 클리어\"\n      );\n      clearMessages();\n    }\n  }, [conversationId]);\n\n  return {\n    messages,\n    loading,\n    error,\n    hasMore,\n    addMessage,\n    updateMessage,\n    removeMessage,\n    loadPreviousMessages,\n    clearMessages,\n    refresh: () => loadMessages(true),\n  };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  PlusIcon,\n  PencilIcon,\n  TrashIcon,\n  XMarkIcon,\n  SparklesIcon,\n  HashtagIcon,\n} from \"@heroicons/react/24/outline\";\nimport { promptCardAPI, handleAPIError } from \"../services/api\";\nimport ChatWindow from \"./chat/ChatWindow\";\n\nconst PromptCardManager = ({ projectId, projectName }) => {\n  const [promptCards, setPromptCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editingCard, setEditingCard] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n\n  useEffect(() => {\n    loadPromptCards();\n  }, [projectId]);\n\n  const loadPromptCards = async () => {\n    try {\n      setLoading(true);\n      const response = await promptCardAPI.getPromptCards(projectId, true);\n      setPromptCards(response.promptCards || []);\n    } catch (error) {\n      console.error(\"프롬프트 카드 로드 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveCard = async (cardData) => {\n    try {\n      // 백엔드에 맞는 형식으로 데이터 변환\n      const backendData = {\n        title: cardData.title,\n        prompt_text: cardData.prompt_text,\n        tags: cardData.tags || [],\n        isActive: cardData.enabled !== false, // enabled를 isActive로 변환\n      };\n\n      if (editingCard) {\n        // 수정\n        await promptCardAPI.updatePromptCard(\n          projectId,\n          editingCard.promptId || editingCard.prompt_id,\n          backendData\n        );\n        toast.success(\"프롬프트가 수정되었습니다\");\n      } else {\n        // 새로 생성\n        await promptCardAPI.createPromptCard(projectId, backendData);\n        toast.success(\"프롬프트가 생성되었습니다\");\n      }\n\n      setShowForm(false);\n      setEditingCard(null);\n\n      // 백엔드 저장 성공 후 전체 데이터 다시 로드 (페이지 새로고침 없이)\n      await loadPromptCards();\n    } catch (error) {\n      console.error(\"프롬프트 저장 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n    }\n  };\n\n  const handleDeleteCard = async (promptId) => {\n    if (!window.confirm(\"정말로 이 프롬프트를 삭제하시겠습니까?\")) {\n      return;\n    }\n\n    try {\n      // 백엔드에서 삭제 먼저 실행\n      await promptCardAPI.deletePromptCard(projectId, promptId);\n      toast.success(\"프롬프트가 삭제되었습니다\");\n\n      // 삭제 성공 후 UI에서 제거\n      setPromptCards((prev) =>\n        prev.filter((card) => (card.promptId || card.prompt_id) !== promptId)\n      );\n\n      // 추가로 전체 데이터 다시 로드\n      await loadPromptCards();\n    } catch (error) {\n      console.error(\"프롬프트 삭제 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n    }\n  };\n\n  const handleEditCard = async (card) => {\n    console.log(\"프롬프트 수정 버튼 클릭:\", card);\n\n    // 프롬프트 텍스트 내용이 없으면 S3에서 가져오기\n    let cardWithContent = { ...card };\n\n    if (!card.prompt_text && !card.content) {\n      try {\n        console.log(\"S3에서 프롬프트 내용 로드 중...\");\n        const contentResponse = await promptCardAPI.getPromptContent(\n          projectId,\n          card.promptId || card.prompt_id\n        );\n        cardWithContent.prompt_text = contentResponse.content;\n        console.log(\n          \"S3에서 프롬프트 내용 로드 완료:\",\n          contentResponse.content?.length,\n          \"문자\"\n        );\n      } catch (error) {\n        console.error(\"프롬프트 내용 로드 실패:\", error);\n        toast.error(\"프롬프트 내용을 불러올 수 없습니다\");\n        return;\n      }\n    }\n\n    setEditingCard(cardWithContent);\n    setShowForm(true);\n  };\n\n  const handleNewCard = () => {\n    console.log(\"새 프롬프트 추가 버튼 클릭\");\n    setEditingCard(null);\n    setShowForm(true);\n  };\n\n  const handleCancelForm = () => {\n    console.log(\"모달 취소 버튼 클릭\");\n    setShowForm(false);\n    setEditingCard(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-full w-full bg-gray-50 dark:bg-dark-primary\">\n      {/* 채팅 인터페이스 */}\n      <div className=\"flex-1 min-w-0 overflow-hidden\">\n        <ChatWindow\n          projectId={projectId}\n          projectName={projectName}\n          promptCards={promptCards}\n        />\n      </div>\n\n      {/* 프롬프트 관리 사이드바 (우측) */}\n      <div className=\"w-80 bg-white dark:bg-dark-primary flex flex-col shadow-lg border-l border-gray-200 dark:border-gray-700 flex-shrink-0\">\n        <div className=\"flex-shrink-0 p-4 bg-gray-50 dark:bg-dark-primary\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">\n              프롬프트 카드\n            </h2>\n            <button\n              onClick={handleNewCard}\n              className=\"inline-flex items-center px-4 py-2 text-sm bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors shadow-md hover:shadow-lg font-medium\"\n            >\n              <PlusIcon className=\"h-4 w-4 mr-1.5\" />새 추가\n            </button>\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3 min-h-0 max-h-[calc(100vh-140px)] bg-gray-50 dark:bg-dark-secondary custom-scrollbar\">\n          {promptCards.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <SparklesIcon className=\"h-12 w-12 text-gray-300 dark:text-gray-600 mx-auto mb-4\" />\n              <p className=\"text-gray-500 dark:text-gray-400 mb-4\">\n                프롬프트 카드가 없습니다\n              </p>\n              <button\n                onClick={handleNewCard}\n                className=\"inline-flex items-center px-4 py-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors shadow-sm font-medium\"\n              >\n                <PlusIcon className=\"h-4 w-4 mr-1.5\" />첫 번째 카드 만들기\n              </button>\n            </div>\n          ) : (\n            promptCards.map((card) => (\n              <PromptCard\n                key={card.promptId || card.prompt_id}\n                card={card}\n                onEdit={() => handleEditCard(card)}\n                onDelete={() =>\n                  handleDeleteCard(card.promptId || card.prompt_id)\n                }\n              />\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* 프롬프트 편집 폼 모달 */}\n      {showForm && (\n        <PromptFormModal\n          isOpen={showForm}\n          onSubmit={handleSaveCard}\n          onCancel={handleCancelForm}\n          initialData={editingCard}\n        />\n      )}\n      \n      {/* 스크롤바 스타일 */}\n      <style jsx>{`\n        .custom-scrollbar::-webkit-scrollbar {\n          width: 8px;\n        }\n        .custom-scrollbar::-webkit-scrollbar-track {\n          background: transparent;\n          border-radius: 4px;\n        }\n        .custom-scrollbar::-webkit-scrollbar-thumb {\n          background: #d1d5db;\n          border-radius: 4px;\n          border: 1px solid #f3f4f6;\n        }\n        .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n          background: #9ca3af;\n        }\n        .custom-scrollbar::-webkit-scrollbar-thumb:active {\n          background: #6b7280;\n        }\n        /* 다크모드 스크롤바 */\n        .dark .custom-scrollbar::-webkit-scrollbar-thumb {\n          background: #4b5563;\n          border: 1px solid #374151;\n        }\n        .dark .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n          background: #6b7280;\n        }\n        .dark .custom-scrollbar::-webkit-scrollbar-thumb:active {\n          background: #9ca3af;\n        }\n      `}</style>\n    </div>\n  );\n};\n\n// 간단한 프롬프트 카드 컴포넌트\nconst PromptCard = ({ card, onEdit, onDelete }) => {\n  return (\n    <div className=\"bg-white dark:bg-gray-600 rounded-xl p-4 flex flex-col space-y-3 shadow-md dark:shadow-lg hover:shadow-lg dark:hover:shadow-xl transition-all duration-200 hover:bg-blue-50 dark:hover:bg-gray-500\">\n      {/* Header: Title and Actions */}\n      <div className=\"flex items-start justify-between\">\n        <h3 className=\"font-semibold text-sm text-gray-800 dark:text-white leading-tight pr-2 flex-1\">\n          {card.title || `프롬프트 ${card.promptId || card.prompt_id}`}\n        </h3>\n        <div className=\"flex items-center flex-shrink-0\">\n          <button\n            onClick={async (e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              await onEdit();\n            }}\n            className=\"p-1 text-gray-500 dark:text-gray-400 rounded-full hover:bg-gray-100 dark:hover:bg-dark-secondary hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\n          >\n            <PencilIcon className=\"h-4 w-4\" />\n          </button>\n          <button\n            onClick={onDelete}\n            className=\"p-1 text-gray-500 dark:text-gray-400 rounded-full hover:bg-gray-100 dark:hover:bg-dark-secondary hover:text-red-600 dark:hover:text-red-400 transition-colors\"\n          >\n            <TrashIcon className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Tags */}\n      {card.tags && card.tags.length > 0 && (\n        <div className=\"flex flex-wrap gap-1.5\">\n          {card.tags.slice(0, 3).map((tag) => (\n            <span\n              key={tag}\n              className=\"px-2 py-0.5 text-xs bg-gray-100 dark:bg-dark-secondary text-gray-700 dark:text-gray-300 rounded-full\"\n            >\n              #{tag}\n            </span>\n          ))}\n          {card.tags.length > 3 && (\n            <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n              +{card.tags.length - 3}\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Content Snippet */}\n      {(card.content || card.prompt_text) && (\n        <p className=\"text-xs text-gray-600 dark:text-gray-300 leading-relaxed line-clamp-2\">\n          {card.content || card.prompt_text}\n        </p>\n      )}\n\n      {/* Date */}\n      <div className=\"flex items-end justify-between pt-2 text-xs text-gray-400 dark:text-gray-500\">\n        <span className=\"flex-shrink-0\">\n          생성:{\" \"}\n          {new Date(card.createdAt || new Date()).toLocaleDateString(\"ko-KR\", {\n            year: \"2-digit\",\n            month: \"2-digit\",\n            day: \"2-digit\",\n          })}\n        </span>\n        {card.updatedAt &&\n          new Date(card.updatedAt) > new Date(card.createdAt) && (\n            <span className=\"flex-shrink-0 ml-2\">\n              수정:{\" \"}\n              {new Date(card.updatedAt).toLocaleDateString(\"ko-KR\", {\n                year: \"2-digit\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n              })}\n            </span>\n          )}\n      </div>\n    </div>\n  );\n};\n\n// 간단한 프롬프트 편집 폼 모달\nconst PromptFormModal = ({ isOpen, onSubmit, onCancel, initialData }) => {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    prompt_text: \"\",\n    tags: [],\n    enabled: true,\n  });\n  const [tagInput, setTagInput] = useState(\"\");\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData({\n        title: initialData.title || \"\",\n        prompt_text: initialData.prompt_text || initialData.content || \"\",\n        tags: Array.isArray(initialData.tags) ? [...initialData.tags] : [],\n        enabled:\n          initialData.enabled !== false && initialData.isActive !== false, // isActive도 체크\n      });\n    }\n  }, [initialData]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!formData.prompt_text.trim()) {\n      toast.error(\"프롬프트 내용을 입력해주세요\");\n      return;\n    }\n    onSubmit(formData);\n  };\n\n  const handleChange = (field, value) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleTagAdd = (e) => {\n    if (e.key === \"Enter\" && tagInput.trim()) {\n      e.preventDefault();\n      const newTag = tagInput.trim();\n      if (!formData.tags.includes(newTag) && formData.tags.length < 5) {\n        setFormData((prev) => ({\n          ...prev,\n          tags: [...prev.tags, newTag],\n        }));\n      }\n      setTagInput(\"\");\n    }\n  };\n\n  const handleTagRemove = (tagToRemove) => {\n    setFormData((prev) => ({\n      ...prev,\n      tags: prev.tags.filter((tag) => tag !== tagToRemove),\n    }));\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white dark:bg-dark-secondary rounded-2xl max-w-3xl w-full max-h-[90vh] overflow-hidden shadow-xl dark:shadow-none transition-colors duration-300 \">\n        {/* 헤더 */}\n        <div className=\" p-6 bg-white dark:bg-dark-secondary\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-100 dark:bg-dark-tertiary rounded-lg flex items-center justify-center\">\n                {initialData ? (\n                  <PencilIcon className=\"h-6 w-6 text-gray-600 dark:text-gray-300\" />\n                ) : (\n                  <PencilIcon className=\"h-6 w-6 text-gray-600 dark:text-gray-300\" />\n                )}\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  {initialData ? \"프롬프트 편집\" : \"새 프롬프트\"}\n                </h3>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {initialData\n                    ? \"프롬프트 내용을 수정하세요\"\n                    : \"새로운 프롬프트를 작성하세요\"}\n                </p>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"p-2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-tertiary transition-colors\"\n            >\n              <XMarkIcon className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n\n        <form\n          onSubmit={handleSubmit}\n          className=\"p-6 space-y-6 overflow-y-auto max-h-[calc(90vh-120px)]\"\n        >\n          {/* 제목 필드 */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center text-sm font-semibold text-gray-800 dark:text-gray-200\">\n              프롬프트 제목\n            </label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={(e) => handleChange(\"title\", e.target.value)}\n              className=\"w-full px-4 py-3  rounded-xl bg-gray-50 dark:bg-dark-tertiary text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-500/30 transition-all duration-200\"\n              placeholder=\"프롬프트 제목을 입력하세요\"\n            />\n          </div>\n\n          {/* 해시태그 */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center text-sm font-semibold text-gray-800 dark:text-gray-200\">\n              <HashtagIcon className=\"h-4 w-4 mr-2 text-gray-500 dark:text-gray-400\" />\n              태그\n            </label>\n            <div className=\"space-y-3\">\n              {/* 태그 입력 */}\n              <input\n                type=\"text\"\n                value={tagInput}\n                onChange={(e) => setTagInput(e.target.value)}\n                onKeyPress={handleTagAdd}\n                className=\"w-full px-4 py-3  rounded-xl bg-gray-50 dark:bg-dark-tertiary text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-500/20 dark:focus:ring-blue-500/30 transition-all duration-200\"\n                placeholder=\"태그를 입력하고 Enter를 누르세요 (최대 5개)\"\n                maxLength={20}\n                disabled={formData.tags.length >= 5}\n              />\n\n              {/* 태그 목록 */}\n              {formData.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"inline-flex items-center px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full\"\n                    >\n                      #{tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleTagRemove(tag)}\n                        className=\"ml-2 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200\"\n                      >\n                        <XMarkIcon className=\"h-3 w-3\" />\n                      </button>\n                    </span>\n                  ))}\n                </div>\n              )}\n\n              {/* 도움말 텍스트 */}\n              <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                태그는 프롬프트를 분류하고 검색하는 데 도움이 됩니다. 각 태그는\n                20자 이내로 입력하세요.\n              </p>\n            </div>\n          </div>\n\n          {/* 프롬프트 내용 */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center text-sm font-semibold text-gray-800 dark:text-gray-200\">\n              프롬프트 내용 <span className=\"text-red-500 ml-1\">*</span>\n            </label>\n            <div className=\"relative\">\n              <textarea\n                value={formData.prompt_text}\n                onChange={(e) => handleChange(\"prompt_text\", e.target.value)}\n                rows={12}\n                className=\"w-full px-4 py-3  rounded-xl bg-gray-50 dark:bg-dark-tertiary text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:border-green-500 focus:ring-2 focus:ring-green-500/20 dark:focus:ring-green-500/30 transition-all duration-200 resize-none\"\n                placeholder=\"프롬프트 내용을 입력하세요\"\n                required\n              />\n              <div className=\"absolute bottom-3 right-3 text-xs text-gray-500 dark:text-gray-400 flex items-center space-x-2\">\n                <span>{formData.prompt_text.length} 자</span>\n                <span className=\"text-gray-400 dark:text-gray-500\">\n                  / 📝 50자 이상 권장\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* 활성화 옵션 */}\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"enabled\"\n              checked={formData.enabled}\n              onChange={(e) => handleChange(\"enabled\", e.target.checked)}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 rounded\"\n            />\n            <label\n              htmlFor=\"enabled\"\n              className=\"ml-2 text-sm text-gray-700 dark:text-gray-300\"\n            >\n              활성화\n            </label>\n          </div>\n\n          {/* 버튼 영역 */}\n          <div className=\"flex justify-end space-x-3 pt-6 \">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-6 py-2.5 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700  rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors font-medium\"\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              disabled={!formData.prompt_text.trim()}\n              className=\"px-6 py-2.5 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-medium shadow-lg hover:shadow-xl\"\n            >\n              {initialData ? \"수정\" : \"생성\"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PromptCardManager;\n","import React from \"react\";\nimport PromptCardManager from \"./PromptCardManager\";\n\nconst AdminView = ({ projectId, projectName }) => {\n  return (\n    <div className=\"h-full w-full bg-white dark:bg-dark-primary transition-colors duration-300\">\n      <PromptCardManager projectId={projectId} projectName={projectName} />\n    </div>\n  );\n};\n\nexport default AdminView;\n","import React, { useState, useEffect } from \"react\";\nimport { promptCardAPI } from \"../services/api\";\nimport ChatWindow from \"./chat/ChatWindow\";\nimport { ChatInterfaceSkeleton } from \"./skeleton/SkeletonComponents\";\n\nconst UserView = ({ projectId, projectName }) => {\n  const [promptCards, setPromptCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadPromptCards = async () => {\n      try {\n        setLoading(true);\n        // AdminView와 동일하게 includeContent=true로 설정하여 프롬프트 내용을 포함하여 로드\n        const response = await promptCardAPI.getPromptCards(projectId, true);\n        // 응답 구조가 AdminView와 동일하게 처리\n        setPromptCards(response.promptCards || []);\n      } catch (error) {\n        console.warn(\"프롬프트 카드 로드 실패:\", error);\n        setPromptCards([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPromptCards();\n  }, [projectId]);\n\n  if (loading) {\n    return <ChatInterfaceSkeleton />;\n  }\n\n  return (\n    <div className=\"h-screen bg-white dark:bg-dark-primary transition-colors duration-300\">\n      <ChatWindow\n        projectId={projectId}\n        projectName={projectName}\n        promptCards={promptCards}\n      />\n    </div>\n  );\n};\n\nexport default UserView;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-hot-toast\";\nimport { projectAPI, handleAPIError } from \"../services/api\";\nimport AdminView from \"./AdminView\";\nimport UserView from \"./UserView\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { ChatInterfaceSkeleton } from \"./skeleton/SkeletonComponents\";\n\nconst ProjectDetail = () => {\n  const { projectId } = useParams();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [project, setProject] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadProjectData();\n  }, [projectId, navigate]);\n\n  const loadProjectData = async () => {\n    try {\n      setLoading(true);\n\n      // 일반 사용자인 경우 고정된 프로젝트나 기본 프로젝트를 사용\n      let projectData;\n      if (user?.role === \"user\") {\n        // 일반 사용자용 기본 프로젝트 사용\n        if (projectId && projectId !== \"default\") {\n          try {\n            projectData = await projectAPI.getProject(projectId);\n          } catch (error) {\n            console.log(\"API 호출 실패, 기본 프로젝트 사용:\", error);\n            projectData = {\n              projectId: \"4039d9fc-d318-4903-804e-9cf5bf05ba8e\",\n              name: \"서울경제\",\n              description: \"서울경제신문 AI 제목 생성 시스템\",\n              promptCards: [],\n              createdAt: new Date().toISOString(),\n              updatedAt: new Date().toISOString(),\n            };\n          }\n        } else {\n          // 기본 프로젝트 직접 생성\n          projectData = {\n            projectId: \"4039d9fc-d318-4903-804e-9cf5bf05ba8e\",\n            name: \"서울경제\",\n            description: \"서울경제신문 AI 제목 생성 시스템\",\n            promptCards: [],\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n          };\n        }\n      } else {\n        // 관리자인 경우\n        try {\n          projectData = await projectAPI.getProject(projectId);\n        } catch (error) {\n          console.error(\"관리자 프로젝트 로드 실패:\", error);\n          throw error; // 관리자는 에러를 그대로 전파\n        }\n      }\n\n      setProject(projectData);\n    } catch (error) {\n      console.error(\"프로젝트 로드 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n\n      // 권한에 따른 리다이렉트\n      if (user?.role === \"admin\") {\n        navigate(\"/projects\");\n      } else {\n        navigate(\"/dashboard\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return <ChatInterfaceSkeleton />;\n  }\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center transition-colors duration-200\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">\n            프로젝트를 찾을 수 없습니다\n          </h2>\n          <button\n            onClick={() => {\n              if (user?.role === \"admin\") {\n                navigate(\"/projects\");\n              } else {\n                navigate(\"/dashboard\");\n              }\n            }}\n            className=\"inline-flex items-center px-4 py-2 text-sm font-medium rounded-md text-blue-700 dark:text-blue-300 bg-blue-100 dark:bg-blue-900 hover:bg-blue-200 dark:hover:bg-blue-800 focus:outline-none transition-colors duration-200\"\n          >\n            {user?.role === \"admin\" ? \"프로젝트 목록으로\" : \"대시보드로\"}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen w-full bg-gray-50 dark:bg-dark-primary transition-all duration-500\">\n      {user?.role === \"admin\" ? (\n        // 관리자 모드: 프롬프트 카드 관리 + 채팅\n        <AdminView\n          projectId={project.projectId || projectId}\n          projectName={project.name}\n        />\n      ) : (\n        // 사용자 모드: 채팅만\n        <UserView\n          projectId={project.projectId || projectId}\n          projectName={project.name}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ProjectDetail;\n"],"names":["_ref","isOpen","onClose","className","onCollapsedChange","conversations","loading","error","hasMore","loadMore","createConversation","deleteConversation","updateConversation","useConversations","setConversations","useState","setLoading","setError","setHasMore","nextCursor","setNextCursor","loadConversations","useCallback","async","reset","arguments","length","undefined","cursor","response","conversationAPI","getConversations","prev","err","_err$response","_err$response2","_err$response3","_err$response4","console","message","status","data","config","errorMessage","code","log","mockConversations","title","newConversation","id","conversationId","startedAt","lastActivityAt","tokenSum","mockConversation","Date","now","toString","toISOString","updates","map","conv","warn","filter","removeConversation","refresh","useEffect","currentConversationId","setCurrentConversation","useConversationContext","isCreating","setIsCreating","isCollapsed","setIsCollapsed","createError","setCreateError","deletingId","setDeletingId","deleteError","setDeleteError","activeMenuId","setActiveMenuId","editingId","setEditingId","editingTitle","setEditingTitle","conversationListRef","useRef","current","scrollTop","scrollHeight","handleClickOutside","event","target","closest","document","addEventListener","removeEventListener","handleNewChat","conversationIdType","isConversationIdNull","isConversationIdUndefined","window","innerWidth","setTimeout","handleSaveEdit","trim","alert","handleCancelEdit","conversationGroups","groups","today","yesterday","setDate","getDate","forEach","conversation","date","createdAt","isToday","toDateString","isYesterday","key","toLocaleDateString","year","month","push","groupConversationsByDate","_jsxs","_Fragment","children","_jsx","onClick","style","overscrollBehavior","newCollapsed","xmlns","fill","viewBox","strokeWidth","stroke","strokeLinecap","strokeLinejoin","d","disabled","ref","onScroll","e","stopPropagation","jsx","Array","_","i","Object","entries","_ref2","groupTitle","groupConversations","type","value","onChange","onKeyPress","autoFocus","handleSelectConversation","handleToggleMenu","handleStartEdit","currentTitle","confirm","remainingConversations","handleDeleteConversation","MODELS","name","provider","category","speed","quality","description","recommended","new","selectedModel","onModelChange","setIsOpen","setFilter","currentModel","find","model","filteredModels","toLowerCase","SparklesIcon","replace","ChevronDownIcon","label","filterOption","handleModelSelect","modelId","copyToClipboard","text","successMessage","navigator","clipboard","writeText","toast","success","getAgentName","agentType","journalism","balanced","click","seo","social","formatMultiAgentContent","agentSummary","allTitles","content","index","agent","agentName","titles","tokenCount","useChat","projectId","projectName","promptCards","user","useAuth","isFirstRender","promptCardsLength","userId","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","canSendMessage","setCanSendMessage","inputHeight","setInputHeight","setSelectedModel","streamingMessageIdRef","currentWebSocketRef","currentExecutionIdRef","messagesEndRef","inputRef","isUserScrolling","setIsUserScrolling","scrollContainerRef","lastScrollTopRef","isExecuting","isGenerating","isStreaming","executeOrchestration","resetOrchestration","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","setIsStreaming","userInput","options","chat_history","prompt_cards","inputLength","historyLength","promptCardsCount","useStreaming","timestamp","onChunk","onError","_error$message","_error$message2","_error$message3","_error$message4","includes","onComplete","_response$result","resultLength","result","generateAPI","generateTitleStream","streamError","generateTitle","mode","_error$response","_error$response2","_error$message5","_error$response3","_error$response4","_error$response4$data","_error$response5","_error$response6","_error$response7","setup_required","pollOrchestrationResult","executionArn","poll","getExecutionStatus","Error","useOrchestration","isConnected","wsConnected","isConnecting","wsConnecting","wsError","startStreaming","wsStartStreaming","addMessageListener","removeMessageListener","setIsConnected","setIsConnecting","wsRef","reconnectTimeoutRef","reconnectAttempts","getWebSocketUrl","wsUrl","process","startsWith","normalizedUrl","connect","_wsRef$current","_wsRef$current2","readyState","WebSocket","OPEN","CONNECTING","close","wsConnectStart","connectionTimeout","_wsRef$current3","onopen","_wsRef$current4","_wsRef$current5","_wsRef$current6","clearTimeout","url","protocol","extensions","onclose","connectionDuration","reason","wasClean","delay","Math","min","pow","onerror","_wsRef$current7","_wsRef$current8","disconnect","sendMessage","_wsRef$current9","send","JSON","stringify","chatHistory","userSub","action","listener","timer","prevProjectIdRef","useWebSocket","handleScroll","container","currentScrollTop","maxScrollTop","clientHeight","abs","scrollToBottom","scrollIntoView","behavior","handleWebSocketMessage","_data$message7","parse","currentStreamingId","step","progress","updatedMessages","streamingMsgIndex","findIndex","msg","messagesLength","currentContent","isLoading","m","fullContent","_data$message","_data$message2","_data$message3","_data$message4","_data$message5","_data$message6","errorContent","isError","toastMessage","handleStreamingResponse","chunk","metadata","handleStreamingComplete","performance_metrics","model_info","handleStopGeneration","adjustInputHeight","lines","split","charBasedLines","ceil","estimatedLines","max","calculatedHeight","handleInputChange","handleSendMessage","userMessage","streamMsgId","streamingMessage","allMessages","role","trimmedChatHistory","slice","totalMessages","fullHistoryLength","trimmedHistoryLength","maxHistoryLength","recentHistory","activePromptCards","isArray","card","isActive","enabled","promptId","prompt_id","prompt_text","tags","stepOrder","sort","a","b","messageContent","chatHistoryLength","contentLength","hasContent","conversationIdValue","crewAPI","createCrewInstance","instanceError","_instanceError$respon","shouldRedirect","handleAPIError","multiAgentResult","executeMultiAgent","assistantMessage","agentResults","finalTitles","tokenUsage","keys","agentResult","values","flat","isMultiAgent","processMultiAgentResponse","errorUserMessage","errorDetails","handleKeyPress","shiftKey","preventDefault","handleCopyMessage","messageId","handleCopyTitle","resetChat","streamingMessageId","formatTimestamp","toLocaleTimeString","hour","minute","hour12","isNaN","getTime","onCopyMessage","onCopyTitle","isUser","likeClicked","setLikeClicked","dislikeClicked","setDislikeClicked","copyClicked","setCopyClicked","ExclamationTriangleIcon","animationDelay","ReactMarkdown","handleLikeClick","handleDislikeClick","sidebarCollapsed","setSidebarCollapsed","addMessage","historicalMessages","messagesLoading","loadMessages","currentMessagesCount","_response$messages","getMessages","messagesReceived","conversationMessages","mockMessages","mockMessagesCount","newMessage","updateMessage","removeMessage","loadPreviousMessages","Promise","resolve","clearMessages","previousConversationId","useMessages","chatMessages","originalHandleSendMessage","messageData","ConversationDrawer","SimpleChatMessage","ChatBubbleLeftRightIcon","placeholder","rows","height","minHeight","maxHeight","lineHeight","overflowY","StopIcon","PaperAirplaneIcon","ModelSelector","PromptCard","onEdit","onDelete","PencilIcon","TrashIcon","tag","day","updatedAt","PromptFormModal","_ref3","onSubmit","onCancel","initialData","formData","setFormData","tagInput","setTagInput","handleChange","field","XMarkIcon","HashtagIcon","newTag","maxLength","handleTagRemove","tagToRemove","required","checked","htmlFor","setPromptCards","editingCard","setEditingCard","showForm","setShowForm","loadPromptCards","promptCardAPI","getPromptCards","errorInfo","handleNewCard","ChatWindow","PlusIcon","cardWithContent","_contentResponse$cont","contentResponse","getPromptContent","handleEditCard","deletePromptCard","handleDeleteCard","backendData","cardData","updatePromptCard","createPromptCard","handleCancelForm","PromptCardManager","ChatInterfaceSkeleton","ProjectDetail","useParams","navigate","useNavigate","project","setProject","loadProjectData","projectData","projectAPI","getProject","AdminView","UserView"],"sourceRoot":""}