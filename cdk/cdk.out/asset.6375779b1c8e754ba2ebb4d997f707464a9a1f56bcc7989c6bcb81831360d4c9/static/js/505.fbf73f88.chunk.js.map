{"version":3,"file":"static/js/505.fbf73f88.chunk.js","mappings":"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","sources":["services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Mock data for development\nconst mockUsageData = {\n  todayRequests: 127,\n  todayTokens: 45320,\n  monthlyLimit: 1000000,\n  monthlyUsed: 523400,\n  plan: {\n    name: 'Professional',\n    expiresAt: '2025-02-28',\n    features: ['월 100만 토큰', '우선 지원', 'API 액세스']\n  },\n  chartData: Array.from({ length: 30 }, (_, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    tokens: Math.floor(Math.random() * 30000) + 10000,\n    requests: Math.floor(Math.random() * 100) + 50\n  })),\n  recentLogs: Array.from({ length: 20 }, (_, i) => ({\n    id: `log-${i}`,\n    timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n    model: ['Claude 3 Sonnet', 'Claude 3.5 Haiku', 'Claude 3 Opus'][Math.floor(Math.random() * 3)],\n    tokens: Math.floor(Math.random() * 5000) + 1000,\n    duration: Math.floor(Math.random() * 3000) + 500,\n    status: Math.random() > 0.1 ? 'success' : 'error'\n  }))\n};\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터 - 인증 토큰 자동 추가\napi.interceptors.request.use(async (config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  \n  // 인증이 필요한 요청에 토큰 추가\n  try {\n    // AuthContext에서 토큰 가져오기 (동적 import 사용)\n    const { fetchAuthSession } = await import('aws-amplify/auth');\n    const session = await fetchAuthSession();\n    const token = session?.tokens?.idToken?.toString();\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log(\"✅ 인증 토큰 추가됨\");\n    } else {\n      console.log(\"⚠️ 인증 토큰 없음\");\n    }\n  } catch (error) {\n    console.log(\"📝 인증 토큰 가져오기 실패:\", error.message);\n    // 인증 오류가 있어도 요청은 계속 진행 (public API도 있을 수 있음)\n  }\n  \n  return config;\n});\n\n// 응답 인터셉터 - 401 오류 시 리다이렉션 처리\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  async (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n\n    // 401 Unauthorized 오류 처리\n    if (error.response?.status === 401) {\n      console.log(\"🔐 인증 오류 발생 - 로그인 페이지로 리다이렉션\");\n      \n      try {\n        // 로그아웃 처리\n        const { signOut } = await import('aws-amplify/auth');\n        await signOut();\n        \n        // 로그인 페이지로 리다이렉션\n        window.location.href = '/login';\n      } catch (signOutError) {\n        console.error(\"로그아웃 처리 실패:\", signOutError);\n        // 강제 리다이렉션\n        window.location.href = '/login';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 🔄 데이터 매핑 유틸리티 함수들\n// =============================================================================\n\n/**\n * 프론트엔드 → 백엔드 데이터 변환\n */\nconst mapFrontendToBackend = {\n  // 채팅 메시지 데이터 변환\n  chatMessage: (frontendData) => ({\n    userInput: frontendData.userInput || frontendData.message,\n    chat_history: frontendData.chat_history || frontendData.messages || [],\n    prompt_cards: frontendData.promptCards || frontendData.prompt_cards || [],\n    modelId: frontendData.selectedModel || frontendData.modelId,\n    conversationId: frontendData.conversationId || frontendData.conversation_id,\n    userSub: frontendData.userId || frontendData.user_id,\n  }),\n\n  // 프롬프트 카드 데이터 변환\n  promptCard: (frontendData) => ({\n    title: frontendData.title,\n    prompt_text: frontendData.prompt_text || frontendData.content,\n    tags: frontendData.tags || [],\n    isActive: frontendData.enabled !== false && frontendData.isActive !== false,\n    stepOrder: frontendData.stepOrder || 1,\n  }),\n\n  // 프로젝트 데이터 변환\n  project: (frontendData) => ({\n    name: frontendData.name,\n    description: frontendData.description || '',\n    tags: frontendData.tags || [],\n    aiRole: frontendData.aiRole || '',\n    aiInstructions: frontendData.aiInstructions || '',\n    targetAudience: frontendData.targetAudience || '일반독자',\n    outputFormat: frontendData.outputFormat || 'multiple',\n    styleGuidelines: frontendData.styleGuidelines || '',\n  }),\n};\n\n/**\n * 백엔드 → 프론트엔드 데이터 변환\n */\nconst mapBackendToFrontend = {\n  // 채팅 메시지 변환\n  chatMessage: (backendData) => ({\n    id: backendData.id || backendData.messageId || Date.now().toString(),\n    role: backendData.role,\n    content: backendData.content || backendData.text,\n    timestamp: backendData.timestamp || backendData.createdAt || new Date().toISOString(),\n    tokenCount: backendData.tokenCount || backendData.tokens_used,\n  }),\n\n  // 프롬프트 카드 변환\n  promptCard: (backendData) => ({\n    promptId: backendData.promptId || backendData.prompt_id,\n    title: backendData.title,\n    prompt_text: backendData.prompt_text || backendData.content,\n    tags: backendData.tags || [],\n    isActive: backendData.isActive !== false,\n    enabled: backendData.isActive !== false,\n    stepOrder: backendData.stepOrder || 1,\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt,\n  }),\n\n  // 프로젝트 변환\n  project: (backendData) => ({\n    projectId: backendData.projectId,\n    name: backendData.name,\n    description: backendData.description || '',\n    status: backendData.status,\n    tags: backendData.tags || [],\n    aiRole: backendData.aiRole || '',\n    aiInstructions: backendData.aiInstructions || '',\n    targetAudience: backendData.targetAudience || '일반독자',\n    outputFormat: backendData.outputFormat || 'multiple',\n    styleGuidelines: backendData.styleGuidelines || '',\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt,\n    promptCount: backendData.promptCount || 0,\n    conversationCount: backendData.conversationCount || 0,\n  }),\n\n  // 대화 목록 변환\n  conversation: (backendData) => ({\n    id: backendData.id || backendData.conversationId,\n    title: backendData.title,\n    startedAt: backendData.startedAt || backendData.createdAt,\n    lastActivityAt: backendData.lastActivityAt || backendData.updatedAt,\n    tokenSum: backendData.tokenSum || backendData.totalTokens || 0,\n  }),\n};\n\n/**\n * Mock 데이터와 실제 API 간 전환을 위한 플래그\n */\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\n/**\n * 🔍 API 연결 상태 확인 함수\n */\nexport const testApiConnection = async () => {\n  console.log(\"🔍 API 연결 상태 확인 중...\");\n  console.log(\"- API Base URL:\", API_BASE_URL);\n  console.log(\"- Use Mock Data:\", USE_MOCK_DATA);\n  console.log(\"- Node Env:\", process.env.NODE_ENV);\n  \n  try {\n    // 간단한 헬스체크 엔드포인트 호출\n    const response = await api.get(\"/health\");\n    console.log(\"✅ API 연결 성공:\", response.status);\n    return { success: true, status: response.status, data: response.data };\n  } catch (error) {\n    console.log(\"❌ API 연결 실패:\", error.message);\n    console.log(\"- Status:\", error.response?.status);\n    console.log(\"- Error Code:\", error.code);\n    return { \n      success: false, \n      error: error.message, \n      status: error.response?.status,\n      code: error.code \n    };\n  }\n};\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    try {\n      const response = await api.get(\"/projects\");\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      const projects = response.data.projects || response.data;\n      return {\n        projects: Array.isArray(projects) ? projects.map(mapBackendToFrontend.project) : [],\n        count: response.data.count || projects.length,\n        hasMore: response.data.hasMore || false,\n        nextKey: response.data.nextKey,\n      };\n    } catch (error) {\n      console.error(\"프로젝트 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  getProject: async (projectId) => {\n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 상세 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  createProject: async (projectData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.post(\"/projects\", backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  updateProject: async (projectId, projectData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.put(`/projects/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n\n  deleteProject: async (projectId) => {\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프로젝트 삭제 실패:\", error);\n      throw error;\n    }\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    try {\n      const response = await api.get(`/projects/${projectId}/upload-url`, {\n        params: { fileName },\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"업로드 URL 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    try {\n      const response = await api.get(`/prompts/${projectId}`, {\n        params: { includeContent, includeStats },\n      });\n      \n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const promptCards = response.data.promptCards || response.data.prompts || response.data;\n      return {\n        promptCards: Array.isArray(promptCards) ? promptCards.map(mapBackendToFrontend.promptCard) : [],\n        count: response.data.count || promptCards.length,\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.post(`/prompts/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.put(\n        `/prompts/${projectId}/${promptId}`,\n        backendData\n      );\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    try {\n      const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 내용 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    try {\n      const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 카드 삭제 실패:\", error);\n      throw error;\n    }\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    try {\n      const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n        api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n      );\n\n      const responses = await Promise.all(updatePromises);\n      return {\n        message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n        updatedCards: responses.map((r) => mapBackendToFrontend.promptCard(r.data)),\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 순서 변경 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput?.length || 0,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.chatMessage(data);\n      \n      console.log(\"🔄 변환된 백엔드 데이터:\", backendData);\n      \n      const response = await api.post(`/projects/${projectId}/generate`, backendData);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput?.length || 0,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    // 프론트엔드 데이터를 백엔드 형식으로 변환 (try-catch 밖에서 정의)\n    const backendData = mapFrontendToBackend.chatMessage(data);\n    console.log(\"🔄 스트리밍용 변환된 데이터:\", backendData);\n\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      \n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n\n      // 인증 토큰 가져오기\n      let authHeaders = {};\n      try {\n        const { fetchAuthSession } = await import('aws-amplify/auth');\n        const session = await fetchAuthSession();\n        const token = session?.tokens?.idToken?.toString();\n        if (token) {\n          authHeaders.Authorization = `Bearer ${token}`;\n        }\n      } catch (authError) {\n        console.log(\"인증 토큰 가져오기 실패:\", authError.message);\n      }\n\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n          ...authHeaders, // 인증 토큰 포함\n        },\n        body: JSON.stringify(backendData), // 변환된 데이터 사용\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                \n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, { content: eventData.response });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString(),\n                    });\n                  }\n                  return { result: eventData.fullResponse || fullResponse };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return { result: fullResponse };\n\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n      \n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          backendData // 변환된 데이터 사용\n        );\n\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n            await new Promise((resolve) => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n          );\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\n\nexport const crewAPI = {\n  // 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\n  createCrewInstance: async (projectId, promptCards) => {\n    console.log(\"크루 인스턴스 생성 요청:\", { projectId, promptCardsCount: promptCards.length });\n    \n    const response = await api.post(\"/crew/instances\", {\n      projectId,\n      promptCards: promptCards.map(card => ({\n        promptId: card.promptId,\n        prompt_text: card.prompt_text,\n        stepOrder: card.stepOrder,\n        isActive: card.isActive\n      }))\n    });\n    \n    console.log(\"크루 인스턴스 생성 완료:\", response.data);\n    return response.data;\n  },\n\n  // 프로젝트의 크루 인스턴스 조회\n  getCrewInstances: async (projectId) => {\n    console.log(\"크루 인스턴스 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/instances/${projectId}`);\n    return response.data;\n  },\n\n  // 크루 설정 조회\n  getCrewConfig: async (projectId) => {\n    console.log(\"크루 설정 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/config/${projectId}`);\n    return response.data;\n  },\n\n  // 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\n  executeMultiAgent: async (projectId, userInput, onProgress = null) => {\n    console.log(\"멀티-에이전트 실행 시작:\", { \n      projectId, \n      inputLength: userInput.length,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      const response = await api.post(\"/crew/execute\", {\n        projectId,\n        userInput,\n        mode: \"parallel\" // 병렬 처리 모드 명시\n      });\n\n      console.log(\"멀티-에이전트 실행 완료:\", {\n        agentCount: Object.keys(response.data.agentResults || {}).length,\n        titleCount: Object.keys(response.data.finalTitles || {}).length,\n        tokenUsage: response.data.tokenUsage,\n        timestamp: new Date().toISOString()\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"멀티-에이전트 실행 실패:\", {\n        error: error.message,\n        status: error.response?.status,\n        data: error.response?.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n\n  // 에이전트별 상세 결과 조회\n  getAgentResults: async (projectId, executionId) => {\n    console.log(\"에이전트 결과 조회:\", { projectId, executionId });\n    \n    const response = await api.get(`/crew/results/${projectId}/${executionId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기 - 인증번호 발송\n  requestPasswordReset: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\n  resetPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", {\n      email: resetData.email,\n      code: resetData.code,\n      newPassword: resetData.newPassword\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = async (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 401 Unauthorized 특별 처리 - 로그인 페이지로 리다이렉트\n  if (error.response?.status === 401) {\n    try {\n      // AuthContext에서 로그아웃 처리\n      const { signOut } = await import('aws-amplify/auth');\n      await signOut();\n      \n      // 로그인 페이지로 리다이렉트\n      window.location.href = '/auth/signin';\n      \n      return {\n        userMessage: \"인증이 만료되었습니다. 다시 로그인해주세요.\",\n        statusCode: 401,\n        errorType: \"UNAUTHORIZED\",\n        shouldRedirect: true,\n      };\n    } catch (signOutError) {\n      console.error(\"로그아웃 처리 실패:\", signOutError);\n      // 로그아웃 실패해도 리다이렉트\n      window.location.href = '/auth/signin';\n      return {\n        userMessage: \"인증이 만료되었습니다. 다시 로그인해주세요.\",\n        statusCode: 401,\n        errorType: \"UNAUTHORIZED\",\n        shouldRedirect: true,\n      };\n    }\n  }\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      userMessage: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n      shouldRedirect: false,\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      userMessage:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n      shouldRedirect: false,\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      userMessage:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n      shouldRedirect: false,\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      userMessage:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n      shouldRedirect: false,\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { \n          userMessage: `잘못된 요청: ${message}`, \n          statusCode: 400,\n          shouldRedirect: false,\n        };\n      case 404:\n        return { \n          userMessage: \"요청한 리소스를 찾을 수 없습니다\", \n          statusCode: 404,\n          shouldRedirect: false,\n        };\n      case 429:\n        return {\n          userMessage: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n          shouldRedirect: false,\n        };\n      case 500:\n        return { \n          userMessage: \"서버 내부 오류가 발생했습니다\", \n          statusCode: 500,\n          shouldRedirect: false,\n        };\n      default:\n        return {\n          userMessage: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n          shouldRedirect: false,\n        };\n    }\n  } else if (error.request) {\n    return {\n      userMessage: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n      shouldRedirect: false,\n    };\n  } else {\n    return {\n      userMessage: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n      shouldRedirect: false,\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n\n// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\n\nexport const getUsage = async (range = 'month') => {\n  console.log(\"사용량 데이터 조회 요청:\", { range });\n  \n  // Mock 데이터 사용 모드이거나 개발 모드일 때\n  if (USE_MOCK_DATA || process.env.NODE_ENV === 'development') {\n    console.log(\"🔄 Mock 사용량 데이터 반환\");\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockUsageData;\n  }\n  \n  try {\n    const response = await api.get(`/usage?range=${range}`);\n    console.log(\"✅ 사용량 API 호출 성공\");\n    return response.data;\n  } catch (error) {\n    console.warn(\"⚠️ 사용량 API 호출 실패, Mock 데이터로 폴백:\", error.message);\n    // Fallback to mock data\n    return mockUsageData;\n  }\n};\n\n// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\n\nexport const conversationAPI = {\n  // 대화 목록 조회 (무한 스크롤)\n  getConversations: async (cursor, limit = 20) => {\n    console.log(\"대화 목록 조회 시작:\", { cursor, limit, API_BASE_URL });\n    \n    const params = new URLSearchParams({ limit: limit.toString() });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    const url = `/conversations?${params}`;\n    console.log(\"API 요청 URL:\", `${API_BASE_URL}${url}`);\n    \n    try {\n      const response = await api.get(url);\n      console.log(\"대화 목록 조회 성공:\", response.data);\n      \n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const conversations = response.data.conversations || response.data.items || response.data;\n      return {\n        conversations: Array.isArray(conversations) ? conversations.map(mapBackendToFrontend.conversation) : [],\n        hasMore: response.data.hasMore || false,\n        nextCursor: response.data.nextCursor || response.data.cursor,\n      };\n    } catch (error) {\n      console.error(\"대화 목록 조회 실패:\", error);\n      // Mock 데이터로 폴백 (개발 시)\n      if (USE_MOCK_DATA || process.env.NODE_ENV === 'development') {\n        console.log(\"🔄 Mock 데이터로 폴백\");\n        return {\n          conversations: mockConversations,\n          hasMore: false,\n          nextCursor: null,\n        };\n      }\n      throw error;\n    }\n  },\n\n  // 새 대화 생성\n  createConversation: async (title = 'New Conversation') => {\n    console.log(\"새 대화 생성:\", { title });\n    \n    try {\n      const response = await api.post('/conversations', { title });\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 특정 대화의 메시지 조회 (페이징)\n  getMessages: async (conversationId, cursor, limit = 50) => {\n    console.log(\"메시지 조회:\", { conversationId, cursor, limit });\n    \n    const params = new URLSearchParams({ \n      convId: conversationId,\n      limit: limit.toString() \n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    try {\n      const response = await api.get(`/messages?${params}`);\n      \n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const messages = response.data.messages || response.data.items || response.data;\n      return {\n        messages: Array.isArray(messages) ? messages.map(mapBackendToFrontend.chatMessage) : [],\n        hasMore: response.data.hasMore || false,\n        nextCursor: response.data.nextCursor || response.data.cursor,\n      };\n    } catch (error) {\n      console.error(\"메시지 조회 실패:\", error);\n      // Mock 데이터로 폴백 (개발 시)\n      if (USE_MOCK_DATA || process.env.NODE_ENV === 'development') {\n        console.log(\"🔄 Mock 메시지 데이터로 폴백\");\n        const mockMessageData = mockMessages[conversationId] || [];\n        return {\n          messages: mockMessageData,\n          hasMore: false,\n          nextCursor: null,\n        };\n      }\n      throw error;\n    }\n  },\n\n  // 대화 삭제\n  deleteConversation: async (conversationId) => {\n    console.log(\"대화 삭제:\", { conversationId });\n    \n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      console.log(\"대화 삭제 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 삭제 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// Mock data for conversation development\nexport const mockConversations = [\n  {\n    id: '1',\n    title: '서울경제신문 AI 제목 생성 테스트',\n    startedAt: '2025-01-20T10:30:00Z',\n    lastActivityAt: '2025-01-20T15:45:00Z',\n    tokenSum: 1250\n  },\n  {\n    id: '2', \n    title: '경제 뉴스 헤드라인 최적화',\n    startedAt: '2025-01-19T14:20:00Z',\n    lastActivityAt: '2025-01-19T16:30:00Z',\n    tokenSum: 890\n  },\n  {\n    id: '3',\n    title: '부동산 시장 분석 제목 생성',\n    startedAt: '2025-01-18T09:15:00Z',\n    lastActivityAt: '2025-01-18T11:45:00Z',\n    tokenSum: 2150\n  }\n];\n\nexport const mockMessages = {\n  '1': [\n    {\n      id: '2025-01-20T10:30:00.000Z',\n      role: 'user',\n      content: '오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.',\n      tokenCount: 25,\n      timestamp: '2025-01-20T10:30:00.000Z'\n    },\n    {\n      id: '2025-01-20T10:30:05.000Z',\n      role: 'assistant', \n      content: '서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',\n      tokenCount: 95,\n      timestamp: '2025-01-20T10:30:05.000Z'\n    }\n  ],\n  '2': [\n    {\n      id: '2025-01-19T14:20:00.000Z',\n      role: 'user',\n      content: '반도체 산업 관련 경제 뉴스 제목을 생성해주세요.',\n      tokenCount: 20,\n      timestamp: '2025-01-19T14:20:00.000Z'\n    },\n    {\n      id: '2025-01-19T14:20:03.000Z',\n      role: 'assistant',\n      content: '반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',\n      tokenCount: 78,\n      timestamp: '2025-01-19T14:20:03.000Z'\n    }\n  ]\n};\n\n// =============================================================================\n// 🧪 연결 테스트 및 상태 확인 함수들\n// =============================================================================\n\n/**\n * 🧪 REST API 연결 테스트 함수\n */\nexport const testAPIConnection = async () => {\n  try {\n    console.log(\"🔍 API 연결 테스트 시작...\");\n    \n    const response = await api.get(\"/health\", {\n      timeout: 5000, // 5초 타임아웃\n    });\n    \n    console.log(\"✅ API 연결 테스트 성공:\", response.data);\n    return {\n      success: true,\n      message: \"백엔드 서버 연결 성공\",\n      data: response.data,\n    };\n  } catch (error) {\n    console.error(\"❌ API 연결 테스트 실패:\", error);\n    \n    let errorMessage = \"백엔드 서버 연결 실패\";\n    if (error.code === \"ECONNABORTED\") {\n      errorMessage = \"연결 시간 초과 - 서버가 응답하지 않습니다\";\n    } else if (error.response?.status === 404) {\n      errorMessage = \"health 엔드포인트가 존재하지 않습니다\";\n    } else if (error.response?.status >= 500) {\n      errorMessage = \"서버 내부 오류가 발생했습니다\";\n    } else if (!error.response) {\n      errorMessage = \"네트워크 연결 오류 - 서버에 도달할 수 없습니다\";\n    }\n    \n    return {\n      success: false,\n      message: errorMessage,\n      error: error.message,\n      status: error.response?.status,\n    };\n  }\n};\n\n/**\n * 🔄 종합 연결 상태 확인 (REST API + WebSocket)\n */\nexport const checkConnectionStatus = async () => {\n  console.log(\"🔍 종합 연결 상태 확인 시작...\");\n  \n  const results = {\n    timestamp: new Date().toISOString(),\n    restApi: null,\n    websocket: null,\n    authentication: null,\n  };\n  \n  // 1. REST API 연결 테스트\n  try {\n    results.restApi = await testAPIConnection();\n  } catch (error) {\n    results.restApi = {\n      success: false,\n      message: \"REST API 테스트 중 오류 발생\",\n      error: error.message,\n    };\n  }\n  \n  // 2. 인증 상태 확인\n  try {\n    const { fetchAuthSession } = await import('aws-amplify/auth');\n    const session = await fetchAuthSession();\n    const token = session?.tokens?.idToken?.toString();\n    \n    results.authentication = {\n      success: !!token,\n      message: token ? \"인증 토큰 확인됨\" : \"인증 토큰 없음\",\n      hasToken: !!token,\n    };\n  } catch (error) {\n    results.authentication = {\n      success: false,\n      message: \"인증 상태 확인 실패\",\n      error: error.message,\n    };\n  }\n  \n  // 3. WebSocket URL 확인\n  try {\n    const wsUrl = process.env.REACT_APP_WS_URL;\n    results.websocket = {\n      success: !!wsUrl && (wsUrl.startsWith('wss://') || wsUrl.startsWith('ws://')),\n      message: !!wsUrl ? \"WebSocket URL 설정됨\" : \"WebSocket URL 미설정\",\n      url: wsUrl ? wsUrl.replace(/token=[^&]+/, 'token=***') : null,\n    };\n  } catch (error) {\n    results.websocket = {\n      success: false,\n      message: \"WebSocket 설정 확인 실패\",\n      error: error.message,\n    };\n  }\n  \n  console.log(\"📊 종합 연결 상태 결과:\", results);\n  return results;\n};\n"],"names":["API_BASE_URL","process","mockUsageData","todayRequests","todayTokens","monthlyLimit","monthlyUsed","plan","name","expiresAt","features","chartData","Array","from","length","_","i","date","Date","now","toISOString","split","tokens","Math","floor","random","requests","recentLogs","id","timestamp","model","duration","status","api","axios","create","baseURL","headers","timeout","interceptors","request","use","async","_config$method","console","log","config","method","toUpperCase","url","_session$tokens","_session$tokens$idTok","fetchAuthSession","session","token","idToken","toString","Authorization","error","message","response","_error$response","_error$config","_error$response2","_error$response3","code","data","signOut","window","location","href","signOutError","Promise","reject","mapFrontendToBackend","frontendData","userInput","chat_history","messages","prompt_cards","promptCards","modelId","selectedModel","conversationId","conversation_id","userSub","userId","user_id","title","prompt_text","content","tags","isActive","enabled","stepOrder","description","aiRole","aiInstructions","targetAudience","outputFormat","styleGuidelines","mapBackendToFrontend","backendData","messageId","role","text","createdAt","tokenCount","tokens_used","promptId","prompt_id","updatedAt","projectId","promptCount","conversationCount","startedAt","lastActivityAt","tokenSum","totalTokens","projectAPI","getProjects","get","projects","isArray","map","count","hasMore","nextKey","getProject","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","arguments","undefined","includeStats","prompts","createPromptCard","promptData","updatePromptCard","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","_ref","updatedCards","all","r","generateAPI","generateTitle","_data$userInput","_data$chat_history","inputLength","historyLength","mode","_error$response6","_error$response7","responseData","generateTitleStream","onChunk","onError","onComplete","_data$userInput2","_data$chat_history2","streamingUrl","authHeaders","_session$tokens2","_session$tokens2$idTo","authError","fetch","body","JSON","stringify","ok","Error","statusText","contentType","includes","reader","getReader","decoder","TextDecoder","buffer","fullResponse","done","value","read","decode","stream","lines","pop","line","startsWith","eventData","parse","slice","type","result","parseError","releaseLock","streamError","fallbackResponse","words","word","resolve","setTimeout","model_info","performance_metrics","fallbackError","getExecutionStatus","output","crewAPI","createCrewInstance","promptCardsCount","card","getCrewInstances","getCrewConfig","executeMultiAgent","agentCount","Object","keys","agentResults","titleCount","finalTitles","tokenUsage","_error$response8","_error$response9","getAgentResults","executionId","authAPI","isAuthenticated","getCurrentUser","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","requestPasswordReset","resetPassword","newPassword","handleAPIError","_error$response0","_error$response1","_error$response10","_error$response11","_error$response12","_error$response13","_error$message","_error$message2","userMessage","statusCode","errorType","shouldRedirect","_error$response$data","_error$response$data2","filterProjects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","some","tag","sortBy","sort","a","b","_a$name","localeCompare","getUsage","range","warn","conversationAPI","getConversations","cursor","limit","URLSearchParams","append","conversations","items","nextCursor","createConversation","getMessages","convId","deleteConversation","mockConversations","mockMessages"],"sourceRoot":""}