{"version":3,"file":"static/js/105.84b530e0.chunk.js","mappings":"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","sources":["../node_modules/@aws-amplify/auth/src/Errors.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/createOAuthError.ts","../node_modules/@aws-amplify/auth/src/types/Auth.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/validateState.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/completeOAuthFlow.ts","../node_modules/@aws-amplify/core/src/utils/urlSafeDecode.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/handleFailure.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/attemptCompleteOAuthFlow.ts","../node_modules/@aws-amplify/auth/src/providers/cognito/utils/oauth/enableOAuthListener.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// TODO: delete this module when the Auth class is removed.\nimport { ConsoleLogger } from '@aws-amplify/core';\nimport { AuthErrorStrings } from './common/AuthErrorStrings';\nconst logger = new ConsoleLogger('AuthError');\nexport class AuthError extends Error {\n    constructor(type) {\n        const { message, log } = authErrorMessages[type];\n        super(message);\n        // Hack for making the custom error class work when transpiled to es5\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = AuthError;\n        Object.setPrototypeOf(this, AuthError.prototype);\n        this.name = 'AuthError';\n        this.log = log || message;\n        logger.error(this.log);\n    }\n}\nexport class NoUserPoolError extends AuthError {\n    constructor(type) {\n        super(type);\n        // Hack for making the custom error class work when transpiled to es5\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = NoUserPoolError;\n        Object.setPrototypeOf(this, NoUserPoolError.prototype);\n        this.name = 'NoUserPoolError';\n    }\n}\nexport const authErrorMessages = {\n    oauthSignInError: {\n        message: AuthErrorStrings.OAUTH_ERROR,\n        log: 'Make sure Cognito Hosted UI has been configured correctly',\n    },\n    noConfig: {\n        message: AuthErrorStrings.DEFAULT_MSG,\n        log: `\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n\t\t\t\tRefer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        `,\n    },\n    missingAuthConfig: {\n        message: AuthErrorStrings.DEFAULT_MSG,\n        log: `\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run \\`amplify push\\` after adding auth via \\`amplify add auth\\`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        `,\n    },\n    emptyUsername: {\n        message: AuthErrorStrings.EMPTY_USERNAME,\n    },\n    // TODO: should include a list of valid sign-in types\n    invalidUsername: {\n        message: AuthErrorStrings.INVALID_USERNAME,\n    },\n    emptyPassword: {\n        message: AuthErrorStrings.EMPTY_PASSWORD,\n    },\n    emptyCode: {\n        message: AuthErrorStrings.EMPTY_CODE,\n    },\n    signUpError: {\n        message: AuthErrorStrings.SIGN_UP_ERROR,\n        log: 'The first parameter should either be non-null string or object',\n    },\n    noMFA: {\n        message: AuthErrorStrings.NO_MFA,\n    },\n    invalidMFA: {\n        message: AuthErrorStrings.INVALID_MFA,\n    },\n    emptyChallengeResponse: {\n        message: AuthErrorStrings.EMPTY_CHALLENGE,\n    },\n    noUserSession: {\n        message: AuthErrorStrings.NO_USER_SESSION,\n    },\n    deviceConfig: {\n        message: AuthErrorStrings.DEVICE_CONFIG,\n    },\n    networkError: {\n        message: AuthErrorStrings.NETWORK_ERROR,\n    },\n    autoSignInError: {\n        message: AuthErrorStrings.AUTOSIGNIN_ERROR,\n    },\n    default: {\n        message: AuthErrorStrings.DEFAULT_MSG,\n    },\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { authErrorMessages } from '../../../../Errors';\nimport { AuthErrorCodes } from '../../../../common/AuthErrorStrings';\nimport { AuthError } from '../../../../errors/AuthError';\nexport const createOAuthError = (message, recoverySuggestion) => new AuthError({\n    message: message ?? 'An error has occurred during the oauth process.',\n    name: AuthErrorCodes.OAuthSignInError,\n    recoverySuggestion: recoverySuggestion ?? authErrorMessages.oauthSignInError.log,\n});\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport var AuthErrorTypes;\n(function (AuthErrorTypes) {\n    AuthErrorTypes[\"NoConfig\"] = \"noConfig\";\n    AuthErrorTypes[\"MissingAuthConfig\"] = \"missingAuthConfig\";\n    AuthErrorTypes[\"EmptyUsername\"] = \"emptyUsername\";\n    AuthErrorTypes[\"InvalidUsername\"] = \"invalidUsername\";\n    AuthErrorTypes[\"EmptyPassword\"] = \"emptyPassword\";\n    AuthErrorTypes[\"EmptyCode\"] = \"emptyCode\";\n    AuthErrorTypes[\"SignUpError\"] = \"signUpError\";\n    AuthErrorTypes[\"NoMFA\"] = \"noMFA\";\n    AuthErrorTypes[\"InvalidMFA\"] = \"invalidMFA\";\n    AuthErrorTypes[\"EmptyChallengeResponse\"] = \"emptyChallengeResponse\";\n    AuthErrorTypes[\"NoUserSession\"] = \"noUserSession\";\n    AuthErrorTypes[\"Default\"] = \"default\";\n    AuthErrorTypes[\"DeviceConfig\"] = \"deviceConfig\";\n    AuthErrorTypes[\"NetworkError\"] = \"networkError\";\n    AuthErrorTypes[\"AutoSignInError\"] = \"autoSignInError\";\n    AuthErrorTypes[\"OAuthSignInError\"] = \"oauthSignInError\";\n})(AuthErrorTypes || (AuthErrorTypes = {}));\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthError } from '../../../../errors/AuthError';\nimport { AuthErrorTypes } from '../../../../types/Auth';\nimport { oAuthStore } from './oAuthStore';\nexport const flowCancelledMessage = '`signInWithRedirect` has been canceled.';\nexport const validationFailedMessage = 'An error occurred while validating the state.';\nexport const validationRecoverySuggestion = 'Try to initiate an OAuth flow from Amplify';\nexport const validateState = async (state) => {\n    const savedState = await oAuthStore.loadOAuthState();\n    // This is because savedState only exists if the flow was initiated by Amplify\n    const validatedState = state === savedState ? savedState : undefined;\n    if (!validatedState) {\n        throw new AuthError({\n            name: AuthErrorTypes.OAuthSignInError,\n            message: state === null ? flowCancelledMessage : validationFailedMessage,\n            recoverySuggestion: state === null ? undefined : validationRecoverySuggestion,\n        });\n    }\n    return validatedState;\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AMPLIFY_SYMBOL, AmplifyUrl, USER_AGENT_HEADER, urlSafeDecode, } from '@aws-amplify/core/internals/utils';\nimport { Hub, decodeJWT } from '@aws-amplify/core';\nimport { cacheCognitoTokens } from '../../tokenProvider/cacheTokens';\nimport { dispatchSignedInHubEvent } from '../dispatchSignedInHubEvent';\nimport { tokenOrchestrator } from '../../tokenProvider';\nimport { createOAuthError } from './createOAuthError';\nimport { resolveAndClearInflightPromises } from './inflightPromise';\nimport { validateState } from './validateState';\nimport { oAuthStore } from './oAuthStore';\nexport const completeOAuthFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, responseType, domain, preferPrivateSession, }) => {\n    const urlParams = new AmplifyUrl(currentUrl);\n    const error = urlParams.searchParams.get('error');\n    const errorMessage = urlParams.searchParams.get('error_description');\n    if (error) {\n        throw createOAuthError(errorMessage ?? error);\n    }\n    if (responseType === 'code') {\n        return handleCodeFlow({\n            currentUrl,\n            userAgentValue,\n            clientId,\n            redirectUri,\n            domain,\n            preferPrivateSession,\n        });\n    }\n    return handleImplicitFlow({\n        currentUrl,\n        redirectUri,\n        preferPrivateSession,\n    });\n};\nconst handleCodeFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, domain, preferPrivateSession, }) => {\n    /* Convert URL into an object with parameters as keys\n{ redirect_uri: 'http://localhost:3000/', response_type: 'code', ...} */\n    const url = new AmplifyUrl(currentUrl);\n    const code = url.searchParams.get('code');\n    const state = url.searchParams.get('state');\n    // if `code` or `state` is not presented in the redirect url, most likely\n    // that the end user cancelled the inflight oauth flow by:\n    // 1. clicking the back button of browser\n    // 2. closing the provider hosted UI page and coming back to the app\n    if (!code || !state) {\n        throw createOAuthError('User cancelled OAuth flow.');\n    }\n    // may throw error is being caught in attemptCompleteOAuthFlow.ts\n    const validatedState = await validateState(state);\n    const oAuthTokenEndpoint = 'https://' + domain + '/oauth2/token';\n    // TODO(v6): check hub events\n    // dispatchAuthEvent(\n    // \t'codeFlow',\n    // \t{},\n    // \t`Retrieving tokens from ${oAuthTokenEndpoint}`\n    // );\n    const codeVerifier = await oAuthStore.loadPKCE();\n    const oAuthTokenBody = {\n        grant_type: 'authorization_code',\n        code,\n        client_id: clientId,\n        redirect_uri: redirectUri,\n        ...(codeVerifier ? { code_verifier: codeVerifier } : {}),\n    };\n    const body = Object.entries(oAuthTokenBody)\n        .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n        .join('&');\n    const { access_token, refresh_token: refreshToken, id_token, error, error_message: errorMessage, token_type, expires_in, } = await (await fetch(oAuthTokenEndpoint, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            [USER_AGENT_HEADER]: userAgentValue,\n        },\n        body,\n    })).json();\n    if (error) {\n        // error is being caught in attemptCompleteOAuthFlow.ts\n        throw createOAuthError(errorMessage ?? error);\n    }\n    const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n    await cacheCognitoTokens({\n        username,\n        AccessToken: access_token,\n        IdToken: id_token,\n        RefreshToken: refreshToken,\n        TokenType: token_type,\n        ExpiresIn: expires_in,\n    });\n    return completeFlow({\n        redirectUri,\n        state: validatedState,\n        preferPrivateSession,\n    });\n};\nconst handleImplicitFlow = async ({ currentUrl, redirectUri, preferPrivateSession, }) => {\n    // hash is `null` if `#` doesn't exist on URL\n    const url = new AmplifyUrl(currentUrl);\n    const { id_token, access_token, state, token_type, expires_in, error_description, error, } = (url.hash ?? '#')\n        .substring(1) // Remove # from returned code\n        .split('&')\n        .map(pairings => pairings.split('='))\n        .reduce((accum, [k, v]) => ({ ...accum, [k]: v }), {\n        id_token: undefined,\n        access_token: undefined,\n        state: undefined,\n        token_type: undefined,\n        expires_in: undefined,\n        error_description: undefined,\n        error: undefined,\n    });\n    if (error) {\n        throw createOAuthError(error_description ?? error);\n    }\n    if (!access_token) {\n        // error is being caught in attemptCompleteOAuthFlow.ts\n        throw createOAuthError('No access token returned from OAuth flow.');\n    }\n    const validatedState = await validateState(state);\n    const username = (access_token && decodeJWT(access_token).payload.username) ?? 'username';\n    await cacheCognitoTokens({\n        username,\n        AccessToken: access_token,\n        IdToken: id_token,\n        TokenType: token_type,\n        ExpiresIn: expires_in,\n    });\n    return completeFlow({\n        redirectUri,\n        state: validatedState,\n        preferPrivateSession,\n    });\n};\nconst completeFlow = async ({ redirectUri, state, preferPrivateSession, }) => {\n    await tokenOrchestrator.setOAuthMetadata({\n        oauthSignIn: true,\n    });\n    await oAuthStore.clearOAuthData();\n    await oAuthStore.storeOAuthSignIn(true, preferPrivateSession);\n    // this should be called before any call that involves `fetchAuthSession`\n    // e.g. `getCurrentUser()` below, so it allows every inflight async calls to\n    //  `fetchAuthSession` can be resolved\n    resolveAndClearInflightPromises();\n    // clear history before sending out final Hub events\n    clearHistory(redirectUri);\n    if (isCustomState(state)) {\n        Hub.dispatch('auth', {\n            event: 'customOAuthState',\n            data: urlSafeDecode(getCustomState(state)),\n        }, 'Auth', AMPLIFY_SYMBOL);\n    }\n    Hub.dispatch('auth', { event: 'signInWithRedirect' }, 'Auth', AMPLIFY_SYMBOL);\n    await dispatchSignedInHubEvent();\n};\nconst isCustomState = (state) => {\n    return /-/.test(state);\n};\nconst getCustomState = (state) => {\n    return state.split('-').splice(1).join('-');\n};\nconst clearHistory = (redirectUri) => {\n    if (typeof window !== 'undefined' && typeof window.history !== 'undefined') {\n        window.history.replaceState(window.history.state, '', redirectUri);\n    }\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport function urlSafeDecode(hex) {\n    const matchArr = hex.match(/.{2}/g) || [];\n    return matchArr.map(char => String.fromCharCode(parseInt(char, 16))).join('');\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Hub } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { oAuthStore } from './oAuthStore';\nimport { resolveAndClearInflightPromises } from './inflightPromise';\nexport const handleFailure = async (error) => {\n    resolveAndClearInflightPromises();\n    await oAuthStore.clearOAuthInflightData();\n    Hub.dispatch('auth', { event: 'signInWithRedirect_failure', data: { error } }, 'Auth', AMPLIFY_SYMBOL);\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthAction, assertOAuthConfig, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../../utils';\nimport { oAuthStore } from './oAuthStore';\nimport { completeOAuthFlow } from './completeOAuthFlow';\nimport { getRedirectUrl } from './getRedirectUrl';\nimport { handleFailure } from './handleFailure';\nexport const attemptCompleteOAuthFlow = async (authConfig) => {\n    try {\n        assertTokenProviderConfig(authConfig);\n        assertOAuthConfig(authConfig);\n        oAuthStore.setAuthConfig(authConfig);\n    }\n    catch (_) {\n        // no-op\n        // This should not happen as Amplify singleton checks the oauth config key\n        // unless the oauth config object doesn't contain required properties\n        return;\n    }\n    // No inflight OAuth\n    if (!(await oAuthStore.loadOAuthInFlight())) {\n        return;\n    }\n    try {\n        const currentUrl = window.location.href;\n        const { loginWith, userPoolClientId } = authConfig;\n        const { domain, redirectSignIn, responseType } = loginWith.oauth;\n        const redirectUri = getRedirectUrl(redirectSignIn);\n        await completeOAuthFlow({\n            currentUrl,\n            clientId: userPoolClientId,\n            domain,\n            redirectUri,\n            responseType,\n            userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n        });\n    }\n    catch (err) {\n        await handleFailure(err);\n    }\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { ADD_OAUTH_LISTENER, isBrowser, } from '@aws-amplify/core/internals/utils';\nimport { attemptCompleteOAuthFlow } from './attemptCompleteOAuthFlow';\n// attach the side effect for handling the completion of an inflight oauth flow\n// this side effect works only on Web\nisBrowser() &&\n    (() => {\n        // add the listener to the singleton for triggering\n        Amplify[ADD_OAUTH_LISTENER](attemptCompleteOAuthFlow);\n    })();\n"],"names":["ConsoleLogger","Error","authErrorMessages","oauthSignInError","message","AuthErrorStrings","OAUTH_ERROR","log","noConfig","DEFAULT_MSG","missingAuthConfig","emptyUsername","EMPTY_USERNAME","invalidUsername","INVALID_USERNAME","emptyPassword","EMPTY_PASSWORD","emptyCode","EMPTY_CODE","signUpError","SIGN_UP_ERROR","noMFA","NO_MFA","invalidMFA","INVALID_MFA","emptyChallengeResponse","EMPTY_CHALLENGE","noUserSession","NO_USER_SESSION","deviceConfig","DEVICE_CONFIG","networkError","NETWORK_ERROR","autoSignInError","AUTOSIGNIN_ERROR","default","createOAuthError","recoverySuggestion","AuthError","name","AuthErrorCodes","OAuthSignInError","AuthErrorTypes","validateState","async","savedState","oAuthStore","loadOAuthState","validatedState","state","undefined","handleCodeFlow","currentUrl","userAgentValue","clientId","redirectUri","domain","preferPrivateSession","_ref2","url","AmplifyUrl","code","searchParams","get","oAuthTokenEndpoint","codeVerifier","loadPKCE","oAuthTokenBody","grant_type","client_id","redirect_uri","code_verifier","body","Object","entries","map","_ref3","k","v","encodeURIComponent","join","access_token","refresh_token","refreshToken","id_token","error","error_message","errorMessage","token_type","expires_in","fetch","method","headers","USER_AGENT_HEADER","json","username","decodeJWT","payload","cacheCognitoTokens","AccessToken","IdToken","RefreshToken","completeFlow","handleImplicitFlow","_ref4","error_description","hash","substring","split","pairings","reduce","accum","_ref5","_ref6","hex","tokenOrchestrator","setOAuthMetadata","oauthSignIn","clearOAuthData","storeOAuthSignIn","resolveAndClearInflightPromises","clearHistory","isCustomState","Hub","dispatch","event","data","getCustomState","match","char","String","fromCharCode","parseInt","AMPLIFY_SYMBOL","dispatchSignedInHubEvent","test","splice","window","history","replaceState","attemptCompleteOAuthFlow","assertTokenProviderConfig","authConfig","assertOAuthConfig","setAuthConfig","_","loadOAuthInFlight","location","href","loginWith","userPoolClientId","redirectSignIn","responseType","oauth","getRedirectUrl","_ref","urlParams","completeOAuthFlow","getAuthUserAgentValue","AuthAction","SignInWithRedirect","err","clearOAuthInflightData","handleFailure","isBrowser","Amplify","ADD_OAUTH_LISTENER"],"sourceRoot":""}