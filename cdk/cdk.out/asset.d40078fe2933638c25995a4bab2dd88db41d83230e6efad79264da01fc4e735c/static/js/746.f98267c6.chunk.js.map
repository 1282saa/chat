{"version":3,"file":"static/js/746.f98267c6.chunk.js","mappings":"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","sources":["utils/clipboard.js","hooks/useChat.js","hooks/useOrchestration.js","hooks/useWebSocket.js","components/AnimatedChatMessage.js","components/ChatInterface.js","components/PromptCardManager.js","components/AdminView.js","components/UserView.js","components/ProjectDetail.js"],"sourcesContent":["import { toast } from \"react-hot-toast\";\n\n/**\n * 텍스트를 클립보드에 복사하는 유틸리티 함수\n * @param {string} text - 복사할 텍스트\n * @param {string} successMessage - 성공 시 표시할 메시지\n * @param {string} errorMessage - 실패 시 표시할 메시지\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyToClipboard = async (\n  text,\n  successMessage = \"클립보드에 복사되었습니다!\",\n  errorMessage = \"복사에 실패했습니다.\"\n) => {\n  try {\n    await navigator.clipboard.writeText(text);\n    toast.success(successMessage);\n    return true;\n  } catch (error) {\n    console.error(\"복사 실패:\", error);\n    toast.error(errorMessage);\n    return false;\n  }\n};\n\n/**\n * 제목만 추출하여 복사하는 함수\n * @param {string} text - 전체 텍스트\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyTitlesOnly = async (text) => {\n  const extractedTitles = extractTitles(text);\n  const textToCopy =\n    extractedTitles.length > 0 ? extractedTitles.join(\"\\n\") : text;\n  return copyToClipboard(textToCopy, \"제목이 클립보드에 복사되었습니다!\");\n};\n\n/**\n * 텍스트에서 제목을 추출하는 함수\n * @param {string} text - 원본 텍스트\n * @returns {Array<string>} - 추출된 제목 배열\n */\nexport const extractTitles = (text) => {\n  const titles = [];\n\n  // 1. 번호 형식: \"1. [제목]\"\n  const numberedMatches = text.match(/^\\d+\\.\\s+(.+?)(?=\\n\\s*-|$)/gm);\n  if (numberedMatches) {\n    numberedMatches.forEach((match) => {\n      const title = match.replace(/^\\d+\\.\\s+/, \"\").trim();\n      if (title && !title.includes(\"품질 평가\")) {\n        titles.push(title);\n      }\n    });\n  }\n\n  // 2. Bullet 형식: \"• [제목]\"\n  if (titles.length === 0) {\n    const bulletMatches = text.match(/• \"([^\"]+)\"/g);\n    if (bulletMatches) {\n      bulletMatches.forEach((match) => {\n        const title = match.replace(/• \"(.+)\"/, \"$1\").trim();\n        if (title) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  // 3. 일반 Bullet 형식\n  if (titles.length === 0) {\n    const simpleBulletMatches = text.match(/• ([^\\n]+)/g);\n    if (simpleBulletMatches) {\n      simpleBulletMatches.forEach((match) => {\n        const title = match.replace(\"• \", \"\").trim();\n        if (title && !title.includes(\"이유:\") && title.length < 100) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  return titles;\n};\n","import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info,\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 사용자 스크롤 상태 추적\n  const [isUserScrolling, setIsUserScrolling] = useState(false);\n  const scrollContainerRef = useRef(null);\n  const lastScrollTopRef = useRef(0);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener,\n  } = useWebSocket(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 사용자 스크롤 감지 함수\n  const handleScroll = useCallback(() => {\n    if (!scrollContainerRef.current) return;\n\n    const container = scrollContainerRef.current;\n    const currentScrollTop = container.scrollTop;\n    const maxScrollTop = container.scrollHeight - container.clientHeight;\n\n    // 사용자가 수동으로 스크롤했는지 감지\n    if (Math.abs(currentScrollTop - lastScrollTopRef.current) > 2) {\n      const isAtBottom = currentScrollTop >= maxScrollTop - 20;\n\n      // 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\n      setIsUserScrolling(!isAtBottom);\n    }\n\n    lastScrollTopRef.current = currentScrollTop;\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    // 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n    if (!isUserScrolling && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [isUserScrolling]);\n\n  // 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log(\"WebSocket 메시지 수신:\", data);\n\n        const currentStreamingId = streamingMessageIdRef.current;\n\n        switch (data.type) {\n          case \"stream_start\":\n            console.log(\"WebSocket 스트리밍 시작\");\n            break;\n\n          case \"progress\":\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n\n          case \"stream_chunk\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent =\n                    updatedMessages[streamingMsgIndex].content || \"\";\n\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true,\n                  };\n                }\n\n                return updatedMessages;\n              });\n              // 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n              if (!isUserScrolling) {\n                scrollToBottom();\n              }\n            }\n            break;\n\n          case \"stream_complete\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n\n          case \"error\":\n            console.error(\"WebSocket 스트리밍 오류:\", data.message);\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content:\n                      \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n            toast.error(data.message);\n            break;\n\n          default:\n            console.log(\"알 수 없는 WebSocket 메시지 타입:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"WebSocket 메시지 파싱 오류:\", error);\n      }\n    };\n\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n          console.log(\n            \"스트리밍 메시지 업데이트 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\n      if (!isUserScrolling) {\n        scrollToBottom();\n      }\n    },\n    [scrollToBottom, isUserScrolling]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date(),\n          };\n          console.log(\n            \"스트리밍 완료 처리 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\n            \"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\",\n            currentStreamingId\n          );\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n\n      // 입력 활성화\n      console.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");\n      setCanSendMessage(true);\n\n      // 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\n      scrollToBottom();\n    },\n    [scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log(\"생성 중단 요청\");\n\n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n\n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n\n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content:\n              updatedMessages[streamingMsgIndex].content +\n              \"\\n\\n[생성이 중단되었습니다]\",\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n    }\n\n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n\n    // orchestration 상태 리셋\n    resetOrchestration();\n\n    toast.success(\"생성이 중단되었습니다\");\n  }, [resetOrchestration]);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"해들 전송 호출:\", {\n      inputValue: inputValue.trim(),\n      isGenerating,\n      canSendMessage,\n    });\n\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"전송 중단: 조건 부족\");\n      return;\n    }\n\n    // 입력 비활성화\n    console.log(\"입력 비활성화\");\n    setCanSendMessage(false);\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages\n      .filter((msg) => !msg.isLoading && !msg.isError && !msg.isStreaming)\n      .map((msg) => ({\n        role: msg.type === \"user\" ? \"user\" : \"assistant\",\n        content: msg.content,\n      }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n\n    console.log(\"대화 히스토리 생성:\", {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6), // 최근 6개만 로그에 표시\n    });\n\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const safePromptCards = Array.isArray(promptCards) ? promptCards : [];\n      const activePromptCards = safePromptCards\n        .filter((card) => card.isActive !== false && card.enabled !== false)\n        .map((card) => ({\n          promptId: card.promptId || card.prompt_id,\n          title: card.title || \"Untitled\",\n          prompt_text: card.prompt_text || card.content || \"\",\n          tags: card.tags || [],\n          isActive: card.isActive !== false,\n          stepOrder: card.stepOrder || 0,\n        }))\n        .filter((card) => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n        .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n\n      console.log(\"대화 전송 데이터 확인:\", {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map((card) => ({\n          id: card.promptId,\n          title: card.title,\n          contentLength: card.prompt_text.length,\n          stepOrder: card.stepOrder,\n          hasContent: !!card.prompt_text.trim(),\n        })),\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");\n\n        const success = wsStartStreaming(\n          userMessage.content,\n          trimmedChatHistory,\n          activePromptCards\n        );\n\n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");\n        }\n      } else {\n        console.log(\"WebSocket 미연결, SSE 모드 사용\");\n      }\n\n      // WebSocket 실패 시 기존 SSE 방식으로 폴백\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: trimmedChatHistory,\n        prompt_cards: activePromptCards,\n      };\n\n      console.log(\"백엔드 전송 데이터 최종 확인:\", orchestrationData);\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        prompt_cards: orchestrationData.prompt_cards,\n        onChunk: handleStreamingResponse,\n        onError: (error) => {\n          console.error(\"스트리밍 오류:\", error);\n\n          const currentStreamingId = streamingMessageIdRef.current;\n          console.log(\"에러 처리 스트리밍 ID:\", currentStreamingId);\n\n          // 오류 메시지로 변환\n          setMessages((prev) => {\n            const updatedMessages = [...prev];\n            const streamingMsgIndex = updatedMessages.findIndex(\n              (msg) => msg.id === currentStreamingId\n            );\n\n            if (streamingMsgIndex !== -1) {\n              updatedMessages[streamingMsgIndex] = {\n                ...updatedMessages[streamingMsgIndex],\n                content:\n                  \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                isLoading: false,\n                isStreaming: false,\n                isError: true,\n                timestamp: new Date(),\n              };\n            }\n\n            return updatedMessages;\n          });\n\n          streamingMessageIdRef.current = null;\n        },\n        onComplete: handleStreamingComplete,\n      };\n\n      // SSE 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n\n      // SSE 스트리밍 완료 후 입력 활성화\n      console.log(\"SSE 스트리밍 완료 - 입력 활성화\");\n      setCanSendMessage(true);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          errorType === \"timeout\"\n            ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\"\n            : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: error.response?.status,\n        },\n      };\n\n      setMessages((prev) => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(\n          (msg) => msg.id !== currentStreamingId\n        );\n        return [...filteredMessages, errorMessage];\n      });\n\n      streamingMessageIdRef.current = null;\n\n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n\n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError,\n    // 스크롤 관련 추가\n    scrollContainerRef,\n    handleScroll,\n    isUserScrolling,\n  };\n};\n","import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history, useStreaming)\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(\n    async (userInput, options = {}) => {\n      if (!userInput.trim()) {\n        toast.error(\"메시지를 입력해주세요.\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        // chat_history, prompt_cards, userInput을 포함하는 data 객체 생성\n        const data = {\n          userInput: userInput,\n          chat_history: options.chat_history || [],\n          prompt_cards: options.prompt_cards || [],\n        };\n\n        console.log(\"🚀 대화 생성 요청 시작:\", {\n          projectId,\n          inputLength: userInput.length,\n          historyLength: data.chat_history.length,\n          promptCardsCount: data.prompt_cards.length,\n          useStreaming: options.useStreaming === true,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 🔧 스트리밍 사용 여부 확인 - 더 안전한 로직\n        if (options.useStreaming === true) {\n          setIsStreaming(true);\n\n          // 스트리밍 콜백 함수 설정\n          const onChunk = options.onChunk || (() => {});\n          const onError = (error) => {\n            console.error(\"🔧 스트리밍 오류 처리:\", error);\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 🔧 개선: 오류 타입에 따른 적절한 메시지\n            if (\n              error.message?.includes(\"Gateway Timeout\") ||\n              error.message?.includes(\"504\") ||\n              error.code === \"ECONNABORTED\"\n            ) {\n              toast.error(\n                \"서버 응답 시간이 초과되었습니다. 요청을 간단히 하거나 잠시 후 다시 시도해주세요.\"\n              );\n            } else if (\n              error.message?.includes(\"CORS\") ||\n              error.message?.includes(\"Network Error\")\n            ) {\n              toast.error(\n                \"서버 연결에 문제가 있습니다. 새로고침 후 다시 시도해주세요.\"\n              );\n            } else {\n              toast.error(\n                \"처리 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\"\n              );\n            }\n\n            if (options.onError) options.onError(error);\n          };\n\n          const onComplete = (response) => {\n            console.log(\"✅ 스트리밍 완료:\", {\n              resultLength: response.result?.length || 0,\n              timestamp: new Date().toISOString(),\n            });\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"COMPLETED\");\n            if (options.onComplete) options.onComplete(response);\n          };\n\n          try {\n            // 🔧 개선: 스트리밍 API 호출 (내부에서 폴백 처리됨)\n            return await generateAPI.generateTitleStream(\n              projectId,\n              data,\n              onChunk,\n              onError,\n              onComplete\n            );\n          } catch (streamError) {\n            console.error(\"🔧 스트리밍 최종 실패:\", streamError);\n\n            // 🔧 스트리밍 완전 실패 시에도 폴백이 내부에서 처리되므로\n            // 여기서는 사용자에게 알림만\n            setIsStreaming(false);\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 최종 실패 메시지\n            toast.error(\n              \"서비스에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n            );\n            throw streamError;\n          }\n        }\n\n        // 🔧 일반 API 호출 (스트리밍 미사용)\n        console.log(\"📄 일반 API 호출 시작...\");\n        const response = await generateAPI.generateTitle(projectId, data);\n\n        console.log(\"✅ 대화 생성 완료:\", {\n          mode: response.mode,\n          message: response.message,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setExecutionStatus(\"COMPLETED\");\n\n        return response;\n      } catch (error) {\n        console.error(\"❌ 제목 생성 실패:\", {\n          error: error.message,\n          code: error.code,\n          status: error.response?.status,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setIsStreaming(false);\n        setExecutionStatus(\"FAILED\");\n\n        // 🔧 개선: 상세한 오류 처리\n        if (error.response?.status === 504) {\n          toast.error(\n            \"서버 응답 시간이 초과되었습니다. 입력을 간소화하거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (\n          error.message?.includes(\"CORS\") ||\n          error.code === \"ERR_NETWORK\"\n        ) {\n          toast.error(\n            \"서버 연결에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\"\n          );\n        } else if (\n          error.response?.status === 400 &&\n          error.response?.data?.setup_required\n        ) {\n          toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");\n        } else if (error.code === \"ECONNABORTED\") {\n          toast.error(\n            \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 500) {\n          toast.error(\n            \"서버에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 403) {\n          toast.error(\"권한이 없습니다. 로그인 상태를 확인해주세요.\");\n        } else if (error.response?.status === 429) {\n          toast.error(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");\n        } else {\n          toast.error(\n            \"처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\"\n          );\n        }\n\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionArn, onComplete, onError) => {\n      // 스트리밍 모드에서는 폴링이 필요 없음\n      if (isStreaming) {\n        return;\n      }\n\n      const poll = async () => {\n        try {\n          const result = await generateAPI.getExecutionStatus(executionArn);\n\n          setExecutionStatus(result.status);\n\n          if (result.status === \"SUCCEEDED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (result.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"처리 실패\"));\n            }\n          } else if (result.status === \"RUNNING\") {\n            // 3초 후 다시 폴링\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"실행 상태 조회 실패:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId, isStreaming]\n  );\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setIsStreaming(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    isStreaming,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n","import { useState, useEffect, useRef, useCallback } from \"react\";\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = (projectId) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(() => {\n    const wsUrl =\n      process.env.REACT_APP_WS_URL ||\n      \"wss://na17isxiri.execute-api.us-east-1.amazonaws.com/prod\";\n    \n    // URL 형식 검증 및 정규화\n    if (!wsUrl.startsWith(\"wss://\") && !wsUrl.startsWith(\"ws://\")) {\n      console.error(\"잘못된 WebSocket URL 형식:\", wsUrl);\n      return null;\n    }\n    \n    // 끝에 슬래시 제거\n    const normalizedUrl = wsUrl.replace(/\\/$/, \"\");\n    console.log(\"WebSocket URL 확인:\", normalizedUrl);\n    console.log(\"환경변수 REACT_APP_WS_URL:\", process.env.REACT_APP_WS_URL);\n    \n    return normalizedUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    // 이미 연결 중이거나 연결된 경우 중복 연결 방지\n    if (wsRef.current?.readyState === WebSocket.OPEN || \n        wsRef.current?.readyState === WebSocket.CONNECTING) {\n      console.log(\"이미 연결된 WebSocket이 있습니다 (readyState:\", wsRef.current.readyState, \")\");\n      return;\n    }\n\n    // 이전 연결이 있다면 정리\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const wsUrl = getWebSocketUrl();\n      \n      if (!wsUrl) {\n        setError(\"유효하지 않은 WebSocket URL\");\n        setIsConnecting(false);\n        return;\n      }\n\n      console.log(\"WebSocket 연결 시도:\", wsUrl);\n      console.log(\"브라우저 WebSocket 지원:\", !!window.WebSocket);\n\n      // 연결 시도 시간 기록\n      window.wsConnectStart = Date.now();\n\n      wsRef.current = new WebSocket(wsUrl);\n\n      // 연결 상태 모니터링\n      const connectionTimeout = setTimeout(() => {\n        if (wsRef.current?.readyState === WebSocket.CONNECTING) {\n          console.error(\"WebSocket 연결 시간 초과\");\n          wsRef.current.close();\n          setError(\"연결 시간이 초과되었습니다\");\n          setIsConnecting(false);\n        }\n      }, 10000); // 10초 타임아웃\n\n      wsRef.current.onopen = (event) => {\n        clearTimeout(connectionTimeout);\n        console.log(\"🟢 WebSocket 연결 성공!\");\n        console.log(\"- Event:\", event);\n        console.log(\"- URL:\", wsRef.current?.url);\n        console.log(\"- Protocol:\", wsRef.current?.protocol);\n        console.log(\"- Extensions:\", wsRef.current?.extensions);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onclose = (event) => {\n        clearTimeout(connectionTimeout);\n        const connectionDuration = Date.now() - (window.wsConnectStart || 0);\n        \n        console.log(\"🔴 WebSocket 연결 종료:\");\n        console.log(\"- Code:\", event.code);\n        console.log(\"- Reason:\", event.reason || \"(no reason provided)\");\n        console.log(\"- WasClean:\", event.wasClean);\n        console.log(\"- Connection duration:\", connectionDuration + \"ms\");\n        \n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 즉시 종료된 경우 (500ms 이내) - 서버 문제\n        if (connectionDuration < 500) {\n          console.error(\"⚠️ WebSocket이 즉시 종료됨 - 서버 문제 가능성\");\n          \n          // 특정 에러 코드에 따른 세분화된 에러 메시지\n          let errorMessage = \"서버 연결에 실패했습니다.\";\n          switch(event.code) {\n            case 1006:\n              errorMessage = \"비정상적인 연결 종료 (네트워크 문제 가능성)\";\n              break;\n            case 1002:\n              errorMessage = \"프로토콜 오류\";\n              break;\n            case 1003:\n              errorMessage = \"지원하지 않는 데이터 타입\";\n              break;\n            case 1011:\n              errorMessage = \"서버 내부 오류\";\n              break;\n          }\n          \n          setError(errorMessage);\n          return;\n        }\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (\n          event.code !== 1000 &&\n          reconnectAttempts.current < maxReconnectAttempts\n        ) {\n          const delay = Math.min(\n            1000 * Math.pow(2, reconnectAttempts.current),\n            30000\n          );\n          console.log(\n            `🔄 ${delay}ms 후 재연결 시도 (${\n              reconnectAttempts.current + 1\n            }/${maxReconnectAttempts})`\n          );\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        } else if (reconnectAttempts.current >= maxReconnectAttempts) {\n          setError(\"최대 재연결 시도 횟수에 도달했습니다.\");\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        clearTimeout(connectionTimeout);\n        console.error(\"💥 WebSocket 오류:\", error);\n        console.log(\"- ReadyState:\", wsRef.current?.readyState);\n        console.log(\"- URL:\", wsRef.current?.url);\n        setError(\"WebSocket 연결 오류가 발생했습니다\");\n        setIsConnecting(false);\n      };\n\n    } catch (err) {\n      console.error(\"💥 WebSocket 생성 실패:\", err);\n      setError(\"WebSocket 연결에 실패했습니다: \" + err.message);\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error(\"WebSocket이 연결되지 않았습니다\");\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback(\n    (userInput, chatHistory = [], promptCards = []) => {\n      if (!isConnected) {\n        setError(\"WebSocket 연결이 필요합니다\");\n        return false;\n      }\n\n      const message = {\n        action: \"stream\",\n        projectId,\n        userInput,\n        chat_history: chatHistory,\n        prompt_cards: promptCards,\n      };\n\n      console.log('WebSocket 메시지 전송:', {\n        action: message.action,\n        projectId: message.projectId,\n        inputLength: userInput.length,\n        historyLength: chatHistory.length,\n        promptCardsCount: promptCards.length\n      });\n\n      return sendMessage(message);\n    },\n    [isConnected, projectId, sendMessage]\n  );\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    // 초기 연결 지연을 통해 React strict mode 이슈 회피\n    const timer = setTimeout(() => {\n      connect();\n    }, 100);\n    \n    return () => {\n      clearTimeout(timer);\n      disconnect();\n    };\n  }, []); // 의존성 배열을 빈 배열로 변경\n\n  // projectId 변경 시 재연결\n  useEffect(() => {\n    if (isConnected && projectId) {\n      console.log('ProjectId 변경됨, 재연결 중:', projectId);\n      disconnect();\n      setTimeout(connect, 200);\n    }\n  }, [projectId]); // connect, disconnect 의존성 제거\n\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener,\n  };\n};\n","import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ReactMarkdown from 'react-markdown';\nimport {\n  ClipboardDocumentIcon,\n  CheckCircleIcon,\n  DocumentDuplicateIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline';\nimport { ChatMessageSkeleton } from './skeleton/SkeletonComponents';\n\n// 스트리밍 표시 컴포넌트\nconst AnimatedStreamingIndicator = () => {\n  return (\n    <motion.div \n      className=\"inline-flex items-center mt-2 px-2 py-1 bg-blue-50 dark:bg-blue-900 rounded-lg text-blue-600 dark:text-blue-400 text-xs font-medium\"\n      initial={{ opacity: 0, scale: 0.8 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <motion.div \n        className=\"relative h-2 w-2 mr-2\"\n        animate={{ scale: [1, 1.2, 1] }}\n        transition={{ repeat: Infinity, duration: 1.5 }}\n      >\n        <div className=\"absolute animate-ping h-2 w-2 rounded-full bg-blue-400 opacity-75\"></div>\n        <div className=\"absolute h-2 w-2 rounded-full bg-blue-600 dark:bg-blue-400\"></div>\n      </motion.div>\n      <motion.span\n        animate={{ opacity: [0.5, 1, 0.5] }}\n        transition={{ repeat: Infinity, duration: 2 }}\n      >\n        스트리밍 중...\n      </motion.span>\n    </motion.div>\n  );\n};\n\n// 간단한 로딩 표시\nconst AnimatedLoadingIndicator = () => {\n  return (\n    <motion.div \n      className=\"flex items-center text-blue-600 dark:text-blue-400 text-sm\"\n      initial={{ opacity: 0, x: -20 }}\n      animate={{ opacity: 1, x: 0 }}\n      transition={{ duration: 0.4 }}\n    >\n      <motion.div \n        className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 dark:border-blue-400 mr-2\"\n        animate={{ rotate: 360 }}\n        transition={{ repeat: Infinity, duration: 1 }}\n      />\n      <span>답변 생성 중...</span>\n    </motion.div>\n  );\n};\n\n// 오류 상세 정보 표시 컴포넌트\nconst AnimatedErrorDetails = ({ errorDetails }) => {\n  if (!errorDetails) return null;\n\n  return (\n    <motion.div \n      className=\"mt-3 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800\"\n      initial={{ opacity: 0, height: 0 }}\n      animate={{ opacity: 1, height: 'auto' }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"flex items-center text-sm text-red-700 dark:text-red-400 mb-2\">\n        <ExclamationTriangleIcon className=\"h-4 w-4 mr-2\" />\n        <span className=\"font-medium\">오류 상세 정보</span>\n      </div>\n      <div className=\"text-xs text-red-600 dark:text-red-400 space-y-1\">\n        <div>\n          <span className=\"font-medium\">유형:</span> {errorDetails.type}\n        </div>\n        {errorDetails.status && (\n          <div>\n            <span className=\"font-medium\">상태:</span> {errorDetails.status}\n          </div>\n        )}\n        {errorDetails.message && (\n          <div>\n            <span className=\"font-medium\">메시지:</span> {errorDetails.message}\n          </div>\n        )}\n      </div>\n    </motion.div>\n  );\n};\n\nconst AnimatedChatMessage = ({\n  message,\n  onCopyMessage,\n  onCopyTitle,\n  copiedMessage,\n}) => {\n  const isUser = message.type === 'user';\n\n  const messageVariants = {\n    initial: { \n      opacity: 0, \n      y: 20,\n      scale: 0.95\n    },\n    animate: { \n      opacity: 1, \n      y: 0,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 25,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const contentVariants = {\n    initial: { opacity: 0, y: 10 },\n    animate: { \n      opacity: 1, \n      y: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 25\n      }\n    }\n  };\n\n  const buttonVariants = {\n    initial: { opacity: 0, scale: 0.8 },\n    animate: { \n      opacity: 1, \n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 20\n      }\n    },\n    hover: { \n      scale: 1.05,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 20\n      }\n    },\n    tap: { \n      scale: 0.95,\n      transition: {\n        type: \"spring\",\n        stiffness: 600,\n        damping: 30\n      }\n    }\n  };\n\n  return (\n    <motion.div \n      className={`group relative ${isUser ? 'ml-8' : 'mr-8'} mb-6`}\n      variants={messageVariants}\n      initial=\"initial\"\n      animate=\"animate\"\n    >\n      <div className={`flex ${isUser ? 'justify-end' : 'justify-start'}`}>\n        {isUser ? (\n          // 사용자 메시지 - 디자인된 박스\n          <motion.div \n            className=\"max-w-[85%] rounded-lg px-6 py-4 bg-blue-600 dark:bg-blue-700 text-white\"\n            variants={contentVariants}\n            whileHover={{ scale: 1.01 }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n          >\n            <motion.div \n              className=\"text-base font-medium whitespace-pre-wrap leading-relaxed\"\n              variants={contentVariants}\n            >\n              {message.content}\n            </motion.div>\n            <motion.div \n              className=\"text-xs mt-3 font-medium text-blue-100 dark:text-blue-200\"\n              variants={contentVariants}\n            >\n              {message.timestamp?.toLocaleTimeString() || ''}\n            </motion.div>\n          </motion.div>\n        ) : (\n          // AI 메시지 - 박스 없이 깔끔하게\n          <motion.div \n            className=\"max-w-[85%] w-full\"\n            variants={contentVariants}\n          >\n            {/* AI 응답 내용 */}\n            <motion.div \n              className=\"whitespace-pre-wrap leading-relaxed text-gray-800 dark:text-gray-200\"\n              variants={contentVariants}\n            >\n              {message.isError ? (\n                <motion.div\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ duration: 0.4 }}\n                >\n                  <div className=\"text-red-600 dark:text-red-400 text-base\">\n                    {message.content}\n                  </div>\n                  <AnimatedErrorDetails errorDetails={message.errorDetails} />\n                </motion.div>\n              ) : message.isLoading ? (\n                <div>\n                  {message.isStreaming ? (\n                    // 스트리밍 메시지 표시\n                    <div>\n                      {message.content ? (\n                        <div \n                          className=\"prose prose-base max-w-none prose-headings:text-gray-900 dark:prose-headings:text-white prose-p:text-gray-800 dark:prose-p:text-gray-200 prose-strong:text-gray-900 dark:prose-strong:text-white prose-ul:text-gray-800 dark:prose-ul:text-gray-200 prose-li:text-gray-800 dark:prose-li:text-gray-200 prose-code:text-gray-800 dark:prose-code:text-gray-200 prose-pre:bg-gray-50 dark:prose-pre:bg-gray-800\"\n                        >\n                          <ReactMarkdown>{message.content}</ReactMarkdown>\n                        </div>\n                      ) : (\n                        <div className=\"text-blue-600 dark:text-blue-400 text-base font-medium\">\n                          응답을 생성하는 중...\n                        </div>\n                      )}\n                      <AnimatedStreamingIndicator />\n                    </div>\n                  ) : (\n                    // 스켈레톤 UI 표시\n                    <ChatMessageSkeleton isUser={false} />\n                  )}\n                </div>\n              ) : (\n                <div \n                  className=\"prose prose-base max-w-none prose-headings:text-gray-900 dark:prose-headings:text-white prose-p:text-gray-800 dark:prose-p:text-gray-200 prose-strong:text-gray-900 dark:prose-strong:text-white prose-ul:text-gray-800 dark:prose-ul:text-gray-200 prose-li:text-gray-800 dark:prose-li:text-gray-200 prose-code:text-gray-800 dark:prose-code:text-gray-200 prose-pre:bg-gray-50 dark:prose-pre:bg-gray-800\"\n                >\n                  <ReactMarkdown>{message.content}</ReactMarkdown>\n                </div>\n              )}\n            </motion.div>\n\n            {/* 제목 복사 버튼들 */}\n            <AnimatePresence>\n              {message.titles && (\n                <motion.div \n                  className=\"mt-4 pt-3 border-t border-gray-200 dark:border-gray-700\"\n                  initial={{ opacity: 0, height: 0 }}\n                  animate={{ opacity: 1, height: 'auto' }}\n                  exit={{ opacity: 0, height: 0 }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <div className=\"flex flex-wrap gap-2\">\n                    {message.titles.map((title, index) => (\n                      <motion.button\n                        key={index}\n                        onClick={() => onCopyTitle(title, message.id, index)}\n                        className={`flex items-center px-3 py-1.5 rounded-lg text-xs font-medium transition-colors ${\n                          copiedMessage === `${message.id}_title_${index}`\n                            ? 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-400 border border-green-200 dark:border-green-700'\n                            : 'bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600'\n                        }`}\n                        variants={buttonVariants}\n                        initial=\"initial\"\n                        animate=\"animate\"\n                        whileHover=\"hover\"\n                        whileTap=\"tap\"\n                        custom={index}\n                      >\n                        <motion.div\n                          animate={copiedMessage === `${message.id}_title_${index}` ? { scale: [1, 1.2, 1] } : {}}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {copiedMessage === `${message.id}_title_${index}` ? (\n                            <CheckCircleIcon className=\"h-3 w-3 mr-1\" />\n                          ) : (\n                            <DocumentDuplicateIcon className=\"h-3 w-3 mr-1\" />\n                          )}\n                        </motion.div>\n                        제목 {index + 1} 복사\n                      </motion.button>\n                    ))}\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* 복사 버튼 및 성능 정보 표시 */}\n            {!message.isLoading && (\n              <div \n                className=\"mt-4 flex items-center justify-between\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  {/* 복사 버튼 */}\n                  <motion.button\n                    onClick={() => onCopyMessage(message.content, message.id)}\n                    className={`flex items-center px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                      copiedMessage === message.id\n                        ? 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-400 border border-green-200 dark:border-green-700'\n                        : 'bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 border border-gray-200 dark:border-gray-600'\n                    }`}\n                    variants={buttonVariants}\n                    whileHover=\"hover\"\n                    whileTap=\"tap\"\n                  >\n                    <motion.div\n                      animate={copiedMessage === message.id ? { scale: [1, 1.2, 1] } : {}}\n                      transition={{ duration: 0.3 }}\n                    >\n                      {copiedMessage === message.id ? (\n                        <CheckCircleIcon className=\"h-4 w-4 mr-2\" />\n                      ) : (\n                        <ClipboardDocumentIcon className=\"h-4 w-4 mr-2\" />\n                      )}\n                    </motion.div>\n                    {copiedMessage === message.id ? '복사됨!' : '복사하기'}\n                  </motion.button>\n\n                  {/* 성능 정보 표시 (AI 응답인 경우) */}\n                  {message.performance_metrics && (\n                    <div \n                      className=\"text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 px-2 py-1 rounded\"\n                    >\n                      처리시간: {message.performance_metrics.total_time}초\n                    </div>\n                  )}\n                </div>\n\n                {/* 타임스탬프 */}\n                <div \n                  className=\"text-xs text-gray-500 dark:text-gray-400\"\n                >\n                  {message.timestamp?.toLocaleTimeString() || ''}\n                </div>\n              </div>\n            )}\n          </motion.div>\n        )}\n      </div>\n    </motion.div>\n  );\n};\n\nexport default AnimatedChatMessage;","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  PaperAirplaneIcon,\n  DocumentPlusIcon,\n  XMarkIcon,\n  ChatBubbleLeftRightIcon,\n  SparklesIcon,\n  StopIcon,\n} from \"@heroicons/react/24/outline\";\nimport { useChat } from \"../hooks/useChat\";\nimport AnimatedChatMessage from \"./AnimatedChatMessage\";\n\nconst ChatInterface = ({ projectId, projectName, promptCards = [] }) => {\n  const navigate = useNavigate();\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    canSendMessage,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    wsConnected,\n    wsConnecting,\n    wsError,\n    // 스크롤 관련 추가\n    scrollContainerRef,\n    handleScroll,\n    isUserScrolling,\n  } = useChat(projectId, projectName, promptCards);\n\n  const handleFileUpload = (event) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === \"text/plain\") {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setInputValue(e.target?.result || \"\");\n        setUploadedFile(file);\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n    setDragOver(false);\n    const files = event.dataTransfer.files;\n    if (files.length > 0) {\n      const file = files[0];\n      if (file.type === \"text/plain\") {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          setInputValue(e.target?.result || \"\");\n          setUploadedFile(file);\n        };\n        reader.readAsText(file);\n      }\n    }\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = () => {\n    setDragOver(false);\n  };\n\n  const removeFile = () => {\n    setUploadedFile(null);\n    setInputValue(\"\");\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-50 dark:bg-gray-900 transition-colors duration-200\">\n      {/* 메시지 영역 */}\n      <div\n        ref={scrollContainerRef}\n        onScroll={handleScroll}\n        className=\"flex-1 overflow-y-auto px-6 py-6 min-h-0 bg-gray-50 dark:bg-gray-900\"\n      >\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {messages.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-24 mt-12\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-2xl shadow-md p-8 max-w-2xl w-full transition-colors duration-200\">\n                <div className=\"flex justify-center mb-6\">\n                  <div className=\"bg-blue-100 dark:bg-blue-900 p-3 rounded-full\">\n                    <ChatBubbleLeftRightIcon className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                </div>\n                <h2 className=\"text-xl font-semibold text-center text-gray-800 dark:text-white mb-4\">\n                  AI 헤드라인 어시스턴트\n                </h2>\n                <p className=\"text-gray-600 dark:text-gray-300 text-center mb-6\">\n                  본문을 입력하면 AI가 최적의 헤드라인을 제안해 드립니다.\n                </p>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"mr-3 mt-1\">\n                      <SparklesIcon className=\"h-5 w-5 text-blue-500 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        <span className=\"font-medium\">시작하는 방법:</span> 아래\n                        입력창에 본문을 붙여넣고 전송 버튼을 클릭하세요\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"mr-3 mt-1\">\n                      <SparklesIcon className=\"h-5 w-5 text-blue-500 dark:text-blue-400\" />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                        <span className=\"font-medium\">프롬프트 카드:</span>{\" \"}\n                        관리자 모드에서 프롬프트 카드를 작성하여 제목을\n                        생성하세요\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            messages.map((message) => (\n              <AnimatedChatMessage\n                key={message.id}\n                message={message}\n                onCopyMessage={handleCopyMessage}\n                onCopyTitle={handleCopyTitle}\n                copiedMessage={copiedMessage}\n              />\n            ))\n          )}\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n\n      {/* 입력 영역 */}\n      <div className=\"flex-shrink-0 px-6 py-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* 업로드된 파일 표시 */}\n          {uploadedFile && (\n            <div className=\"mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <DocumentPlusIcon className=\"h-4 w-4 text-blue-600\" />\n                <span className=\"text-sm text-blue-700\">\n                  {uploadedFile.name}\n                </span>\n              </div>\n              <button\n                onClick={removeFile}\n                className=\"text-blue-600 hover:text-blue-800 p-1\"\n              >\n                <XMarkIcon className=\"h-4 w-4\" />\n              </button>\n            </div>\n          )}\n\n          <div\n            className=\"bg-white dark:bg-gray-800 rounded-[20px] shadow-md p-4 relative transition-colors duration-200\"\n            style={{\n              boxShadow: \"rgba(0, 0, 0, 0.1) 0px 4px 12px 0px\",\n              border: \"1px solid rgba(112, 115, 124, 0.08)\",\n              minHeight: \"128px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: \"24px\",\n            }}\n            onDrop={handleDrop}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n          >\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={inputRef}\n                value={inputValue}\n                onChange={(e) => setInputValue(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder={\n                  isGenerating\n                    ? \"생성 중입니다...\"\n                    : \"기사 본문을 입력하세요...\"\n                }\n                className={`w-full pr-14 pl-2 py-2 border-0 focus:outline-none resize-none transition-colors ${\n                  dragOver\n                    ? \"bg-blue-50 dark:bg-blue-900\"\n                    : isGenerating\n                    ? \"bg-gray-50 dark:bg-gray-700\"\n                    : \"bg-white dark:bg-gray-800 text-gray-900 dark:text-white\"\n                }`}\n                rows={1}\n                style={{\n                  minHeight: \"24px\",\n                  maxHeight: \"150px\",\n                  lineHeight: \"1.4\",\n                  overflowY: \"auto\",\n                  whiteSpace: \"pre-wrap\",\n                  fontSize: \"16px\",\n                  fontWeight: \"400\",\n                  color: isGenerating ? \"#9CA3AF\" : \"#171719\",\n                }}\n                disabled={isGenerating}\n              />\n\n              {/* 전송/중단 버튼 - 입력창 내부에 위치 */}\n              <div className=\"absolute right-3 bottom-3 flex items-center gap-2\">\n                {isGenerating && (\n                  <button\n                    onClick={handleStopGeneration}\n                    className=\"flex-shrink-0 bg-red-600 text-white p-2 rounded-full hover:bg-red-700 transition-colors flex items-center justify-center\"\n                    style={{ width: \"32px\", height: \"32px\" }}\n                    title=\"생성 중단\"\n                  >\n                    <StopIcon className=\"h-4 w-4\" />\n                  </button>\n                )}\n                <button\n                  onClick={handleSendMessage}\n                  disabled={!inputValue.trim() || isGenerating}\n                  className=\"flex-shrink-0 bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center\"\n                  style={{ width: \"32px\", height: \"32px\" }}\n                  title={\n                    isGenerating\n                      ? \"생성 중...\"\n                      : wsConnected\n                      ? \"실시간 스트리밍 사용 가능\"\n                      : \"일반 모드 (WebSocket 연결 안됨)\"\n                  }\n                >\n                  {isGenerating ? (\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                  ) : (\n                    <PaperAirplaneIcon className=\"h-5 w-5\" />\n                  )}\n                </button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2 text-xs text-gray-400 dark:text-gray-500\">\n                <span>{inputValue.length}자</span>\n                {inputValue.length < 50 && <span>📝 50자 이상 권장</span>}\n              </div>\n\n              {/* WebSocket 연결 상태 및 스크롤 상태 표시 */}\n              <div className=\"flex items-center gap-3 text-xs\">\n                {/* 스크롤 상태 표시 */}\n                {isUserScrolling && (\n                  <div className=\"flex items-center gap-1 text-blue-600 dark:text-blue-400\">\n                    <span>📜</span>\n                    <span>자유 스크롤</span>\n                  </div>\n                )}\n\n                {/* WebSocket 연결 상태 */}\n                {wsConnecting ? (\n                  <div className=\"flex items-center gap-1 text-yellow-600 dark:text-yellow-400\">\n                    <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-yellow-600\"></div>\n                    <span>연결 중...</span>\n                  </div>\n                ) : wsConnected ? (\n                  <div className=\"flex items-center gap-1 text-green-600 dark:text-green-400\">\n                    <div className=\"w-2 h-2 bg-green-600 rounded-full\"></div>\n                    <span>실시간 스트리밍</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-1 text-gray-500 dark:text-gray-400\">\n                    <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                    <span>일반 모드</span>\n                  </div>\n                )}\n                {wsError && (\n                  <div\n                    className=\"text-red-500 dark:text-red-400 text-xs\"\n                    title={wsError}\n                  >\n                    ⚠️\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n","import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport {\n  PlusIcon,\n  PencilIcon,\n  TrashIcon,\n  XMarkIcon,\n  SparklesIcon,\n  DocumentTextIcon,\n  HashtagIcon,\n} from \"@heroicons/react/24/outline\";\nimport { promptCardAPI, handleAPIError } from \"../services/api\";\nimport ChatInterface from \"./ChatInterface\";\n\nconst PromptCardManager = ({ projectId, projectName }) => {\n  const [promptCards, setPromptCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [editingCard, setEditingCard] = useState(null);\n  const [showForm, setShowForm] = useState(false);\n\n  useEffect(() => {\n    loadPromptCards();\n  }, [projectId]);\n\n  const loadPromptCards = async () => {\n    try {\n      setLoading(true);\n      const response = await promptCardAPI.getPromptCards(projectId, true);\n      setPromptCards(response.promptCards || []);\n    } catch (error) {\n      console.error(\"프롬프트 카드 로드 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSaveCard = async (cardData) => {\n    try {\n      // 백엔드에 맞는 형식으로 데이터 변환\n      const backendData = {\n        title: cardData.title,\n        prompt_text: cardData.prompt_text,\n        tags: cardData.tags || [],\n        isActive: cardData.enabled !== false, // enabled를 isActive로 변환\n      };\n\n      if (editingCard) {\n        // 수정\n        await promptCardAPI.updatePromptCard(\n          projectId,\n          editingCard.promptId || editingCard.prompt_id,\n          backendData\n        );\n        toast.success(\"프롬프트가 수정되었습니다\");\n      } else {\n        // 새로 생성\n        await promptCardAPI.createPromptCard(projectId, backendData);\n        toast.success(\"프롬프트가 생성되었습니다\");\n      }\n\n      setShowForm(false);\n      setEditingCard(null);\n\n      // 백엔드 저장 성공 후 전체 데이터 다시 로드 (페이지 새로고침 없이)\n      await loadPromptCards();\n    } catch (error) {\n      console.error(\"프롬프트 저장 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n    }\n  };\n\n  const handleDeleteCard = async (promptId) => {\n    if (!window.confirm(\"정말로 이 프롬프트를 삭제하시겠습니까?\")) {\n      return;\n    }\n\n    try {\n      // 백엔드에서 삭제 먼저 실행\n      await promptCardAPI.deletePromptCard(projectId, promptId);\n      toast.success(\"프롬프트가 삭제되었습니다\");\n\n      // 삭제 성공 후 UI에서 제거\n      setPromptCards((prev) =>\n        prev.filter((card) => (card.promptId || card.prompt_id) !== promptId)\n      );\n\n      // 추가로 전체 데이터 다시 로드\n      await loadPromptCards();\n    } catch (error) {\n      console.error(\"프롬프트 삭제 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n    }\n  };\n\n  const handleEditCard = async (card) => {\n    console.log(\"프롬프트 수정 버튼 클릭:\", card);\n\n    // 프롬프트 텍스트 내용이 없으면 S3에서 가져오기\n    let cardWithContent = { ...card };\n\n    if (!card.prompt_text && !card.content) {\n      try {\n        console.log(\"S3에서 프롬프트 내용 로드 중...\");\n        const contentResponse = await promptCardAPI.getPromptContent(\n          projectId,\n          card.promptId || card.prompt_id\n        );\n        cardWithContent.prompt_text = contentResponse.content;\n        console.log(\n          \"S3에서 프롬프트 내용 로드 완료:\",\n          contentResponse.content?.length,\n          \"문자\"\n        );\n      } catch (error) {\n        console.error(\"프롬프트 내용 로드 실패:\", error);\n        toast.error(\"프롬프트 내용을 불러올 수 없습니다\");\n        return;\n      }\n    }\n\n    setEditingCard(cardWithContent);\n    setShowForm(true);\n  };\n\n  const handleNewCard = () => {\n    console.log(\"새 프롬프트 추가 버튼 클릭\");\n    setEditingCard(null);\n    setShowForm(true);\n  };\n\n  const handleCancelForm = () => {\n    console.log(\"모달 취소 버튼 클릭\");\n    setShowForm(false);\n    setEditingCard(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-full bg-gray-50 dark:bg-gray-900\">\n      {/* 채팅 인터페이스 */}\n      <div className=\"flex-1 min-w-0\">\n        <ChatInterface\n          projectId={projectId}\n          projectName={projectName}\n          promptCards={promptCards}\n        />\n      </div>\n\n      {/* 프롬프트 관리 사이드바 (우측) */}\n      <div className=\"w-80 bg-white dark:bg-gray-800 border-l border-gray-100 dark:border-gray-700 flex flex-col shadow-sm flex-shrink-0\">\n        <div className=\"flex-shrink-0 p-4 border-b border-gray-100 dark:border-gray-700 bg-gray-50 dark:bg-gray-800\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-gray-800 dark:text-white\">\n              프롬프트 카드\n            </h2>\n            <button\n              onClick={handleNewCard}\n              className=\"inline-flex items-center px-4 py-2 text-sm bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors shadow-md hover:shadow-lg font-medium\"\n            >\n              <PlusIcon className=\"h-4 w-4 mr-1.5\" />\n              새 추가\n            </button>\n          </div>\n        </div>\n\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-3 min-h-0\">\n          {promptCards.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <SparklesIcon className=\"h-12 w-12 text-gray-300 dark:text-gray-600 mx-auto mb-4\" />\n              <p className=\"text-gray-500 dark:text-gray-400 mb-4\">프롬프트 카드가 없습니다</p>\n              <button\n                onClick={handleNewCard}\n                className=\"inline-flex items-center px-4 py-2 bg-blue-600 dark:bg-blue-500 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-600 transition-colors shadow-sm font-medium\"\n              >\n                <PlusIcon className=\"h-4 w-4 mr-1.5\" />\n                첫 번째 카드 만들기\n              </button>\n            </div>\n          ) : (\n            promptCards.map((card) => (\n              <PromptCard\n                key={card.promptId || card.prompt_id}\n                card={card}\n                onEdit={() => handleEditCard(card)}\n                onDelete={() =>\n                  handleDeleteCard(card.promptId || card.prompt_id)\n                }\n              />\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* 프롬프트 편집 폼 모달 */}\n      {showForm && (\n        <PromptFormModal\n          isOpen={showForm}\n          onSubmit={handleSaveCard}\n          onCancel={handleCancelForm}\n          initialData={editingCard}\n        />\n      )}\n    </div>\n  );\n};\n\n// 간단한 프롬프트 카드 컴포넌트\nconst PromptCard = ({ card, onEdit, onDelete }) => {\n  return (\n    <div className=\"bg-white dark:bg-gray-700 rounded-xl p-4 flex flex-col space-y-3 border border-gray-200 dark:border-gray-600 hover:shadow-lg hover:border-blue-400 dark:hover:border-blue-500 transition-all duration-200\">\n      {/* Header: Title and Actions */}\n      <div className=\"flex items-start justify-between\">\n        <h3 className=\"font-semibold text-sm text-gray-800 dark:text-gray-200 leading-tight pr-2 flex-1\">\n          {card.title || `프롬프트 ${card.promptId || card.prompt_id}`}\n        </h3>\n        <div className=\"flex items-center flex-shrink-0\">\n          <button\n            onClick={async (e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              await onEdit();\n            }}\n            className=\"p-1 text-gray-500 dark:text-gray-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-blue-600 dark:hover:text-blue-400 transition-colors\"\n          >\n            <PencilIcon className=\"h-4 w-4\" />\n          </button>\n          <button\n            onClick={onDelete}\n            className=\"p-1 text-gray-500 dark:text-gray-400 rounded-full hover:bg-gray-100 dark:hover:bg-gray-600 hover:text-red-600 dark:hover:text-red-400 transition-colors\"\n          >\n            <TrashIcon className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Tags */}\n      {card.tags && card.tags.length > 0 && (\n        <div className=\"flex flex-wrap gap-1.5\">\n          {card.tags.slice(0, 3).map((tag) => (\n            <span\n              key={tag}\n              className=\"px-2 py-0.5 text-xs bg-gray-100 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-full\"\n            >\n              #{tag}\n            </span>\n          ))}\n          {card.tags.length > 3 && (\n            <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n              +{card.tags.length - 3}\n            </span>\n          )}\n        </div>\n      )}\n\n      {/* Content Snippet */}\n      {(card.content || card.prompt_text) && (\n        <p className=\"text-xs text-gray-600 dark:text-gray-300 leading-relaxed line-clamp-2\">\n          {card.content || card.prompt_text}\n        </p>\n      )}\n\n      {/* Date */}\n      <div className=\"flex items-end justify-between pt-2 text-xs text-gray-400 dark:text-gray-500\">\n        <span className=\"flex-shrink-0\">\n          생성:{\" \"}\n          {new Date(card.createdAt || new Date()).toLocaleDateString(\"ko-KR\", {\n            year: \"2-digit\",\n            month: \"2-digit\",\n            day: \"2-digit\",\n          })}\n        </span>\n        {card.updatedAt &&\n          new Date(card.updatedAt) > new Date(card.createdAt) && (\n            <span className=\"flex-shrink-0 ml-2\">\n              수정:{\" \"}\n              {new Date(card.updatedAt).toLocaleDateString(\"ko-KR\", {\n                year: \"2-digit\",\n                month: \"2-digit\",\n                day: \"2-digit\",\n              })}\n            </span>\n          )}\n      </div>\n    </div>\n  );\n};\n\n// 간단한 프롬프트 편집 폼 모달\nconst PromptFormModal = ({ isOpen, onSubmit, onCancel, initialData }) => {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    prompt_text: \"\",\n    tags: [],\n    enabled: true,\n  });\n  const [tagInput, setTagInput] = useState(\"\");\n\n  useEffect(() => {\n    if (initialData) {\n      setFormData({\n        title: initialData.title || \"\",\n        prompt_text: initialData.prompt_text || initialData.content || \"\",\n        tags: Array.isArray(initialData.tags) ? [...initialData.tags] : [],\n        enabled:\n          initialData.enabled !== false && initialData.isActive !== false, // isActive도 체크\n      });\n    }\n  }, [initialData]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!formData.prompt_text.trim()) {\n      toast.error(\"프롬프트 내용을 입력해주세요\");\n      return;\n    }\n    onSubmit(formData);\n  };\n\n  const handleChange = (field, value) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleTagAdd = (e) => {\n    if (e.key === \"Enter\" && tagInput.trim()) {\n      e.preventDefault();\n      const newTag = tagInput.trim();\n      if (!formData.tags.includes(newTag) && formData.tags.length < 5) {\n        setFormData((prev) => ({\n          ...prev,\n          tags: [...prev.tags, newTag],\n        }));\n      }\n      setTagInput(\"\");\n    }\n  };\n\n  const handleTagRemove = (tagToRemove) => {\n    setFormData((prev) => ({\n      ...prev,\n      tags: prev.tags.filter((tag) => tag !== tagToRemove),\n    }));\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl max-w-3xl w-full max-h-[90vh] overflow-hidden shadow-2xl\">\n        {/* 헤더 */}\n        <div className=\"border-b border-gray-200 p-6 bg-white\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center\">\n                {initialData ? (\n                  <PencilIcon className=\"h-6 w-6 text-gray-600\" />\n                ) : (\n                  <PencilIcon className=\"h-6 w-6 text-gray-600\" />\n                )}\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  {initialData ? \"프롬프트 편집\" : \"새 프롬프트\"}\n                </h3>\n                <p className=\"text-sm text-gray-500\">\n                  {initialData\n                    ? \"프롬프트 내용을 수정하세요\"\n                    : \"새로운 프롬프트를 작성하세요\"}\n                </p>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100 transition-colors\"\n            >\n              <XMarkIcon className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n\n        <form\n          onSubmit={handleSubmit}\n          className=\"p-6 space-y-6 overflow-y-auto max-h-[calc(90vh-120px)]\"\n        >\n          {/* 제목 필드 */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center text-sm font-semibold text-gray-800\">\n              프롬프트 제목\n            </label>\n            <input\n              type=\"text\"\n              value={formData.title}\n              onChange={(e) => handleChange(\"title\", e.target.value)}\n              className=\"w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-4 focus:ring-blue-100 transition-all duration-200 text-gray-800 placeholder-gray-400\"\n              placeholder=\"프롬프트 제목을 입력하세요\"\n            />\n          </div>\n\n          {/* 해시태그 */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center text-sm font-semibold text-gray-800\">\n              <HashtagIcon className=\"h-4 w-4 mr-2 text-gray-500\" />\n              태그\n            </label>\n            <div className=\"space-y-3\">\n              {/* 태그 입력 */}\n              <input\n                type=\"text\"\n                value={tagInput}\n                onChange={(e) => setTagInput(e.target.value)}\n                onKeyPress={handleTagAdd}\n                className=\"w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-4 focus:ring-blue-100 transition-all duration-200\"\n                placeholder=\"태그를 입력하고 Enter를 누르세요 (최대 5개)\"\n                maxLength={20}\n                disabled={formData.tags.length >= 5}\n              />\n\n              {/* 태그 목록 */}\n              {formData.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-2\">\n                  {formData.tags.map((tag, index) => (\n                    <span\n                      key={index}\n                      className=\"inline-flex items-center px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full\"\n                    >\n                      #{tag}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleTagRemove(tag)}\n                        className=\"ml-2 text-blue-600 hover:text-blue-800\"\n                      >\n                        <XMarkIcon className=\"h-3 w-3\" />\n                      </button>\n                    </span>\n                  ))}\n                </div>\n              )}\n\n              {/* 도움말 텍스트 */}\n              <p className=\"text-xs text-gray-500\">\n                태그는 프롬프트를 분류하고 검색하는 데 도움이 됩니다. 각 태그는\n                20자 이내로 입력하세요.\n              </p>\n            </div>\n          </div>\n\n          {/* 프롬프트 내용 */}\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center text-sm font-semibold text-gray-800\">\n              프롬프트 내용 <span className=\"text-red-500 ml-1\">*</span>\n            </label>\n            <div className=\"relative\">\n              <textarea\n                value={formData.prompt_text}\n                onChange={(e) => handleChange(\"prompt_text\", e.target.value)}\n                rows={10}\n                className=\"w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:border-green-500 focus:ring-4 focus:ring-green-100 transition-all duration-200 text-gray-800 placeholder-gray-400 resize-none\"\n                placeholder=\"프롬프트 내용을 입력하세요\"\n                required\n              />\n              <div className=\"absolute bottom-3 right-3 text-xs text-gray-500 flex items-center space-x-2\">\n                <span>{formData.prompt_text.length} 자</span>\n                <span className=\"text-gray-400\">/ 📝 50자 이상 권장</span>\n              </div>\n            </div>\n          </div>\n\n          {/* 활성화 옵션 */}\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"enabled\"\n              checked={formData.enabled}\n              onChange={(e) => handleChange(\"enabled\", e.target.checked)}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label htmlFor=\"enabled\" className=\"ml-2 text-sm text-gray-700\">\n              활성화\n            </label>\n          </div>\n\n          {/* 버튼 영역 */}\n          <div className=\"flex justify-end space-x-3 pt-6 border-t border-gray-200\">\n            <button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium\"\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              disabled={!formData.prompt_text.trim()}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium\"\n            >\n              {initialData ? \"수정\" : \"생성\"}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default PromptCardManager;\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PromptCardManager from \"./PromptCardManager\";\n\nconst AdminView = ({ projectId, projectName }) => {\n  return (\n    <div className=\"h-full\">\n      <PromptCardManager projectId={projectId} projectName={projectName} />\n    </div>\n  );\n};\n\nexport default AdminView;\n","import React, { useState, useEffect } from \"react\";\nimport { promptCardAPI } from \"../services/api\";\nimport ChatInterface from \"./ChatInterface\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { ChatInterfaceSkeleton } from \"./skeleton/SkeletonComponents\";\n\nconst UserView = ({ projectId, projectName }) => {\n  const [promptCards, setPromptCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadPromptCards = async () => {\n      try {\n        setLoading(true);\n        // AdminView와 동일하게 includeContent=true로 설정하여 프롬프트 내용을 포함하여 로드\n        const response = await promptCardAPI.getPromptCards(projectId, true);\n        // 응답 구조가 AdminView와 동일하게 처리\n        setPromptCards(response.promptCards || []);\n      } catch (error) {\n        console.warn(\"프롬프트 카드 로드 실패:\", error);\n        setPromptCards([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPromptCards();\n  }, [projectId]);\n\n  if (loading) {\n    return <ChatInterfaceSkeleton />;\n  }\n\n  return (\n    <div className=\"h-full bg-white\">\n      <ChatInterface\n        projectId={projectId}\n        projectName={projectName}\n        promptCards={promptCards}\n      />\n    </div>\n  );\n};\n\nexport default UserView;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-hot-toast\";\nimport { ArrowLeftIcon } from \"@heroicons/react/24/outline\";\nimport { projectAPI, handleAPIError } from \"../services/api\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport AdminView from \"./AdminView\";\nimport UserView from \"./UserView\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { ChatInterfaceSkeleton } from \"./skeleton/SkeletonComponents\";\n\nconst ProjectDetail = () => {\n  const { projectId } = useParams();\n  const navigate = useNavigate();\n  const { mode, setMode } = useApp();\n  const [project, setProject] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadProjectData();\n  }, [projectId, navigate]);\n\n  const loadProjectData = async () => {\n    try {\n      setLoading(true);\n      const projectData = await projectAPI.getProject(projectId);\n      setProject(projectData);\n    } catch (error) {\n      console.error(\"프로젝트 로드 실패:\", error);\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n      navigate(\"/projects\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleBackNavigation = () => {\n    navigate(\"/projects\");\n  };\n\n  if (loading) {\n    return <ChatInterfaceSkeleton />;\n  }\n\n  if (!project) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n            프로젝트를 찾을 수 없습니다\n          </h2>\n          <button\n            onClick={() => navigate(\"/projects\")}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            <ArrowLeftIcon className=\"h-5 w-5 mr-2\" />\n            프로젝트 목록으로\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-50\">\n      {/* 상단 네비게이션 바 */}\n      <div className=\"flex-shrink-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 py-3 transition-colors duration-200\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={handleBackNavigation}\n              className=\"inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200\"\n            >\n              <ArrowLeftIcon className=\"h-4 w-4 mr-2\" />\n              목록으로\n            </button>\n            <div className=\"flex items-center\">\n              <h1 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                {project.name}\n              </h1>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            {/* 모드 전환 버튼 */}\n            <div className=\"flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n              <button\n                onClick={() => setMode('user')}\n                className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors ${\n                  mode === 'user'\n                    ? 'bg-white dark:bg-gray-600 text-blue-600 dark:text-blue-400 shadow-sm'\n                    : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n                }`}\n              >\n                사용자\n              </button>\n              <button\n                onClick={() => setMode('admin')}\n                className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors ${\n                  mode === 'admin'\n                    ? 'bg-white dark:bg-gray-600 text-blue-600 dark:text-blue-400 shadow-sm'\n                    : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n                }`}\n              >\n                관리자\n              </button>\n            </div>\n            \n            <div className=\"flex items-center gap-2 px-3 py-1 bg-green-50 dark:bg-green-900 border border-green-100 dark:border-green-700 rounded-full\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span className=\"text-xs text-green-700 dark:text-green-300\">준비완료</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* 메인 콘텐츠 */}\n      <div className=\"flex-1 overflow-hidden\">\n        {mode === \"admin\" ? (\n          // 관리자 모드: 프롬프트 카드 관리 + 채팅\n          <AdminView projectId={projectId} projectName={project.name} />\n        ) : (\n          // 사용자 모드: 채팅만\n          <UserView projectId={projectId} projectName={project.name} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProjectDetail;\n"],"names":["copyToClipboard","async","text","successMessage","arguments","length","undefined","errorMessage","navigator","clipboard","writeText","toast","success","error","console","useChat","projectId","projectName","promptCards","messages","setMessages","useState","inputValue","setInputValue","copiedMessage","setCopiedMessage","canSendMessage","setCanSendMessage","streamingMessageIdRef","useRef","currentWebSocketRef","currentExecutionIdRef","messagesEndRef","inputRef","isUserScrolling","setIsUserScrolling","scrollContainerRef","lastScrollTopRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","setIsStreaming","useCallback","userInput","options","trim","data","chat_history","prompt_cards","log","inputLength","historyLength","promptCardsCount","useStreaming","timestamp","Date","toISOString","onChunk","onError","_error$message","_error$message2","_error$message3","_error$message4","message","includes","code","onComplete","response","_response$result","resultLength","result","generateAPI","generateTitleStream","streamError","generateTitle","mode","_error$response","_error$response2","_error$message5","_error$response3","_error$response4","_error$response4$data","_error$response5","_error$response6","_error$response7","status","setup_required","executionArn","poll","getExecutionStatus","Error","setTimeout","useOrchestration","isConnected","wsConnected","isConnecting","wsConnecting","wsError","startStreaming","wsStartStreaming","addMessageListener","removeMessageListener","setIsConnected","setIsConnecting","setError","wsRef","reconnectTimeoutRef","reconnectAttempts","getWebSocketUrl","wsUrl","process","startsWith","normalizedUrl","replace","connect","_wsRef$current","_wsRef$current2","current","readyState","WebSocket","OPEN","CONNECTING","close","window","wsConnectStart","now","connectionTimeout","_wsRef$current3","onopen","event","_wsRef$current4","_wsRef$current5","_wsRef$current6","clearTimeout","url","protocol","extensions","onclose","connectionDuration","reason","wasClean","delay","Math","min","pow","onerror","_wsRef$current7","_wsRef$current8","err","disconnect","sendMessage","_wsRef$current9","send","JSON","stringify","chatHistory","action","listener","addEventListener","removeEventListener","useEffect","timer","useWebSocket","handleScroll","container","currentScrollTop","scrollTop","maxScrollTop","scrollHeight","clientHeight","abs","scrollToBottom","scrollIntoView","behavior","handleWebSocketMessage","parse","currentStreamingId","type","step","progress","prev","updatedMessages","streamingMsgIndex","findIndex","msg","id","currentContent","content","isLoading","fullContent","isError","handleStreamingResponse","chunk","metadata","handleStreamingComplete","performance_metrics","model_info","handleStopGeneration","handleSendMessage","userMessage","streamMsgId","streamingMessage","allMessages","filter","map","role","trimmedChatHistory","slice","totalMessages","fullHistoryLength","trimmedHistoryLength","maxHistoryLength","recentHistory","activePromptCards","Array","isArray","card","isActive","enabled","promptId","prompt_id","title","prompt_text","tags","stepOrder","sort","a","b","messageContent","chatHistoryLength","contentLength","hasContent","orchestrationData","streamingOptions","errorType","errorDetails","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","handleCopyTitle","index","resetChat","streamingMessageId","AnimatedStreamingIndicator","_jsxs","motion","div","className","initial","opacity","scale","animate","transition","duration","children","repeat","Infinity","_jsx","span","AnimatedErrorDetails","_ref","height","ExclamationTriangleIcon","_ref2","_message$timestamp","_message$timestamp2","onCopyMessage","onCopyTitle","isUser","contentVariants","y","stiffness","damping","buttonVariants","hover","tap","variants","staggerChildren","whileHover","toLocaleTimeString","x","ReactMarkdown","ChatMessageSkeleton","AnimatePresence","titles","exit","button","onClick","whileTap","custom","CheckCircleIcon","DocumentDuplicateIcon","ClipboardDocumentIcon","total_time","useNavigate","uploadedFile","setUploadedFile","dragOver","setDragOver","ref","onScroll","ChatBubbleLeftRightIcon","SparklesIcon","AnimatedChatMessage","DocumentPlusIcon","name","removeFile","XMarkIcon","style","boxShadow","border","minHeight","display","flexDirection","gap","onDrop","files","dataTransfer","file","reader","FileReader","onload","_e$target2","target","readAsText","onDragOver","onDragLeave","handleDragLeave","value","onChange","onKeyPress","placeholder","rows","maxHeight","lineHeight","overflowY","whiteSpace","fontSize","fontWeight","color","disabled","width","StopIcon","PaperAirplaneIcon","PromptCard","onEdit","onDelete","stopPropagation","PencilIcon","TrashIcon","tag","createdAt","toLocaleDateString","year","month","day","updatedAt","PromptFormModal","_ref3","isOpen","onSubmit","onCancel","initialData","formData","setFormData","tagInput","setTagInput","handleChange","field","HashtagIcon","newTag","maxLength","handleTagRemove","tagToRemove","required","checked","htmlFor","setPromptCards","loading","setLoading","editingCard","setEditingCard","showForm","setShowForm","loadPromptCards","promptCardAPI","getPromptCards","errorInfo","handleAPIError","handleNewCard","ChatInterface","PlusIcon","cardWithContent","_contentResponse$cont","contentResponse","getPromptContent","handleEditCard","confirm","deletePromptCard","handleDeleteCard","backendData","cardData","updatePromptCard","createPromptCard","handleCancelForm","PromptCardManager","warn","ChatInterfaceSkeleton","ProjectDetail","useParams","navigate","setMode","useApp","project","setProject","loadProjectData","projectData","projectAPI","getProject","handleBackNavigation","ArrowLeftIcon","AdminView","UserView"],"sourceRoot":""}