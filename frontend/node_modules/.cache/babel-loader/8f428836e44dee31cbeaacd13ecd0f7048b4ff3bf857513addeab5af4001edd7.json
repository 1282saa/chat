{"ast":null,"code":"import{useState,useEffect,useRef,useCallback}from\"react\";import{toast}from\"react-hot-toast\";import{copyToClipboard}from\"../utils/clipboard\";import{useOrchestration}from\"./useOrchestration\";import{useWebSocket}from\"./useWebSocket\";/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */const processAIResponse=result=>{if(!result||!result.result){console.error(\"AI 응답 오류: 결과가 없습니다\",result);return{id:\"error-\"+Date.now(),type:\"assistant\",content:\"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",timestamp:new Date(),isError:true};}// LangChain과 직접 통신하므로, 결과가 바로 content가 됨\nconst responseContent=result.result;return{id:\"response-\"+Date.now(),type:\"assistant\",content:responseContent,timestamp:new Date(),// 성능 메트릭 포함\nperformance_metrics:result.performance_metrics,model_info:result.model_info};};/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */export const useChat=function(projectId,projectName){let promptCards=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];const[messages,setMessages]=useState([]);const[inputValue,setInputValue]=useState(\"\");const[copiedMessage,setCopiedMessage]=useState(null);const[canSendMessage,setCanSendMessage]=useState(true);const[selectedModel,setSelectedModel]=useState(\"anthropic.claude-3-5-sonnet-20241022-v2:0\");const streamingMessageIdRef=useRef(null);const currentWebSocketRef=useRef(null);const currentExecutionIdRef=useRef(null);const messagesEndRef=useRef(null);const inputRef=useRef(null);// 사용자 스크롤 상태 추적\nconst[isUserScrolling,setIsUserScrolling]=useState(false);const scrollContainerRef=useRef(null);const lastScrollTopRef=useRef(0);const{isExecuting:isGenerating,isStreaming,executeOrchestration,pollOrchestrationResult,resetOrchestration}=useOrchestration(projectId);// WebSocket 훅 추가\nconst{isConnected:wsConnected,isConnecting:wsConnecting,error:wsError,startStreaming:wsStartStreaming,addMessageListener,removeMessageListener}=useWebSocket(projectId);// 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\nuseEffect(()=>{setMessages([]);// 빈 배열로 시작\n},[projectName]);// 사용자 스크롤 감지 함수\nconst handleScroll=useCallback(()=>{if(!scrollContainerRef.current)return;const container=scrollContainerRef.current;const currentScrollTop=container.scrollTop;const maxScrollTop=container.scrollHeight-container.clientHeight;// 사용자가 수동으로 스크롤했는지 감지\nif(Math.abs(currentScrollTop-lastScrollTopRef.current)>2){const isAtBottom=currentScrollTop>=maxScrollTop-20;// 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\nsetIsUserScrolling(!isAtBottom);}lastScrollTopRef.current=currentScrollTop;},[]);const scrollToBottom=useCallback(()=>{// 사용자가 스크롤 중이 아닐 때만 자동 스크롤\nif(!isUserScrolling&&messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:\"smooth\"});}},[isUserScrolling]);// 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\nuseEffect(()=>{scrollToBottom();},[messages,scrollToBottom]);// WebSocket 메시지 리스너 설정\nuseEffect(()=>{const handleWebSocketMessage=event=>{try{const data=JSON.parse(event.data);console.log(\"WebSocket 메시지 수신:\",data);const currentStreamingId=streamingMessageIdRef.current;switch(data.type){case\"stream_start\":console.log(\"WebSocket 스트리밍 시작\");break;case\"progress\":// 진행 상황 로그만 남기고 UI 업데이트는 제거\nconsole.log(`진행 상황: ${data.step} (${data.progress}%)`);break;case\"stream_chunk\":if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){// 기존 내용에 새 청크 추가\nconst currentContent=updatedMessages[streamingMsgIndex].content||\"\";updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:currentContent+data.content,isLoading:true,isStreaming:true};}return updatedMessages;});// 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\nif(!isUserScrolling){scrollToBottom();}}break;case\"stream_complete\":if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:data.fullContent,isLoading:false,isStreaming:false,timestamp:new Date()};}return updatedMessages;});streamingMessageIdRef.current=null;scrollToBottom();}break;case\"error\":console.error(\"WebSocket 스트리밍 오류:\",data.message);if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:\"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",isLoading:false,isStreaming:false,isError:true,timestamp:new Date()};}return updatedMessages;});streamingMessageIdRef.current=null;}toast.error(data.message);break;default:console.log(\"알 수 없는 WebSocket 메시지 타입:\",data.type);}}catch(error){console.error(\"WebSocket 메시지 파싱 오류:\",error);}};if(wsConnected){addMessageListener(handleWebSocketMessage);}return()=>{if(wsConnected){removeMessageListener(handleWebSocketMessage);}};},[wsConnected,addMessageListener,removeMessageListener,scrollToBottom]);/**\n   * 스트리밍 응답 처리 함수\n   */const handleStreamingResponse=useCallback((chunk,metadata)=>{const currentStreamingId=streamingMessageIdRef.current;console.log(\"청크 수신:\",chunk,\"스트리밍 ID:\",currentStreamingId);if(!currentStreamingId){console.error(\"스트리밍 ID가 없습니다!\");return;}setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){// 기존 스트리밍 메시지 업데이트\nupdatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:updatedMessages[streamingMsgIndex].content+chunk,isLoading:true,isStreaming:true};console.log(\"스트리밍 메시지 업데이트 성공:\",updatedMessages[streamingMsgIndex].content);}else{console.error(\"스트리밍 메시지를 찾을 수 없음:\",currentStreamingId);}return updatedMessages;});// 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\nif(!isUserScrolling){scrollToBottom();}},[scrollToBottom,isUserScrolling]);/**\n   * 스트리밍 완료 처리 함수\n   */const handleStreamingComplete=useCallback(result=>{const currentStreamingId=streamingMessageIdRef.current;console.log(\"스트리밍 완료:\",result,\"스트리밍 ID:\",currentStreamingId);if(!currentStreamingId){console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");return;}setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){// 스트리밍 메시지 완료 처리\nupdatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:result.result,isLoading:false,isStreaming:false,performance_metrics:result.performance_metrics,model_info:result.model_info,timestamp:new Date()};console.log(\"스트리밍 완료 처리 성공:\",updatedMessages[streamingMsgIndex].content);}else{console.error(\"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\",currentStreamingId);}return updatedMessages;});// 스트리밍 ID 초기화\nstreamingMessageIdRef.current=null;// 입력 활성화\nconsole.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");setCanSendMessage(true);// 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\nscrollToBottom();},[scrollToBottom]);/**\n   * 스트리밍 중단 함수\n   */const handleStopGeneration=useCallback(()=>{console.log(\"생성 중단 요청\");// WebSocket 연결 종료\nif(currentWebSocketRef.current){currentWebSocketRef.current.close();currentWebSocketRef.current=null;}// 현재 실행 중인 작업 중단\nif(currentExecutionIdRef.current){// 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\ncurrentExecutionIdRef.current=null;}// 스트리밍 메시지 상태 업데이트\nconst currentStreamingId=streamingMessageIdRef.current;if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:updatedMessages[streamingMsgIndex].content+\"\\n\\n[생성이 중단되었습니다]\",isLoading:false,isStreaming:false,timestamp:new Date()};}return updatedMessages;});streamingMessageIdRef.current=null;}// 입력 가능 상태로 복원\nsetCanSendMessage(true);// orchestration 상태 리셋\nresetOrchestration();toast.success(\"생성이 중단되었습니다\");},[resetOrchestration]);/**\n   * 메시지 전송\n   */const handleSendMessage=useCallback(async()=>{console.log(\"해들 전송 호출:\",{inputValue:inputValue.trim(),isGenerating,canSendMessage});if(!inputValue.trim()||isGenerating){console.log(\"전송 중단: 조건 부족\");return;}// 입력 비활성화\nconsole.log(\"입력 비활성화\");setCanSendMessage(false);const userMessage={id:\"user-\"+Date.now(),type:\"user\",content:inputValue.trim(),timestamp:new Date()};// 스트리밍 메시지 ID 생성\nconst streamMsgId=\"streaming-\"+Date.now();streamingMessageIdRef.current=streamMsgId;console.log(\"새 스트리밍 메시지 ID 생성:\",streamMsgId);// 스트리밍 응답을 위한 초기 메시지\nconst streamingMessage={id:streamMsgId,type:\"assistant\",content:\"\",timestamp:new Date(),isLoading:true,isStreaming:true};setMessages(prev=>[...prev,userMessage,streamingMessage]);setInputValue(\"\");// 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\nconst allMessages=[...messages,userMessage];const chatHistory=allMessages.filter(msg=>!msg.isLoading&&!msg.isError&&!msg.isStreaming).map(msg=>({role:msg.type===\"user\"?\"user\":\"assistant\",content:msg.content}));// 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\nconst maxHistoryLength=50;const trimmedChatHistory=chatHistory.slice(-maxHistoryLength);console.log(\"대화 히스토리 생성:\",{totalMessages:allMessages.length,fullHistoryLength:chatHistory.length,trimmedHistoryLength:trimmedChatHistory.length,maxHistoryLength:maxHistoryLength,recentHistory:trimmedChatHistory.slice(-6)// 최근 6개만 로그에 표시\n});try{// 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\nconst safePromptCards=Array.isArray(promptCards)?promptCards:[];const activePromptCards=safePromptCards.filter(card=>card.isActive!==false&&card.enabled!==false).map(card=>({promptId:card.promptId||card.prompt_id,title:card.title||\"Untitled\",prompt_text:card.prompt_text||card.content||\"\",tags:card.tags||[],isActive:card.isActive!==false,stepOrder:card.stepOrder||0})).filter(card=>card.prompt_text.trim())// 프롬프트 내용이 있는 것만\n.sort((a,b)=>(a.stepOrder||0)-(b.stepOrder||0));// stepOrder로 정렬\nconsole.log(\"대화 전송 데이터 확인:\",{messageContent:userMessage.content,chatHistoryLength:trimmedChatHistory.length,promptCardsCount:activePromptCards.length,chatHistory:trimmedChatHistory,promptCards:activePromptCards.map(card=>({id:card.promptId,title:card.title,contentLength:card.prompt_text.length,stepOrder:card.stepOrder,hasContent:!!card.prompt_text.trim()}))});// WebSocket 연결 확인 및 실시간 스트리밍 시도\nif(wsConnected){console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");const success=wsStartStreaming(userMessage.content,trimmedChatHistory,activePromptCards,selectedModel);if(success){// WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\nreturn;}else{console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");}}else{console.log(\"WebSocket 미연결, SSE 모드 사용\");}// WebSocket 실패 시 기존 SSE 방식으로 폴백\nconst orchestrationData={userInput:userMessage.content,chat_history:trimmedChatHistory,prompt_cards:activePromptCards,modelId:selectedModel};console.log(\"백엔드 전송 데이터 최종 확인:\",orchestrationData);// 스트리밍 옵션 설정\nconst streamingOptions={useStreaming:true,chat_history:orchestrationData.chat_history,prompt_cards:orchestrationData.prompt_cards,onChunk:handleStreamingResponse,onError:error=>{console.error(\"스트리밍 오류:\",error);const currentStreamingId=streamingMessageIdRef.current;console.log(\"에러 처리 스트리밍 ID:\",currentStreamingId);// 오류 메시지로 변환\nsetMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:\"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",isLoading:false,isStreaming:false,isError:true,timestamp:new Date()};}return updatedMessages;});streamingMessageIdRef.current=null;},onComplete:handleStreamingComplete};// SSE 스트리밍 방식으로 실행\nawait executeOrchestration(userMessage.content,streamingOptions);// SSE 스트리밍 완료 후 입력 활성화\nconsole.log(\"SSE 스트리밍 완료 - 입력 활성화\");setCanSendMessage(true);}catch(error){var _error$response;console.error(\"메시지 전송 실패:\",error);// 개선된 오류 메시지\nconst errorType=error.code===\"ECONNABORTED\"?\"timeout\":\"general\";const errorMessage={id:\"error-\"+Date.now(),type:\"assistant\",content:errorType===\"timeout\"?\"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\":\"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",timestamp:new Date(),isError:true,errorDetails:{type:errorType,message:error.message,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status}};setMessages(prev=>{// 스트리밍 메시지를 찾아 제거\nconst currentStreamingId=streamingMessageIdRef.current;const filteredMessages=prev.filter(msg=>msg.id!==currentStreamingId);return[...filteredMessages,errorMessage];});streamingMessageIdRef.current=null;// 오류 발생 시도 입력 활성화\nsetCanSendMessage(true);}// 전체 전송 과정 완료 후 입력 활성화 (보험용)\nsetCanSendMessage(true);},[inputValue,isGenerating,executeOrchestration,handleStreamingResponse,handleStreamingComplete,messages]);/**\n   * Enter 키로 전송\n   */const handleKeyPress=useCallback(e=>{if(e.key===\"Enter\"&&!e.shiftKey){e.preventDefault();handleSendMessage();}},[handleSendMessage]);/**\n   * 메시지 복사\n   */const handleCopyMessage=useCallback(async(content,messageId)=>{const success=await copyToClipboard(content);if(success){setCopiedMessage(messageId);setTimeout(()=>setCopiedMessage(null),2000);}},[]);/**\n   * 개별 제목 복사\n   */const handleCopyTitle=useCallback(async(title,messageId,index)=>{const success=await copyToClipboard(title,\"복사되었습니다!\");if(success){setCopiedMessage(`${messageId}_title_${index}`);setTimeout(()=>setCopiedMessage(null),2000);}},[]);/**\n   * 채팅 초기화\n   */const resetChat=useCallback(()=>{setMessages([]);setInputValue(\"\");setCopiedMessage(null);setCanSendMessage(true);streamingMessageIdRef.current=null;currentWebSocketRef.current=null;currentExecutionIdRef.current=null;resetOrchestration();},[resetOrchestration]);return{messages,inputValue,setInputValue,copiedMessage,isGenerating,isStreaming,canSendMessage,streamingMessageId:streamingMessageIdRef.current,messagesEndRef,inputRef,handleSendMessage,handleStopGeneration,handleKeyPress,handleCopyMessage,handleCopyTitle,resetChat,scrollToBottom,// WebSocket 상태 추가\nwsConnected,wsConnecting,wsError,// 스크롤 관련 추가\nscrollContainerRef,handleScroll,isUserScrolling,// 모델 선택 관련 추가\nselectedModel,setSelectedModel};};","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","useWebSocket","processAIResponse","result","console","error","id","Date","now","type","content","timestamp","isError","responseContent","performance_metrics","model_info","useChat","projectId","projectName","promptCards","arguments","length","undefined","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","canSendMessage","setCanSendMessage","selectedModel","setSelectedModel","streamingMessageIdRef","currentWebSocketRef","currentExecutionIdRef","messagesEndRef","inputRef","isUserScrolling","setIsUserScrolling","scrollContainerRef","lastScrollTopRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","isConnected","wsConnected","isConnecting","wsConnecting","wsError","startStreaming","wsStartStreaming","addMessageListener","removeMessageListener","handleScroll","current","container","currentScrollTop","scrollTop","maxScrollTop","scrollHeight","clientHeight","Math","abs","isAtBottom","scrollToBottom","scrollIntoView","behavior","handleWebSocketMessage","event","data","JSON","parse","log","currentStreamingId","step","progress","prev","updatedMessages","streamingMsgIndex","findIndex","msg","currentContent","isLoading","fullContent","message","handleStreamingResponse","chunk","metadata","handleStreamingComplete","handleStopGeneration","close","success","handleSendMessage","trim","userMessage","streamMsgId","streamingMessage","allMessages","chatHistory","filter","map","role","maxHistoryLength","trimmedChatHistory","slice","totalMessages","fullHistoryLength","trimmedHistoryLength","recentHistory","safePromptCards","Array","isArray","activePromptCards","card","isActive","enabled","promptId","prompt_id","title","prompt_text","tags","stepOrder","sort","a","b","messageContent","chatHistoryLength","promptCardsCount","contentLength","hasContent","orchestrationData","userInput","chat_history","prompt_cards","modelId","streamingOptions","useStreaming","onChunk","onError","onComplete","_error$response","errorType","code","errorMessage","errorDetails","status","response","filteredMessages","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","setTimeout","handleCopyTitle","index","resetChat","streamingMessageId"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info,\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const [selectedModel, setSelectedModel] = useState(\"anthropic.claude-3-5-sonnet-20241022-v2:0\");\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n  \n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 사용자 스크롤 상태 추적\n  const [isUserScrolling, setIsUserScrolling] = useState(false);\n  const scrollContainerRef = useRef(null);\n  const lastScrollTopRef = useRef(0);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener,\n  } = useWebSocket(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 사용자 스크롤 감지 함수\n  const handleScroll = useCallback(() => {\n    if (!scrollContainerRef.current) return;\n\n    const container = scrollContainerRef.current;\n    const currentScrollTop = container.scrollTop;\n    const maxScrollTop = container.scrollHeight - container.clientHeight;\n\n    // 사용자가 수동으로 스크롤했는지 감지\n    if (Math.abs(currentScrollTop - lastScrollTopRef.current) > 2) {\n      const isAtBottom = currentScrollTop >= maxScrollTop - 20;\n\n      // 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\n      setIsUserScrolling(!isAtBottom);\n    }\n\n    lastScrollTopRef.current = currentScrollTop;\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    // 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n    if (!isUserScrolling && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [isUserScrolling]);\n\n  // 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log(\"WebSocket 메시지 수신:\", data);\n\n        const currentStreamingId = streamingMessageIdRef.current;\n\n        switch (data.type) {\n          case \"stream_start\":\n            console.log(\"WebSocket 스트리밍 시작\");\n            break;\n\n          case \"progress\":\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n\n          case \"stream_chunk\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent =\n                    updatedMessages[streamingMsgIndex].content || \"\";\n\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true,\n                  };\n                }\n\n                return updatedMessages;\n              });\n              // 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n              if (!isUserScrolling) {\n                scrollToBottom();\n              }\n            }\n            break;\n\n          case \"stream_complete\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n\n          case \"error\":\n            console.error(\"WebSocket 스트리밍 오류:\", data.message);\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content:\n                      \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n            toast.error(data.message);\n            break;\n\n          default:\n            console.log(\"알 수 없는 WebSocket 메시지 타입:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"WebSocket 메시지 파싱 오류:\", error);\n      }\n    };\n\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n          console.log(\n            \"스트리밍 메시지 업데이트 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\n      if (!isUserScrolling) {\n        scrollToBottom();\n      }\n    },\n    [scrollToBottom, isUserScrolling]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date(),\n          };\n          console.log(\n            \"스트리밍 완료 처리 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\n            \"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\",\n            currentStreamingId\n          );\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n\n      // 입력 활성화\n      console.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");\n      setCanSendMessage(true);\n\n      // 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\n      scrollToBottom();\n    },\n    [scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log(\"생성 중단 요청\");\n\n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n\n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n\n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content:\n              updatedMessages[streamingMsgIndex].content +\n              \"\\n\\n[생성이 중단되었습니다]\",\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n    }\n\n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n\n    // orchestration 상태 리셋\n    resetOrchestration();\n\n    toast.success(\"생성이 중단되었습니다\");\n  }, [resetOrchestration]);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"해들 전송 호출:\", {\n      inputValue: inputValue.trim(),\n      isGenerating,\n      canSendMessage,\n    });\n\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"전송 중단: 조건 부족\");\n      return;\n    }\n\n    // 입력 비활성화\n    console.log(\"입력 비활성화\");\n    setCanSendMessage(false);\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages\n      .filter((msg) => !msg.isLoading && !msg.isError && !msg.isStreaming)\n      .map((msg) => ({\n        role: msg.type === \"user\" ? \"user\" : \"assistant\",\n        content: msg.content,\n      }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n\n    console.log(\"대화 히스토리 생성:\", {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6), // 최근 6개만 로그에 표시\n    });\n\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const safePromptCards = Array.isArray(promptCards) ? promptCards : [];\n      const activePromptCards = safePromptCards\n        .filter((card) => card.isActive !== false && card.enabled !== false)\n        .map((card) => ({\n          promptId: card.promptId || card.prompt_id,\n          title: card.title || \"Untitled\",\n          prompt_text: card.prompt_text || card.content || \"\",\n          tags: card.tags || [],\n          isActive: card.isActive !== false,\n          stepOrder: card.stepOrder || 0,\n        }))\n        .filter((card) => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n        .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n\n      console.log(\"대화 전송 데이터 확인:\", {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map((card) => ({\n          id: card.promptId,\n          title: card.title,\n          contentLength: card.prompt_text.length,\n          stepOrder: card.stepOrder,\n          hasContent: !!card.prompt_text.trim(),\n        })),\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");\n\n        const success = wsStartStreaming(\n          userMessage.content,\n          trimmedChatHistory,\n          activePromptCards,\n          selectedModel\n        );\n\n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");\n        }\n      } else {\n        console.log(\"WebSocket 미연결, SSE 모드 사용\");\n      }\n\n      // WebSocket 실패 시 기존 SSE 방식으로 폴백\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: trimmedChatHistory,\n        prompt_cards: activePromptCards,\n        modelId: selectedModel,\n      };\n\n      console.log(\"백엔드 전송 데이터 최종 확인:\", orchestrationData);\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        prompt_cards: orchestrationData.prompt_cards,\n        onChunk: handleStreamingResponse,\n        onError: (error) => {\n          console.error(\"스트리밍 오류:\", error);\n\n          const currentStreamingId = streamingMessageIdRef.current;\n          console.log(\"에러 처리 스트리밍 ID:\", currentStreamingId);\n\n          // 오류 메시지로 변환\n          setMessages((prev) => {\n            const updatedMessages = [...prev];\n            const streamingMsgIndex = updatedMessages.findIndex(\n              (msg) => msg.id === currentStreamingId\n            );\n\n            if (streamingMsgIndex !== -1) {\n              updatedMessages[streamingMsgIndex] = {\n                ...updatedMessages[streamingMsgIndex],\n                content:\n                  \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                isLoading: false,\n                isStreaming: false,\n                isError: true,\n                timestamp: new Date(),\n              };\n            }\n\n            return updatedMessages;\n          });\n\n          streamingMessageIdRef.current = null;\n        },\n        onComplete: handleStreamingComplete,\n      };\n\n      // SSE 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n\n      // SSE 스트리밍 완료 후 입력 활성화\n      console.log(\"SSE 스트리밍 완료 - 입력 활성화\");\n      setCanSendMessage(true);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          errorType === \"timeout\"\n            ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\"\n            : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: error.response?.status,\n        },\n      };\n\n      setMessages((prev) => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(\n          (msg) => msg.id !== currentStreamingId\n        );\n        return [...filteredMessages, errorMessage];\n      });\n\n      streamingMessageIdRef.current = null;\n\n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n\n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError,\n    // 스크롤 관련 추가\n    scrollContainerRef,\n    handleScroll,\n    isUserScrolling,\n    // 모델 선택 관련 추가\n    selectedModel,\n    setSelectedModel,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}