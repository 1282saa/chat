{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n\n  // 인증 토큰 추가 (API Gateway Cognito Authorizer는 ID Token을 요구)\n  const token = localStorage.getItem('idToken') || localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.error(\"API 오류:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n\n  // 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    // 토큰 만료 처리\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('idToken');\n    localStorage.removeItem('refreshToken');\n\n    // 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// 프로젝트 관련 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async (params = {}) => {\n    const response = await api.get(\"/projects\", {\n      params\n    });\n    return response.data;\n  },\n  // 프로젝트 생성\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n  // 프로젝트 상세 조회\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  // 프로젝트 업데이트\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n  // 프로젝트 삭제\n  deleteProject: async projectId => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n  // 업로드 URL 요청\n  getUploadUrl: async (projectId, category, filename) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: {\n        category,\n        filename\n      }\n    });\n    return response.data;\n  }\n};\n\n// 제목 생성 API (Step Functions 기반)\nexport const generateAPI = {\n  // 제목 생성 시작 (Step Functions 실행)\n  startTitleGeneration: async (projectId, article) => {\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article\n    });\n    return response.data;\n  },\n  // 실행 상태 조회\n  getExecutionStatus: async executionArn => {\n    const encodedArn = encodeURIComponent(executionArn);\n    const response = await api.get(`/executions/${encodedArn}`);\n    return response.data;\n  },\n  // 폴링을 통한 결과 대기\n  pollForResult: async (executionArn, maxRetries = 30, interval = 2000) => {\n    let retries = 0;\n    while (retries < maxRetries) {\n      try {\n        const status = await generateAPI.getExecutionStatus(executionArn);\n        if (status.status === \"SUCCEEDED\") {\n          return {\n            success: true,\n            data: status\n          };\n        } else if (status.status === \"FAILED\") {\n          return {\n            success: false,\n            error: status.error || \"실행이 실패했습니다\"\n          };\n        } else if (status.status === \"TIMED_OUT\") {\n          return {\n            success: false,\n            error: \"실행 시간이 초과되었습니다\"\n          };\n        } else if (status.status === \"ABORTED\") {\n          return {\n            success: false,\n            error: \"실행이 중단되었습니다\"\n          };\n        }\n\n        // 아직 실행 중이면 대기\n        await new Promise(resolve => setTimeout(resolve, interval));\n        retries++;\n      } catch (error) {\n        console.error(\"폴링 중 오류:\", error);\n        retries++;\n        if (retries >= maxRetries) {\n          return {\n            success: false,\n            error: \"상태 조회 중 오류가 발생했습니다\"\n          };\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n      }\n    }\n    return {\n      success: false,\n      error: \"실행 시간이 초과되었습니다\"\n    };\n  },\n  // 제목 생성 (시작 + 폴링)\n  generateTitle: async (projectId, article, onProgress) => {\n    try {\n      // Step Functions 실행 시작\n      const startResponse = await generateAPI.startTitleGeneration(projectId, article);\n      if (onProgress) {\n        onProgress({\n          status: \"started\",\n          message: \"제목 생성이 시작되었습니다...\",\n          executionArn: startResponse.executionArn\n        });\n      }\n\n      // 폴링을 통한 결과 대기\n      const pollResponse = await generateAPI.pollForResult(startResponse.executionArn);\n      if (pollResponse.success) {\n        return {\n          conversationId: pollResponse.data.conversationId,\n          projectId: projectId,\n          result: pollResponse.data.result,\n          usage: pollResponse.data.usage,\n          timestamp: pollResponse.data.completedAt || new Date().toISOString(),\n          executionArn: startResponse.executionArn\n        };\n      } else {\n        throw new Error(pollResponse.error);\n      }\n    } catch (error) {\n      console.error(\"제목 생성 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// 🆕 채팅 API (LangChain 기반)\nexport const chatAPI = {\n  // 채팅 메시지 전송\n  sendMessage: async (projectId, message, sessionId = null, userId = \"default\") => {\n    const response = await api.post(`/projects/${projectId}/chat`, {\n      message,\n      sessionId,\n      userId\n    });\n    return response.data;\n  },\n  // 채팅 세션 목록 조회\n  getChatSessions: async projectId => {\n    const response = await api.get(`/projects/${projectId}/chat/sessions`);\n    return response.data;\n  },\n  // 채팅 히스토리 조회\n  getChatHistory: async (projectId, sessionId) => {\n    const response = await api.get(`/projects/${projectId}/chat/sessions/${sessionId}`);\n    return response.data;\n  },\n  // 채팅 세션 삭제\n  deleteChatSession: async (projectId, sessionId) => {\n    const response = await api.delete(`/projects/${projectId}/chat/sessions/${sessionId}`);\n    return response.data;\n  },\n  // 스트리밍 채팅 (WebSocket 대체용)\n  streamingChat: async (projectId, message, sessionId, onMessage) => {\n    try {\n      const response = await chatAPI.sendMessage(projectId, message, sessionId);\n\n      // 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\n      if (onMessage) {\n        onMessage({\n          type: \"message\",\n          content: response.message,\n          sessionId: response.sessionId,\n          metadata: response.metadata\n        });\n      }\n      return response;\n    } catch (error) {\n      if (onMessage) {\n        onMessage({\n          type: \"error\",\n          error: error.message\n        });\n      }\n      throw error;\n    }\n  }\n};\n\n// 🆕 Bedrock Agent 채팅 API\nexport const agentChatAPI = {\n  // Agent 채팅 메시지 전송\n  sendAgentMessage: async (projectId, message, sessionId = null, userId = \"default\") => {\n    const response = await api.post(`/projects/${projectId}/agent-chat`, {\n      message,\n      sessionId,\n      userId\n    });\n    return response.data;\n  },\n  // Agent 채팅 세션 목록 조회\n  getAgentChatSessions: async projectId => {\n    const response = await api.get(`/projects/${projectId}/agent-chat/sessions`);\n    return response.data;\n  },\n  // Agent 채팅 히스토리 조회\n  getAgentChatHistory: async (projectId, sessionId) => {\n    const response = await api.get(`/projects/${projectId}/agent-chat/sessions/${sessionId}`);\n    return response.data;\n  },\n  // Agent 채팅 세션 삭제\n  deleteAgentChatSession: async (projectId, sessionId) => {\n    const response = await api.delete(`/projects/${projectId}/agent-chat/sessions/${sessionId}`);\n    return response.data;\n  },\n  // Agent 스트리밍 채팅 (향후 구현용)\n  streamingAgentChat: async (projectId, message, sessionId, onMessage) => {\n    try {\n      const response = await agentChatAPI.sendAgentMessage(projectId, message, sessionId);\n\n      // 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\n      if (onMessage) {\n        onMessage({\n          type: \"message\",\n          content: response.message,\n          sessionId: response.sessionId,\n          metadata: response.metadata\n        });\n      }\n      return response;\n    } catch (error) {\n      if (onMessage) {\n        onMessage({\n          type: \"error\",\n          error: error.message\n        });\n      }\n      throw error;\n    }\n  }\n};\n\n// 🆕 인증 API\nexport const authAPI = {\n  // 회원가입\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  // 로그인\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    const {\n      accessToken,\n      idToken,\n      refreshToken\n    } = response.data;\n\n    // 토큰 저장\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('idToken', idToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    return response.data;\n  },\n  // 로그아웃\n  signout: async () => {\n    try {\n      await api.post(\"/auth/signout\");\n    } finally {\n      // 로컬 토큰 삭제\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('idToken');\n      localStorage.removeItem('refreshToken');\n    }\n  },\n  // 토큰 갱신\n  refreshToken: async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      throw new Error('리프레시 토큰이 없습니다');\n    }\n    const response = await api.post(\"/auth/refresh\", {\n      refreshToken\n    });\n    const {\n      accessToken,\n      idToken\n    } = response.data;\n\n    // 새 토큰 저장\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('idToken', idToken);\n    return response.data;\n  },\n  // 이메일 인증\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify\", verificationData);\n    return response.data;\n  },\n  // 비밀번호 찾기\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  // 비밀번호 재설정\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n  // 현재 사용자 정보 (토큰에서 추출)\n  getCurrentUser: () => {\n    const token = localStorage.getItem('idToken');\n    if (!token) return null;\n    try {\n      // JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return {\n        email: payload.email,\n        name: payload.name,\n        sub: payload.sub\n      };\n    } catch (error) {\n      console.error('토큰 디코딩 오류:', error);\n      return null;\n    }\n  },\n  // 로그인 상태 확인\n  isAuthenticated: () => {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return false;\n    try {\n      // 토큰 만료 시간 확인\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\n// 파일 업로드 API\nexport const uploadAPI = {\n  // S3 Pre-signed URL로 파일 업로드\n  uploadFile: async (uploadUrl, file) => {\n    const response = await axios.put(uploadUrl, file, {\n      headers: {\n        \"Content-Type\": \"text/plain\"\n      }\n    });\n    return response;\n  }\n};\n\n// 프롬프트 카테고리 정의\nexport const PROMPT_CATEGORIES = [{\n  id: \"title_type_guidelines\",\n  name: \"제목 유형 가이드라인\",\n  description: \"제목의 다양한 유형과 작성 원칙\",\n  required: true\n}, {\n  id: \"stylebook_guidelines\",\n  name: \"스타일북 가이드라인\",\n  description: \"서울경제신문의 스타일북 규정\",\n  required: true\n}, {\n  id: \"workflow\",\n  name: \"워크플로우\",\n  description: \"제목 생성 6단계 워크플로우\",\n  required: true\n}, {\n  id: \"audience_optimization\",\n  name: \"독자 최적화\",\n  description: \"대상 독자층별 최적화 전략\",\n  required: true\n}, {\n  id: \"seo_optimization\",\n  name: \"SEO 최적화\",\n  description: \"검색 엔진 최적화 가이드라인\",\n  required: false\n}, {\n  id: \"digital_elements_guidelines\",\n  name: \"디지털 요소 가이드라인\",\n  description: \"온라인 매체 특성에 맞는 제목 작성법\",\n  required: true\n}, {\n  id: \"quality_assessment\",\n  name: \"품질 평가\",\n  description: \"제목 품질 평가 기준\",\n  required: true\n}, {\n  id: \"uncertainty_handling\",\n  name: \"불확실성 처리\",\n  description: \"불확실한 정보 처리 가이드라인\",\n  required: true\n}, {\n  id: \"output_format\",\n  name: \"출력 형식\",\n  description: \"결과 출력 형식 정의\",\n  required: true\n}, {\n  id: \"description\",\n  name: \"프로젝트 설명\",\n  description: \"TITLE-NOMICS 시스템 설명\",\n  required: true\n}, {\n  id: \"knowledge\",\n  name: \"핵심 지식\",\n  description: \"제목 작성 핵심 지식\",\n  required: true\n}];\n\n// 에러 핸들링 유틸리티\nexport const handleAPIError = error => {\n  if (error.response) {\n    // 서버 응답 오류\n    const {\n      status,\n      data\n    } = error.response;\n    return {\n      message: (data === null || data === void 0 ? void 0 : data.error) || `서버 오류 (${status})`,\n      status\n    };\n  } else if (error.request) {\n    // 네트워크 오류\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0\n    };\n  } else {\n    // 기타 오류\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","_error$response","_error$response2","_error$response3","data","message","removeItem","window","location","href","projectAPI","getProjects","params","get","createProject","projectData","post","getProject","projectId","updateProject","put","deleteProject","delete","getUploadUrl","category","filename","generateAPI","startTitleGeneration","article","getExecutionStatus","executionArn","encodedArn","encodeURIComponent","pollForResult","maxRetries","interval","retries","success","resolve","setTimeout","generateTitle","onProgress","startResponse","pollResponse","conversationId","result","usage","timestamp","completedAt","Date","toISOString","Error","chatAPI","sendMessage","sessionId","userId","getChatSessions","getChatHistory","deleteChatSession","streamingChat","onMessage","type","content","metadata","agentChatAPI","sendAgentMessage","getAgentChatSessions","getAgentChatHistory","deleteAgentChatSession","streamingAgentChat","authAPI","signup","userData","signin","credentials","accessToken","idToken","refreshToken","setItem","signout","verifyEmail","verificationData","forgotPassword","email","confirmPassword","resetData","getCurrentUser","payload","JSON","parse","atob","split","name","sub","isAuthenticated","currentTime","now","exp","uploadAPI","uploadFile","uploadUrl","file","PROMPT_CATEGORIES","id","description","required","handleAPIError"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n    \n    // 인증 토큰 추가 (API Gateway Cognito Authorizer는 ID Token을 요구)\n    const token = localStorage.getItem('idToken') || localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\n      \"API 오류:\",\n      error.response?.status,\n      error.response?.data || error.message\n    );\n    \n    // 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\n    if (error.response?.status === 401) {\n      // 토큰 만료 처리\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('idToken');\n      localStorage.removeItem('refreshToken');\n      \n      // 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// 프로젝트 관련 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async (params = {}) => {\n    const response = await api.get(\"/projects\", { params });\n    return response.data;\n  },\n\n  // 프로젝트 생성\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  // 프로젝트 상세 조회\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 프로젝트 업데이트\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  // 프로젝트 삭제\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 업로드 URL 요청\n  getUploadUrl: async (projectId, category, filename) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { category, filename },\n    });\n    return response.data;\n  },\n};\n\n// 제목 생성 API (Step Functions 기반)\nexport const generateAPI = {\n  // 제목 생성 시작 (Step Functions 실행)\n  startTitleGeneration: async (projectId, article) => {\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article,\n    });\n    return response.data;\n  },\n\n  // 실행 상태 조회\n  getExecutionStatus: async (executionArn) => {\n    const encodedArn = encodeURIComponent(executionArn);\n    const response = await api.get(`/executions/${encodedArn}`);\n    return response.data;\n  },\n\n  // 폴링을 통한 결과 대기\n  pollForResult: async (executionArn, maxRetries = 30, interval = 2000) => {\n    let retries = 0;\n\n    while (retries < maxRetries) {\n      try {\n        const status = await generateAPI.getExecutionStatus(executionArn);\n\n        if (status.status === \"SUCCEEDED\") {\n          return {\n            success: true,\n            data: status,\n          };\n        } else if (status.status === \"FAILED\") {\n          return {\n            success: false,\n            error: status.error || \"실행이 실패했습니다\",\n          };\n        } else if (status.status === \"TIMED_OUT\") {\n          return {\n            success: false,\n            error: \"실행 시간이 초과되었습니다\",\n          };\n        } else if (status.status === \"ABORTED\") {\n          return {\n            success: false,\n            error: \"실행이 중단되었습니다\",\n          };\n        }\n\n        // 아직 실행 중이면 대기\n        await new Promise((resolve) => setTimeout(resolve, interval));\n        retries++;\n      } catch (error) {\n        console.error(\"폴링 중 오류:\", error);\n        retries++;\n\n        if (retries >= maxRetries) {\n          return {\n            success: false,\n            error: \"상태 조회 중 오류가 발생했습니다\",\n          };\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, interval));\n      }\n    }\n\n    return {\n      success: false,\n      error: \"실행 시간이 초과되었습니다\",\n    };\n  },\n\n  // 제목 생성 (시작 + 폴링)\n  generateTitle: async (projectId, article, onProgress) => {\n    try {\n      // Step Functions 실행 시작\n      const startResponse = await generateAPI.startTitleGeneration(\n        projectId,\n        article\n      );\n\n      if (onProgress) {\n        onProgress({\n          status: \"started\",\n          message: \"제목 생성이 시작되었습니다...\",\n          executionArn: startResponse.executionArn,\n        });\n      }\n\n      // 폴링을 통한 결과 대기\n      const pollResponse = await generateAPI.pollForResult(\n        startResponse.executionArn\n      );\n\n      if (pollResponse.success) {\n        return {\n          conversationId: pollResponse.data.conversationId,\n          projectId: projectId,\n          result: pollResponse.data.result,\n          usage: pollResponse.data.usage,\n          timestamp: pollResponse.data.completedAt || new Date().toISOString(),\n          executionArn: startResponse.executionArn,\n        };\n      } else {\n        throw new Error(pollResponse.error);\n      }\n    } catch (error) {\n      console.error(\"제목 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// 🆕 채팅 API (LangChain 기반)\nexport const chatAPI = {\n  // 채팅 메시지 전송\n  sendMessage: async (\n    projectId,\n    message,\n    sessionId = null,\n    userId = \"default\"\n  ) => {\n    const response = await api.post(`/projects/${projectId}/chat`, {\n      message,\n      sessionId,\n      userId,\n    });\n    return response.data;\n  },\n\n  // 채팅 세션 목록 조회\n  getChatSessions: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}/chat/sessions`);\n    return response.data;\n  },\n\n  // 채팅 히스토리 조회\n  getChatHistory: async (projectId, sessionId) => {\n    const response = await api.get(\n      `/projects/${projectId}/chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // 채팅 세션 삭제\n  deleteChatSession: async (projectId, sessionId) => {\n    const response = await api.delete(\n      `/projects/${projectId}/chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // 스트리밍 채팅 (WebSocket 대체용)\n  streamingChat: async (projectId, message, sessionId, onMessage) => {\n    try {\n      const response = await chatAPI.sendMessage(projectId, message, sessionId);\n\n      // 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\n      if (onMessage) {\n        onMessage({\n          type: \"message\",\n          content: response.message,\n          sessionId: response.sessionId,\n          metadata: response.metadata,\n        });\n      }\n\n      return response;\n    } catch (error) {\n      if (onMessage) {\n        onMessage({\n          type: \"error\",\n          error: error.message,\n        });\n      }\n      throw error;\n    }\n  },\n};\n\n// 🆕 Bedrock Agent 채팅 API\nexport const agentChatAPI = {\n  // Agent 채팅 메시지 전송\n  sendAgentMessage: async (\n    projectId,\n    message,\n    sessionId = null,\n    userId = \"default\"\n  ) => {\n    const response = await api.post(`/projects/${projectId}/agent-chat`, {\n      message,\n      sessionId,\n      userId,\n    });\n    return response.data;\n  },\n\n  // Agent 채팅 세션 목록 조회\n  getAgentChatSessions: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}/agent-chat/sessions`);\n    return response.data;\n  },\n\n  // Agent 채팅 히스토리 조회\n  getAgentChatHistory: async (projectId, sessionId) => {\n    const response = await api.get(\n      `/projects/${projectId}/agent-chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // Agent 채팅 세션 삭제\n  deleteAgentChatSession: async (projectId, sessionId) => {\n    const response = await api.delete(\n      `/projects/${projectId}/agent-chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // Agent 스트리밍 채팅 (향후 구현용)\n  streamingAgentChat: async (projectId, message, sessionId, onMessage) => {\n    try {\n      const response = await agentChatAPI.sendAgentMessage(projectId, message, sessionId);\n\n      // 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\n      if (onMessage) {\n        onMessage({\n          type: \"message\",\n          content: response.message,\n          sessionId: response.sessionId,\n          metadata: response.metadata,\n        });\n      }\n\n      return response;\n    } catch (error) {\n      if (onMessage) {\n        onMessage({\n          type: \"error\",\n          error: error.message,\n        });\n      }\n      throw error;\n    }\n  },\n};\n\n// 🆕 인증 API\nexport const authAPI = {\n  // 회원가입\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  // 로그인\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    const { accessToken, idToken, refreshToken } = response.data;\n    \n    // 토큰 저장\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('idToken', idToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    \n    return response.data;\n  },\n\n  // 로그아웃\n  signout: async () => {\n    try {\n      await api.post(\"/auth/signout\");\n    } finally {\n      // 로컬 토큰 삭제\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('idToken');\n      localStorage.removeItem('refreshToken');\n    }\n  },\n\n  // 토큰 갱신\n  refreshToken: async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      throw new Error('리프레시 토큰이 없습니다');\n    }\n\n    const response = await api.post(\"/auth/refresh\", { refreshToken });\n    const { accessToken, idToken } = response.data;\n    \n    // 새 토큰 저장\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('idToken', idToken);\n    \n    return response.data;\n  },\n\n  // 이메일 인증\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify\", verificationData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 현재 사용자 정보 (토큰에서 추출)\n  getCurrentUser: () => {\n    const token = localStorage.getItem('idToken');\n    if (!token) return null;\n    \n    try {\n      // JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return {\n        email: payload.email,\n        name: payload.name,\n        sub: payload.sub\n      };\n    } catch (error) {\n      console.error('토큰 디코딩 오류:', error);\n      return null;\n    }\n  },\n\n  // 로그인 상태 확인\n  isAuthenticated: () => {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return false;\n    \n    try {\n      // 토큰 만료 시간 확인\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\n// 파일 업로드 API\nexport const uploadAPI = {\n  // S3 Pre-signed URL로 파일 업로드\n  uploadFile: async (uploadUrl, file) => {\n    const response = await axios.put(uploadUrl, file, {\n      headers: {\n        \"Content-Type\": \"text/plain\",\n      },\n    });\n    return response;\n  },\n};\n\n// 프롬프트 카테고리 정의\nexport const PROMPT_CATEGORIES = [\n  {\n    id: \"title_type_guidelines\",\n    name: \"제목 유형 가이드라인\",\n    description: \"제목의 다양한 유형과 작성 원칙\",\n    required: true,\n  },\n  {\n    id: \"stylebook_guidelines\",\n    name: \"스타일북 가이드라인\",\n    description: \"서울경제신문의 스타일북 규정\",\n    required: true,\n  },\n  {\n    id: \"workflow\",\n    name: \"워크플로우\",\n    description: \"제목 생성 6단계 워크플로우\",\n    required: true,\n  },\n  {\n    id: \"audience_optimization\",\n    name: \"독자 최적화\",\n    description: \"대상 독자층별 최적화 전략\",\n    required: true,\n  },\n  {\n    id: \"seo_optimization\",\n    name: \"SEO 최적화\",\n    description: \"검색 엔진 최적화 가이드라인\",\n    required: false,\n  },\n  {\n    id: \"digital_elements_guidelines\",\n    name: \"디지털 요소 가이드라인\",\n    description: \"온라인 매체 특성에 맞는 제목 작성법\",\n    required: true,\n  },\n  {\n    id: \"quality_assessment\",\n    name: \"품질 평가\",\n    description: \"제목 품질 평가 기준\",\n    required: true,\n  },\n  {\n    id: \"uncertainty_handling\",\n    name: \"불확실성 처리\",\n    description: \"불확실한 정보 처리 가이드라인\",\n    required: true,\n  },\n  {\n    id: \"output_format\",\n    name: \"출력 형식\",\n    description: \"결과 출력 형식 정의\",\n    required: true,\n  },\n  {\n    id: \"description\",\n    name: \"프로젝트 설명\",\n    description: \"TITLE-NOMICS 시스템 설명\",\n    required: true,\n  },\n  {\n    id: \"knowledge\",\n    name: \"핵심 지식\",\n    description: \"제목 작성 핵심 지식\",\n    required: true,\n  },\n];\n\n// 에러 핸들링 유틸리티\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // 서버 응답 오류\n    const { status, data } = error.response;\n    return {\n      message: data?.error || `서버 오류 (${status})`,\n      status,\n    };\n  } else if (error.request) {\n    // 네트워크 오류\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0,\n    };\n  } else {\n    // 기타 오류\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1,\n    };\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}