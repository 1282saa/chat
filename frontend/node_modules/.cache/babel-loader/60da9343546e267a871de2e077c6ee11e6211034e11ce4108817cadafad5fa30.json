{"ast":null,"code":"import axios from\"axios\";// API 기본 설정\nconst API_BASE_URL=process.env.REACT_APP_API_URL||\"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";// Mock data for development\nconst mockUsageData={todayRequests:127,todayTokens:45320,monthlyLimit:1000000,monthlyUsed:523400,plan:{name:'Professional',expiresAt:'2025-02-28',features:['월 100만 토큰','우선 지원','API 액세스']},chartData:Array.from({length:30},(_,i)=>({date:new Date(Date.now()-(29-i)*24*60*60*1000).toISOString().split('T')[0],tokens:Math.floor(Math.random()*30000)+10000,requests:Math.floor(Math.random()*100)+50})),recentLogs:Array.from({length:20},(_,i)=>({id:`log-${i}`,timestamp:new Date(Date.now()-i*60*60*1000).toISOString(),model:['Claude 3 Sonnet','Claude 3.5 Haiku','Claude 3 Opus'][Math.floor(Math.random()*3)],tokens:Math.floor(Math.random()*5000)+1000,duration:Math.floor(Math.random()*3000)+500,status:Math.random()>0.1?'success':'error'}))};// Axios 인스턴스\nconst api=axios.create({baseURL:API_BASE_URL,headers:{\"Content-Type\":\"application/json\"},timeout:300000// 5분\n});// 요청 인터셉터\napi.interceptors.request.use(config=>{var _config$method;console.log(\"API 요청:\",(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;});// 응답 인터셉터\napi.interceptors.response.use(response=>{console.log(\"API 응답:\",response.status,response.config.url);return response;},error=>{var _error$response,_error$config,_error$response2;console.error(\"API 오류 상세:\",{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,message:error.message,code:error.code,url:(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,data:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data});return Promise.reject(error);});// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\nexport const projectAPI={getProjects:async()=>{const response=await api.get(\"/projects\");return response.data;},getProject:async projectId=>{const response=await api.get(`/projects/${projectId}`);return response.data;},createProject:async projectData=>{const response=await api.post(\"/projects\",projectData);return response.data;},updateProject:async(projectId,projectData)=>{const response=await api.put(`/projects/${projectId}`,projectData);return response.data;},deleteProject:async projectId=>{const response=await api.delete(`/projects/${projectId}`);return response.data;},getUploadUrl:async(projectId,fileName)=>{const response=await api.get(`/projects/${projectId}/upload-url`,{params:{fileName}});return response.data;}};// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\nexport const promptCardAPI={getPromptCards:async function(projectId){let includeContent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let includeStats=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const response=await api.get(`/prompts/${projectId}`,{params:{includeContent,includeStats}});return response.data;},createPromptCard:async(projectId,promptData)=>{const response=await api.post(`/prompts/${projectId}`,promptData);return response.data;},updatePromptCard:async(projectId,promptId,promptData)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,promptData);return response.data;},getPromptContent:async(projectId,promptId)=>{const response=await api.get(`/prompts/${projectId}/${promptId}/content`);return response.data;},deletePromptCard:async(projectId,promptId)=>{const response=await api.delete(`/prompts/${projectId}/${promptId}`);return response.data;},reorderPromptCards:async(projectId,reorderData)=>{const updatePromises=reorderData.map(_ref=>{let{promptId,stepOrder}=_ref;return api.put(`/prompts/${projectId}/${promptId}`,{stepOrder});});const responses=await Promise.all(updatePromises);return{message:\"프롬프트 카드 순서가 업데이트되었습니다.\",updatedCards:responses.map(r=>r.data)};}};// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\nexport const generateAPI={generateTitle:async(projectId,data)=>{var _data$chat_history;console.log(\"대화 생성 요청 시작:\",{projectId,inputLength:data.userInput.length,historyLength:((_data$chat_history=data.chat_history)===null||_data$chat_history===void 0?void 0:_data$chat_history.length)||0,timestamp:new Date().toISOString()});try{const response=await api.post(`/projects/${projectId}/generate`,data);console.log(\"대화 생성 성공:\",{status:response.status,mode:response.data.mode,message:response.data.message,timestamp:new Date().toISOString()});return response.data;}catch(error){var _error$response3,_error$response4;console.error(\"대화 생성 실패:\",{code:error.code,message:error.message,status:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status,responseData:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data,timestamp:new Date().toISOString()});throw error;}},// 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\ngenerateTitleStream:async(projectId,data,onChunk,onError,onComplete)=>{var _data$chat_history2;console.log(\"스트리밍 대화 생성 요청 시작:\",{projectId,inputLength:data.userInput.length,historyLength:((_data$chat_history2=data.chat_history)===null||_data$chat_history2===void 0?void 0:_data$chat_history2.length)||0,timestamp:new Date().toISOString()});try{// 1. 먼저 실제 스트리밍 API 시도\nconst streamingUrl=`${API_BASE_URL}/projects/${projectId}/generate/stream`;console.log(\"🚀 실제 스트리밍 API 시도:\",streamingUrl);const response=await fetch(streamingUrl,{method:'POST',headers:{'Content-Type':'application/json','Accept':'text/event-stream'},body:JSON.stringify(data)});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}// 2. 응답이 스트리밍 형식인지 확인\nconst contentType=response.headers.get('content-type');if(!contentType||!contentType.includes('text/event-stream')){console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");throw new Error(\"스트리밍 응답이 아닙니다\");}// 3. 실제 스트리밍 처리\nconst reader=response.body.getReader();const decoder=new TextDecoder();let buffer='';let fullResponse='';try{while(true){const{done,value}=await reader.read();if(done)break;buffer+=decoder.decode(value,{stream:true});const lines=buffer.split('\\n');buffer=lines.pop()||'';for(const line of lines){if(line.startsWith('data: ')){try{const eventData=JSON.parse(line.slice(6));if(eventData.type==='start'){console.log(\"✅ 스트리밍 시작\");}else if(eventData.type==='chunk'){fullResponse+=eventData.response;if(onChunk){onChunk(eventData.response,{content:eventData.response});}}else if(eventData.type==='complete'){console.log(\"✅ 스트리밍 완료\");if(onComplete){onComplete({result:eventData.fullResponse||fullResponse,timestamp:new Date().toISOString()});}return{result:eventData.fullResponse||fullResponse};}else if(eventData.type==='error'){throw new Error(eventData.error);}}catch(parseError){console.error(\"JSON 파싱 오류:\",parseError);}}}}}finally{reader.releaseLock();}return{result:fullResponse};}catch(streamError){console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\",streamError.message);// 4. 폴백: 일반 API 호출\ntry{const fallbackResponse=await api.post(`/projects/${projectId}/generate`,data);console.log(\"✅ 폴백 API 성공:\",{mode:fallbackResponse.data.mode,timestamp:new Date().toISOString()});// 폴백 응답을 스트리밍처럼 시뮬레이션\nif(fallbackResponse.data.result&&onChunk){const fullText=fallbackResponse.data.result;const words=fullText.split(\" \");for(let i=0;i<words.length;i++){const word=words[i]+(i<words.length-1?\" \":\"\");onChunk(word,{content:word});await new Promise(resolve=>setTimeout(resolve,30));}}// 완료 콜백 호출\nif(onComplete){onComplete({result:fallbackResponse.data.result,model_info:fallbackResponse.data.model_info,performance_metrics:fallbackResponse.data.performance_metrics,timestamp:new Date().toISOString()});}return fallbackResponse.data;}catch(fallbackError){console.error(\"❌ 폴백 API도 실패:\",fallbackError);if(onError){onError(new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\"));}throw new Error(\"서비스를 사용할 수 없습니다.\");}}},getExecutionStatus:async executionArn=>{return{status:\"SUCCEEDED\",output:\"{}\"};}};// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\nexport const crewAPI={// 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\ncreateCrewInstance:async(projectId,promptCards)=>{console.log(\"크루 인스턴스 생성 요청:\",{projectId,promptCardsCount:promptCards.length});const response=await api.post(\"/crew/instances\",{projectId,promptCards:promptCards.map(card=>({promptId:card.promptId,prompt_text:card.prompt_text,stepOrder:card.stepOrder,isActive:card.isActive}))});console.log(\"크루 인스턴스 생성 완료:\",response.data);return response.data;},// 프로젝트의 크루 인스턴스 조회\ngetCrewInstances:async projectId=>{console.log(\"크루 인스턴스 조회:\",{projectId});const response=await api.get(`/crew/instances/${projectId}`);return response.data;},// 크루 설정 조회\ngetCrewConfig:async projectId=>{console.log(\"크루 설정 조회:\",{projectId});const response=await api.get(`/crew/config/${projectId}`);return response.data;},// 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\nexecuteMultiAgent:async function(projectId,userInput){let onProgress=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;console.log(\"멀티-에이전트 실행 시작:\",{projectId,inputLength:userInput.length,timestamp:new Date().toISOString()});try{const response=await api.post(\"/crew/execute\",{projectId,userInput,mode:\"parallel\"// 병렬 처리 모드 명시\n});console.log(\"멀티-에이전트 실행 완료:\",{agentCount:Object.keys(response.data.agentResults||{}).length,titleCount:Object.keys(response.data.finalTitles||{}).length,tokenUsage:response.data.tokenUsage,timestamp:new Date().toISOString()});return response.data;}catch(error){var _error$response5,_error$response6;console.error(\"멀티-에이전트 실행 실패:\",{error:error.message,status:(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status,data:(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.data,timestamp:new Date().toISOString()});throw error;}},// 에이전트별 상세 결과 조회\ngetAgentResults:async(projectId,executionId)=>{console.log(\"에이전트 결과 조회:\",{projectId,executionId});const response=await api.get(`/crew/results/${projectId}/${executionId}`);return response.data;}};// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\nexport const chatAPI={sendMessage:async function(projectId,message,sessionId){let userId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"default\";console.log(\"채팅 메시지를 generate API로 전달:\",{projectId,message,sessionId,userId});try{const response=await generateAPI.generateTitle(projectId,{userInput:message,userRequest:\"\",chat_history:[]});return{response:response.result,sessionId,userId,timestamp:new Date().toISOString(),mode:response.mode||\"chat\"};}catch(error){console.error(\"채팅 메시지 처리 실패:\",error);throw error;}},getChatHistory:async function(projectId,sessionId){let userId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"default\";console.log(\"채팅 히스토리 조회:\",{projectId,sessionId,userId});return{messages:[],sessionId,userId,message:\"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"};},getChatSessions:async function(projectId){let userId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"default\";console.log(\"채팅 세션 목록 조회:\",{projectId,userId});return{sessions:[],message:\"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"};},deleteChatSession:async function(projectId,sessionId){let userId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"default\";console.log(\"채팅 세션 삭제:\",{projectId,sessionId,userId});return{message:\"채팅 세션 삭제가 완료되었습니다.\",sessionId,userId};}};// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\nexport const authAPI={isAuthenticated:()=>{return true;},getCurrentUser:()=>{return{id:\"user\",email:\"user@example.com\",name:\"사용자\"};},signin:async credentials=>{const response=await api.post(\"/auth/signin\",credentials);return response.data;},signup:async userData=>{const response=await api.post(\"/auth/signup\",userData);return response.data;},signout:async()=>{const response=await api.post(\"/auth/signout\");return response.data;},verifyEmail:async verificationData=>{const response=await api.post(\"/auth/verify-email\",verificationData);return response.data;},forgotPassword:async email=>{const response=await api.post(\"/auth/forgot-password\",{email});return response.data;},confirmPassword:async resetData=>{const response=await api.post(\"/auth/confirm-password\",resetData);return response.data;},// 비밀번호 찾기 - 인증번호 발송\nrequestPasswordReset:async email=>{const response=await api.post(\"/auth/forgot-password\",{email});return response.data;},// 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\nresetPassword:async resetData=>{const response=await api.post(\"/auth/confirm-password\",{email:resetData.email,code:resetData.code,newPassword:resetData.newPassword});return response.data;}};// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\nexport const handleAPIError=error=>{var _error$response7,_error$response8,_error$response9,_error$response0,_error$response1,_error$message,_error$message2;console.error(\"API 오류 상세 분석:\",{message:error.message,code:error.code,status:(_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.status,statusText:(_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.statusText,data:(_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data,timestamp:new Date().toISOString()});// 403 Forbidden 특별 처리\nif(((_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.status)===403){return{message:\"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",statusCode:403,errorType:\"FORBIDDEN\"};}// Gateway Timeout 특별 처리\nif(((_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.status)===504){return{message:\"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",statusCode:504,errorType:\"GATEWAY_TIMEOUT\"};}// CORS 오류 특별 처리\nif((_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes(\"CORS\")||error.code===\"ERR_NETWORK\"||(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes(\"Access-Control-Allow-Origin\")){return{message:\"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",statusCode:0,errorType:\"CORS_ERROR\"};}// 타임아웃 오류 특별 처리\nif(error.code===\"ECONNABORTED\"){return{message:\"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",statusCode:0,errorType:\"TIMEOUT_ERROR\"};}if(error.response){var _error$response$data,_error$response$data2;const status=error.response.status;const message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.error)||\"서버 오류가 발생했습니다\";switch(status){case 400:return{message:`잘못된 요청: ${message}`,statusCode:400};case 401:return{message:\"인증이 필요합니다\",statusCode:401};case 404:return{message:\"요청한 리소스를 찾을 수 없습니다\",statusCode:404};case 429:return{message:\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",statusCode:429};case 500:return{message:\"서버 내부 오류가 발생했습니다\",statusCode:500};default:return{message:`서버 오류 (${status}): ${message}`,statusCode:status};}}else if(error.request){return{message:\"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",statusCode:0,errorType:\"NETWORK_ERROR\"};}else{return{message:`요청 오류: ${error.message}`,statusCode:-1,errorType:\"REQUEST_ERROR\"};}};// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\nexport const DYNAMIC_PROMPT_SYSTEM={message:\"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",maxPromptCards:50,supportedFormats:[\"text\",\"markdown\"],defaultStepOrder:1};export const COLOR_OPTIONS=[{id:\"blue\",name:\"파랑\",bgClass:\"bg-blue-100\",textClass:\"text-blue-800\",borderClass:\"border-blue-200\"},{id:\"green\",name:\"초록\",bgClass:\"bg-green-100\",textClass:\"text-green-800\",borderClass:\"border-green-200\"},{id:\"purple\",name:\"보라\",bgClass:\"bg-purple-100\",textClass:\"text-purple-800\",borderClass:\"border-purple-200\"},{id:\"orange\",name:\"주황\",bgClass:\"bg-orange-100\",textClass:\"text-orange-800\",borderClass:\"border-orange-200\"},{id:\"red\",name:\"빨강\",bgClass:\"bg-red-100\",textClass:\"text-red-800\",borderClass:\"border-red-200\"},{id:\"indigo\",name:\"남색\",bgClass:\"bg-indigo-100\",textClass:\"text-indigo-800\",borderClass:\"border-indigo-200\"},{id:\"pink\",name:\"분홍\",bgClass:\"bg-pink-100\",textClass:\"text-pink-800\",borderClass:\"border-pink-200\"},{id:\"yellow\",name:\"노랑\",bgClass:\"bg-yellow-100\",textClass:\"text-yellow-800\",borderClass:\"border-yellow-200\"},{id:\"gray\",name:\"회색\",bgClass:\"bg-gray-100\",textClass:\"text-gray-800\",borderClass:\"border-gray-200\"}];export const getPromptCardInfo=promptCard=>{return{id:promptCard.promptId||promptCard.id,title:promptCard.title||\"새 프롬프트 카드\",color:promptCard.color||\"gray\",description:promptCard.description||\"\",stepOrder:promptCard.stepOrder||1,isActive:promptCard.isActive!==false};};export const filterProjects=(projects,filters)=>{let filtered=[...projects];if(filters.searchQuery){const query=filters.searchQuery.toLowerCase();filtered=filtered.filter(project=>{var _project$name,_project$description,_project$tags;return((_project$name=project.name)===null||_project$name===void 0?void 0:_project$name.toLowerCase().includes(query))||((_project$description=project.description)===null||_project$description===void 0?void 0:_project$description.toLowerCase().includes(query))||((_project$tags=project.tags)===null||_project$tags===void 0?void 0:_project$tags.some(tag=>tag.toLowerCase().includes(query)));});}switch(filters.sortBy){case\"created\":filtered.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));break;case\"updated\":filtered.sort((a,b)=>new Date(b.updatedAt)-new Date(a.updatedAt));break;case\"name\":filtered.sort((a,b)=>{var _a$name;return(_a$name=a.name)===null||_a$name===void 0?void 0:_a$name.localeCompare(b.name);});break;default:break;}return filtered;};export const formatTokenCount=count=>{if(count>=1000){return`${(count/1000).toFixed(1)}K`;}return count.toString();};export const formatFileSize=bytes=>{if(bytes>=1024){return`${(bytes/1024).toFixed(1)}KB`;}return`${bytes}B`;};export const calculatePromptStats=promptCards=>{if(!promptCards||promptCards.length===0){return{totalCards:0,totalTokens:0,averageTokens:0,activeCards:0,maxStepOrder:0,hasCustomOrder:false};}const activeCards=promptCards.filter(card=>card.isActive!==false);const totalTokens=activeCards.reduce((sum,card)=>{return sum+(card.tokenCount||card.contentLength||0);},0);const stepOrders=activeCards.map(card=>card.stepOrder||0).filter(step=>step>0);const hasCustomOrder=stepOrders.length>0;const maxStepOrder=stepOrders.length>0?Math.max(...stepOrders):0;return{totalCards:promptCards.length,activeCards:activeCards.length,totalTokens,averageTokens:activeCards.length>0?Math.round(totalTokens/activeCards.length):0,maxStepOrder,hasCustomOrder,stepOrderRange:{min:stepOrders.length>0?Math.min(...stepOrders):0,max:maxStepOrder}};};// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\nexport const getUsage=async function(){let range=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'month';console.log(\"사용량 데이터 조회 요청:\",{range});// Development mode - return mock data\nif(process.env.NODE_ENV==='development'){// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,500));return mockUsageData;}try{const response=await api.get(`/usage?range=${range}`);return response.data;}catch(error){console.warn(\"사용량 API 호출 실패, 목 데이터 반환:\",error.message);// Fallback to mock data\nreturn mockUsageData;}};// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\nexport const conversationAPI={// 대화 목록 조회 (무한 스크롤)\ngetConversations:async function(cursor){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;console.log(\"대화 목록 조회 시작:\",{cursor,limit,API_BASE_URL});const params=new URLSearchParams({limit:limit.toString()});if(cursor){params.append('cursor',cursor);}const url=`/conversations?${params}`;console.log(\"API 요청 URL:\",`${API_BASE_URL}${url}`);try{const response=await api.get(url);console.log(\"대화 목록 조회 성공:\",response.data);return response.data;}catch(error){console.error(\"대화 목록 조회 실패:\",error);console.error(\"Error response:\",error.response);console.error(\"Error config:\",error.config);throw error;}},// 새 대화 생성\ncreateConversation:async function(){let title=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'New Conversation';console.log(\"새 대화 생성:\",{title});try{const response=await api.post('/conversations',{title});return response.data;}catch(error){console.error(\"대화 생성 실패:\",error);throw error;}},// 특정 대화의 메시지 조회 (페이징)\ngetMessages:async function(conversationId,cursor){let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;console.log(\"메시지 조회:\",{conversationId,cursor,limit});const params=new URLSearchParams({convId:conversationId,limit:limit.toString()});if(cursor){params.append('cursor',cursor);}try{const response=await api.get(`/messages?${params}`);return response.data;}catch(error){console.error(\"메시지 조회 실패:\",error);throw error;}},// 대화 삭제\ndeleteConversation:async conversationId=>{console.log(\"대화 삭제:\",{conversationId});try{const response=await api.delete(`/conversations/${conversationId}`);console.log(\"대화 삭제 성공:\",response.data);return response.data;}catch(error){console.error(\"대화 삭제 실패:\",error);throw error;}}};// Mock data for conversation development\nexport const mockConversations=[{id:'1',title:'서울경제신문 AI 제목 생성 테스트',startedAt:'2025-01-20T10:30:00Z',lastActivityAt:'2025-01-20T15:45:00Z',tokenSum:1250},{id:'2',title:'경제 뉴스 헤드라인 최적화',startedAt:'2025-01-19T14:20:00Z',lastActivityAt:'2025-01-19T16:30:00Z',tokenSum:890},{id:'3',title:'부동산 시장 분석 제목 생성',startedAt:'2025-01-18T09:15:00Z',lastActivityAt:'2025-01-18T11:45:00Z',tokenSum:2150}];export const mockMessages={'1':[{id:'2025-01-20T10:30:00.000Z',role:'user',content:'오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.',tokenCount:25,timestamp:'2025-01-20T10:30:00.000Z'},{id:'2025-01-20T10:30:05.000Z',role:'assistant',content:'서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',tokenCount:95,timestamp:'2025-01-20T10:30:05.000Z'}],'2':[{id:'2025-01-19T14:20:00.000Z',role:'user',content:'반도체 산업 관련 경제 뉴스 제목을 생성해주세요.',tokenCount:20,timestamp:'2025-01-19T14:20:00.000Z'},{id:'2025-01-19T14:20:03.000Z',role:'assistant',content:'반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',tokenCount:78,timestamp:'2025-01-19T14:20:03.000Z'}]};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","mockUsageData","todayRequests","todayTokens","monthlyLimit","monthlyUsed","plan","name","expiresAt","features","chartData","Array","from","length","_","i","date","Date","now","toISOString","split","tokens","Math","floor","random","requests","recentLogs","id","timestamp","model","duration","status","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","error","_error$response","_error$config","_error$response2","message","code","data","Promise","reject","projectAPI","getProjects","get","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","arguments","undefined","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","map","_ref","stepOrder","responses","all","updatedCards","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","historyLength","chat_history","mode","_error$response3","_error$response4","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","streamingUrl","fetch","body","JSON","stringify","ok","Error","statusText","contentType","includes","reader","getReader","decoder","TextDecoder","buffer","fullResponse","done","value","read","decode","stream","lines","pop","line","startsWith","eventData","parse","slice","type","content","result","parseError","releaseLock","streamError","fallbackResponse","fullText","words","word","resolve","setTimeout","model_info","performance_metrics","fallbackError","getExecutionStatus","executionArn","output","crewAPI","createCrewInstance","promptCards","promptCardsCount","card","prompt_text","isActive","getCrewInstances","getCrewConfig","executeMultiAgent","onProgress","agentCount","Object","keys","agentResults","titleCount","finalTitles","tokenUsage","_error$response5","_error$response6","getAgentResults","executionId","chatAPI","sendMessage","sessionId","userId","userRequest","getChatHistory","messages","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","requestPasswordReset","resetPassword","newPassword","handleAPIError","_error$response7","_error$response8","_error$response9","_error$response0","_error$response1","_error$message","_error$message2","statusCode","errorType","_error$response$data","_error$response$data2","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","promptCard","title","color","description","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","toString","formatFileSize","bytes","calculatePromptStats","totalCards","totalTokens","averageTokens","activeCards","maxStepOrder","hasCustomOrder","reduce","sum","tokenCount","contentLength","stepOrders","step","max","round","stepOrderRange","min","getUsage","range","NODE_ENV","warn","conversationAPI","getConversations","cursor","limit","URLSearchParams","append","createConversation","getMessages","conversationId","convId","deleteConversation","mockConversations","startedAt","lastActivityAt","tokenSum","mockMessages","role"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Mock data for development\nconst mockUsageData = {\n  todayRequests: 127,\n  todayTokens: 45320,\n  monthlyLimit: 1000000,\n  monthlyUsed: 523400,\n  plan: {\n    name: 'Professional',\n    expiresAt: '2025-02-28',\n    features: ['월 100만 토큰', '우선 지원', 'API 액세스']\n  },\n  chartData: Array.from({ length: 30 }, (_, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    tokens: Math.floor(Math.random() * 30000) + 10000,\n    requests: Math.floor(Math.random() * 100) + 50\n  })),\n  recentLogs: Array.from({ length: 20 }, (_, i) => ({\n    id: `log-${i}`,\n    timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n    model: ['Claude 3 Sonnet', 'Claude 3.5 Haiku', 'Claude 3 Opus'][Math.floor(Math.random() * 3)],\n    tokens: Math.floor(Math.random() * 5000) + 1000,\n    duration: Math.floor(Math.random() * 3000) + 500,\n    status: Math.random() > 0.1 ? 'success' : 'error'\n  }))\n};\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      \n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                \n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, { content: eventData.response });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString(),\n                    });\n                  }\n                  return { result: eventData.fullResponse || fullResponse };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return { result: fullResponse };\n\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n      \n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          data\n        );\n\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n            await new Promise((resolve) => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n          );\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\n\nexport const crewAPI = {\n  // 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\n  createCrewInstance: async (projectId, promptCards) => {\n    console.log(\"크루 인스턴스 생성 요청:\", { projectId, promptCardsCount: promptCards.length });\n    \n    const response = await api.post(\"/crew/instances\", {\n      projectId,\n      promptCards: promptCards.map(card => ({\n        promptId: card.promptId,\n        prompt_text: card.prompt_text,\n        stepOrder: card.stepOrder,\n        isActive: card.isActive\n      }))\n    });\n    \n    console.log(\"크루 인스턴스 생성 완료:\", response.data);\n    return response.data;\n  },\n\n  // 프로젝트의 크루 인스턴스 조회\n  getCrewInstances: async (projectId) => {\n    console.log(\"크루 인스턴스 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/instances/${projectId}`);\n    return response.data;\n  },\n\n  // 크루 설정 조회\n  getCrewConfig: async (projectId) => {\n    console.log(\"크루 설정 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/config/${projectId}`);\n    return response.data;\n  },\n\n  // 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\n  executeMultiAgent: async (projectId, userInput, onProgress = null) => {\n    console.log(\"멀티-에이전트 실행 시작:\", { \n      projectId, \n      inputLength: userInput.length,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      const response = await api.post(\"/crew/execute\", {\n        projectId,\n        userInput,\n        mode: \"parallel\" // 병렬 처리 모드 명시\n      });\n\n      console.log(\"멀티-에이전트 실행 완료:\", {\n        agentCount: Object.keys(response.data.agentResults || {}).length,\n        titleCount: Object.keys(response.data.finalTitles || {}).length,\n        tokenUsage: response.data.tokenUsage,\n        timestamp: new Date().toISOString()\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"멀티-에이전트 실행 실패:\", {\n        error: error.message,\n        status: error.response?.status,\n        data: error.response?.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n\n  // 에이전트별 상세 결과 조회\n  getAgentResults: async (projectId, executionId) => {\n    console.log(\"에이전트 결과 조회:\", { projectId, executionId });\n    \n    const response = await api.get(`/crew/results/${projectId}/${executionId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기 - 인증번호 발송\n  requestPasswordReset: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\n  resetPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", {\n      email: resetData.email,\n      code: resetData.code,\n      newPassword: resetData.newPassword\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n\n// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\n\nexport const getUsage = async (range = 'month') => {\n  console.log(\"사용량 데이터 조회 요청:\", { range });\n  \n  // Development mode - return mock data\n  if (process.env.NODE_ENV === 'development') {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockUsageData;\n  }\n  \n  try {\n    const response = await api.get(`/usage?range=${range}`);\n    return response.data;\n  } catch (error) {\n    console.warn(\"사용량 API 호출 실패, 목 데이터 반환:\", error.message);\n    // Fallback to mock data\n    return mockUsageData;\n  }\n};\n\n// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\n\nexport const conversationAPI = {\n  // 대화 목록 조회 (무한 스크롤)\n  getConversations: async (cursor, limit = 20) => {\n    console.log(\"대화 목록 조회 시작:\", { cursor, limit, API_BASE_URL });\n    \n    const params = new URLSearchParams({ limit: limit.toString() });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    const url = `/conversations?${params}`;\n    console.log(\"API 요청 URL:\", `${API_BASE_URL}${url}`);\n    \n    try {\n      const response = await api.get(url);\n      console.log(\"대화 목록 조회 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 목록 조회 실패:\", error);\n      console.error(\"Error response:\", error.response);\n      console.error(\"Error config:\", error.config);\n      throw error;\n    }\n  },\n\n  // 새 대화 생성\n  createConversation: async (title = 'New Conversation') => {\n    console.log(\"새 대화 생성:\", { title });\n    \n    try {\n      const response = await api.post('/conversations', { title });\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 특정 대화의 메시지 조회 (페이징)\n  getMessages: async (conversationId, cursor, limit = 50) => {\n    console.log(\"메시지 조회:\", { conversationId, cursor, limit });\n    \n    const params = new URLSearchParams({ \n      convId: conversationId,\n      limit: limit.toString() \n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    try {\n      const response = await api.get(`/messages?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"메시지 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 대화 삭제\n  deleteConversation: async (conversationId) => {\n    console.log(\"대화 삭제:\", { conversationId });\n    \n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      console.log(\"대화 삭제 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 삭제 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// Mock data for conversation development\nexport const mockConversations = [\n  {\n    id: '1',\n    title: '서울경제신문 AI 제목 생성 테스트',\n    startedAt: '2025-01-20T10:30:00Z',\n    lastActivityAt: '2025-01-20T15:45:00Z',\n    tokenSum: 1250\n  },\n  {\n    id: '2', \n    title: '경제 뉴스 헤드라인 최적화',\n    startedAt: '2025-01-19T14:20:00Z',\n    lastActivityAt: '2025-01-19T16:30:00Z',\n    tokenSum: 890\n  },\n  {\n    id: '3',\n    title: '부동산 시장 분석 제목 생성',\n    startedAt: '2025-01-18T09:15:00Z',\n    lastActivityAt: '2025-01-18T11:45:00Z',\n    tokenSum: 2150\n  }\n];\n\nexport const mockMessages = {\n  '1': [\n    {\n      id: '2025-01-20T10:30:00.000Z',\n      role: 'user',\n      content: '오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.',\n      tokenCount: 25,\n      timestamp: '2025-01-20T10:30:00.000Z'\n    },\n    {\n      id: '2025-01-20T10:30:05.000Z',\n      role: 'assistant', \n      content: '서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',\n      tokenCount: 95,\n      timestamp: '2025-01-20T10:30:05.000Z'\n    }\n  ],\n  '2': [\n    {\n      id: '2025-01-19T14:20:00.000Z',\n      role: 'user',\n      content: '반도체 산업 관련 경제 뉴스 제목을 생성해주세요.',\n      tokenCount: 20,\n      timestamp: '2025-01-19T14:20:00.000Z'\n    },\n    {\n      id: '2025-01-19T14:20:03.000Z',\n      role: 'assistant',\n      content: '반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',\n      tokenCount: 78,\n      timestamp: '2025-01-19T14:20:03.000Z'\n    }\n  ]\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}