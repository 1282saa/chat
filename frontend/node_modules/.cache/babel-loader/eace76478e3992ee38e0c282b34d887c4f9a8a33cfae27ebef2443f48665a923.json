{"ast":null,"code":"import axios from\"axios\";// API 기본 설정\nconst API_BASE_URL=process.env.REACT_APP_API_URL||\"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";// Mock data for development\nconst mockUsageData={todayRequests:127,todayTokens:45320,monthlyLimit:1000000,monthlyUsed:523400,plan:{name:\"Professional\",expiresAt:\"2025-02-28\",features:[\"월 100만 토큰\",\"우선 지원\",\"API 액세스\"]},chartData:Array.from({length:30},(_,i)=>({date:new Date(Date.now()-(29-i)*24*60*60*1000).toISOString().split(\"T\")[0],tokens:Math.floor(Math.random()*30000)+10000,requests:Math.floor(Math.random()*100)+50})),recentLogs:Array.from({length:20},(_,i)=>({id:`log-${i}`,timestamp:new Date(Date.now()-i*60*60*1000).toISOString(),model:[\"Claude 3 Sonnet\",\"Claude 3.5 Haiku\",\"Claude 3 Opus\"][Math.floor(Math.random()*3)],tokens:Math.floor(Math.random()*5000)+1000,duration:Math.floor(Math.random()*3000)+500,status:Math.random()>0.1?\"success\":\"error\"}))};// Axios 인스턴스\nconst api=axios.create({baseURL:API_BASE_URL,headers:{\"Content-Type\":\"application/json\"},timeout:300000// 5분\n});// 요청 인터셉터 - 인증 토큰 자동 추가\napi.interceptors.request.use(async config=>{var _config$method;console.log(\"API 요청:\",(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);// 개발 모드에서 인증 스킵\nif(process.env.REACT_APP_SKIP_AUTH===\"true\"){console.log(\"🔓 개발 모드: 인증 스킵\");return config;}// 인증이 필요한 요청에 토큰 추가\ntry{var _session$tokens,_session$tokens$idTok;// AuthContext에서 토큰 가져오기 (동적 import 사용)\nconst{fetchAuthSession}=await import(\"aws-amplify/auth\");const session=await fetchAuthSession();const token=session===null||session===void 0?void 0:(_session$tokens=session.tokens)===null||_session$tokens===void 0?void 0:(_session$tokens$idTok=_session$tokens.idToken)===null||_session$tokens$idTok===void 0?void 0:_session$tokens$idTok.toString();if(token){config.headers.Authorization=`Bearer ${token}`;console.log(\"✅ 인증 토큰 추가됨\");}else{console.log(\"⚠️ 인증 토큰 없음\");}}catch(error){console.log(\"📝 인증 토큰 가져오기 실패:\",error.message);// 인증 오류가 있어도 요청은 계속 진행 (public API도 있을 수 있음)\n}return config;});// 응답 인터셉터 - 401 오류 시 리다이렉션 처리\napi.interceptors.response.use(response=>{console.log(\"API 응답:\",response.status,response.config.url);return response;},async error=>{var _error$response,_error$config,_error$response2,_error$response3;console.error(\"API 오류 상세:\",{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,message:error.message,code:error.code,url:(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,data:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data});// 401 Unauthorized 오류 처리\nif(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===401){console.log(\"🔐 인증 오류 발생 - 로그인 페이지로 리다이렉션\");try{// 로그아웃 처리\nconst{signOut}=await import(\"aws-amplify/auth\");await signOut();// 로그인 페이지로 리다이렉션\nwindow.location.href=\"/login\";}catch(signOutError){console.error(\"로그아웃 처리 실패:\",signOutError);// 강제 리다이렉션\nwindow.location.href=\"/login\";}}return Promise.reject(error);});// =============================================================================\n// 🔄 데이터 매핑 유틸리티 함수들\n// =============================================================================\n/**\n * 프론트엔드 → 백엔드 데이터 변환\n */const mapFrontendToBackend={// 채팅 메시지 데이터 변환\nchatMessage:frontendData=>({userInput:frontendData.userInput||frontendData.message,chat_history:frontendData.chat_history||frontendData.messages||[],prompt_cards:frontendData.promptCards||frontendData.prompt_cards||[],modelId:frontendData.selectedModel||frontendData.modelId,conversationId:frontendData.conversationId||frontendData.conversation_id,userSub:frontendData.userId||frontendData.user_id}),// 프롬프트 카드 데이터 변환\npromptCard:frontendData=>({title:frontendData.title,prompt_text:frontendData.prompt_text||frontendData.content,tags:frontendData.tags||[],isActive:frontendData.enabled!==false&&frontendData.isActive!==false,stepOrder:frontendData.stepOrder||1}),// 프로젝트 데이터 변환\nproject:frontendData=>({name:frontendData.name,description:frontendData.description||\"\",tags:frontendData.tags||[],aiRole:frontendData.aiRole||\"\",aiInstructions:frontendData.aiInstructions||\"\",targetAudience:frontendData.targetAudience||\"일반독자\",outputFormat:frontendData.outputFormat||\"multiple\",styleGuidelines:frontendData.styleGuidelines||\"\"})};/**\n * 백엔드 → 프론트엔드 데이터 변환\n */const mapBackendToFrontend={// 채팅 메시지 변환\nchatMessage:backendData=>({id:backendData.id||backendData.messageId||Date.now().toString(),role:backendData.role,content:backendData.content||backendData.text,timestamp:backendData.timestamp||backendData.createdAt||new Date().toISOString(),tokenCount:backendData.tokenCount||backendData.tokens_used}),// 프롬프트 카드 변환\npromptCard:backendData=>({promptId:backendData.promptId||backendData.prompt_id,title:backendData.title,prompt_text:backendData.prompt_text||backendData.content,tags:backendData.tags||[],isActive:backendData.isActive!==false,enabled:backendData.isActive!==false,stepOrder:backendData.stepOrder||1,createdAt:backendData.createdAt,updatedAt:backendData.updatedAt}),// 프로젝트 변환\nproject:backendData=>({projectId:backendData.projectId,name:backendData.name,description:backendData.description||\"\",status:backendData.status,tags:backendData.tags||[],aiRole:backendData.aiRole||\"\",aiInstructions:backendData.aiInstructions||\"\",targetAudience:backendData.targetAudience||\"일반독자\",outputFormat:backendData.outputFormat||\"multiple\",styleGuidelines:backendData.styleGuidelines||\"\",createdAt:backendData.createdAt,updatedAt:backendData.updatedAt,promptCount:backendData.promptCount||0,conversationCount:backendData.conversationCount||0}),// 대화 목록 변환\nconversation:backendData=>({id:backendData.id||backendData.conversationId,title:backendData.title,startedAt:backendData.startedAt||backendData.createdAt,lastActivityAt:backendData.lastActivityAt||backendData.updatedAt,tokenSum:backendData.tokenSum||backendData.totalTokens||0})};/**\n * Mock 데이터와 실제 API 간 전환을 위한 플래그\n */const USE_MOCK_DATA=process.env.REACT_APP_USE_MOCK_DATA===\"true\";/**\n * 🔍 API 연결 상태 확인 함수\n */export const testApiConnection=async()=>{console.log(\"🔍 API 연결 상태 확인 중...\");console.log(\"- API Base URL:\",API_BASE_URL);console.log(\"- Use Mock Data:\",USE_MOCK_DATA);console.log(\"- Node Env:\",process.env.NODE_ENV);try{// 간단한 헬스체크 엔드포인트 호출\nconst response=await api.get(\"/health\");console.log(\"✅ API 연결 성공:\",response.status);return{success:true,status:response.status,data:response.data};}catch(error){var _error$response4,_error$response5;console.log(\"❌ API 연결 실패:\",error.message);console.log(\"- Status:\",(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status);console.log(\"- Error Code:\",error.code);return{success:false,error:error.message,status:(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status,code:error.code};}};// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\nexport const projectAPI={getProjects:async()=>{try{const response=await api.get(\"/projects\");// 백엔드 데이터를 프론트엔드 형식으로 변환\nconst projects=response.data.projects||response.data;return{projects:Array.isArray(projects)?projects.map(mapBackendToFrontend.project):[],count:response.data.count||projects.length,hasMore:response.data.hasMore||false,nextKey:response.data.nextKey};}catch(error){console.error(\"프로젝트 목록 조회 실패:\",error);throw error;}},getProject:async projectId=>{try{const response=await api.get(`/projects/${projectId}`);// 백엔드 데이터를 프론트엔드 형식으로 변환\nreturn mapBackendToFrontend.project(response.data);}catch(error){console.error(\"프로젝트 상세 조회 실패:\",error);throw error;}},createProject:async projectData=>{try{// 프론트엔드 데이터를 백엔드 형식으로 변환\nconst backendData=mapFrontendToBackend.project(projectData);const response=await api.post(\"/projects\",backendData);// 응답을 프론트엔드 형식으로 변환\nreturn mapBackendToFrontend.project(response.data);}catch(error){console.error(\"프로젝트 생성 실패:\",error);throw error;}},updateProject:async(projectId,projectData)=>{try{// 프론트엔드 데이터를 백엔드 형식으로 변환\nconst backendData=mapFrontendToBackend.project(projectData);const response=await api.put(`/projects/${projectId}`,backendData);// 응답을 프론트엔드 형식으로 변환\nreturn mapBackendToFrontend.project(response.data);}catch(error){console.error(\"프로젝트 업데이트 실패:\",error);throw error;}},deleteProject:async projectId=>{try{const response=await api.delete(`/projects/${projectId}`);return response.data;}catch(error){console.error(\"프로젝트 삭제 실패:\",error);throw error;}},getUploadUrl:async(projectId,fileName)=>{try{const response=await api.get(`/projects/${projectId}/upload-url`,{params:{fileName}});return response.data;}catch(error){console.error(\"업로드 URL 생성 실패:\",error);throw error;}}};// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\nexport const promptCardAPI={getPromptCards:async function(projectId){let includeContent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let includeStats=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;try{const response=await api.get(`/prompts/${projectId}`,{params:{includeContent,includeStats}});// 백엔드 응답을 프론트엔드 형식으로 변환\nconst promptCards=response.data.promptCards||response.data.prompts||response.data;return{promptCards:Array.isArray(promptCards)?promptCards.map(mapBackendToFrontend.promptCard):[],count:response.data.count||promptCards.length};}catch(error){console.error(\"프롬프트 카드 목록 조회 실패:\",error);throw error;}},createPromptCard:async(projectId,promptData)=>{try{// 프론트엔드 데이터를 백엔드 형식으로 변환\nconst backendData=mapFrontendToBackend.promptCard(promptData);const response=await api.post(`/prompts/${projectId}`,backendData);// 응답을 프론트엔드 형식으로 변환\nreturn mapBackendToFrontend.promptCard(response.data);}catch(error){console.error(\"프롬프트 카드 생성 실패:\",error);throw error;}},updatePromptCard:async(projectId,promptId,promptData)=>{try{// 프론트엔드 데이터를 백엔드 형식으로 변환\nconst backendData=mapFrontendToBackend.promptCard(promptData);const response=await api.put(`/prompts/${projectId}/${promptId}`,backendData);// 응답을 프론트엔드 형식으로 변환\nreturn mapBackendToFrontend.promptCard(response.data);}catch(error){console.error(\"프롬프트 카드 업데이트 실패:\",error);throw error;}},getPromptContent:async(projectId,promptId)=>{try{const response=await api.get(`/prompts/${projectId}/${promptId}/content`);return response.data;}catch(error){console.error(\"프롬프트 내용 조회 실패:\",error);throw error;}},deletePromptCard:async(projectId,promptId)=>{try{const response=await api.delete(`/prompts/${projectId}/${promptId}`);return response.data;}catch(error){console.error(\"프롬프트 카드 삭제 실패:\",error);throw error;}},reorderPromptCards:async(projectId,reorderData)=>{try{const updatePromises=reorderData.map(_ref=>{let{promptId,stepOrder}=_ref;return api.put(`/prompts/${projectId}/${promptId}`,{stepOrder});});const responses=await Promise.all(updatePromises);return{message:\"프롬프트 카드 순서가 업데이트되었습니다.\",updatedCards:responses.map(r=>mapBackendToFrontend.promptCard(r.data))};}catch(error){console.error(\"프롬프트 카드 순서 변경 실패:\",error);throw error;}}};// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\nexport const generateAPI={generateTitle:async(projectId,data)=>{var _data$userInput,_data$chat_history;console.log(\"대화 생성 요청 시작:\",{projectId,inputLength:((_data$userInput=data.userInput)===null||_data$userInput===void 0?void 0:_data$userInput.length)||0,historyLength:((_data$chat_history=data.chat_history)===null||_data$chat_history===void 0?void 0:_data$chat_history.length)||0,timestamp:new Date().toISOString()});try{// 프론트엔드 데이터를 백엔드 형식으로 변환\nconst backendData=mapFrontendToBackend.chatMessage(data);console.log(\"🔄 변환된 백엔드 데이터:\",backendData);const response=await api.post(`/projects/${projectId}/generate`,backendData);console.log(\"대화 생성 성공:\",{status:response.status,mode:response.data.mode,message:response.data.message,timestamp:new Date().toISOString()});return response.data;}catch(error){var _error$response6,_error$response7;console.error(\"대화 생성 실패:\",{code:error.code,message:error.message,status:(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status,responseData:(_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data,timestamp:new Date().toISOString()});throw error;}},// 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\ngenerateTitleStream:async(projectId,data,onChunk,onError,onComplete)=>{var _data$userInput2,_data$chat_history2;console.log(\"스트리밍 대화 생성 요청 시작:\",{projectId,inputLength:((_data$userInput2=data.userInput)===null||_data$userInput2===void 0?void 0:_data$userInput2.length)||0,historyLength:((_data$chat_history2=data.chat_history)===null||_data$chat_history2===void 0?void 0:_data$chat_history2.length)||0,timestamp:new Date().toISOString()});// 프론트엔드 데이터를 백엔드 형식으로 변환 (try-catch 밖에서 정의)\nconst backendData=mapFrontendToBackend.chatMessage(data);console.log(\"🔄 스트리밍용 변환된 데이터:\",backendData);try{// 1. 먼저 실제 스트리밍 API 시도\nconst streamingUrl=`${API_BASE_URL}/projects/${projectId}/generate/stream`;console.log(\"🚀 실제 스트리밍 API 시도:\",streamingUrl);// 인증 토큰 가져오기\nlet authHeaders={};try{var _session$tokens2,_session$tokens2$idTo;const{fetchAuthSession}=await import(\"aws-amplify/auth\");const session=await fetchAuthSession();const token=session===null||session===void 0?void 0:(_session$tokens2=session.tokens)===null||_session$tokens2===void 0?void 0:(_session$tokens2$idTo=_session$tokens2.idToken)===null||_session$tokens2$idTo===void 0?void 0:_session$tokens2$idTo.toString();if(token){authHeaders.Authorization=`Bearer ${token}`;}}catch(authError){console.log(\"인증 토큰 가져오기 실패:\",authError.message);}const response=await fetch(streamingUrl,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"text/event-stream\",...authHeaders// 인증 토큰 포함\n},body:JSON.stringify(backendData)// 변환된 데이터 사용\n});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}// 2. 응답이 스트리밍 형식인지 확인\nconst contentType=response.headers.get(\"content-type\");if(!contentType||!contentType.includes(\"text/event-stream\")){console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");throw new Error(\"스트리밍 응답이 아닙니다\");}// 3. 실제 스트리밍 처리\nconst reader=response.body.getReader();const decoder=new TextDecoder();let buffer=\"\";let fullResponse=\"\";try{while(true){const{done,value}=await reader.read();if(done)break;buffer+=decoder.decode(value,{stream:true});const lines=buffer.split(\"\\n\");buffer=lines.pop()||\"\";for(const line of lines){if(line.startsWith(\"data: \")){try{const eventData=JSON.parse(line.slice(6));if(eventData.type===\"start\"){console.log(\"✅ 스트리밍 시작\");}else if(eventData.type===\"chunk\"){fullResponse+=eventData.response;if(onChunk){onChunk(eventData.response,{content:eventData.response});}}else if(eventData.type===\"complete\"){console.log(\"✅ 스트리밍 완료\");if(onComplete){onComplete({result:eventData.fullResponse||fullResponse,timestamp:new Date().toISOString()});}return{result:eventData.fullResponse||fullResponse};}else if(eventData.type===\"error\"){throw new Error(eventData.error);}}catch(parseError){console.error(\"JSON 파싱 오류:\",parseError);}}}}}finally{reader.releaseLock();}return{result:fullResponse};}catch(streamError){console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\",streamError.message);// 4. 폴백: 일반 API 호출\ntry{const fallbackResponse=await api.post(`/projects/${projectId}/generate`,backendData// 변환된 데이터 사용\n);console.log(\"✅ 폴백 API 성공:\",{mode:fallbackResponse.data.mode,timestamp:new Date().toISOString()});// 폴백 응답을 스트리밍처럼 시뮬레이션\nif(fallbackResponse.data.result&&onChunk){const fullText=fallbackResponse.data.result;const words=fullText.split(\" \");for(let i=0;i<words.length;i++){const word=words[i]+(i<words.length-1?\" \":\"\");onChunk(word,{content:word});await new Promise(resolve=>setTimeout(resolve,30));}}// 완료 콜백 호출\nif(onComplete){onComplete({result:fallbackResponse.data.result,model_info:fallbackResponse.data.model_info,performance_metrics:fallbackResponse.data.performance_metrics,timestamp:new Date().toISOString()});}return fallbackResponse.data;}catch(fallbackError){console.error(\"❌ 폴백 API도 실패:\",fallbackError);if(onError){onError(new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\"));}throw new Error(\"서비스를 사용할 수 없습니다.\");}}},getExecutionStatus:async executionArn=>{return{status:\"SUCCEEDED\",output:\"{}\"};}};// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\nexport const crewAPI={// 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\ncreateCrewInstance:async(projectId,promptCards)=>{console.log(\"크루 인스턴스 생성 요청:\",{projectId,promptCardsCount:promptCards.length});const response=await api.post(\"/crew/instances\",{projectId,promptCards:promptCards.map(card=>({promptId:card.promptId,prompt_text:card.prompt_text,stepOrder:card.stepOrder,isActive:card.isActive}))});console.log(\"크루 인스턴스 생성 완료:\",response.data);return response.data;},// 프로젝트의 크루 인스턴스 조회\ngetCrewInstances:async projectId=>{console.log(\"크루 인스턴스 조회:\",{projectId});const response=await api.get(`/crew/instances/${projectId}`);return response.data;},// 크루 설정 조회\ngetCrewConfig:async projectId=>{console.log(\"크루 설정 조회:\",{projectId});const response=await api.get(`/crew/config/${projectId}`);return response.data;},// 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\nexecuteMultiAgent:async function(projectId,userInput){let onProgress=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;console.log(\"멀티-에이전트 실행 시작:\",{projectId,inputLength:userInput.length,timestamp:new Date().toISOString()});try{const response=await api.post(\"/crew/execute\",{projectId,userInput,mode:\"parallel\"// 병렬 처리 모드 명시\n});console.log(\"멀티-에이전트 실행 완료:\",{agentCount:Object.keys(response.data.agentResults||{}).length,titleCount:Object.keys(response.data.finalTitles||{}).length,tokenUsage:response.data.tokenUsage,timestamp:new Date().toISOString()});return response.data;}catch(error){var _error$response8,_error$response9;console.error(\"멀티-에이전트 실행 실패:\",{error:error.message,status:(_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.status,data:(_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.data,timestamp:new Date().toISOString()});throw error;}},// 에이전트별 상세 결과 조회\ngetAgentResults:async(projectId,executionId)=>{console.log(\"에이전트 결과 조회:\",{projectId,executionId});const response=await api.get(`/crew/results/${projectId}/${executionId}`);return response.data;}};// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\nexport const chatAPI={sendMessage:async function(projectId,message,sessionId){let userId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"default\";console.log(\"채팅 메시지를 generate API로 전달:\",{projectId,message,sessionId,userId});try{const response=await generateAPI.generateTitle(projectId,{userInput:message,userRequest:\"\",chat_history:[]});return{response:response.result,sessionId,userId,timestamp:new Date().toISOString(),mode:response.mode||\"chat\"};}catch(error){console.error(\"채팅 메시지 처리 실패:\",error);throw error;}},getChatHistory:async function(projectId,sessionId){let userId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"default\";console.log(\"채팅 히스토리 조회:\",{projectId,sessionId,userId});return{messages:[],sessionId,userId,message:\"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"};},getChatSessions:async function(projectId){let userId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"default\";console.log(\"채팅 세션 목록 조회:\",{projectId,userId});return{sessions:[],message:\"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"};},deleteChatSession:async function(projectId,sessionId){let userId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"default\";console.log(\"채팅 세션 삭제:\",{projectId,sessionId,userId});return{message:\"채팅 세션 삭제가 완료되었습니다.\",sessionId,userId};}};// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\nexport const authAPI={isAuthenticated:()=>{return true;},getCurrentUser:()=>{return{id:\"user\",email:\"user@example.com\",name:\"사용자\"};},signin:async credentials=>{const response=await api.post(\"/auth/signin\",credentials);return response.data;},signup:async userData=>{const response=await api.post(\"/auth/signup\",userData);return response.data;},signout:async()=>{const response=await api.post(\"/auth/signout\");return response.data;},verifyEmail:async verificationData=>{const response=await api.post(\"/auth/verify-email\",verificationData);return response.data;},forgotPassword:async email=>{const response=await api.post(\"/auth/forgot-password\",{email});return response.data;},confirmPassword:async resetData=>{const response=await api.post(\"/auth/confirm-password\",resetData);return response.data;},// 비밀번호 찾기 - 인증번호 발송\nrequestPasswordReset:async email=>{const response=await api.post(\"/auth/forgot-password\",{email});return response.data;},// 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\nresetPassword:async resetData=>{const response=await api.post(\"/auth/confirm-password\",{email:resetData.email,code:resetData.code,newPassword:resetData.newPassword});return response.data;}};// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\nexport const handleAPIError=async error=>{var _error$response0,_error$response1,_error$response10,_error$response11,_error$response12,_error$response13,_error$message,_error$message2;console.error(\"API 오류 상세 분석:\",{message:error.message,code:error.code,status:(_error$response0=error.response)===null||_error$response0===void 0?void 0:_error$response0.status,statusText:(_error$response1=error.response)===null||_error$response1===void 0?void 0:_error$response1.statusText,data:(_error$response10=error.response)===null||_error$response10===void 0?void 0:_error$response10.data,timestamp:new Date().toISOString()});// 401 Unauthorized 특별 처리 - 로그인 페이지로 리다이렉트\nif(((_error$response11=error.response)===null||_error$response11===void 0?void 0:_error$response11.status)===401){try{// AuthContext에서 로그아웃 처리\nconst{signOut}=await import(\"aws-amplify/auth\");await signOut();// 로그인 페이지로 리다이렉트\nwindow.location.href=\"/auth/signin\";return{userMessage:\"인증이 만료되었습니다. 다시 로그인해주세요.\",statusCode:401,errorType:\"UNAUTHORIZED\",shouldRedirect:true};}catch(signOutError){console.error(\"로그아웃 처리 실패:\",signOutError);// 로그아웃 실패해도 리다이렉트\nwindow.location.href=\"/auth/signin\";return{userMessage:\"인증이 만료되었습니다. 다시 로그인해주세요.\",statusCode:401,errorType:\"UNAUTHORIZED\",shouldRedirect:true};}}// 403 Forbidden 특별 처리\nif(((_error$response12=error.response)===null||_error$response12===void 0?void 0:_error$response12.status)===403){return{userMessage:\"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",statusCode:403,errorType:\"FORBIDDEN\",shouldRedirect:false};}// Gateway Timeout 특별 처리\nif(((_error$response13=error.response)===null||_error$response13===void 0?void 0:_error$response13.status)===504){return{userMessage:\"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",statusCode:504,errorType:\"GATEWAY_TIMEOUT\",shouldRedirect:false};}// CORS 오류 특별 처리\nif((_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes(\"CORS\")||error.code===\"ERR_NETWORK\"||(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes(\"Access-Control-Allow-Origin\")){return{userMessage:\"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",statusCode:0,errorType:\"CORS_ERROR\",shouldRedirect:false};}// 타임아웃 오류 특별 처리\nif(error.code===\"ECONNABORTED\"){return{userMessage:\"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",statusCode:0,errorType:\"TIMEOUT_ERROR\",shouldRedirect:false};}if(error.response){var _error$response$data,_error$response$data2;const status=error.response.status;const message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.error)||\"서버 오류가 발생했습니다\";switch(status){case 400:return{userMessage:`잘못된 요청: ${message}`,statusCode:400,shouldRedirect:false};case 404:return{userMessage:\"요청한 리소스를 찾을 수 없습니다\",statusCode:404,shouldRedirect:false};case 429:return{userMessage:\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",statusCode:429,shouldRedirect:false};case 500:return{userMessage:\"서버 내부 오류가 발생했습니다\",statusCode:500,shouldRedirect:false};default:return{userMessage:`서버 오류 (${status}): ${message}`,statusCode:status,shouldRedirect:false};}}else if(error.request){return{userMessage:\"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",statusCode:0,errorType:\"NETWORK_ERROR\",shouldRedirect:false};}else{return{userMessage:`요청 오류: ${error.message}`,statusCode:-1,errorType:\"REQUEST_ERROR\",shouldRedirect:false};}};// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\nexport const DYNAMIC_PROMPT_SYSTEM={message:\"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",maxPromptCards:50,supportedFormats:[\"text\",\"markdown\"],defaultStepOrder:1};export const COLOR_OPTIONS=[{id:\"blue\",name:\"파랑\",bgClass:\"bg-blue-100\",textClass:\"text-blue-800\",borderClass:\"border-blue-200\"},{id:\"green\",name:\"초록\",bgClass:\"bg-green-100\",textClass:\"text-green-800\",borderClass:\"border-green-200\"},{id:\"purple\",name:\"보라\",bgClass:\"bg-purple-100\",textClass:\"text-purple-800\",borderClass:\"border-purple-200\"},{id:\"orange\",name:\"주황\",bgClass:\"bg-orange-100\",textClass:\"text-orange-800\",borderClass:\"border-orange-200\"},{id:\"red\",name:\"빨강\",bgClass:\"bg-red-100\",textClass:\"text-red-800\",borderClass:\"border-red-200\"},{id:\"indigo\",name:\"남색\",bgClass:\"bg-indigo-100\",textClass:\"text-indigo-800\",borderClass:\"border-indigo-200\"},{id:\"pink\",name:\"분홍\",bgClass:\"bg-pink-100\",textClass:\"text-pink-800\",borderClass:\"border-pink-200\"},{id:\"yellow\",name:\"노랑\",bgClass:\"bg-yellow-100\",textClass:\"text-yellow-800\",borderClass:\"border-yellow-200\"},{id:\"gray\",name:\"회색\",bgClass:\"bg-gray-100\",textClass:\"text-gray-800\",borderClass:\"border-gray-200\"}];export const getPromptCardInfo=promptCard=>{return{id:promptCard.promptId||promptCard.id,title:promptCard.title||\"새 프롬프트 카드\",color:promptCard.color||\"gray\",description:promptCard.description||\"\",stepOrder:promptCard.stepOrder||1,isActive:promptCard.isActive!==false};};export const filterProjects=(projects,filters)=>{let filtered=[...projects];if(filters.searchQuery){const query=filters.searchQuery.toLowerCase();filtered=filtered.filter(project=>{var _project$name,_project$description,_project$tags;return((_project$name=project.name)===null||_project$name===void 0?void 0:_project$name.toLowerCase().includes(query))||((_project$description=project.description)===null||_project$description===void 0?void 0:_project$description.toLowerCase().includes(query))||((_project$tags=project.tags)===null||_project$tags===void 0?void 0:_project$tags.some(tag=>tag.toLowerCase().includes(query)));});}switch(filters.sortBy){case\"created\":filtered.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));break;case\"updated\":filtered.sort((a,b)=>new Date(b.updatedAt)-new Date(a.updatedAt));break;case\"name\":filtered.sort((a,b)=>{var _a$name;return(_a$name=a.name)===null||_a$name===void 0?void 0:_a$name.localeCompare(b.name);});break;default:break;}return filtered;};export const formatTokenCount=count=>{if(count>=1000){return`${(count/1000).toFixed(1)}K`;}return count.toString();};export const formatFileSize=bytes=>{if(bytes>=1024){return`${(bytes/1024).toFixed(1)}KB`;}return`${bytes}B`;};export const calculatePromptStats=promptCards=>{if(!promptCards||promptCards.length===0){return{totalCards:0,totalTokens:0,averageTokens:0,activeCards:0,maxStepOrder:0,hasCustomOrder:false};}const activeCards=promptCards.filter(card=>card.isActive!==false);const totalTokens=activeCards.reduce((sum,card)=>{return sum+(card.tokenCount||card.contentLength||0);},0);const stepOrders=activeCards.map(card=>card.stepOrder||0).filter(step=>step>0);const hasCustomOrder=stepOrders.length>0;const maxStepOrder=stepOrders.length>0?Math.max(...stepOrders):0;return{totalCards:promptCards.length,activeCards:activeCards.length,totalTokens,averageTokens:activeCards.length>0?Math.round(totalTokens/activeCards.length):0,maxStepOrder,hasCustomOrder,stepOrderRange:{min:stepOrders.length>0?Math.min(...stepOrders):0,max:maxStepOrder}};};// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\nexport const getUsage=async function(){let range=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"month\";console.log(\"사용량 데이터 조회 요청:\",{range});// Mock 데이터 사용 모드이거나 개발 모드일 때\nif(USE_MOCK_DATA||process.env.NODE_ENV===\"development\"){console.log(\"🔄 Mock 사용량 데이터 반환\");// Simulate API delay\nawait new Promise(resolve=>setTimeout(resolve,500));return mockUsageData;}try{const response=await api.get(`/usage?range=${range}`);console.log(\"✅ 사용량 API 호출 성공\");return response.data;}catch(error){console.warn(\"⚠️ 사용량 API 호출 실패, Mock 데이터로 폴백:\",error.message);// Fallback to mock data\nreturn mockUsageData;}};// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\nexport const conversationAPI={// 대화 목록 조회 (무한 스크롤)\ngetConversations:async function(cursor){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;console.log(\"대화 목록 조회 시작:\",{cursor,limit,API_BASE_URL});const params=new URLSearchParams({limit:limit.toString()});if(cursor){params.append(\"cursor\",cursor);}const url=`/conversations?${params}`;console.log(\"API 요청 URL:\",`${API_BASE_URL}${url}`);try{const response=await api.get(url);console.log(\"대화 목록 조회 성공:\",response.data);// 백엔드 응답을 프론트엔드 형식으로 변환\nconst conversations=response.data.conversations||response.data.items||response.data;return{conversations:Array.isArray(conversations)?conversations.map(mapBackendToFrontend.conversation):[],hasMore:response.data.hasMore||false,nextCursor:response.data.nextCursor||response.data.cursor};}catch(error){console.error(\"대화 목록 조회 실패:\",error);// Mock 데이터로 폴백 (개발 시)\nif(USE_MOCK_DATA||process.env.NODE_ENV===\"development\"){console.log(\"🔄 Mock 데이터로 폴백\");return{conversations:mockConversations,hasMore:false,nextCursor:null};}throw error;}},// 새 대화 생성\ncreateConversation:async function(){let title=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"New Conversation\";console.log(\"새 대화 생성:\",{title});try{const response=await api.post(\"/conversations\",{title});return response.data;}catch(error){console.error(\"대화 생성 실패:\",error);throw error;}},// 특정 대화의 메시지 조회 (페이징)\ngetMessages:async function(conversationId,cursor){let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;console.log(\"메시지 조회:\",{conversationId,cursor,limit});const params=new URLSearchParams({convId:conversationId,limit:limit.toString()});if(cursor){params.append(\"cursor\",cursor);}try{const response=await api.get(`/messages?${params}`);// 백엔드 응답을 프론트엔드 형식으로 변환\nconst messages=response.data.messages||response.data.items||response.data;return{messages:Array.isArray(messages)?messages.map(mapBackendToFrontend.chatMessage):[],hasMore:response.data.hasMore||false,nextCursor:response.data.nextCursor||response.data.cursor};}catch(error){console.error(\"메시지 조회 실패:\",error);// Mock 데이터로 폴백 (개발 시)\nif(USE_MOCK_DATA||process.env.NODE_ENV===\"development\"){console.log(\"🔄 Mock 메시지 데이터로 폴백\");const mockMessageData=mockMessages[conversationId]||[];return{messages:mockMessageData,hasMore:false,nextCursor:null};}throw error;}},// 대화 삭제\ndeleteConversation:async conversationId=>{console.log(\"대화 삭제:\",{conversationId});try{const response=await api.delete(`/conversations/${conversationId}`);console.log(\"대화 삭제 성공:\",response.data);return response.data;}catch(error){console.error(\"대화 삭제 실패:\",error);throw error;}},// 대화 업데이트 (제목 등)\nupdateConversation:async(conversationId,updates)=>{console.log(\"대화 업데이트:\",{conversationId,updates});try{const response=await api.put(`/conversations/${conversationId}`,updates);console.log(\"대화 업데이트 성공:\",response.data);return response.data;}catch(error){console.error(\"대화 업데이트 실패:\",error);throw error;}}};// Mock data for conversation development\nexport const mockConversations=[{id:\"1\",title:\"서울경제신문 AI 제목 생성 테스트\",startedAt:\"2025-01-20T10:30:00Z\",lastActivityAt:\"2025-01-20T15:45:00Z\",tokenSum:1250},{id:\"2\",title:\"경제 뉴스 헤드라인 최적화\",startedAt:\"2025-01-19T14:20:00Z\",lastActivityAt:\"2025-01-19T16:30:00Z\",tokenSum:890},{id:\"3\",title:\"부동산 시장 분석 제목 생성\",startedAt:\"2025-01-18T09:15:00Z\",lastActivityAt:\"2025-01-18T11:45:00Z\",tokenSum:2150}];export const mockMessages={1:[{id:\"2025-01-20T10:30:00.000Z\",role:\"user\",content:\"오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.\",tokenCount:25,timestamp:\"2025-01-20T10:30:00.000Z\"},{id:\"2025-01-20T10:30:05.000Z\",role:\"assistant\",content:'서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',tokenCount:95,timestamp:\"2025-01-20T10:30:05.000Z\"}],2:[{id:\"2025-01-19T14:20:00.000Z\",role:\"user\",content:\"반도체 산업 관련 경제 뉴스 제목을 생성해주세요.\",tokenCount:20,timestamp:\"2025-01-19T14:20:00.000Z\"},{id:\"2025-01-19T14:20:03.000Z\",role:\"assistant\",content:'반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',tokenCount:78,timestamp:\"2025-01-19T14:20:03.000Z\"}]};// =============================================================================\n// 🧪 연결 테스트 및 상태 확인 함수들\n// =============================================================================\n/**\n * 🧪 REST API 연결 테스트 함수\n */export const testAPIConnection=async()=>{try{console.log(\"🔍 API 연결 테스트 시작...\");const response=await api.get(\"/health\",{timeout:5000// 5초 타임아웃\n});console.log(\"✅ API 연결 테스트 성공:\",response.data);return{success:true,message:\"백엔드 서버 연결 성공\",data:response.data};}catch(error){var _error$response14,_error$response15,_error$response16;console.error(\"❌ API 연결 테스트 실패:\",error);let errorMessage=\"백엔드 서버 연결 실패\";if(error.code===\"ECONNABORTED\"){errorMessage=\"연결 시간 초과 - 서버가 응답하지 않습니다\";}else if(((_error$response14=error.response)===null||_error$response14===void 0?void 0:_error$response14.status)===404){errorMessage=\"health 엔드포인트가 존재하지 않습니다\";}else if(((_error$response15=error.response)===null||_error$response15===void 0?void 0:_error$response15.status)>=500){errorMessage=\"서버 내부 오류가 발생했습니다\";}else if(!error.response){errorMessage=\"네트워크 연결 오류 - 서버에 도달할 수 없습니다\";}return{success:false,message:errorMessage,error:error.message,status:(_error$response16=error.response)===null||_error$response16===void 0?void 0:_error$response16.status};}};/**\n * 🔄 종합 연결 상태 확인 (REST API + WebSocket)\n */export const checkConnectionStatus=async()=>{console.log(\"🔍 종합 연결 상태 확인 시작...\");const results={timestamp:new Date().toISOString(),restApi:null,websocket:null,authentication:null};// 1. REST API 연결 테스트\ntry{results.restApi=await testAPIConnection();}catch(error){results.restApi={success:false,message:\"REST API 테스트 중 오류 발생\",error:error.message};}// 2. 인증 상태 확인\ntry{var _session$tokens3,_session$tokens3$idTo;const{fetchAuthSession}=await import(\"aws-amplify/auth\");const session=await fetchAuthSession();const token=session===null||session===void 0?void 0:(_session$tokens3=session.tokens)===null||_session$tokens3===void 0?void 0:(_session$tokens3$idTo=_session$tokens3.idToken)===null||_session$tokens3$idTo===void 0?void 0:_session$tokens3$idTo.toString();results.authentication={success:!!token,message:token?\"인증 토큰 확인됨\":\"인증 토큰 없음\",hasToken:!!token};}catch(error){results.authentication={success:false,message:\"인증 상태 확인 실패\",error:error.message};}// 3. WebSocket URL 확인\ntry{const wsUrl=process.env.REACT_APP_WS_URL;results.websocket={success:!!wsUrl&&(wsUrl.startsWith(\"wss://\")||wsUrl.startsWith(\"ws://\")),message:!!wsUrl?\"WebSocket URL 설정됨\":\"WebSocket URL 미설정\",url:wsUrl?wsUrl.replace(/token=[^&]+/,\"token=***\"):null};}catch(error){results.websocket={success:false,message:\"WebSocket 설정 확인 실패\",error:error.message};}console.log(\"📊 종합 연결 상태 결과:\",results);return results;};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","mockUsageData","todayRequests","todayTokens","monthlyLimit","monthlyUsed","plan","name","expiresAt","features","chartData","Array","from","length","_","i","date","Date","now","toISOString","split","tokens","Math","floor","random","requests","recentLogs","id","timestamp","model","duration","status","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","REACT_APP_SKIP_AUTH","_session$tokens","_session$tokens$idTok","fetchAuthSession","session","token","idToken","toString","Authorization","error","message","response","_error$response","_error$config","_error$response2","_error$response3","code","data","signOut","window","location","href","signOutError","Promise","reject","mapFrontendToBackend","chatMessage","frontendData","userInput","chat_history","messages","prompt_cards","promptCards","modelId","selectedModel","conversationId","conversation_id","userSub","userId","user_id","promptCard","title","prompt_text","content","tags","isActive","enabled","stepOrder","project","description","aiRole","aiInstructions","targetAudience","outputFormat","styleGuidelines","mapBackendToFrontend","backendData","messageId","role","text","createdAt","tokenCount","tokens_used","promptId","prompt_id","updatedAt","projectId","promptCount","conversationCount","conversation","startedAt","lastActivityAt","tokenSum","totalTokens","USE_MOCK_DATA","REACT_APP_USE_MOCK_DATA","testApiConnection","NODE_ENV","get","success","_error$response4","_error$response5","projectAPI","getProjects","projects","isArray","map","count","hasMore","nextKey","getProject","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","arguments","undefined","includeStats","prompts","createPromptCard","promptData","updatePromptCard","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","_ref","responses","all","updatedCards","r","generateAPI","generateTitle","_data$userInput","_data$chat_history","inputLength","historyLength","mode","_error$response6","_error$response7","responseData","generateTitleStream","onChunk","onError","onComplete","_data$userInput2","_data$chat_history2","streamingUrl","authHeaders","_session$tokens2","_session$tokens2$idTo","authError","fetch","Accept","body","JSON","stringify","ok","Error","statusText","contentType","includes","reader","getReader","decoder","TextDecoder","buffer","fullResponse","done","value","read","decode","stream","lines","pop","line","startsWith","eventData","parse","slice","type","result","parseError","releaseLock","streamError","fallbackResponse","fullText","words","word","resolve","setTimeout","model_info","performance_metrics","fallbackError","getExecutionStatus","executionArn","output","crewAPI","createCrewInstance","promptCardsCount","card","getCrewInstances","getCrewConfig","executeMultiAgent","onProgress","agentCount","Object","keys","agentResults","titleCount","finalTitles","tokenUsage","_error$response8","_error$response9","getAgentResults","executionId","chatAPI","sendMessage","sessionId","userRequest","getChatHistory","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","requestPasswordReset","resetPassword","newPassword","handleAPIError","_error$response0","_error$response1","_error$response10","_error$response11","_error$response12","_error$response13","_error$message","_error$message2","userMessage","statusCode","errorType","shouldRedirect","_error$response$data","_error$response$data2","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","color","filterProjects","filters","filtered","searchQuery","query","toLowerCase","filter","_project$name","_project$description","_project$tags","some","tag","sortBy","sort","a","b","_a$name","localeCompare","formatTokenCount","toFixed","formatFileSize","bytes","calculatePromptStats","totalCards","averageTokens","activeCards","maxStepOrder","hasCustomOrder","reduce","sum","contentLength","stepOrders","step","max","round","stepOrderRange","min","getUsage","range","warn","conversationAPI","getConversations","cursor","limit","URLSearchParams","append","conversations","items","nextCursor","mockConversations","createConversation","getMessages","convId","mockMessageData","mockMessages","deleteConversation","updateConversation","updates","testAPIConnection","_error$response14","_error$response15","_error$response16","errorMessage","checkConnectionStatus","results","restApi","websocket","authentication","_session$tokens3","_session$tokens3$idTo","hasToken","wsUrl","REACT_APP_WS_URL","replace"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Mock data for development\nconst mockUsageData = {\n  todayRequests: 127,\n  todayTokens: 45320,\n  monthlyLimit: 1000000,\n  monthlyUsed: 523400,\n  plan: {\n    name: \"Professional\",\n    expiresAt: \"2025-02-28\",\n    features: [\"월 100만 토큰\", \"우선 지원\", \"API 액세스\"],\n  },\n  chartData: Array.from({ length: 30 }, (_, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .split(\"T\")[0],\n    tokens: Math.floor(Math.random() * 30000) + 10000,\n    requests: Math.floor(Math.random() * 100) + 50,\n  })),\n  recentLogs: Array.from({ length: 20 }, (_, i) => ({\n    id: `log-${i}`,\n    timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n    model: [\"Claude 3 Sonnet\", \"Claude 3.5 Haiku\", \"Claude 3 Opus\"][\n      Math.floor(Math.random() * 3)\n    ],\n    tokens: Math.floor(Math.random() * 5000) + 1000,\n    duration: Math.floor(Math.random() * 3000) + 500,\n    status: Math.random() > 0.1 ? \"success\" : \"error\",\n  })),\n};\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터 - 인증 토큰 자동 추가\napi.interceptors.request.use(async (config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n\n  // 개발 모드에서 인증 스킵\n  if (process.env.REACT_APP_SKIP_AUTH === \"true\") {\n    console.log(\"🔓 개발 모드: 인증 스킵\");\n    return config;\n  }\n\n  // 인증이 필요한 요청에 토큰 추가\n  try {\n    // AuthContext에서 토큰 가져오기 (동적 import 사용)\n    const { fetchAuthSession } = await import(\"aws-amplify/auth\");\n    const session = await fetchAuthSession();\n    const token = session?.tokens?.idToken?.toString();\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log(\"✅ 인증 토큰 추가됨\");\n    } else {\n      console.log(\"⚠️ 인증 토큰 없음\");\n    }\n  } catch (error) {\n    console.log(\"📝 인증 토큰 가져오기 실패:\", error.message);\n    // 인증 오류가 있어도 요청은 계속 진행 (public API도 있을 수 있음)\n  }\n\n  return config;\n});\n\n// 응답 인터셉터 - 401 오류 시 리다이렉션 처리\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  async (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n\n    // 401 Unauthorized 오류 처리\n    if (error.response?.status === 401) {\n      console.log(\"🔐 인증 오류 발생 - 로그인 페이지로 리다이렉션\");\n\n      try {\n        // 로그아웃 처리\n        const { signOut } = await import(\"aws-amplify/auth\");\n        await signOut();\n\n        // 로그인 페이지로 리다이렉션\n        window.location.href = \"/login\";\n      } catch (signOutError) {\n        console.error(\"로그아웃 처리 실패:\", signOutError);\n        // 강제 리다이렉션\n        window.location.href = \"/login\";\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 🔄 데이터 매핑 유틸리티 함수들\n// =============================================================================\n\n/**\n * 프론트엔드 → 백엔드 데이터 변환\n */\nconst mapFrontendToBackend = {\n  // 채팅 메시지 데이터 변환\n  chatMessage: (frontendData) => ({\n    userInput: frontendData.userInput || frontendData.message,\n    chat_history: frontendData.chat_history || frontendData.messages || [],\n    prompt_cards: frontendData.promptCards || frontendData.prompt_cards || [],\n    modelId: frontendData.selectedModel || frontendData.modelId,\n    conversationId: frontendData.conversationId || frontendData.conversation_id,\n    userSub: frontendData.userId || frontendData.user_id,\n  }),\n\n  // 프롬프트 카드 데이터 변환\n  promptCard: (frontendData) => ({\n    title: frontendData.title,\n    prompt_text: frontendData.prompt_text || frontendData.content,\n    tags: frontendData.tags || [],\n    isActive: frontendData.enabled !== false && frontendData.isActive !== false,\n    stepOrder: frontendData.stepOrder || 1,\n  }),\n\n  // 프로젝트 데이터 변환\n  project: (frontendData) => ({\n    name: frontendData.name,\n    description: frontendData.description || \"\",\n    tags: frontendData.tags || [],\n    aiRole: frontendData.aiRole || \"\",\n    aiInstructions: frontendData.aiInstructions || \"\",\n    targetAudience: frontendData.targetAudience || \"일반독자\",\n    outputFormat: frontendData.outputFormat || \"multiple\",\n    styleGuidelines: frontendData.styleGuidelines || \"\",\n  }),\n};\n\n/**\n * 백엔드 → 프론트엔드 데이터 변환\n */\nconst mapBackendToFrontend = {\n  // 채팅 메시지 변환\n  chatMessage: (backendData) => ({\n    id: backendData.id || backendData.messageId || Date.now().toString(),\n    role: backendData.role,\n    content: backendData.content || backendData.text,\n    timestamp:\n      backendData.timestamp ||\n      backendData.createdAt ||\n      new Date().toISOString(),\n    tokenCount: backendData.tokenCount || backendData.tokens_used,\n  }),\n\n  // 프롬프트 카드 변환\n  promptCard: (backendData) => ({\n    promptId: backendData.promptId || backendData.prompt_id,\n    title: backendData.title,\n    prompt_text: backendData.prompt_text || backendData.content,\n    tags: backendData.tags || [],\n    isActive: backendData.isActive !== false,\n    enabled: backendData.isActive !== false,\n    stepOrder: backendData.stepOrder || 1,\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt,\n  }),\n\n  // 프로젝트 변환\n  project: (backendData) => ({\n    projectId: backendData.projectId,\n    name: backendData.name,\n    description: backendData.description || \"\",\n    status: backendData.status,\n    tags: backendData.tags || [],\n    aiRole: backendData.aiRole || \"\",\n    aiInstructions: backendData.aiInstructions || \"\",\n    targetAudience: backendData.targetAudience || \"일반독자\",\n    outputFormat: backendData.outputFormat || \"multiple\",\n    styleGuidelines: backendData.styleGuidelines || \"\",\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt,\n    promptCount: backendData.promptCount || 0,\n    conversationCount: backendData.conversationCount || 0,\n  }),\n\n  // 대화 목록 변환\n  conversation: (backendData) => ({\n    id: backendData.id || backendData.conversationId,\n    title: backendData.title,\n    startedAt: backendData.startedAt || backendData.createdAt,\n    lastActivityAt: backendData.lastActivityAt || backendData.updatedAt,\n    tokenSum: backendData.tokenSum || backendData.totalTokens || 0,\n  }),\n};\n\n/**\n * Mock 데이터와 실제 API 간 전환을 위한 플래그\n */\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === \"true\";\n\n/**\n * 🔍 API 연결 상태 확인 함수\n */\nexport const testApiConnection = async () => {\n  console.log(\"🔍 API 연결 상태 확인 중...\");\n  console.log(\"- API Base URL:\", API_BASE_URL);\n  console.log(\"- Use Mock Data:\", USE_MOCK_DATA);\n  console.log(\"- Node Env:\", process.env.NODE_ENV);\n\n  try {\n    // 간단한 헬스체크 엔드포인트 호출\n    const response = await api.get(\"/health\");\n    console.log(\"✅ API 연결 성공:\", response.status);\n    return { success: true, status: response.status, data: response.data };\n  } catch (error) {\n    console.log(\"❌ API 연결 실패:\", error.message);\n    console.log(\"- Status:\", error.response?.status);\n    console.log(\"- Error Code:\", error.code);\n    return {\n      success: false,\n      error: error.message,\n      status: error.response?.status,\n      code: error.code,\n    };\n  }\n};\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    try {\n      const response = await api.get(\"/projects\");\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      const projects = response.data.projects || response.data;\n      return {\n        projects: Array.isArray(projects)\n          ? projects.map(mapBackendToFrontend.project)\n          : [],\n        count: response.data.count || projects.length,\n        hasMore: response.data.hasMore || false,\n        nextKey: response.data.nextKey,\n      };\n    } catch (error) {\n      console.error(\"프로젝트 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  getProject: async (projectId) => {\n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 상세 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  createProject: async (projectData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.post(\"/projects\", backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  updateProject: async (projectId, projectData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.put(`/projects/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n\n  deleteProject: async (projectId) => {\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프로젝트 삭제 실패:\", error);\n      throw error;\n    }\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    try {\n      const response = await api.get(`/projects/${projectId}/upload-url`, {\n        params: { fileName },\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"업로드 URL 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    try {\n      const response = await api.get(`/prompts/${projectId}`, {\n        params: { includeContent, includeStats },\n      });\n\n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const promptCards =\n        response.data.promptCards || response.data.prompts || response.data;\n      return {\n        promptCards: Array.isArray(promptCards)\n          ? promptCards.map(mapBackendToFrontend.promptCard)\n          : [],\n        count: response.data.count || promptCards.length,\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.post(`/prompts/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.put(\n        `/prompts/${projectId}/${promptId}`,\n        backendData\n      );\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    try {\n      const response = await api.get(\n        `/prompts/${projectId}/${promptId}/content`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 내용 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    try {\n      const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 카드 삭제 실패:\", error);\n      throw error;\n    }\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    try {\n      const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n        api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n      );\n\n      const responses = await Promise.all(updatePromises);\n      return {\n        message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n        updatedCards: responses.map((r) =>\n          mapBackendToFrontend.promptCard(r.data)\n        ),\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 순서 변경 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput?.length || 0,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.chatMessage(data);\n\n      console.log(\"🔄 변환된 백엔드 데이터:\", backendData);\n\n      const response = await api.post(\n        `/projects/${projectId}/generate`,\n        backendData\n      );\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput?.length || 0,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    // 프론트엔드 데이터를 백엔드 형식으로 변환 (try-catch 밖에서 정의)\n    const backendData = mapFrontendToBackend.chatMessage(data);\n    console.log(\"🔄 스트리밍용 변환된 데이터:\", backendData);\n\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n\n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n\n      // 인증 토큰 가져오기\n      let authHeaders = {};\n      try {\n        const { fetchAuthSession } = await import(\"aws-amplify/auth\");\n        const session = await fetchAuthSession();\n        const token = session?.tokens?.idToken?.toString();\n        if (token) {\n          authHeaders.Authorization = `Bearer ${token}`;\n        }\n      } catch (authError) {\n        console.log(\"인증 토큰 가져오기 실패:\", authError.message);\n      }\n\n      const response = await fetch(streamingUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"text/event-stream\",\n          ...authHeaders, // 인증 토큰 포함\n        },\n        body: JSON.stringify(backendData), // 변환된 데이터 사용\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get(\"content-type\");\n      if (!contentType || !contentType.includes(\"text/event-stream\")) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = \"\";\n      let fullResponse = \"\";\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split(\"\\n\");\n          buffer = lines.pop() || \"\";\n\n          for (const line of lines) {\n            if (line.startsWith(\"data: \")) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n\n                if (eventData.type === \"start\") {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === \"chunk\") {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, {\n                      content: eventData.response,\n                    });\n                  }\n                } else if (eventData.type === \"complete\") {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString(),\n                    });\n                  }\n                  return { result: eventData.fullResponse || fullResponse };\n                } else if (eventData.type === \"error\") {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return { result: fullResponse };\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n\n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          backendData // 변환된 데이터 사용\n        );\n\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n            await new Promise((resolve) => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n          );\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\n\nexport const crewAPI = {\n  // 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\n  createCrewInstance: async (projectId, promptCards) => {\n    console.log(\"크루 인스턴스 생성 요청:\", {\n      projectId,\n      promptCardsCount: promptCards.length,\n    });\n\n    const response = await api.post(\"/crew/instances\", {\n      projectId,\n      promptCards: promptCards.map((card) => ({\n        promptId: card.promptId,\n        prompt_text: card.prompt_text,\n        stepOrder: card.stepOrder,\n        isActive: card.isActive,\n      })),\n    });\n\n    console.log(\"크루 인스턴스 생성 완료:\", response.data);\n    return response.data;\n  },\n\n  // 프로젝트의 크루 인스턴스 조회\n  getCrewInstances: async (projectId) => {\n    console.log(\"크루 인스턴스 조회:\", { projectId });\n\n    const response = await api.get(`/crew/instances/${projectId}`);\n    return response.data;\n  },\n\n  // 크루 설정 조회\n  getCrewConfig: async (projectId) => {\n    console.log(\"크루 설정 조회:\", { projectId });\n\n    const response = await api.get(`/crew/config/${projectId}`);\n    return response.data;\n  },\n\n  // 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\n  executeMultiAgent: async (projectId, userInput, onProgress = null) => {\n    console.log(\"멀티-에이전트 실행 시작:\", {\n      projectId,\n      inputLength: userInput.length,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(\"/crew/execute\", {\n        projectId,\n        userInput,\n        mode: \"parallel\", // 병렬 처리 모드 명시\n      });\n\n      console.log(\"멀티-에이전트 실행 완료:\", {\n        agentCount: Object.keys(response.data.agentResults || {}).length,\n        titleCount: Object.keys(response.data.finalTitles || {}).length,\n        tokenUsage: response.data.tokenUsage,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"멀티-에이전트 실행 실패:\", {\n        error: error.message,\n        status: error.response?.status,\n        data: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 에이전트별 상세 결과 조회\n  getAgentResults: async (projectId, executionId) => {\n    console.log(\"에이전트 결과 조회:\", { projectId, executionId });\n\n    const response = await api.get(`/crew/results/${projectId}/${executionId}`);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기 - 인증번호 발송\n  requestPasswordReset: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\n  resetPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", {\n      email: resetData.email,\n      code: resetData.code,\n      newPassword: resetData.newPassword,\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = async (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 401 Unauthorized 특별 처리 - 로그인 페이지로 리다이렉트\n  if (error.response?.status === 401) {\n    try {\n      // AuthContext에서 로그아웃 처리\n      const { signOut } = await import(\"aws-amplify/auth\");\n      await signOut();\n\n      // 로그인 페이지로 리다이렉트\n      window.location.href = \"/auth/signin\";\n\n      return {\n        userMessage: \"인증이 만료되었습니다. 다시 로그인해주세요.\",\n        statusCode: 401,\n        errorType: \"UNAUTHORIZED\",\n        shouldRedirect: true,\n      };\n    } catch (signOutError) {\n      console.error(\"로그아웃 처리 실패:\", signOutError);\n      // 로그아웃 실패해도 리다이렉트\n      window.location.href = \"/auth/signin\";\n      return {\n        userMessage: \"인증이 만료되었습니다. 다시 로그인해주세요.\",\n        statusCode: 401,\n        errorType: \"UNAUTHORIZED\",\n        shouldRedirect: true,\n      };\n    }\n  }\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      userMessage: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n      shouldRedirect: false,\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      userMessage:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n      shouldRedirect: false,\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      userMessage:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n      shouldRedirect: false,\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      userMessage:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n      shouldRedirect: false,\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return {\n          userMessage: `잘못된 요청: ${message}`,\n          statusCode: 400,\n          shouldRedirect: false,\n        };\n      case 404:\n        return {\n          userMessage: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404,\n          shouldRedirect: false,\n        };\n      case 429:\n        return {\n          userMessage: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n          shouldRedirect: false,\n        };\n      case 500:\n        return {\n          userMessage: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500,\n          shouldRedirect: false,\n        };\n      default:\n        return {\n          userMessage: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n          shouldRedirect: false,\n        };\n    }\n  } else if (error.request) {\n    return {\n      userMessage: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n      shouldRedirect: false,\n    };\n  } else {\n    return {\n      userMessage: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n      shouldRedirect: false,\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n\n// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\n\nexport const getUsage = async (range = \"month\") => {\n  console.log(\"사용량 데이터 조회 요청:\", { range });\n\n  // Mock 데이터 사용 모드이거나 개발 모드일 때\n  if (USE_MOCK_DATA || process.env.NODE_ENV === \"development\") {\n    console.log(\"🔄 Mock 사용량 데이터 반환\");\n    // Simulate API delay\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    return mockUsageData;\n  }\n\n  try {\n    const response = await api.get(`/usage?range=${range}`);\n    console.log(\"✅ 사용량 API 호출 성공\");\n    return response.data;\n  } catch (error) {\n    console.warn(\"⚠️ 사용량 API 호출 실패, Mock 데이터로 폴백:\", error.message);\n    // Fallback to mock data\n    return mockUsageData;\n  }\n};\n\n// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\n\nexport const conversationAPI = {\n  // 대화 목록 조회 (무한 스크롤)\n  getConversations: async (cursor, limit = 20) => {\n    console.log(\"대화 목록 조회 시작:\", { cursor, limit, API_BASE_URL });\n\n    const params = new URLSearchParams({ limit: limit.toString() });\n    if (cursor) {\n      params.append(\"cursor\", cursor);\n    }\n\n    const url = `/conversations?${params}`;\n    console.log(\"API 요청 URL:\", `${API_BASE_URL}${url}`);\n\n    try {\n      const response = await api.get(url);\n      console.log(\"대화 목록 조회 성공:\", response.data);\n\n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const conversations =\n        response.data.conversations || response.data.items || response.data;\n      return {\n        conversations: Array.isArray(conversations)\n          ? conversations.map(mapBackendToFrontend.conversation)\n          : [],\n        hasMore: response.data.hasMore || false,\n        nextCursor: response.data.nextCursor || response.data.cursor,\n      };\n    } catch (error) {\n      console.error(\"대화 목록 조회 실패:\", error);\n      // Mock 데이터로 폴백 (개발 시)\n      if (USE_MOCK_DATA || process.env.NODE_ENV === \"development\") {\n        console.log(\"🔄 Mock 데이터로 폴백\");\n        return {\n          conversations: mockConversations,\n          hasMore: false,\n          nextCursor: null,\n        };\n      }\n      throw error;\n    }\n  },\n\n  // 새 대화 생성\n  createConversation: async (title = \"New Conversation\") => {\n    console.log(\"새 대화 생성:\", { title });\n\n    try {\n      const response = await api.post(\"/conversations\", { title });\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 특정 대화의 메시지 조회 (페이징)\n  getMessages: async (conversationId, cursor, limit = 50) => {\n    console.log(\"메시지 조회:\", { conversationId, cursor, limit });\n\n    const params = new URLSearchParams({\n      convId: conversationId,\n      limit: limit.toString(),\n    });\n    if (cursor) {\n      params.append(\"cursor\", cursor);\n    }\n\n    try {\n      const response = await api.get(`/messages?${params}`);\n\n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const messages =\n        response.data.messages || response.data.items || response.data;\n      return {\n        messages: Array.isArray(messages)\n          ? messages.map(mapBackendToFrontend.chatMessage)\n          : [],\n        hasMore: response.data.hasMore || false,\n        nextCursor: response.data.nextCursor || response.data.cursor,\n      };\n    } catch (error) {\n      console.error(\"메시지 조회 실패:\", error);\n      // Mock 데이터로 폴백 (개발 시)\n      if (USE_MOCK_DATA || process.env.NODE_ENV === \"development\") {\n        console.log(\"🔄 Mock 메시지 데이터로 폴백\");\n        const mockMessageData = mockMessages[conversationId] || [];\n        return {\n          messages: mockMessageData,\n          hasMore: false,\n          nextCursor: null,\n        };\n      }\n      throw error;\n    }\n  },\n\n  // 대화 삭제\n  deleteConversation: async (conversationId) => {\n    console.log(\"대화 삭제:\", { conversationId });\n\n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      console.log(\"대화 삭제 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 삭제 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 대화 업데이트 (제목 등)\n  updateConversation: async (conversationId, updates) => {\n    console.log(\"대화 업데이트:\", { conversationId, updates });\n\n    try {\n      const response = await api.put(\n        `/conversations/${conversationId}`,\n        updates\n      );\n      console.log(\"대화 업데이트 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// Mock data for conversation development\nexport const mockConversations = [\n  {\n    id: \"1\",\n    title: \"서울경제신문 AI 제목 생성 테스트\",\n    startedAt: \"2025-01-20T10:30:00Z\",\n    lastActivityAt: \"2025-01-20T15:45:00Z\",\n    tokenSum: 1250,\n  },\n  {\n    id: \"2\",\n    title: \"경제 뉴스 헤드라인 최적화\",\n    startedAt: \"2025-01-19T14:20:00Z\",\n    lastActivityAt: \"2025-01-19T16:30:00Z\",\n    tokenSum: 890,\n  },\n  {\n    id: \"3\",\n    title: \"부동산 시장 분석 제목 생성\",\n    startedAt: \"2025-01-18T09:15:00Z\",\n    lastActivityAt: \"2025-01-18T11:45:00Z\",\n    tokenSum: 2150,\n  },\n];\n\nexport const mockMessages = {\n  1: [\n    {\n      id: \"2025-01-20T10:30:00.000Z\",\n      role: \"user\",\n      content: \"오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.\",\n      tokenCount: 25,\n      timestamp: \"2025-01-20T10:30:00.000Z\",\n    },\n    {\n      id: \"2025-01-20T10:30:05.000Z\",\n      role: \"assistant\",\n      content:\n        '서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',\n      tokenCount: 95,\n      timestamp: \"2025-01-20T10:30:05.000Z\",\n    },\n  ],\n  2: [\n    {\n      id: \"2025-01-19T14:20:00.000Z\",\n      role: \"user\",\n      content: \"반도체 산업 관련 경제 뉴스 제목을 생성해주세요.\",\n      tokenCount: 20,\n      timestamp: \"2025-01-19T14:20:00.000Z\",\n    },\n    {\n      id: \"2025-01-19T14:20:03.000Z\",\n      role: \"assistant\",\n      content:\n        '반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',\n      tokenCount: 78,\n      timestamp: \"2025-01-19T14:20:03.000Z\",\n    },\n  ],\n};\n\n// =============================================================================\n// 🧪 연결 테스트 및 상태 확인 함수들\n// =============================================================================\n\n/**\n * 🧪 REST API 연결 테스트 함수\n */\nexport const testAPIConnection = async () => {\n  try {\n    console.log(\"🔍 API 연결 테스트 시작...\");\n\n    const response = await api.get(\"/health\", {\n      timeout: 5000, // 5초 타임아웃\n    });\n\n    console.log(\"✅ API 연결 테스트 성공:\", response.data);\n    return {\n      success: true,\n      message: \"백엔드 서버 연결 성공\",\n      data: response.data,\n    };\n  } catch (error) {\n    console.error(\"❌ API 연결 테스트 실패:\", error);\n\n    let errorMessage = \"백엔드 서버 연결 실패\";\n    if (error.code === \"ECONNABORTED\") {\n      errorMessage = \"연결 시간 초과 - 서버가 응답하지 않습니다\";\n    } else if (error.response?.status === 404) {\n      errorMessage = \"health 엔드포인트가 존재하지 않습니다\";\n    } else if (error.response?.status >= 500) {\n      errorMessage = \"서버 내부 오류가 발생했습니다\";\n    } else if (!error.response) {\n      errorMessage = \"네트워크 연결 오류 - 서버에 도달할 수 없습니다\";\n    }\n\n    return {\n      success: false,\n      message: errorMessage,\n      error: error.message,\n      status: error.response?.status,\n    };\n  }\n};\n\n/**\n * 🔄 종합 연결 상태 확인 (REST API + WebSocket)\n */\nexport const checkConnectionStatus = async () => {\n  console.log(\"🔍 종합 연결 상태 확인 시작...\");\n\n  const results = {\n    timestamp: new Date().toISOString(),\n    restApi: null,\n    websocket: null,\n    authentication: null,\n  };\n\n  // 1. REST API 연결 테스트\n  try {\n    results.restApi = await testAPIConnection();\n  } catch (error) {\n    results.restApi = {\n      success: false,\n      message: \"REST API 테스트 중 오류 발생\",\n      error: error.message,\n    };\n  }\n\n  // 2. 인증 상태 확인\n  try {\n    const { fetchAuthSession } = await import(\"aws-amplify/auth\");\n    const session = await fetchAuthSession();\n    const token = session?.tokens?.idToken?.toString();\n\n    results.authentication = {\n      success: !!token,\n      message: token ? \"인증 토큰 확인됨\" : \"인증 토큰 없음\",\n      hasToken: !!token,\n    };\n  } catch (error) {\n    results.authentication = {\n      success: false,\n      message: \"인증 상태 확인 실패\",\n      error: error.message,\n    };\n  }\n\n  // 3. WebSocket URL 확인\n  try {\n    const wsUrl = process.env.REACT_APP_WS_URL;\n    results.websocket = {\n      success:\n        !!wsUrl && (wsUrl.startsWith(\"wss://\") || wsUrl.startsWith(\"ws://\")),\n      message: !!wsUrl ? \"WebSocket URL 설정됨\" : \"WebSocket URL 미설정\",\n      url: wsUrl ? wsUrl.replace(/token=[^&]+/, \"token=***\") : null,\n    };\n  } catch (error) {\n    results.websocket = {\n      success: false,\n      message: \"WebSocket 설정 확인 실패\",\n      error: error.message,\n    };\n  }\n\n  console.log(\"📊 종합 연결 상태 결과:\", results);\n  return results;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}