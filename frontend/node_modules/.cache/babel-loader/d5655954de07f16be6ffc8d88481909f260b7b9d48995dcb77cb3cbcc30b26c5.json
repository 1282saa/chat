{"ast":null,"code":"var _jsxFileName = \"/Users/yeong-gwang/Documents/work/\\u1109\\u1165\\u110B\\u116E\\u11AF\\u1100\\u1167\\u11BC\\u110C\\u1166\\u1109\\u1175\\u11AB\\u1106\\u116E\\u11AB/ai_\\u110C\\u1166\\u1106\\u1169\\u11A8\\u1103\\u1161\\u11AF\\u1100\\u1175/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { authAPI } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // 컴포넌트 마운트 시 인증 상태 확인\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = () => {\n    try {\n      const authenticated = authAPI.isAuthenticated();\n      setIsAuthenticated(authenticated);\n      if (authenticated) {\n        const currentUser = authAPI.getCurrentUser();\n        setUser(currentUser);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"인증 상태 확인 오류:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      const response = await authAPI.signin(credentials);\n      const currentUser = authAPI.getCurrentUser();\n      setUser(currentUser);\n      setIsAuthenticated(true);\n      return response;\n    } catch (error) {\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n  const logout = async () => {\n    try {\n      await authAPI.signout();\n    } catch (error) {\n      console.error(\"로그아웃 오류:\", error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n  const signup = async userData => {\n    return await authAPI.signup(userData);\n  };\n  const verifyEmail = async verificationData => {\n    return await authAPI.verifyEmail(verificationData);\n  };\n  const refreshToken = async () => {\n    try {\n      await authAPI.refreshToken();\n      const currentUser = authAPI.getCurrentUser();\n      setUser(currentUser);\n      setIsAuthenticated(true);\n    } catch (error) {\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    logout,\n    signup,\n    verifyEmail,\n    refreshToken,\n    checkAuthStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuthStatus","authenticated","currentUser","getCurrentUser","error","console","login","credentials","response","signin","logout","signout","signup","userData","verifyEmail","verificationData","refreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { authAPI } from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // 컴포넌트 마운트 시 인증 상태 확인\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = () => {\n    try {\n      const authenticated = authAPI.isAuthenticated();\n      setIsAuthenticated(authenticated);\n      \n      if (authenticated) {\n        const currentUser = authAPI.getCurrentUser();\n        setUser(currentUser);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"인증 상태 확인 오류:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      const response = await authAPI.signin(credentials);\n      const currentUser = authAPI.getCurrentUser();\n      \n      setUser(currentUser);\n      setIsAuthenticated(true);\n      \n      return response;\n    } catch (error) {\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authAPI.signout();\n    } catch (error) {\n      console.error(\"로그아웃 오류:\", error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  const signup = async (userData) => {\n    return await authAPI.signup(userData);\n  };\n\n  const verifyEmail = async (verificationData) => {\n    return await authAPI.verifyEmail(verificationData);\n  };\n\n  const refreshToken = async () => {\n    try {\n      await authAPI.refreshToken();\n      const currentUser = authAPI.getCurrentUser();\n      setUser(currentUser);\n      setIsAuthenticated(true);\n    } catch (error) {\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    logout,\n    signup,\n    verifyEmail,\n    refreshToken,\n    checkAuthStatus,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACAC,SAAS,CAAC,MAAM;IACdkB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI;MACF,MAAMC,aAAa,GAAGlB,OAAO,CAACe,eAAe,CAAC,CAAC;MAC/CC,kBAAkB,CAACE,aAAa,CAAC;MAEjC,IAAIA,aAAa,EAAE;QACjB,MAAMC,WAAW,GAAGnB,OAAO,CAACoB,cAAc,CAAC,CAAC;QAC5CR,OAAO,CAACO,WAAW,CAAC;MACtB,CAAC,MAAM;QACLP,OAAO,CAAC,IAAI,CAAC;MACf;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCL,kBAAkB,CAAC,KAAK,CAAC;MACzBJ,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,SAAS;MACRE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMS,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMzB,OAAO,CAAC0B,MAAM,CAACF,WAAW,CAAC;MAClD,MAAML,WAAW,GAAGnB,OAAO,CAACoB,cAAc,CAAC,CAAC;MAE5CR,OAAO,CAACO,WAAW,CAAC;MACpBH,kBAAkB,CAAC,IAAI,CAAC;MAExB,OAAOS,QAAQ;IACjB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdT,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;MACzB,MAAMK,KAAK;IACb;EACF,CAAC;EAED,MAAMM,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAM3B,OAAO,CAAC4B,OAAO,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;IAClC,CAAC,SAAS;MACRT,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;IAC3B;EACF,CAAC;EAED,MAAMa,MAAM,GAAG,MAAOC,QAAQ,IAAK;IACjC,OAAO,MAAM9B,OAAO,CAAC6B,MAAM,CAACC,QAAQ,CAAC;EACvC,CAAC;EAED,MAAMC,WAAW,GAAG,MAAOC,gBAAgB,IAAK;IAC9C,OAAO,MAAMhC,OAAO,CAAC+B,WAAW,CAACC,gBAAgB,CAAC;EACpD,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMjC,OAAO,CAACiC,YAAY,CAAC,CAAC;MAC5B,MAAMd,WAAW,GAAGnB,OAAO,CAACoB,cAAc,CAAC,CAAC;MAC5CR,OAAO,CAACO,WAAW,CAAC;MACpBH,kBAAkB,CAAC,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdT,OAAO,CAAC,IAAI,CAAC;MACbI,kBAAkB,CAAC,KAAK,CAAC;MACzB,MAAMK,KAAK;IACb;EACF,CAAC;EAED,MAAMa,KAAK,GAAG;IACZvB,IAAI;IACJE,OAAO;IACPE,eAAe;IACfQ,KAAK;IACLI,MAAM;IACNE,MAAM;IACNE,WAAW;IACXE,YAAY;IACZhB;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzB,QAAA,EAChCA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC7B,GAAA,CA/FWF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}