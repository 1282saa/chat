{"ast":null,"code":"import{useState,useEffect,useCallback}from\"react\";import{conversationAPI,mockMessages}from\"../services/api\";/**\n * 특정 대화의 메시지 관리를 위한 커스텀 훅\n * 페이지네이션과 실시간 메시지 추가 지원\n */export const useMessages=conversationId=>{const[messages,setMessages]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[hasMore,setHasMore]=useState(true);const[nextCursor,setNextCursor]=useState(null);// 메시지 로드\nconst loadMessages=useCallback(async function(){let reset=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!conversationId||loading){console.log(\"useMessages - 메시지 로드 중단:\",{conversationId,loading});return;}console.log(\"useMessages - 메시지 로드 시작:\",{conversationId,reset,cursor:reset?null:nextCursor,currentMessagesCount:messages.length});setLoading(true);setError(null);try{var _response$messages;const cursor=reset?null:nextCursor;const response=await conversationAPI.getMessages(conversationId,cursor);console.log(\"useMessages - API 응답:\",{conversationId,messagesReceived:((_response$messages=response.messages)===null||_response$messages===void 0?void 0:_response$messages.length)||0,hasMore:response.hasMore,nextCursor:response.nextCursor,reset});if(reset){setMessages(response.messages);}else{// 이전 메시지들을 앞에 추가 (페이지네이션)\nsetMessages(prev=>[...response.messages,...prev]);}setHasMore(response.hasMore);setNextCursor(response.nextCursor);}catch(err){console.error(\"메시지 로드 실패:\",err);console.error(\"실패한 conversationId:\",conversationId);setError(\"메시지를 불러오는데 실패했습니다.\");// API 실패시 mock 데이터로 fallback\nconst conversationMessages=mockMessages[conversationId]||[];console.log(\"useMessages - Mock 데이터 사용:\",{conversationId,mockMessagesCount:conversationMessages.length});if(reset){setMessages(conversationMessages);setHasMore(false);setNextCursor(null);}}finally{setLoading(false);}},[conversationId,loading,nextCursor,messages.length]);// 새 메시지 추가 (실시간)\nconst addMessage=useCallback(message=>{const newMessage={id:message.timestamp||new Date().toISOString(),role:message.role,content:message.content,tokenCount:message.tokenCount||0,timestamp:message.timestamp||new Date().toISOString()};setMessages(prev=>[...prev,newMessage]);return newMessage;},[]);// 메시지 업데이트 (스트리밍 중 내용 업데이트)\nconst updateMessage=useCallback((messageId,updates)=>{setMessages(prev=>prev.map(msg=>msg.id===messageId?{...msg,...updates}:msg));},[]);// 메시지 삭제\nconst removeMessage=useCallback(messageId=>{setMessages(prev=>prev.filter(msg=>msg.id!==messageId));},[]);// 이전 메시지 로드 (스크롤 최상단에서)\nconst loadPreviousMessages=useCallback(()=>{if(hasMore&&!loading){return loadMessages(false);}return Promise.resolve();},[hasMore,loading,loadMessages]);// 메시지 초기화 (새 대화 시작시)\nconst clearMessages=useCallback(()=>{setMessages([]);setHasMore(true);setNextCursor(null);setError(null);},[]);// conversationId 변경시 메시지 로드\nuseEffect(()=>{console.log(\"🔍 [DEBUG] useMessages - conversationId 변경 감지:\",{conversationId,conversationIdType:typeof conversationId,isConversationIdNull:conversationId===null,isConversationIdUndefined:conversationId===undefined,previousConversationId:conversationId// 이전 값을 추적하기 어려우므로 현재 값만 표시\n});if(conversationId){console.log(\"🔍 [DEBUG] useMessages - 메시지 클리어 및 로드 시작:\",conversationId);clearMessages();loadMessages(true);}else{console.log(\"🔍 [DEBUG] useMessages - conversationId가 null/undefined, 메시지 클리어\");clearMessages();}},[conversationId]);return{messages,loading,error,hasMore,addMessage,updateMessage,removeMessage,loadPreviousMessages,clearMessages,refresh:()=>loadMessages(true)};};","map":{"version":3,"names":["useState","useEffect","useCallback","conversationAPI","mockMessages","useMessages","conversationId","messages","setMessages","loading","setLoading","error","setError","hasMore","setHasMore","nextCursor","setNextCursor","loadMessages","reset","arguments","length","undefined","console","log","cursor","currentMessagesCount","_response$messages","response","getMessages","messagesReceived","prev","err","conversationMessages","mockMessagesCount","addMessage","message","newMessage","id","timestamp","Date","toISOString","role","content","tokenCount","updateMessage","messageId","updates","map","msg","removeMessage","filter","loadPreviousMessages","Promise","resolve","clearMessages","conversationIdType","isConversationIdNull","isConversationIdUndefined","previousConversationId","refresh"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useMessages.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { conversationAPI, mockMessages } from \"../services/api\";\n\n/**\n * 특정 대화의 메시지 관리를 위한 커스텀 훅\n * 페이지네이션과 실시간 메시지 추가 지원\n */\nexport const useMessages = (conversationId) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 메시지 로드\n  const loadMessages = useCallback(\n    async (reset = false) => {\n      if (!conversationId || loading) {\n        console.log(\"useMessages - 메시지 로드 중단:\", {\n          conversationId,\n          loading,\n        });\n        return;\n      }\n\n      console.log(\"useMessages - 메시지 로드 시작:\", {\n        conversationId,\n        reset,\n        cursor: reset ? null : nextCursor,\n        currentMessagesCount: messages.length,\n      });\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        const cursor = reset ? null : nextCursor;\n        const response = await conversationAPI.getMessages(\n          conversationId,\n          cursor\n        );\n\n        console.log(\"useMessages - API 응답:\", {\n          conversationId,\n          messagesReceived: response.messages?.length || 0,\n          hasMore: response.hasMore,\n          nextCursor: response.nextCursor,\n          reset,\n        });\n\n        if (reset) {\n          setMessages(response.messages);\n        } else {\n          // 이전 메시지들을 앞에 추가 (페이지네이션)\n          setMessages((prev) => [...response.messages, ...prev]);\n        }\n\n        setHasMore(response.hasMore);\n        setNextCursor(response.nextCursor);\n      } catch (err) {\n        console.error(\"메시지 로드 실패:\", err);\n        console.error(\"실패한 conversationId:\", conversationId);\n        setError(\"메시지를 불러오는데 실패했습니다.\");\n\n        // API 실패시 mock 데이터로 fallback\n        const conversationMessages = mockMessages[conversationId] || [];\n        console.log(\"useMessages - Mock 데이터 사용:\", {\n          conversationId,\n          mockMessagesCount: conversationMessages.length,\n        });\n\n        if (reset) {\n          setMessages(conversationMessages);\n          setHasMore(false);\n          setNextCursor(null);\n        }\n      } finally {\n        setLoading(false);\n      }\n    },\n    [conversationId, loading, nextCursor, messages.length]\n  );\n\n  // 새 메시지 추가 (실시간)\n  const addMessage = useCallback((message) => {\n    const newMessage = {\n      id: message.timestamp || new Date().toISOString(),\n      role: message.role,\n      content: message.content,\n      tokenCount: message.tokenCount || 0,\n      timestamp: message.timestamp || new Date().toISOString(),\n    };\n\n    setMessages((prev) => [...prev, newMessage]);\n    return newMessage;\n  }, []);\n\n  // 메시지 업데이트 (스트리밍 중 내용 업데이트)\n  const updateMessage = useCallback((messageId, updates) => {\n    setMessages((prev) =>\n      prev.map((msg) => (msg.id === messageId ? { ...msg, ...updates } : msg))\n    );\n  }, []);\n\n  // 메시지 삭제\n  const removeMessage = useCallback((messageId) => {\n    setMessages((prev) => prev.filter((msg) => msg.id !== messageId));\n  }, []);\n\n  // 이전 메시지 로드 (스크롤 최상단에서)\n  const loadPreviousMessages = useCallback(() => {\n    if (hasMore && !loading) {\n      return loadMessages(false);\n    }\n    return Promise.resolve();\n  }, [hasMore, loading, loadMessages]);\n\n  // 메시지 초기화 (새 대화 시작시)\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setHasMore(true);\n    setNextCursor(null);\n    setError(null);\n  }, []);\n\n  // conversationId 변경시 메시지 로드\n  useEffect(() => {\n    console.log(\"🔍 [DEBUG] useMessages - conversationId 변경 감지:\", {\n      conversationId,\n      conversationIdType: typeof conversationId,\n      isConversationIdNull: conversationId === null,\n      isConversationIdUndefined: conversationId === undefined,\n      previousConversationId: conversationId, // 이전 값을 추적하기 어려우므로 현재 값만 표시\n    });\n\n    if (conversationId) {\n      console.log(\n        \"🔍 [DEBUG] useMessages - 메시지 클리어 및 로드 시작:\",\n        conversationId\n      );\n      clearMessages();\n      loadMessages(true);\n    } else {\n      console.log(\n        \"🔍 [DEBUG] useMessages - conversationId가 null/undefined, 메시지 클리어\"\n      );\n      clearMessages();\n    }\n  }, [conversationId]);\n\n  return {\n    messages,\n    loading,\n    error,\n    hasMore,\n    addMessage,\n    updateMessage,\n    removeMessage,\n    loadPreviousMessages,\n    clearMessages,\n    refresh: () => loadMessages(true),\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}