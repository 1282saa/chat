{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = result => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date()\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date()\n    };\n    const historyBeforeSend = messages; // 현재까지 기록 (userMessage 제외)\n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n\n    // API 전송을 위한 chat_history 생성 (newMessages 기반으로)\n    const chatHistoryForAPI = historyBeforeSend.filter(msg => msg.type === \"user\" || msg.type === \"assistant\").map(msg => ({\n      role: msg.type,\n      // 'type'을 'role'로 매핑\n      content: msg.content\n    }));\n\n    // 백엔드에서는 userInput을 별도로 처리하므로, history에서는 마지막 입력을 제외합니다.\n    const finalChatHistory = chatHistoryForAPI;\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content: \"처리 중입니다...\",\n        timestamp: new Date(),\n        isLoading: true\n      };\n      setMessages(prev => [...prev, loadingMessage]);\n\n      // 오케스트레이션 실행 (수정된 chat_history와 현재 입력을 전달)\n      const result = await executeOrchestration(currentInput, {\n        chat_history: finalChatHistory\n      });\n      const responseMessage = processAIResponse(result);\n\n      // 로딩 메시지 제거하고 결과 메시지 추가\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([responseMessage]));\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n    }\n  }, [inputValue, isGenerating, executeOrchestration, pollOrchestrationResult, promptCards]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom\n  };\n};\n_s(useChat, \"65spPCFiJeixZY7XKNhZdn5atpw=\", false, function () {\n  return [useOrchestration];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","processAIResponse","result","console","error","id","Date","now","type","content","timestamp","isError","responseContent","useChat","projectId","projectName","promptCards","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","messagesEndRef","inputRef","isExecuting","isGenerating","executeOrchestration","pollOrchestrationResult","resetOrchestration","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","Math","random","historyBeforeSend","newMessages","currentInput","chatHistoryForAPI","filter","msg","map","role","finalChatHistory","loadingMessage","isLoading","prev","chat_history","responseMessage","concat","errorMessage","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","success","setTimeout","handleCopyTitle","title","index","resetChat"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date(),\n    };\n\n    const historyBeforeSend = messages; // 현재까지 기록 (userMessage 제외)\n    const newMessages = [...messages, userMessage];\n    setMessages(newMessages);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n\n    // API 전송을 위한 chat_history 생성 (newMessages 기반으로)\n    const chatHistoryForAPI = historyBeforeSend\n      .filter((msg) => msg.type === \"user\" || msg.type === \"assistant\")\n      .map((msg) => ({\n        role: msg.type, // 'type'을 'role'로 매핑\n        content: msg.content,\n      }));\n\n    // 백엔드에서는 userInput을 별도로 처리하므로, history에서는 마지막 입력을 제외합니다.\n    const finalChatHistory = chatHistoryForAPI;\n\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content: \"처리 중입니다...\",\n        timestamp: new Date(),\n        isLoading: true,\n      };\n      setMessages((prev) => [...prev, loadingMessage]);\n\n      // 오케스트레이션 실행 (수정된 chat_history와 현재 입력을 전달)\n      const result = await executeOrchestration(currentInput, {\n        chat_history: finalChatHistory,\n      });\n\n      const responseMessage = processAIResponse(result);\n\n      // 로딩 메시지 제거하고 결과 메시지 추가\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([responseMessage])\n      );\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n      };\n\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n      );\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    promptCards,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}