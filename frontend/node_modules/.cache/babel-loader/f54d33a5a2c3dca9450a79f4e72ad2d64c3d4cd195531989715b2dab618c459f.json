{"ast":null,"code":"import axios from\"axios\";// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL=process.env.REACT_APP_API_URL||\"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";// Axios 인스턴스 생성\nconst api=axios.create({baseURL:API_BASE_URL,headers:{\"Content-Type\":\"application/json\"}});// 요청 인터셉터\napi.interceptors.request.use(config=>{var _config$method;console.log(\"API 요청:\",(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);// 인증 토큰 추가 (API Gateway Cognito Authorizer는 ID Token을 요구)\nconst token=localStorage.getItem('idToken')||localStorage.getItem('accessToken');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// 응답 인터셉터\napi.interceptors.response.use(response=>{console.log(\"API 응답:\",response.status,response.config.url);return response;},error=>{var _error$response,_error$response2,_error$response3;console.error(\"API 오류:\",(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error.message);// 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\nif(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===401){// 토큰 만료 처리\nlocalStorage.removeItem('accessToken');localStorage.removeItem('idToken');localStorage.removeItem('refreshToken');// 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\nwindow.location.href='/login';}return Promise.reject(error);});// 프로젝트 관련 API\nexport const projectAPI={// 프로젝트 목록 조회\ngetProjects:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get(\"/projects\",{params});return response.data;},// 프로젝트 생성\ncreateProject:async projectData=>{const response=await api.post(\"/projects\",projectData);return response.data;},// 프로젝트 상세 조회\ngetProject:async projectId=>{const response=await api.get(`/projects/${projectId}`);return response.data;},// 프로젝트 업데이트\nupdateProject:async(projectId,projectData)=>{const response=await api.put(`/projects/${projectId}`,projectData);return response.data;},// 프로젝트 삭제\ndeleteProject:async projectId=>{const response=await api.delete(`/projects/${projectId}`);return response.data;},// 업로드 URL 요청\ngetUploadUrl:async(projectId,category,filename)=>{const response=await api.get(`/projects/${projectId}/upload-url`,{params:{category,filename}});return response.data;}};// 제목 생성 API (Step Functions 기반)\nexport const generateAPI={// 제목 생성 시작 (Step Functions 실행)\nstartTitleGeneration:async(projectId,article)=>{const response=await api.post(`/projects/${projectId}/generate`,{article});return response.data;},// 실행 상태 조회\ngetExecutionStatus:async executionArn=>{const encodedArn=encodeURIComponent(executionArn);const response=await api.get(`/executions/${encodedArn}`);return response.data;},// 폴링을 통한 결과 대기\npollForResult:async function(executionArn){let maxRetries=arguments.length>1&&arguments[1]!==undefined?arguments[1]:30;let interval=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2000;let retries=0;while(retries<maxRetries){try{const status=await generateAPI.getExecutionStatus(executionArn);if(status.status===\"SUCCEEDED\"){return{success:true,data:status};}else if(status.status===\"FAILED\"){return{success:false,error:status.error||\"실행이 실패했습니다\"};}else if(status.status===\"TIMED_OUT\"){return{success:false,error:\"실행 시간이 초과되었습니다\"};}else if(status.status===\"ABORTED\"){return{success:false,error:\"실행이 중단되었습니다\"};}// 아직 실행 중이면 대기\nawait new Promise(resolve=>setTimeout(resolve,interval));retries++;}catch(error){console.error(\"폴링 중 오류:\",error);retries++;if(retries>=maxRetries){return{success:false,error:\"상태 조회 중 오류가 발생했습니다\"};}await new Promise(resolve=>setTimeout(resolve,interval));}}return{success:false,error:\"실행 시간이 초과되었습니다\"};},// 제목 생성 (시작 + 폴링)\ngenerateTitle:async(projectId,article,onProgress)=>{try{// Step Functions 실행 시작\nconst startResponse=await generateAPI.startTitleGeneration(projectId,article);if(onProgress){onProgress({status:\"started\",message:\"제목 생성이 시작되었습니다...\",executionArn:startResponse.executionArn});}// 폴링을 통한 결과 대기\nconst pollResponse=await generateAPI.pollForResult(startResponse.executionArn);if(pollResponse.success){return{conversationId:pollResponse.data.conversationId,projectId:projectId,result:pollResponse.data.result,usage:pollResponse.data.usage,timestamp:pollResponse.data.completedAt||new Date().toISOString(),executionArn:startResponse.executionArn};}else{throw new Error(pollResponse.error);}}catch(error){console.error(\"제목 생성 실패:\",error);throw error;}}};// 🆕 채팅 API (LangChain 기반)\nexport const chatAPI={// 채팅 메시지 전송\nsendMessage:async function(projectId,message){let sessionId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let userId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"default\";const response=await api.post(`/projects/${projectId}/chat`,{message,sessionId,userId});return response.data;},// 채팅 세션 목록 조회\ngetChatSessions:async projectId=>{const response=await api.get(`/projects/${projectId}/chat/sessions`);return response.data;},// 채팅 히스토리 조회\ngetChatHistory:async(projectId,sessionId)=>{const response=await api.get(`/projects/${projectId}/chat/sessions/${sessionId}`);return response.data;},// 채팅 세션 삭제\ndeleteChatSession:async(projectId,sessionId)=>{const response=await api.delete(`/projects/${projectId}/chat/sessions/${sessionId}`);return response.data;},// 스트리밍 채팅 (WebSocket 대체용)\nstreamingChat:async(projectId,message,sessionId,onMessage)=>{try{const response=await chatAPI.sendMessage(projectId,message,sessionId);// 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\nif(onMessage){onMessage({type:\"message\",content:response.message,sessionId:response.sessionId,metadata:response.metadata});}return response;}catch(error){if(onMessage){onMessage({type:\"error\",error:error.message});}throw error;}}};// 🆕 Bedrock Agent 채팅 API\nexport const agentChatAPI={// Agent 채팅 메시지 전송\nsendAgentMessage:async function(projectId,message){let sessionId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let userId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"default\";const response=await api.post(`/projects/${projectId}/agent-chat`,{message,sessionId,userId});return response.data;},// Agent 채팅 세션 목록 조회\ngetAgentChatSessions:async projectId=>{const response=await api.get(`/projects/${projectId}/agent-chat/sessions`);return response.data;},// Agent 채팅 히스토리 조회\ngetAgentChatHistory:async(projectId,sessionId)=>{const response=await api.get(`/projects/${projectId}/agent-chat/sessions/${sessionId}`);return response.data;},// Agent 채팅 세션 삭제\ndeleteAgentChatSession:async(projectId,sessionId)=>{const response=await api.delete(`/projects/${projectId}/agent-chat/sessions/${sessionId}`);return response.data;},// Agent 스트리밍 채팅 (향후 구현용)\nstreamingAgentChat:async(projectId,message,sessionId,onMessage)=>{try{const response=await agentChatAPI.sendAgentMessage(projectId,message,sessionId);// 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\nif(onMessage){onMessage({type:\"message\",content:response.message,sessionId:response.sessionId,metadata:response.metadata});}return response;}catch(error){if(onMessage){onMessage({type:\"error\",error:error.message});}throw error;}}};// 🆕 프롬프트 카드 관리 API\nexport const promptCardAPI={// 프롬프트 카드 목록 조회 (step_order 순으로 정렬)\ngetPromptCards:async function(projectId){let includeContent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let includeDisabled=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const params={};if(includeContent)params.include_content='true';if(includeDisabled)params.include_disabled='true';const response=await api.get(`/prompts/${projectId}`,{params});return response.data;},// 새 프롬프트 카드 생성\ncreatePromptCard:async(projectId,promptData)=>{const response=await api.post(`/prompts/${projectId}`,promptData);return response.data;},// 프롬프트 카드 수정\nupdatePromptCard:async(projectId,promptId,promptData)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,promptData);return response.data;},// 프롬프트 카드 삭제\ndeletePromptCard:async(projectId,promptId)=>{const response=await api.delete(`/prompts/${projectId}/${promptId}`);return response.data;},// 프롬프트 카드 순서 변경\nreorderPromptCard:async(projectId,promptId,newStepOrder)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,{step_order:newStepOrder});return response.data;},// 프롬프트 카드 활성/비활성 토글\ntogglePromptCard:async(projectId,promptId,enabled)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,{enabled:enabled});return response.data;}};// 🆕 인증 API\nexport const authAPI={// 회원가입\nsignup:async userData=>{const response=await api.post(\"/auth/signup\",userData);return response.data;},// 로그인\nsignin:async credentials=>{const response=await api.post(\"/auth/signin\",credentials);const{accessToken,idToken,refreshToken}=response.data;// 토큰 저장\nlocalStorage.setItem('accessToken',accessToken);localStorage.setItem('idToken',idToken);localStorage.setItem('refreshToken',refreshToken);return response.data;},// 로그아웃\nsignout:async()=>{try{await api.post(\"/auth/signout\");}finally{// 로컬 토큰 삭제\nlocalStorage.removeItem('accessToken');localStorage.removeItem('idToken');localStorage.removeItem('refreshToken');}},// 토큰 갱신\nrefreshToken:async()=>{const refreshToken=localStorage.getItem('refreshToken');if(!refreshToken){throw new Error('리프레시 토큰이 없습니다');}const response=await api.post(\"/auth/refresh\",{refreshToken});const{accessToken,idToken}=response.data;// 새 토큰 저장\nlocalStorage.setItem('accessToken',accessToken);localStorage.setItem('idToken',idToken);return response.data;},// 이메일 인증\nverifyEmail:async verificationData=>{const response=await api.post(\"/auth/verify\",verificationData);return response.data;},// 비밀번호 찾기\nforgotPassword:async email=>{const response=await api.post(\"/auth/forgot-password\",{email});return response.data;},// 비밀번호 재설정\nconfirmPassword:async resetData=>{const response=await api.post(\"/auth/confirm-password\",resetData);return response.data;},// 현재 사용자 정보 (토큰에서 추출)\ngetCurrentUser:()=>{const token=localStorage.getItem('idToken');if(!token)return null;try{// JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\nconst payload=JSON.parse(atob(token.split('.')[1]));return{email:payload.email,name:payload.name,sub:payload.sub};}catch(error){console.error('토큰 디코딩 오류:',error);return null;}},// 로그인 상태 확인\nisAuthenticated:()=>{const token=localStorage.getItem('accessToken');if(!token)return false;try{// 토큰 만료 시간 확인\nconst payload=JSON.parse(atob(token.split('.')[1]));const currentTime=Date.now()/1000;return payload.exp>currentTime;}catch(error){return false;}}};// 파일 업로드 API\nexport const uploadAPI={// S3 Pre-signed URL로 파일 업로드\nuploadFile:async(uploadUrl,file)=>{const response=await axios.put(uploadUrl,file,{headers:{\"Content-Type\":\"text/plain\"}});return response;}};// 프롬프트 카테고리 정의 (레거시 - 기존 파일 업로드용)\nexport const PROMPT_CATEGORIES=[{id:\"title_type_guidelines\",name:\"제목 유형 가이드라인\",description:\"제목의 다양한 유형과 작성 원칙\",required:true},{id:\"stylebook_guidelines\",name:\"스타일북 가이드라인\",description:\"서울경제신문의 스타일북 규정\",required:true},{id:\"workflow\",name:\"워크플로우\",description:\"제목 생성 6단계 워크플로우\",required:true},{id:\"audience_optimization\",name:\"독자 최적화\",description:\"대상 독자층별 최적화 전략\",required:true},{id:\"seo_optimization\",name:\"SEO 최적화\",description:\"검색 엔진 최적화 가이드라인\",required:false},{id:\"digital_elements_guidelines\",name:\"디지털 요소 가이드라인\",description:\"온라인 매체 특성에 맞는 제목 작성법\",required:true},{id:\"quality_assessment\",name:\"품질 평가\",description:\"제목 품질 평가 기준\",required:true},{id:\"uncertainty_handling\",name:\"불확실성 처리\",description:\"불확실한 정보 처리 가이드라인\",required:true},{id:\"output_format\",name:\"출력 형식\",description:\"결과 출력 형식 정의\",required:true},{id:\"description\",name:\"프로젝트 설명\",description:\"TITLE-NOMICS 시스템 설명\",required:true},{id:\"knowledge\",name:\"핵심 지식\",description:\"제목 작성 핵심 지식\",required:true}];// 🆕 프롬프트 카드 카테고리 정의 (새로운 카드 시스템용)\nexport const PROMPT_CARD_CATEGORIES=[{id:\"instruction\",name:\"지시사항\",description:\"기본 작업 지시 및 목표 설정\",color:\"blue\",icon:\"📋\"},{id:\"knowledge\",name:\"지식 기반\",description:\"도메인 지식 및 참고 정보\",color:\"purple\",icon:\"📚\"},{id:\"summary\",name:\"요약 규칙\",description:\"내용 요약 및 압축 가이드라인\",color:\"green\",icon:\"📝\"},{id:\"style_guide\",name:\"스타일 가이드\",description:\"브랜드 톤앤매너 및 작성 스타일\",color:\"orange\",icon:\"🎨\"},{id:\"validation\",name:\"검증 기준\",description:\"품질 확인 및 검증 룰\",color:\"red\",icon:\"✅\"},{id:\"enhancement\",name:\"개선 지침\",description:\"결과 향상 및 최적화 방법\",color:\"yellow\",icon:\"⚡\"}];// 사용 가능한 AI 모델 목록\nexport const AVAILABLE_MODELS=[{id:\"anthropic.claude-3-5-sonnet-20241022-v2:0\",name:\"Claude 3.5 Sonnet (최신)\",description:\"가장 최신이고 성능이 뛰어난 모델\",maxTokens:200000},{id:\"anthropic.claude-3-sonnet-20240229-v1:0\",name:\"Claude 3 Sonnet\",description:\"균형잡힌 성능과 속도\",maxTokens:200000},{id:\"anthropic.claude-3-haiku-20240307-v1:0\",name:\"Claude 3 Haiku\",description:\"빠른 속도, 효율적인 처리\",maxTokens:200000},{id:\"anthropic.claude-instant-v1\",name:\"Claude Instant\",description:\"즉시 응답, 간단한 작업용\",maxTokens:100000},{id:\"amazon.titan-text-lite-v1\",name:\"Titan Text Lite\",description:\"가벼운 텍스트 처리\",maxTokens:4000},{id:\"amazon.titan-text-express-v1\",name:\"Titan Text Express\",description:\"빠른 텍스트 생성\",maxTokens:8000}];// 에러 핸들링 유틸리티\nexport const handleAPIError=error=>{if(error.response){// 서버 응답 오류\nconst{status,data}=error.response;return{message:(data===null||data===void 0?void 0:data.error)||`서버 오류 (${status})`,status};}else if(error.request){// 네트워크 오류\nreturn{message:\"네트워크 연결을 확인해주세요\",status:0};}else{// 기타 오류\nreturn{message:error.message||\"알 수 없는 오류가 발생했습니다\",status:-1};}};export default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","_error$response","_error$response2","_error$response3","data","message","removeItem","window","location","href","projectAPI","getProjects","params","arguments","length","undefined","get","createProject","projectData","post","getProject","projectId","updateProject","put","deleteProject","delete","getUploadUrl","category","filename","generateAPI","startTitleGeneration","article","getExecutionStatus","executionArn","encodedArn","encodeURIComponent","pollForResult","maxRetries","interval","retries","success","resolve","setTimeout","generateTitle","onProgress","startResponse","pollResponse","conversationId","result","usage","timestamp","completedAt","Date","toISOString","Error","chatAPI","sendMessage","sessionId","userId","getChatSessions","getChatHistory","deleteChatSession","streamingChat","onMessage","type","content","metadata","agentChatAPI","sendAgentMessage","getAgentChatSessions","getAgentChatHistory","deleteAgentChatSession","streamingAgentChat","promptCardAPI","getPromptCards","includeContent","includeDisabled","include_content","include_disabled","createPromptCard","promptData","updatePromptCard","promptId","deletePromptCard","reorderPromptCard","newStepOrder","step_order","togglePromptCard","enabled","authAPI","signup","userData","signin","credentials","accessToken","idToken","refreshToken","setItem","signout","verifyEmail","verificationData","forgotPassword","email","confirmPassword","resetData","getCurrentUser","payload","JSON","parse","atob","split","name","sub","isAuthenticated","currentTime","now","exp","uploadAPI","uploadFile","uploadUrl","file","PROMPT_CATEGORIES","id","description","required","PROMPT_CARD_CATEGORIES","color","icon","AVAILABLE_MODELS","maxTokens","handleAPIError"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n    \n    // 인증 토큰 추가 (API Gateway Cognito Authorizer는 ID Token을 요구)\n    const token = localStorage.getItem('idToken') || localStorage.getItem('accessToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\n      \"API 오류:\",\n      error.response?.status,\n      error.response?.data || error.message\n    );\n    \n    // 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\n    if (error.response?.status === 401) {\n      // 토큰 만료 처리\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('idToken');\n      localStorage.removeItem('refreshToken');\n      \n      // 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// 프로젝트 관련 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async (params = {}) => {\n    const response = await api.get(\"/projects\", { params });\n    return response.data;\n  },\n\n  // 프로젝트 생성\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  // 프로젝트 상세 조회\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 프로젝트 업데이트\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  // 프로젝트 삭제\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 업로드 URL 요청\n  getUploadUrl: async (projectId, category, filename) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { category, filename },\n    });\n    return response.data;\n  },\n};\n\n// 제목 생성 API (Step Functions 기반)\nexport const generateAPI = {\n  // 제목 생성 시작 (Step Functions 실행)\n  startTitleGeneration: async (projectId, article) => {\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article,\n    });\n    return response.data;\n  },\n\n  // 실행 상태 조회\n  getExecutionStatus: async (executionArn) => {\n    const encodedArn = encodeURIComponent(executionArn);\n    const response = await api.get(`/executions/${encodedArn}`);\n    return response.data;\n  },\n\n  // 폴링을 통한 결과 대기\n  pollForResult: async (executionArn, maxRetries = 30, interval = 2000) => {\n    let retries = 0;\n\n    while (retries < maxRetries) {\n      try {\n        const status = await generateAPI.getExecutionStatus(executionArn);\n\n        if (status.status === \"SUCCEEDED\") {\n          return {\n            success: true,\n            data: status,\n          };\n        } else if (status.status === \"FAILED\") {\n          return {\n            success: false,\n            error: status.error || \"실행이 실패했습니다\",\n          };\n        } else if (status.status === \"TIMED_OUT\") {\n          return {\n            success: false,\n            error: \"실행 시간이 초과되었습니다\",\n          };\n        } else if (status.status === \"ABORTED\") {\n          return {\n            success: false,\n            error: \"실행이 중단되었습니다\",\n          };\n        }\n\n        // 아직 실행 중이면 대기\n        await new Promise((resolve) => setTimeout(resolve, interval));\n        retries++;\n      } catch (error) {\n        console.error(\"폴링 중 오류:\", error);\n        retries++;\n\n        if (retries >= maxRetries) {\n          return {\n            success: false,\n            error: \"상태 조회 중 오류가 발생했습니다\",\n          };\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, interval));\n      }\n    }\n\n    return {\n      success: false,\n      error: \"실행 시간이 초과되었습니다\",\n    };\n  },\n\n  // 제목 생성 (시작 + 폴링)\n  generateTitle: async (projectId, article, onProgress) => {\n    try {\n      // Step Functions 실행 시작\n      const startResponse = await generateAPI.startTitleGeneration(\n        projectId,\n        article\n      );\n\n      if (onProgress) {\n        onProgress({\n          status: \"started\",\n          message: \"제목 생성이 시작되었습니다...\",\n          executionArn: startResponse.executionArn,\n        });\n      }\n\n      // 폴링을 통한 결과 대기\n      const pollResponse = await generateAPI.pollForResult(\n        startResponse.executionArn\n      );\n\n      if (pollResponse.success) {\n        return {\n          conversationId: pollResponse.data.conversationId,\n          projectId: projectId,\n          result: pollResponse.data.result,\n          usage: pollResponse.data.usage,\n          timestamp: pollResponse.data.completedAt || new Date().toISOString(),\n          executionArn: startResponse.executionArn,\n        };\n      } else {\n        throw new Error(pollResponse.error);\n      }\n    } catch (error) {\n      console.error(\"제목 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// 🆕 채팅 API (LangChain 기반)\nexport const chatAPI = {\n  // 채팅 메시지 전송\n  sendMessage: async (\n    projectId,\n    message,\n    sessionId = null,\n    userId = \"default\"\n  ) => {\n    const response = await api.post(`/projects/${projectId}/chat`, {\n      message,\n      sessionId,\n      userId,\n    });\n    return response.data;\n  },\n\n  // 채팅 세션 목록 조회\n  getChatSessions: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}/chat/sessions`);\n    return response.data;\n  },\n\n  // 채팅 히스토리 조회\n  getChatHistory: async (projectId, sessionId) => {\n    const response = await api.get(\n      `/projects/${projectId}/chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // 채팅 세션 삭제\n  deleteChatSession: async (projectId, sessionId) => {\n    const response = await api.delete(\n      `/projects/${projectId}/chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // 스트리밍 채팅 (WebSocket 대체용)\n  streamingChat: async (projectId, message, sessionId, onMessage) => {\n    try {\n      const response = await chatAPI.sendMessage(projectId, message, sessionId);\n\n      // 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\n      if (onMessage) {\n        onMessage({\n          type: \"message\",\n          content: response.message,\n          sessionId: response.sessionId,\n          metadata: response.metadata,\n        });\n      }\n\n      return response;\n    } catch (error) {\n      if (onMessage) {\n        onMessage({\n          type: \"error\",\n          error: error.message,\n        });\n      }\n      throw error;\n    }\n  },\n};\n\n// 🆕 Bedrock Agent 채팅 API\nexport const agentChatAPI = {\n  // Agent 채팅 메시지 전송\n  sendAgentMessage: async (\n    projectId,\n    message,\n    sessionId = null,\n    userId = \"default\"\n  ) => {\n    const response = await api.post(`/projects/${projectId}/agent-chat`, {\n      message,\n      sessionId,\n      userId,\n    });\n    return response.data;\n  },\n\n  // Agent 채팅 세션 목록 조회\n  getAgentChatSessions: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}/agent-chat/sessions`);\n    return response.data;\n  },\n\n  // Agent 채팅 히스토리 조회\n  getAgentChatHistory: async (projectId, sessionId) => {\n    const response = await api.get(\n      `/projects/${projectId}/agent-chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // Agent 채팅 세션 삭제\n  deleteAgentChatSession: async (projectId, sessionId) => {\n    const response = await api.delete(\n      `/projects/${projectId}/agent-chat/sessions/${sessionId}`\n    );\n    return response.data;\n  },\n\n  // Agent 스트리밍 채팅 (향후 구현용)\n  streamingAgentChat: async (projectId, message, sessionId, onMessage) => {\n    try {\n      const response = await agentChatAPI.sendAgentMessage(projectId, message, sessionId);\n\n      // 실제 스트리밍이 아니므로 즉시 완전한 응답 반환\n      if (onMessage) {\n        onMessage({\n          type: \"message\",\n          content: response.message,\n          sessionId: response.sessionId,\n          metadata: response.metadata,\n        });\n      }\n\n      return response;\n    } catch (error) {\n      if (onMessage) {\n        onMessage({\n          type: \"error\",\n          error: error.message,\n        });\n      }\n      throw error;\n    }\n  },\n};\n\n// 🆕 프롬프트 카드 관리 API\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회 (step_order 순으로 정렬)\n  getPromptCards: async (projectId, includeContent = false, includeDisabled = false) => {\n    const params = {};\n    if (includeContent) params.include_content = 'true';\n    if (includeDisabled) params.include_disabled = 'true';\n    \n    const response = await api.get(`/prompts/${projectId}`, { params });\n    return response.data;\n  },\n\n  // 새 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  // 프롬프트 카드 수정\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  // 프롬프트 카드 순서 변경\n  reorderPromptCard: async (projectId, promptId, newStepOrder) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      step_order: newStepOrder\n    });\n    return response.data;\n  },\n\n  // 프롬프트 카드 활성/비활성 토글\n  togglePromptCard: async (projectId, promptId, enabled) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      enabled: enabled\n    });\n    return response.data;\n  }\n};\n\n// 🆕 인증 API\nexport const authAPI = {\n  // 회원가입\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  // 로그인\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    const { accessToken, idToken, refreshToken } = response.data;\n    \n    // 토큰 저장\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('idToken', idToken);\n    localStorage.setItem('refreshToken', refreshToken);\n    \n    return response.data;\n  },\n\n  // 로그아웃\n  signout: async () => {\n    try {\n      await api.post(\"/auth/signout\");\n    } finally {\n      // 로컬 토큰 삭제\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('idToken');\n      localStorage.removeItem('refreshToken');\n    }\n  },\n\n  // 토큰 갱신\n  refreshToken: async () => {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (!refreshToken) {\n      throw new Error('리프레시 토큰이 없습니다');\n    }\n\n    const response = await api.post(\"/auth/refresh\", { refreshToken });\n    const { accessToken, idToken } = response.data;\n    \n    // 새 토큰 저장\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('idToken', idToken);\n    \n    return response.data;\n  },\n\n  // 이메일 인증\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify\", verificationData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 현재 사용자 정보 (토큰에서 추출)\n  getCurrentUser: () => {\n    const token = localStorage.getItem('idToken');\n    if (!token) return null;\n    \n    try {\n      // JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      return {\n        email: payload.email,\n        name: payload.name,\n        sub: payload.sub\n      };\n    } catch (error) {\n      console.error('토큰 디코딩 오류:', error);\n      return null;\n    }\n  },\n\n  // 로그인 상태 확인\n  isAuthenticated: () => {\n    const token = localStorage.getItem('accessToken');\n    if (!token) return false;\n    \n    try {\n      // 토큰 만료 시간 확인\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\n// 파일 업로드 API\nexport const uploadAPI = {\n  // S3 Pre-signed URL로 파일 업로드\n  uploadFile: async (uploadUrl, file) => {\n    const response = await axios.put(uploadUrl, file, {\n      headers: {\n        \"Content-Type\": \"text/plain\",\n      },\n    });\n    return response;\n  },\n};\n\n// 프롬프트 카테고리 정의 (레거시 - 기존 파일 업로드용)\nexport const PROMPT_CATEGORIES = [\n  {\n    id: \"title_type_guidelines\",\n    name: \"제목 유형 가이드라인\",\n    description: \"제목의 다양한 유형과 작성 원칙\",\n    required: true,\n  },\n  {\n    id: \"stylebook_guidelines\",\n    name: \"스타일북 가이드라인\",\n    description: \"서울경제신문의 스타일북 규정\",\n    required: true,\n  },\n  {\n    id: \"workflow\",\n    name: \"워크플로우\",\n    description: \"제목 생성 6단계 워크플로우\",\n    required: true,\n  },\n  {\n    id: \"audience_optimization\",\n    name: \"독자 최적화\",\n    description: \"대상 독자층별 최적화 전략\",\n    required: true,\n  },\n  {\n    id: \"seo_optimization\",\n    name: \"SEO 최적화\",\n    description: \"검색 엔진 최적화 가이드라인\",\n    required: false,\n  },\n  {\n    id: \"digital_elements_guidelines\",\n    name: \"디지털 요소 가이드라인\",\n    description: \"온라인 매체 특성에 맞는 제목 작성법\",\n    required: true,\n  },\n  {\n    id: \"quality_assessment\",\n    name: \"품질 평가\",\n    description: \"제목 품질 평가 기준\",\n    required: true,\n  },\n  {\n    id: \"uncertainty_handling\",\n    name: \"불확실성 처리\",\n    description: \"불확실한 정보 처리 가이드라인\",\n    required: true,\n  },\n  {\n    id: \"output_format\",\n    name: \"출력 형식\",\n    description: \"결과 출력 형식 정의\",\n    required: true,\n  },\n  {\n    id: \"description\",\n    name: \"프로젝트 설명\",\n    description: \"TITLE-NOMICS 시스템 설명\",\n    required: true,\n  },\n  {\n    id: \"knowledge\",\n    name: \"핵심 지식\",\n    description: \"제목 작성 핵심 지식\",\n    required: true,\n  },\n];\n\n// 🆕 프롬프트 카드 카테고리 정의 (새로운 카드 시스템용)\nexport const PROMPT_CARD_CATEGORIES = [\n  {\n    id: \"instruction\",\n    name: \"지시사항\",\n    description: \"기본 작업 지시 및 목표 설정\",\n    color: \"blue\",\n    icon: \"📋\",\n  },\n  {\n    id: \"knowledge\",\n    name: \"지식 기반\",\n    description: \"도메인 지식 및 참고 정보\",\n    color: \"purple\",\n    icon: \"📚\",\n  },\n  {\n    id: \"summary\",\n    name: \"요약 규칙\",\n    description: \"내용 요약 및 압축 가이드라인\",\n    color: \"green\",\n    icon: \"📝\",\n  },\n  {\n    id: \"style_guide\",\n    name: \"스타일 가이드\",\n    description: \"브랜드 톤앤매너 및 작성 스타일\",\n    color: \"orange\",\n    icon: \"🎨\",\n  },\n  {\n    id: \"validation\",\n    name: \"검증 기준\",\n    description: \"품질 확인 및 검증 룰\",\n    color: \"red\",\n    icon: \"✅\",\n  },\n  {\n    id: \"enhancement\",\n    name: \"개선 지침\",\n    description: \"결과 향상 및 최적화 방법\",\n    color: \"yellow\",\n    icon: \"⚡\",\n  },\n];\n\n// 사용 가능한 AI 모델 목록\nexport const AVAILABLE_MODELS = [\n  {\n    id: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    name: \"Claude 3.5 Sonnet (최신)\",\n    description: \"가장 최신이고 성능이 뛰어난 모델\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"anthropic.claude-3-sonnet-20240229-v1:0\",\n    name: \"Claude 3 Sonnet\",\n    description: \"균형잡힌 성능과 속도\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"anthropic.claude-3-haiku-20240307-v1:0\",\n    name: \"Claude 3 Haiku\",\n    description: \"빠른 속도, 효율적인 처리\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"anthropic.claude-instant-v1\",\n    name: \"Claude Instant\",\n    description: \"즉시 응답, 간단한 작업용\",\n    maxTokens: 100000,\n  },\n  {\n    id: \"amazon.titan-text-lite-v1\",\n    name: \"Titan Text Lite\",\n    description: \"가벼운 텍스트 처리\",\n    maxTokens: 4000,\n  },\n  {\n    id: \"amazon.titan-text-express-v1\",\n    name: \"Titan Text Express\",\n    description: \"빠른 텍스트 생성\",\n    maxTokens: 8000,\n  },\n];\n\n// 에러 핸들링 유틸리티\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // 서버 응답 오류\n    const { status, data } = error.response;\n    return {\n      message: data?.error || `서버 오류 (${status})`,\n      status,\n    };\n  } else if (error.request) {\n    // 네트워크 오류\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0,\n    };\n  } else {\n    // 기타 오류\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1,\n    };\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}