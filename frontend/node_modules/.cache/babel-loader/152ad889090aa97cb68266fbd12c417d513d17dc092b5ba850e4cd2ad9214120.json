{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = projectId => {\n  _s();\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history)\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(async (userInput, options = {}) => {\n    if (!userInput.trim()) {\n      toast.error(\"메시지를 입력해주세요.\");\n      return null;\n    }\n    try {\n      setIsExecuting(true);\n      setExecutionStatus(\"STARTING\");\n\n      // chat_history와 userInput을 포함하는 data 객체 생성\n      const data = {\n        userInput: userInput,\n        chat_history: options.chat_history || []\n      };\n      console.log(\"🚀 대화 생성 요청 시작:\", {\n        projectId,\n        inputLength: userInput.length,\n        historyLength: data.chat_history.length,\n        timestamp: new Date().toISOString()\n      });\n      const response = await generateAPI.generateTitle(projectId, data);\n      console.log(\"✅ 대화 생성 완료:\", {\n        mode: response.mode,\n        message: response.message,\n        timestamp: new Date().toISOString()\n      });\n      setIsExecuting(false);\n      setExecutionStatus(\"COMPLETED\");\n      return response;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data;\n      console.error(\"❌ 제목 생성 실패:\", {\n        error: error.message,\n        code: error.code,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        timestamp: new Date().toISOString()\n      });\n      setIsExecuting(false);\n      setExecutionStatus(\"FAILED\");\n\n      // 프롬프트 카드 관련 에러 처리\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400 && (_error$response3 = error.response) !== null && _error$response3 !== void 0 && (_error$response3$data = _error$response3.data) !== null && _error$response3$data !== void 0 && _error$response3$data.setup_required) {\n        toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");\n      } else if (error.code === \"ECONNABORTED\") {\n        toast.error(\"요청 시간이 초과되었습니다. 다시 시도해주세요.\");\n      } else {\n        toast.error(\"처리 중 오류가 발생했습니다.\");\n      }\n      throw error;\n    }\n  }, [projectId]);\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(async (executionArn, onComplete, onError) => {\n    const poll = async () => {\n      try {\n        const result = await generateAPI.getExecutionStatus(executionArn);\n        setExecutionStatus(result.status);\n        if (result.status === \"SUCCEEDED\") {\n          setIsExecuting(false);\n          setExecutionStatus(\"COMPLETED\");\n          if (onComplete) {\n            onComplete(result);\n          }\n        } else if (result.status === \"FAILED\") {\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n          if (onError) {\n            onError(new Error(\"처리 실패\"));\n          }\n        } else if (result.status === \"RUNNING\") {\n          // 3초 후 다시 폴링\n          setTimeout(poll, 3000);\n        }\n      } catch (error) {\n        console.error(\"실행 상태 조회 실패:\", error);\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n        if (onError) {\n          onError(error);\n        }\n      }\n    };\n    poll();\n  }, [projectId]);\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n  return {\n    isExecuting,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  };\n};\n_s(useOrchestration, \"K+BNpOj7OFZjdBwrogtQ3usZzys=\");","map":{"version":3,"names":["useState","useCallback","toast","generateAPI","useOrchestration","projectId","_s","isExecuting","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","executeOrchestration","userInput","options","trim","error","data","chat_history","console","log","inputLength","length","historyLength","timestamp","Date","toISOString","response","generateTitle","mode","message","_error$response","_error$response2","_error$response3","_error$response3$data","code","status","setup_required","pollOrchestrationResult","executionArn","onComplete","onError","poll","result","getExecutionStatus","Error","setTimeout","resetOrchestration"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useOrchestration.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history)\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(\n    async (userInput, options = {}) => {\n      if (!userInput.trim()) {\n        toast.error(\"메시지를 입력해주세요.\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        // chat_history와 userInput을 포함하는 data 객체 생성\n        const data = {\n          userInput: userInput,\n          chat_history: options.chat_history || [],\n        };\n\n        console.log(\"🚀 대화 생성 요청 시작:\", {\n          projectId,\n          inputLength: userInput.length,\n          historyLength: data.chat_history.length,\n          timestamp: new Date().toISOString(),\n        });\n\n        const response = await generateAPI.generateTitle(projectId, data);\n\n        console.log(\"✅ 대화 생성 완료:\", {\n          mode: response.mode,\n          message: response.message,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setExecutionStatus(\"COMPLETED\");\n\n        return response;\n      } catch (error) {\n        console.error(\"❌ 제목 생성 실패:\", {\n          error: error.message,\n          code: error.code,\n          status: error.response?.status,\n          timestamp: new Date().toISOString(),\n        });\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n\n        // 프롬프트 카드 관련 에러 처리\n        if (\n          error.response?.status === 400 &&\n          error.response?.data?.setup_required\n        ) {\n          toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");\n        } else if (error.code === \"ECONNABORTED\") {\n          toast.error(\"요청 시간이 초과되었습니다. 다시 시도해주세요.\");\n        } else {\n          toast.error(\"처리 중 오류가 발생했습니다.\");\n        }\n\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionArn, onComplete, onError) => {\n      const poll = async () => {\n        try {\n          const result = await generateAPI.getExecutionStatus(executionArn);\n\n          setExecutionStatus(result.status);\n\n          if (result.status === \"SUCCEEDED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (result.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"처리 실패\"));\n            }\n          } else if (result.status === \"RUNNING\") {\n            // 3초 후 다시 폴링\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"실행 상태 조회 실패:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId]\n  );\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}