{"ast":null,"code":"var _jsxFileName = \"/Users/yeong-gwang/Documents/work/\\u1109\\u1165\\u110B\\u116E\\u11AF\\u1100\\u1167\\u11BC\\u110C\\u1166\\u1109\\u1175\\u11AB\\u1106\\u116E\\u11AB/ai_\\u110C\\u1166\\u1106\\u1169\\u11A8\\u1103\\u1161\\u11AF\\u1100\\u1175(\\u1109\\u116E)_\\u110B\\u116A\\u11AB\\u1109\\u1165\\u11BC\\u1107\\u1169\\u11AB_\\u1109\\u1173\\u1110\\u1173\\u1105\\u1175\\u1106\\u1175\\u11BC\\u1100\\u116E\\u1112\\u1167\\u11AB \\u1107\\u1169\\u11A8\\u1109\\u1161\\u1107\\u1169\\u11AB/frontend/src/contexts/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // 시스템 테마 감지 함수\n  const getSystemTheme = () => {\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  };\n\n  // 초기 테마 설정 (깜빡임 방지)\n  const getInitialTheme = () => {\n    const saved = localStorage.getItem(\"theme\");\n    if (saved === \"dark\") return true;\n    if (saved === \"light\") return false;\n    if (saved === \"system\") return getSystemTheme();\n    return getSystemTheme(); // 기본값: 시스템 설정 따름\n  };\n  const [isDarkMode, setIsDarkMode] = useState(getInitialTheme);\n  const [themeMode, setThemeMode] = useState(() => {\n    const saved = localStorage.getItem(\"theme\");\n    return saved || \"system\";\n  });\n\n  // 시스템 테마 변화 감지\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const handleSystemThemeChange = e => {\n      if (themeMode === \"system\") {\n        setIsDarkMode(e.matches);\n      }\n    };\n    mediaQuery.addEventListener(\"change\", handleSystemThemeChange);\n    return () => mediaQuery.removeEventListener(\"change\", handleSystemThemeChange);\n  }, [themeMode]);\n\n  // DOM 클래스 업데이트\n  useEffect(() => {\n    const root = document.documentElement;\n    const themeColorMeta = document.getElementById(\"theme-color\");\n\n    // 깜빡임 방지를 위한 transition 비활성화\n    root.style.setProperty(\"--tw-transition-duration\", \"0ms\");\n    if (isDarkMode) {\n      root.classList.add(\"dark\");\n      // 다크모드 시 어두운 테마 색상\n      if (themeColorMeta) {\n        themeColorMeta.setAttribute(\"content\", \"#111827\");\n      }\n    } else {\n      root.classList.remove(\"dark\");\n      // 라이트모드 시 밝은 테마 색상\n      if (themeColorMeta) {\n        themeColorMeta.setAttribute(\"content\", \"#ffffff\");\n      }\n    }\n\n    // transition 재활성화\n    setTimeout(() => {\n      root.style.removeProperty(\"--tw-transition-duration\");\n    }, 0);\n\n    // 테마 상태 저장\n    localStorage.setItem(\"theme\", themeMode);\n    localStorage.setItem(\"isDarkMode\", JSON.stringify(isDarkMode));\n  }, [isDarkMode, themeMode]);\n\n  // 테마 토글 함수들\n  const toggleDarkMode = () => {\n    const newMode = isDarkMode ? \"light\" : \"dark\";\n    setThemeMode(newMode);\n    setIsDarkMode(!isDarkMode);\n  };\n  const setTheme = mode => {\n    setThemeMode(mode);\n    switch (mode) {\n      case \"dark\":\n        setIsDarkMode(true);\n        break;\n      case \"light\":\n        setIsDarkMode(false);\n        break;\n      case \"system\":\n        setIsDarkMode(getSystemTheme());\n        break;\n      default:\n        setIsDarkMode(false);\n    }\n  };\n  const value = {\n    isDarkMode,\n    isDark: isDarkMode,\n    // DarkModeToggle 호환성을 위한 별칭\n    theme: themeMode,\n    themeMode,\n    toggleDarkMode,\n    toggleTheme: toggleDarkMode,\n    // DarkModeToggle 호환성을 위한 별칭\n    setTheme,\n    systemTheme: getSystemTheme()\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"fmCJh1+j1ts/ZJQRoqHJTRcqtOQ=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","context","Error","ThemeProvider","children","_s2","getSystemTheme","window","matchMedia","matches","getInitialTheme","saved","localStorage","getItem","isDarkMode","setIsDarkMode","themeMode","setThemeMode","mediaQuery","handleSystemThemeChange","e","addEventListener","removeEventListener","root","document","documentElement","themeColorMeta","getElementById","style","setProperty","classList","add","setAttribute","remove","setTimeout","removeProperty","setItem","JSON","stringify","toggleDarkMode","newMode","setTheme","mode","value","isDark","theme","toggleTheme","systemTheme","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  // 시스템 테마 감지 함수\n  const getSystemTheme = () => {\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  };\n\n  // 초기 테마 설정 (깜빡임 방지)\n  const getInitialTheme = () => {\n    const saved = localStorage.getItem(\"theme\");\n    if (saved === \"dark\") return true;\n    if (saved === \"light\") return false;\n    if (saved === \"system\") return getSystemTheme();\n    return getSystemTheme(); // 기본값: 시스템 설정 따름\n  };\n\n  const [isDarkMode, setIsDarkMode] = useState(getInitialTheme);\n  const [themeMode, setThemeMode] = useState(() => {\n    const saved = localStorage.getItem(\"theme\");\n    return saved || \"system\";\n  });\n\n  // 시스템 테마 변화 감지\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    const handleSystemThemeChange = (e) => {\n      if (themeMode === \"system\") {\n        setIsDarkMode(e.matches);\n      }\n    };\n\n    mediaQuery.addEventListener(\"change\", handleSystemThemeChange);\n    return () =>\n      mediaQuery.removeEventListener(\"change\", handleSystemThemeChange);\n  }, [themeMode]);\n\n  // DOM 클래스 업데이트\n  useEffect(() => {\n    const root = document.documentElement;\n    const themeColorMeta = document.getElementById(\"theme-color\");\n\n    // 깜빡임 방지를 위한 transition 비활성화\n    root.style.setProperty(\"--tw-transition-duration\", \"0ms\");\n\n    if (isDarkMode) {\n      root.classList.add(\"dark\");\n      // 다크모드 시 어두운 테마 색상\n      if (themeColorMeta) {\n        themeColorMeta.setAttribute(\"content\", \"#111827\");\n      }\n    } else {\n      root.classList.remove(\"dark\");\n      // 라이트모드 시 밝은 테마 색상\n      if (themeColorMeta) {\n        themeColorMeta.setAttribute(\"content\", \"#ffffff\");\n      }\n    }\n\n    // transition 재활성화\n    setTimeout(() => {\n      root.style.removeProperty(\"--tw-transition-duration\");\n    }, 0);\n\n    // 테마 상태 저장\n    localStorage.setItem(\"theme\", themeMode);\n    localStorage.setItem(\"isDarkMode\", JSON.stringify(isDarkMode));\n  }, [isDarkMode, themeMode]);\n\n  // 테마 토글 함수들\n  const toggleDarkMode = () => {\n    const newMode = isDarkMode ? \"light\" : \"dark\";\n    setThemeMode(newMode);\n    setIsDarkMode(!isDarkMode);\n  };\n\n  const setTheme = (mode) => {\n    setThemeMode(mode);\n    switch (mode) {\n      case \"dark\":\n        setIsDarkMode(true);\n        break;\n      case \"light\":\n        setIsDarkMode(false);\n        break;\n      case \"system\":\n        setIsDarkMode(getSystemTheme());\n        break;\n      default:\n        setIsDarkMode(false);\n    }\n  };\n\n  const value = {\n    isDarkMode,\n    isDark: isDarkMode, // DarkModeToggle 호환성을 위한 별칭\n    theme: themeMode,\n    themeMode,\n    toggleDarkMode,\n    toggleTheme: toggleDarkMode, // DarkModeToggle 호환성을 위한 별칭\n    setTheme,\n    systemTheme: getSystemTheme(),\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}