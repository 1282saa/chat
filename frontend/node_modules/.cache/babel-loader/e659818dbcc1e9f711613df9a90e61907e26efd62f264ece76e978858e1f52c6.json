{"ast":null,"code":"import{useState,useCallback}from\"react\";import{toast}from\"react-hot-toast\";import{generateAPI}from\"../services/api\";/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */export const useOrchestration=projectId=>{const[isExecuting,setIsExecuting]=useState(false);const[currentExecution,setCurrentExecution]=useState(null);const[executionStatus,setExecutionStatus]=useState(null);/**\n   * 제목 생성 실행\n   * @param {string} content - 입력 내용 (기사 텍스트)\n   * @param {Object} config - 생성 설정\n   * @returns {Promise<Object>} - 생성 결과\n   */const executeOrchestration=useCallback(async function(content){let config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!content.trim()){toast.error(\"기사 내용을 입력해주세요\");return null;}try{setIsExecuting(true);setExecutionStatus(\"STARTING\");const userRequest=config.userRequest||\"\";const response=await generateAPI.generateTitle(projectId,content,userRequest);setIsExecuting(false);setExecutionStatus(\"COMPLETED\");return response;}catch(error){console.error(\"제목 생성 실패:\",error);setIsExecuting(false);setExecutionStatus(\"FAILED\");throw error;}},[projectId]);/**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */const pollOrchestrationResult=useCallback(async(executionArn,onComplete,onError)=>{const poll=async()=>{try{const result=await generateAPI.getExecutionStatus(executionArn);setExecutionStatus(result.status);if(result.status===\"SUCCEEDED\"){setIsExecuting(false);setExecutionStatus(\"COMPLETED\");if(onComplete){onComplete(result);}}else if(result.status===\"FAILED\"){setIsExecuting(false);setExecutionStatus(\"FAILED\");if(onError){onError(new Error(\"제목 생성 실패\"));}}else if(result.status===\"RUNNING\"){// 3초 후 다시 폴링\nsetTimeout(poll,3000);}}catch(error){console.error(\"실행 상태 조회 실패:\",error);setIsExecuting(false);setExecutionStatus(\"FAILED\");if(onError){onError(error);}}};poll();},[projectId]);/**\n   * 오케스트레이션 상태 초기화\n   */const resetOrchestration=useCallback(()=>{setIsExecuting(false);setCurrentExecution(null);setExecutionStatus(null);},[]);return{isExecuting,currentExecution,executionStatus,executeOrchestration,pollOrchestrationResult,resetOrchestration};};","map":{"version":3,"names":["useState","useCallback","toast","generateAPI","useOrchestration","projectId","isExecuting","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","executeOrchestration","content","config","arguments","length","undefined","trim","error","userRequest","response","generateTitle","console","pollOrchestrationResult","executionArn","onComplete","onError","poll","result","getExecutionStatus","status","Error","setTimeout","resetOrchestration"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useOrchestration.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} content - 입력 내용 (기사 텍스트)\n   * @param {Object} config - 생성 설정\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(\n    async (content, config = {}) => {\n      if (!content.trim()) {\n        toast.error(\"기사 내용을 입력해주세요\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        const userRequest = config.userRequest || \"\";\n\n        const response = await generateAPI.generateTitle(\n          projectId,\n          content,\n          userRequest\n        );\n\n        setIsExecuting(false);\n        setExecutionStatus(\"COMPLETED\");\n\n        return response;\n      } catch (error) {\n        console.error(\"제목 생성 실패:\", error);\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionArn, onComplete, onError) => {\n      const poll = async () => {\n        try {\n          const result = await generateAPI.getExecutionStatus(executionArn);\n\n          setExecutionStatus(result.status);\n\n          if (result.status === \"SUCCEEDED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (result.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"제목 생성 실패\"));\n            }\n          } else if (result.status === \"RUNNING\") {\n            // 3초 후 다시 폴링\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"실행 상태 조회 실패:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId]\n  );\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}