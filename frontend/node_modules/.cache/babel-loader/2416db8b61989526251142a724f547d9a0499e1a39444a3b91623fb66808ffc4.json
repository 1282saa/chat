{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React from \"react\"; // Added for useDebounce\n\n// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// 실제 Bedrock Claude API 사용\nconst IS_MOCK_MODE = false;\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n\n  // 개발/테스트 모드: 더미 토큰 사용\n  const token = localStorage.getItem(\"idToken\") || localStorage.getItem(\"accessToken\") || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXIiLCJuYW1lIjoiVGVzdCBVc2VyIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwiaWF0IjoxNjE2MjM5MDIyfQ.test\";\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.error(\"API 오류:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n\n  // 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    // 토큰 만료 처리\n    localStorage.removeItem(\"accessToken\");\n    localStorage.removeItem(\"idToken\");\n    localStorage.removeItem(\"refreshToken\");\n\n    // 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\n\n// 프로젝트 관련 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async (params = {}) => {\n    const response = await api.get(\"/projects\", {\n      params\n    });\n    return response.data;\n  },\n  // 프로젝트 생성\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n  // 프로젝트 상세 조회\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  // 프로젝트 업데이트\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n  // 프로젝트 삭제\n  deleteProject: async projectId => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n  // 업로드 URL 요청\n  getUploadUrl: async (projectId, category, filename) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: {\n        category,\n        filename\n      }\n    });\n    return response.data;\n  }\n};\n\n// 제목 생성 API (Step Functions 기반)\nexport const generateAPI = {\n  // 제목 생성 시작 (Step Functions 실행)\n  startTitleGeneration: async (projectId, article, aiSettings) => {\n    const payload = {\n      article\n    };\n\n    // AI 설정이 있으면 추가\n    if (aiSettings) {\n      payload.aiSettings = aiSettings;\n    }\n    const response = await api.post(`/projects/${projectId}/generate`, payload);\n    return response.data;\n  },\n  // 실행 상태 조회\n  getExecutionStatus: async executionArn => {\n    const encodedArn = encodeURIComponent(executionArn);\n    const response = await api.get(`/executions/${encodedArn}`);\n    return response.data;\n  },\n  // 폴링을 통한 결과 대기\n  pollForResult: async (executionArn, maxRetries = 30, interval = 2000) => {\n    if (!executionArn || executionArn === \"undefined\") {\n      return {\n        success: false,\n        error: \"실행 ARN이 없습니다. 직접 모드에서는 폴링이 필요하지 않습니다.\"\n      };\n    }\n    let retries = 0;\n    while (retries < maxRetries) {\n      try {\n        const status = await generateAPI.getExecutionStatus(executionArn);\n        if (status.status === \"SUCCEEDED\") {\n          return {\n            success: true,\n            data: status\n          };\n        } else if (status.status === \"FAILED\") {\n          return {\n            success: false,\n            error: status.error || \"실행이 실패했습니다\"\n          };\n        } else if (status.status === \"TIMED_OUT\") {\n          return {\n            success: false,\n            error: \"실행 시간이 초과되었습니다\"\n          };\n        } else if (status.status === \"ABORTED\") {\n          return {\n            success: false,\n            error: \"실행이 중단되었습니다\"\n          };\n        }\n\n        // 아직 실행 중이면 대기\n        await new Promise(resolve => setTimeout(resolve, interval));\n        retries++;\n      } catch (error) {\n        console.error(\"폴링 중 오류:\", error);\n        retries++;\n        if (retries >= maxRetries) {\n          return {\n            success: false,\n            error: \"상태 조회 중 오류가 발생했습니다\"\n          };\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n      }\n    }\n    return {\n      success: false,\n      error: \"실행 시간이 초과되었습니다\"\n    };\n  },\n  // 제목 생성 (직접 모드 + Step Functions 모드 지원)\n  generateTitle: async (projectId, article, onProgress, aiSettings) => {\n    try {\n      // 제목 생성 시작\n      const startResponse = await generateAPI.startTitleGeneration(projectId, article, aiSettings);\n\n      // 직접 모드인 경우 (mode가 'direct'이거나 result가 바로 있는 경우)\n      if (startResponse.mode === \"direct\" || startResponse.result) {\n        if (onProgress) {\n          onProgress({\n            status: \"completed\",\n            message: \"제목 생성이 완료되었습니다!\",\n            result: startResponse.result\n          });\n        }\n        return {\n          conversationId: startResponse.executionId || \"direct-\" + Date.now(),\n          projectId: projectId,\n          result: startResponse.result,\n          usage: startResponse.usage || {},\n          timestamp: startResponse.timestamp || new Date().toISOString(),\n          mode: \"direct\",\n          debug: startResponse.debug || {}\n        };\n      }\n\n      // Step Functions 모드인 경우\n      if (startResponse.executionArn) {\n        if (onProgress) {\n          onProgress({\n            status: \"started\",\n            message: \"제목 생성이 시작되었습니다...\",\n            executionArn: startResponse.executionArn\n          });\n        }\n\n        // 폴링을 통한 결과 대기\n        const pollResponse = await generateAPI.pollForResult(startResponse.executionArn);\n        if (pollResponse.success) {\n          return {\n            conversationId: pollResponse.data.conversationId,\n            projectId: projectId,\n            result: pollResponse.data.result,\n            usage: pollResponse.data.usage,\n            timestamp: pollResponse.data.completedAt || new Date().toISOString(),\n            executionArn: startResponse.executionArn,\n            mode: \"stepfunctions\"\n          };\n        } else {\n          throw new Error(pollResponse.error);\n        }\n      }\n      throw new Error(\"알 수 없는 응답 형식입니다\");\n    } catch (error) {\n      console.error(\"제목 생성 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// 🆕 프롬프트 카드 관리 API\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회 (step_order 순으로 정렬)\n  getPromptCards: async (projectId, includeContent = false, includeDisabled = false) => {\n    if (IS_MOCK_MODE) {\n      console.log(\"🎭 개선된 모키 모드: 프롬프트 카드 목록 (localStorage 기반)\");\n\n      // localStorage에서 수정된 프롬프트들 가져오기\n      const savedPrompts = JSON.parse(localStorage.getItem(`prompts_${projectId}`) || \"{}\");\n      const defaultPrompts = [{\n        promptId: \"template-instruction\",\n        id: \"template-instruction\",\n        title: \"역할 및 목표 프롬프트\",\n        category: \"instruction\",\n        enabled: true,\n        stepOrder: 1,\n        s3Key: \"prompts/instruction.txt\",\n        description: \"AI의 역할, 정체성, 핵심 목표를 명확히 정의합니다\",\n        prompt_text: savedPrompts.instruction || \"당신은 전문적인 기사 제목 생성 AI입니다.\\n목표: 독자의 관심을 끌고 정확한 정보를 전달하는 제목 생성\"\n      }, {\n        promptId: \"template-knowledge\",\n        id: \"template-knowledge\",\n        title: \"지식 베이스 프롬프트\",\n        category: \"knowledge\",\n        enabled: true,\n        stepOrder: 2,\n        s3Key: \"prompts/knowledge.txt\",\n        description: \"작업 수행에 필요한 핵심 지식과 원칙을 제공합니다\",\n        prompt_text: savedPrompts.knowledge || \"제목 작성 원칙:\\n- 간결하고 명확한 표현\\n- 핵심 키워드 포함\\n- 독자의 관심 유발\"\n      }, {\n        promptId: \"template-secondary\",\n        id: \"template-secondary\",\n        title: \"CoT (사고 과정) 프롬프트\",\n        category: \"secondary\",\n        enabled: true,\n        stepOrder: 3,\n        s3Key: \"prompts/secondary.txt\",\n        description: \"단계별 추론 과정을 통해 사고의 투명성을 확보합니다\",\n        prompt_text: savedPrompts.secondary || \"다음 단계로 사고하세요:\\n1. 기사의 핵심 내용 파악\\n2. 주요 키워드 추출\\n3. 독자 관점에서 흥미도 평가\\n4. 제목 후보 생성\\n5. 최적 제목 선택\"\n      }, {\n        promptId: \"template-style_guide\",\n        id: \"template-style_guide\",\n        title: \"스타일 가이드 프롬프트\",\n        category: \"style_guide\",\n        enabled: true,\n        stepOrder: 4,\n        s3Key: \"prompts/style_guide.txt\",\n        description: \"일관된 스타일과 형식을 유지하기 위한 가이드라인\",\n        prompt_text: savedPrompts.style_guide || \"스타일 요구사항:\\n- 길이: 15-25자 권장\\n- 톤: 전문적이면서 친근\\n- 형식: 명사형 종결\"\n      }, {\n        promptId: \"template-validation\",\n        id: \"template-validation\",\n        title: \"ReAct (추론+행동) 프롬프트\",\n        category: \"validation\",\n        enabled: true,\n        stepOrder: 5,\n        s3Key: \"prompts/validation.txt\",\n        description: \"추론과 행동을 결합하여 더 정확한 결과를 도출합니다\",\n        prompt_text: savedPrompts.validation || \"Thought: 이 기사의 핵심은 무엇인가?\\nAction: 키워드를 추출하고 중요도를 평가한다\\nObservation: 추출된 정보를 바탕으로 제목을 구성한다\\nThought: 생성된 제목이 요구사항을 충족하는가?\\nAction: 필요시 수정하고 최종 검증한다\"\n      }, {\n        promptId: \"template-enhancement\",\n        id: \"template-enhancement\",\n        title: \"품질 검증 프롬프트\",\n        category: \"enhancement\",\n        enabled: true,\n        stepOrder: 6,\n        s3Key: \"prompts/enhancement.txt\",\n        description: \"최종 결과물의 품질을 검증하고 개선합니다\",\n        prompt_text: savedPrompts.enhancement || \"품질 검증 기준:\\n- 정확성: 기사 내용과 일치\\n- 매력도: 독자 관심 유발\\n- 적절성: 매체 성격에 부합\\n- 완성도: 문법과 표현의 정확성\"\n      }];\n      return {\n        projectId,\n        promptCards: defaultPrompts,\n        count: defaultPrompts.length\n      };\n    }\n    const params = {};\n    if (includeContent) params.include_content = \"true\";\n    if (includeDisabled) params.include_disabled = \"true\";\n    const response = await api.get(`/prompts/${projectId}`, {\n      params\n    });\n    return response.data;\n  },\n  // 새 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  // 새 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    if (IS_MOCK_MODE) {\n      console.log(\"🎭 모키 모드: 프롬프트 카드 생성 시뮬레이션\", {\n        projectId,\n        promptData\n      });\n\n      // localStorage에 저장\n      const savedPrompts = JSON.parse(localStorage.getItem(`prompts_${projectId}`) || \"{}\");\n      savedPrompts[promptData.category] = promptData.prompt_text || promptData.content;\n      localStorage.setItem(`prompts_${projectId}`, JSON.stringify(savedPrompts));\n      return {\n        success: true,\n        message: \"프롬프트가 생성되었습니다\",\n        promptId: `template-${promptData.category}`\n      };\n    }\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  // 프롬프트 카드 수정\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    if (IS_MOCK_MODE) {\n      console.log(\"🎭 개선된 모키 모드: 프롬프트 카드 수정 (localStorage 저장)\", {\n        projectId,\n        promptId,\n        promptData\n      });\n\n      // promptId에서 카테고리 추출 (template-instruction -> instruction)\n      const category = promptId.replace(\"template-\", \"\");\n\n      // localStorage에 저장\n      const savedPrompts = JSON.parse(localStorage.getItem(`prompts_${projectId}`) || \"{}\");\n      savedPrompts[category] = promptData.prompt_text || promptData.content;\n      localStorage.setItem(`prompts_${projectId}`, JSON.stringify(savedPrompts));\n      console.log(\"💾 localStorage에 저장된 프롬프트:\", savedPrompts);\n      return {\n        success: true,\n        message: \"프롬프트가 수정되어 localStorage에 저장되었습니다\",\n        category,\n        savedContent: savedPrompts[category]\n      };\n    }\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n  // 프롬프트 카드 순서 변경\n  reorderPromptCard: async (projectId, promptId, newStepOrder) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      step_order: newStepOrder\n    });\n    return response.data;\n  },\n  // 프롬프트 카드 활성/비활성 토글\n  togglePromptCard: async (projectId, promptId, enabled) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      enabled: enabled\n    });\n    return response.data;\n  },\n  // 프롬프트 내용 조회 (S3에서 직접 로드)\n  getPromptContent: async (projectId, promptId) => {\n    if (IS_MOCK_MODE) {\n      console.log(\"🎭 모키 모드: 프롬프트 내용 조회 시뮬레이션\", {\n        projectId,\n        promptId\n      });\n      const mockContents = {\n        \"template-instruction\": \"당신은 전문적인 기사 제목 생성 AI입니다.\\n목표: 독자의 관심을 끌고 정확한 정보를 전달하는 제목 생성\",\n        \"template-knowledge\": \"제목 작성 원칙:\\n- 간결하고 명확한 표현\\n- 핵심 키워드 포함\\n- 독자의 관심 유발\",\n        \"template-secondary\": \"다음 단계로 사고하세요:\\n1. 기사의 핵심 내용 파악\\n2. 주요 키워드 추출\\n3. 독자 관점에서 흥미도 평가\\n4. 제목 후보 생성\\n5. 최적 제목 선택\"\n      };\n      return {\n        projectId,\n        promptId,\n        content: mockContents[promptId] || \"샘플 프롬프트 내용입니다.\",\n        lastModified: new Date().toISOString()\n      };\n    }\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  }\n};\n\n// 🆕 인증 API\nexport const authAPI = {\n  // 회원가입\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  // 로그인\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    const {\n      accessToken,\n      idToken,\n      refreshToken\n    } = response.data;\n\n    // 토큰 저장\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"idToken\", idToken);\n    localStorage.setItem(\"refreshToken\", refreshToken);\n    return response.data;\n  },\n  // 로그아웃\n  signout: async () => {\n    try {\n      await api.post(\"/auth/signout\");\n    } finally {\n      // 로컬 토큰 삭제\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"idToken\");\n      localStorage.removeItem(\"refreshToken\");\n    }\n  },\n  // 토큰 갱신\n  refreshToken: async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      throw new Error(\"리프레시 토큰이 없습니다\");\n    }\n    const response = await api.post(\"/auth/refresh\", {\n      refreshToken\n    });\n    const {\n      accessToken,\n      idToken\n    } = response.data;\n\n    // 새 토큰 저장\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"idToken\", idToken);\n    return response.data;\n  },\n  // 이메일 인증\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify\", verificationData);\n    return response.data;\n  },\n  // 비밀번호 찾기\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  // 비밀번호 재설정\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n  // 현재 사용자 정보 (토큰에서 추출)\n  getCurrentUser: () => {\n    const token = localStorage.getItem(\"idToken\");\n    if (!token) return null;\n    try {\n      // JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      return {\n        email: payload.email,\n        name: payload.name,\n        sub: payload.sub\n      };\n    } catch (error) {\n      console.error(\"토큰 디코딩 오류:\", error);\n      return null;\n    }\n  },\n  // 로그인 상태 확인\n  isAuthenticated: () => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (!token) return false;\n    try {\n      // 토큰 만료 시간 확인\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\n// 파일 업로드 API\nexport const uploadAPI = {\n  // S3 Pre-signed URL로 파일 업로드\n  uploadFile: async (uploadUrl, file) => {\n    const response = await axios.put(uploadUrl, file, {\n      headers: {\n        \"Content-Type\": \"text/plain\"\n      }\n    });\n    return response;\n  }\n};\n\n// 🆕 프롬프트 카테고리 정의 (레거시 - 기존 파일 업로드용)\nexport const PROMPT_CATEGORIES = [{\n  id: \"title_type_guidelines\",\n  name: \"제목 유형 가이드라인\",\n  description: \"제목의 다양한 유형과 작성 원칙\",\n  required: true\n}, {\n  id: \"stylebook_guidelines\",\n  name: \"스타일북 가이드라인\",\n  description: \"서울경제신문의 스타일북 규정\",\n  required: true\n}, {\n  id: \"workflow\",\n  name: \"워크플로우\",\n  description: \"제목 생성 6단계 워크플로우\",\n  required: true\n}, {\n  id: \"audience_optimization\",\n  name: \"독자 최적화\",\n  description: \"대상 독자층별 최적화 전략\",\n  required: true\n}, {\n  id: \"seo_optimization\",\n  name: \"SEO 최적화\",\n  description: \"검색 엔진 최적화 가이드라인\",\n  required: false\n}, {\n  id: \"digital_elements_guidelines\",\n  name: \"디지털 요소 가이드라인\",\n  description: \"온라인 매체 특성에 맞는 제목 작성법\",\n  required: true\n}, {\n  id: \"quality_assessment\",\n  name: \"품질 평가\",\n  description: \"제목 품질 평가 기준\",\n  required: true\n}, {\n  id: \"uncertainty_handling\",\n  name: \"불확실성 처리\",\n  description: \"불확실한 정보 처리 가이드라인\",\n  required: true\n}, {\n  id: \"output_format\",\n  name: \"출력 형식\",\n  description: \"결과 출력 형식 정의\",\n  required: true\n}, {\n  id: \"description\",\n  name: \"프로젝트 설명\",\n  description: \"TITLE-NOMICS 시스템 설명\",\n  required: true\n}, {\n  id: \"knowledge\",\n  name: \"핵심 지식\",\n  description: \"제목 작성 핵심 지식\",\n  required: true\n}];\n\n// 🆕 프롬프트 카드 카테고리 정의 (새로운 카드 시스템용)\n// 프롬프트 오케스트레이션 카테고리 체계\nexport const PROMPT_CARD_CATEGORIES = [{\n  id: \"role\",\n  name: \"역할 (Role)\",\n  description: \"모델이 맡게 될 페르소나 및 역할 정의\",\n  color: \"purple\",\n  icon: \"🎭\",\n  order: 1,\n  orchestration_step: \"persona_definition\"\n}, {\n  id: \"guideline\",\n  name: \"가이드라인 (Guideline)\",\n  description: \"명확한 제한사항, 룰, 조건\",\n  color: \"blue\",\n  icon: \"📦\",\n  order: 2,\n  orchestration_step: \"constraint_definition\"\n}, {\n  id: \"workflow\",\n  name: \"워크플로우 (Workflow)\",\n  description: \"작업을 수행할 단계, 순서\",\n  color: \"green\",\n  icon: \"🧩\",\n  order: 3,\n  orchestration_step: \"process_execution\"\n}, {\n  id: \"output_format\",\n  name: \"출력결과 (Output Format)\",\n  description: \"최종 결과물 포맷 정의\",\n  color: \"orange\",\n  icon: \"🎯\",\n  order: 4,\n  orchestration_step: \"format_validation\"\n}, {\n  id: \"few_shot\",\n  name: \"예시 (Few-shot)\",\n  description: \"few-shot learning 예제\",\n  color: \"yellow\",\n  icon: \"💡\",\n  order: 5,\n  orchestration_step: \"example_learning\"\n}, {\n  id: \"scoring\",\n  name: \"검수 (Scoring)\",\n  description: \"검수 규칙 및 평가 기준\",\n  color: \"red\",\n  icon: \"🔍\",\n  order: 6,\n  orchestration_step: \"quality_assessment\"\n}];\n\n// 사용 가능한 AI 모델 목록\nexport const AVAILABLE_MODELS = [{\n  id: \"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\n  name: \"Claude 3.5 Sonnet (최신)\",\n  description: \"가장 최신이고 성능이 뛰어난 모델\",\n  maxTokens: 200000\n}, {\n  id: \"us.anthropic.claude-3-sonnet-20240229-v1:0\",\n  name: \"Claude 3 Sonnet\",\n  description: \"균형잡힌 성능과 속도\",\n  maxTokens: 200000\n}, {\n  id: \"us.anthropic.claude-3-haiku-20240307-v1:0\",\n  name: \"Claude 3 Haiku\",\n  description: \"빠른 속도, 효율적인 처리\",\n  maxTokens: 200000\n}, {\n  id: \"anthropic.claude-instant-v1\",\n  name: \"Claude Instant\",\n  description: \"즉시 응답, 간단한 작업용\",\n  maxTokens: 100000\n}, {\n  id: \"amazon.titan-text-lite-v1\",\n  name: \"Titan Text Lite\",\n  description: \"가벼운 텍스트 처리\",\n  maxTokens: 4000\n}, {\n  id: \"amazon.titan-text-express-v1\",\n  name: \"Titan Text Express\",\n  description: \"빠른 텍스트 생성\",\n  maxTokens: 8000\n}];\n\n// 에러 핸들링 유틸리티\nexport const handleAPIError = error => {\n  if (error.response) {\n    // 서버 응답 오류\n    const {\n      status,\n      data\n    } = error.response;\n    return {\n      message: (data === null || data === void 0 ? void 0 : data.error) || `서버 오류 (${status})`,\n      status\n    };\n  } else if (error.request) {\n    // 네트워크 오류\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0\n    };\n  } else {\n    // 기타 오류\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1\n    };\n  }\n};\n\n// 기본 프로젝트 카테고리 정의 (이모지 제거, 전문적 디자인)\nexport const DEFAULT_PROJECT_CATEGORIES = [{\n  id: \"news\",\n  name: \"뉴스/언론\",\n  color: \"blue\",\n  description: \"뉴스 기사, 언론 보도 제목 생성\",\n  isDefault: true\n}, {\n  id: \"business\",\n  name: \"비즈니스\",\n  color: \"green\",\n  description: \"비즈니스 문서, 기업 커뮤니케이션\",\n  isDefault: true\n}, {\n  id: \"corporate\",\n  name: \"기업 홍보\",\n  color: \"purple\",\n  description: \"기업 홍보, 마케팅 콘텐츠\",\n  isDefault: true\n}, {\n  id: \"education\",\n  name: \"교육/연구\",\n  color: \"orange\",\n  description: \"교육 자료, 연구 논문, 학술 자료\",\n  isDefault: true\n}, {\n  id: \"marketing\",\n  name: \"마케팅/광고\",\n  color: \"yellow\",\n  description: \"광고 카피, 마케팅 캠페인\",\n  isDefault: true\n}, {\n  id: \"social\",\n  name: \"소셜미디어\",\n  color: \"indigo\",\n  description: \"SNS 포스팅, 소셜 콘텐츠\",\n  isDefault: true\n}, {\n  id: \"tech\",\n  name: \"기술/IT\",\n  color: \"cyan\",\n  description: \"기술 문서, IT 뉴스, 개발 관련\",\n  isDefault: true\n}];\n\n// 사용자 정의 카테고리 API\nexport const categoryAPI = {\n  // 사용자 카테고리 목록 조회\n  getUserCategories: async () => {\n    try {\n      const response = await api.get(\"/categories\");\n      return response.data;\n    } catch (error) {\n      // 백엔드 API가 없는 경우 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      if (savedCategories) {\n        return JSON.parse(savedCategories);\n      }\n      return {\n        categories: DEFAULT_PROJECT_CATEGORIES\n      };\n    }\n  },\n  // 사용자 카테고리 생성\n  createCategory: async categoryData => {\n    try {\n      const response = await api.post(\"/categories\", categoryData);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories ? JSON.parse(savedCategories) : {\n        categories: [...DEFAULT_PROJECT_CATEGORIES]\n      };\n      const newCategory = {\n        ...categoryData,\n        id: `custom_${Date.now()}`,\n        isDefault: false,\n        createdAt: new Date().toISOString()\n      };\n      categories.categories.push(newCategory);\n      localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n      return newCategory;\n    }\n  },\n  // 사용자 카테고리 수정\n  updateCategory: async (categoryId, categoryData) => {\n    try {\n      const response = await api.put(`/categories/${categoryId}`, categoryData);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories ? JSON.parse(savedCategories) : {\n        categories: [...DEFAULT_PROJECT_CATEGORIES]\n      };\n      const categoryIndex = categories.categories.findIndex(cat => cat.id === categoryId);\n      if (categoryIndex !== -1) {\n        categories.categories[categoryIndex] = {\n          ...categories.categories[categoryIndex],\n          ...categoryData,\n          updatedAt: new Date().toISOString()\n        };\n        localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n        return categories.categories[categoryIndex];\n      }\n      throw new Error(\"카테고리를 찾을 수 없습니다\");\n    }\n  },\n  // 사용자 카테고리 삭제\n  deleteCategory: async categoryId => {\n    try {\n      const response = await api.delete(`/categories/${categoryId}`);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories ? JSON.parse(savedCategories) : {\n        categories: [...DEFAULT_PROJECT_CATEGORIES]\n      };\n      const categoryIndex = categories.categories.findIndex(cat => cat.id === categoryId);\n      if (categoryIndex !== -1) {\n        categories.categories.splice(categoryIndex, 1);\n        localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n        return {\n          success: true\n        };\n      }\n      throw new Error(\"카테고리를 찾을 수 없습니다\");\n    }\n  }\n};\n\n// 프로젝트 카테고리 변경 API\nexport const projectCategoryAPI = {\n  // 프로젝트 카테고리 변경\n  updateProjectCategory: async (projectId, categoryId) => {\n    try {\n      const response = await api.put(`/projects/${projectId}/category`, {\n        category: categoryId\n      });\n      return response.data;\n    } catch (error) {\n      // 임시로 클라이언트에서 처리 (실제로는 백엔드에서 처리해야 함)\n      console.log(`프로젝트 ${projectId}의 카테고리를 ${categoryId}로 변경`);\n      return {\n        success: true,\n        projectId,\n        category: categoryId\n      };\n    }\n  }\n};\n\n//프로젝트 통계 정보 API\nexport const projectStatsAPI = {\n  // 프로젝트 상세 통계 조회\n  getProjectStats: async projectId => {\n    const response = await api.get(`/projects/${projectId}/stats`);\n    return response.data;\n  },\n  // 모든 프로젝트 통계 요약\n  getAllProjectsStats: async () => {\n    const response = await api.get(\"/projects/stats\");\n    return response.data;\n  }\n};\n\n// 프롬프트 통계 정보 계산 유틸리티\nexport const calculatePromptStats = promptCards => {\n  const stats = {\n    totalCards: promptCards.length,\n    activeCards: promptCards.filter(card => card.enabled !== false).length,\n    totalTokens: 0,\n    totalSize: 0,\n    avgTokensPerCard: 0,\n    categories: new Set(),\n    models: new Set(),\n    temperatureRange: {\n      min: 1,\n      max: 0\n    }\n  };\n  promptCards.forEach(card => {\n    // 카테고리 수집\n    stats.categories.add(card.category);\n\n    // 모델 수집\n    stats.models.add(card.model);\n\n    // 프롬프트 텍스트 통계\n    if (card.prompt_text) {\n      const textLength = card.prompt_text.length;\n      stats.totalSize += textLength;\n\n      // 대략적인 토큰 수 계산 (영어: 4자/토큰, 한국어: 2자/토큰)\n      const estimatedTokens = Math.ceil(textLength / 2.5);\n      stats.totalTokens += estimatedTokens;\n    }\n\n    // 온도 범위 계산\n    const temp = parseFloat(card.temperature);\n    if (temp < stats.temperatureRange.min) stats.temperatureRange.min = temp;\n    if (temp > stats.temperatureRange.max) stats.temperatureRange.max = temp;\n  });\n\n  // 평균 토큰 계산\n  stats.avgTokensPerCard = stats.totalCards > 0 ? Math.round(stats.totalTokens / stats.totalCards) : 0;\n\n  // Set을 배열로 변환\n  stats.categories = Array.from(stats.categories);\n  stats.models = Array.from(stats.models);\n  return stats;\n};\n\n// 스마트 제목 생성 함수 (실제 뉴스 분석)\nconst generateSmartTitles = (articleContent, userRequest = \"\") => {\n  const content = articleContent.toLowerCase();\n\n  // 더 정교한 분석\n  const analysis = analyzeArticleContent(content);\n  const keywords = extractRealKeywords(content);\n\n  // 사용자 요청 분석\n  const isShortRequest = userRequest.includes(\"짧게\") || userRequest.includes(\"간결\") || userRequest.includes(\"단순\");\n  const isImpactfulRequest = userRequest.includes(\"임팩트\") || userRequest.includes(\"강렬\") || userRequest.includes(\"눈에 띄\");\n  const isConservativeRequest = userRequest.includes(\"보수적\") || userRequest.includes(\"안전\") || userRequest.includes(\"전문적\");\n  console.log(\"📰 기사 분석 결과:\", analysis);\n  console.log(\"🔑 추출된 키워드:\", keywords);\n\n  // 실제 기사 내용 기반 제목 생성\n  const titles = [];\n\n  // 기본적인 사실 전달형 제목들\n  if (analysis.mainSubject && analysis.mainAction) {\n    titles.push(`${analysis.mainSubject} ${analysis.mainAction}`);\n    titles.push(`${analysis.mainSubject}, ${analysis.mainAction} 나서`);\n  }\n\n  // 구체적 정보가 있는 경우\n  if (analysis.specificInfo) {\n    titles.push(`${analysis.mainSubject} ${analysis.specificInfo} ${analysis.mainAction}`);\n  }\n\n  // 시점/전망 정보가 있는 경우\n  if (analysis.timeframe || analysis.target) {\n    const timeInfo = analysis.timeframe || analysis.target;\n    titles.push(`${analysis.mainSubject}, ${timeInfo} ${analysis.mainAction} 계획`);\n  }\n\n  // 결과/효과 중심 제목\n  if (analysis.expectedResult) {\n    titles.push(`${analysis.mainSubject} ${analysis.mainAction}로 ${analysis.expectedResult} 노린다`);\n  }\n\n  // 폴백: 기본 제목들\n  if (titles.length < 3) {\n    titles.push(`${analysis.mainSubject || \"기업\"} 새로운 도전`);\n    titles.push(`주목받는 ${analysis.mainAction || \"사업 전략\"}`);\n    titles.push(`${analysis.industry || \"업계\"} 변화 바람`);\n  }\n\n  // 사용자 요청에 따른 제목 조정\n  let finalTitles = titles.slice(0, 5);\n  if (isShortRequest) {\n    // 짧은 제목 요청 시 글자 수 축약\n    finalTitles = finalTitles.map(title => {\n      if (title.length > 20) {\n        return title.substring(0, 18) + \"..\";\n      }\n      return title;\n    });\n  }\n  if (isImpactfulRequest) {\n    // 임팩트 강화 요청 시 강렬한 표현 추가\n    finalTitles = finalTitles.map(title => {\n      if (!title.includes(\"!\") && !title.includes(\"주목\")) {\n        return title.replace(/계획|예정/, \"확정\").replace(/추진|진행/, \"단행\");\n      }\n      return title;\n    });\n  }\n  if (isConservativeRequest) {\n    // 보수적 요청 시 안정적 표현으로 변경\n    finalTitles = finalTitles.map(title => {\n      return title.replace(/게임체인저|승부수/, \"전략\").replace(/!/, \"\");\n    });\n  }\n\n  // userRequest가 있으면 첫 번째 제목에 반영 상태 표시\n  const requestNote = userRequest ? `\\n\\n💡 \"${userRequest}\" 요청을 반영하여 생성했습니다.` : \"\";\n  return finalTitles.map((title, i) => `${i + 1}. ${title}`).join(\"\\n\") + requestNote;\n};\n\n// 실제 기사 내용 분석 함수\nconst analyzeArticleContent = content => {\n  // 회사명 추출\n  const companies = [\"lg전자\", \"lg\", \"엘지전자\", \"삼성전자\", \"삼성\", \"sk하이닉스\", \"sk\", \"현대자동차\", \"현대\", \"포스코\", \"네이버\", \"카카오\", \"쿠팡\", \"kt\", \"skt\", \"롯데\", \"신세계\", \"하나금융\", \"우리은행\", \"kb금융\", \"기아\", \"두산\", \"gs\", \"한화\", \"ls\", \"오리온\", \"cj\"];\n  const foundCompany = companies.find(company => content.includes(company));\n\n  // 액션 동사 추출\n  const actions = [{\n    keywords: [\"출시\", \"런칭\", \"발표\"],\n    action: \"출시\"\n  }, {\n    keywords: [\"개발\", \"연구\", \"제작\"],\n    action: \"개발\"\n  }, {\n    keywords: [\"인수\", \"합병\", \"투자\"],\n    action: \"투자\"\n  }, {\n    keywords: [\"진출\", \"확장\", \"진입\"],\n    action: \"진출\"\n  }, {\n    keywords: [\"계획\", \"예정\", \"추진\"],\n    action: \"추진\"\n  }, {\n    keywords: [\"협력\", \"제휴\", \"파트너십\"],\n    action: \"협력\"\n  }, {\n    keywords: [\"구축\", \"설립\", \"건설\"],\n    action: \"구축\"\n  }];\n  const foundAction = actions.find(actionGroup => actionGroup.keywords.some(keyword => content.includes(keyword)));\n\n  // 구체적 정보 추출\n  const specificTerms = [\"ai\", \"인공지능\", \"반도체\", \"hbm\", \"전기차\", \"ev\", \"배터리\", \"소프트웨어\", \"플랫폼\", \"서비스\", \"솔루션\", \"시스템\", \"기술\", \"장비\", \"제품\"];\n  const foundSpecific = specificTerms.find(term => content.includes(term));\n\n  // 시간 관련 정보\n  const timeframes = [\"2024년\", \"2025년\", \"2026년\", \"내년\", \"올해\", \"상반기\", \"하반기\", \"1분기\", \"2분기\", \"3분기\", \"4분기\", \"연말\", \"연초\"];\n  const foundTimeframe = timeframes.find(time => content.includes(time));\n\n  // 목표/결과 관련\n  const results = [\"매출 증대\", \"시장 점유율\", \"경쟁력 강화\", \"수익성 개선\", \"글로벌 진출\", \"디지털 전환\", \"탄소중립\", \"esg\", \"지속가능\"];\n  const foundResult = results.find(result => content.includes(result));\n\n  // 산업 분야\n  const industries = [\"반도체\", \"자동차\", \"금융\", \"유통\", \"통신\", \"건설\", \"에너지\", \"바이오\", \"게임\", \"it\", \"소프트웨어\", \"하드웨어\"];\n  const foundIndustry = industries.find(industry => content.includes(industry));\n\n  // 회사명 정리\n  let cleanCompany = foundCompany;\n  if (foundCompany) {\n    if (foundCompany === \"lg\" || foundCompany === \"lg전자\") cleanCompany = \"LG전자\";else if (foundCompany === \"삼성\" || foundCompany === \"삼성전자\") cleanCompany = \"삼성전자\";else if (foundCompany === \"sk\" || foundCompany === \"sk하이닉스\") cleanCompany = \"SK하이닉스\";else if (foundCompany === \"현대\" || foundCompany === \"현대자동차\") cleanCompany = \"현대자동차\";else cleanCompany = foundCompany;\n  }\n  return {\n    mainSubject: cleanCompany || extractSubjectFromSentence(content),\n    mainAction: foundAction ? foundAction.action : \"발표\",\n    specificInfo: foundSpecific,\n    timeframe: foundTimeframe,\n    expectedResult: foundResult,\n    industry: foundIndustry\n  };\n};\n\n// 문장에서 주어 추출 (간단한 방식)\nconst extractSubjectFromSentence = content => {\n  const sentences = content.split(/[.!?]/).filter(s => s.length > 10);\n  if (sentences.length === 0) return \"기업\";\n  const firstSentence = sentences[0].trim();\n  const words = firstSentence.split(\" \");\n\n  // 첫 번째 문장의 첫 번째 단어가 주어인 경우가 많음\n  if (words.length > 0) {\n    const subject = words[0].replace(/[^가-힣a-zA-Z0-9]/g, \"\");\n    if (subject.length > 1) {\n      return subject;\n    }\n  }\n  return \"기업\";\n};\n\n// 실제 키워드 추출 (빈도 기반)\nconst extractRealKeywords = content => {\n  const commonWords = [\"그는\", \"그녀는\", \"이는\", \"이번\", \"최근\", \"당시\", \"현재\", \"앞서\", \"또한\", \"하지만\", \"그러나\", \"따라서\"];\n  const words = content.split(/\\s+/).map(word => word.replace(/[^가-힣a-zA-Z0-9]/g, \"\")).filter(word => word.length > 1 && !commonWords.includes(word));\n\n  // 빈도 계산\n  const frequency = {};\n  words.forEach(word => {\n    frequency[word] = (frequency[word] || 0) + 1;\n  });\n\n  // 상위 키워드 반환\n  return Object.entries(frequency).sort(([, a], [, b]) => b - a).slice(0, 5).map(([word]) => word);\n};\n\n// 사용자 프롬프트를 반영한 제목 생성 (Bedrock Claude 시뮬레이션)\nconst generateTitlesWithUserPrompts = (articleContent, userRequest = \"\", savedPrompts = {}) => {\n  console.log(\"🧠 Claude 시뮬레이션: 단계별 프롬프트 처리\");\n\n  // 1단계: 역할 및 목표 (instruction)\n  const rolePrompt = savedPrompts.instruction || \"당신은 전문적인 기사 제목 생성 AI입니다.\";\n  console.log(\"1️⃣ 역할 정의:\", rolePrompt.substring(0, 50) + \"...\");\n\n  // 2단계: 지식 베이스 (knowledge)\n  const knowledgePrompt = savedPrompts.knowledge || \"제목 작성 원칙: 간결하고 명확한 표현\";\n  console.log(\"2️⃣ 지식 베이스:\", knowledgePrompt.substring(0, 50) + \"...\");\n\n  // 3단계: 사고 과정 (secondary - CoT)\n  const reasoningPrompt = savedPrompts.secondary || \"단계별 사고 과정을 거쳐 제목을 생성합니다.\";\n  console.log(\"3️⃣ 사고 과정:\", reasoningPrompt.substring(0, 50) + \"...\");\n\n  // 기사 분석\n  const analysis = analyzeArticleContent(articleContent.toLowerCase());\n\n  // 사용자 요청 분석\n  const isShortRequest = userRequest.includes(\"짧게\") || userRequest.includes(\"간결\");\n  const isImpactfulRequest = userRequest.includes(\"임팩트\") || userRequest.includes(\"강렬\") || userRequest.includes(\"눈에 띄\");\n  const isConservativeRequest = userRequest.includes(\"보수적\") || userRequest.includes(\"안전\");\n\n  // Claude 스타일의 제목 생성 (단계별 프롬프트 반영)\n  const titles = [];\n\n  // 기본 정보 전달형 (knowledge 프롬프트 반영)\n  if (analysis.mainSubject && analysis.mainAction) {\n    let title1 = `${analysis.mainSubject} ${analysis.mainAction}`;\n    let title2 = `${analysis.mainSubject}, ${analysis.mainAction} 계획`;\n\n    // 스타일 가이드 적용\n    if (savedPrompts.style_guide) {\n      if (savedPrompts.style_guide.includes(\"간결\") || isShortRequest) {\n        title1 = title1.length > 15 ? title1.substring(0, 13) + \"..\" : title1;\n        title2 = title2.length > 15 ? title2.substring(0, 13) + \"..\" : title2;\n      }\n    }\n    titles.push(title1);\n    titles.push(title2);\n  }\n\n  // 상세 정보 포함형 (secondary 프롬프트의 단계별 사고 반영)\n  if (analysis.specificInfo) {\n    let title3 = `${analysis.mainSubject} ${analysis.specificInfo} ${analysis.mainAction}`;\n    if (analysis.timeframe) {\n      title3 = `${analysis.mainSubject}, ${analysis.timeframe} ${analysis.specificInfo} ${analysis.mainAction}`;\n    }\n    titles.push(title3);\n  }\n\n  // 결과/효과 중심 (validation 프롬프트의 ReAct 패턴 반영)\n  if (analysis.expectedResult || analysis.industry) {\n    const effectTopic = analysis.expectedResult || `${analysis.industry} 혁신`;\n    titles.push(`${analysis.mainSubject} ${analysis.mainAction}로 ${effectTopic} 노린다`);\n  }\n\n  // enhancement 프롬프트 반영 - 품질 검증 및 개선\n  let finalTitles = titles.slice(0, 4);\n\n  // 사용자 요청에 따른 조정\n  if (isImpactfulRequest) {\n    finalTitles = finalTitles.map(title => {\n      if (!title.includes(\"!\")) {\n        return title.replace(/계획|예정/, \"확정\").replace(/노린다/, \"목표\") + \"!\";\n      }\n      return title;\n    });\n  }\n  if (isConservativeRequest) {\n    finalTitles = finalTitles.map(title => {\n      return title.replace(/!/, \"\").replace(/노린다/, \"전망\");\n    });\n  }\n\n  // 프롬프트 기반 추가 제목\n  if (savedPrompts.enhancement && savedPrompts.enhancement.includes(\"매력도\")) {\n    finalTitles.push(`주목! ${analysis.mainSubject}의 ${analysis.specificInfo || \"새로운\"} 도전`);\n  }\n\n  // 최종 정리 및 반환\n  const resultTitles = finalTitles.slice(0, 5);\n  const promptInfo = Object.keys(savedPrompts).length > 0 ? `\\n\\n🎯 적용된 사용자 프롬프트: ${Object.keys(savedPrompts).join(\", \")}` : \"\\n\\n📝 기본 프롬프트 사용\";\n  const userRequestInfo = userRequest ? `\\n💡 \"${userRequest}\" 요청이 반영되었습니다.` : \"\";\n  return resultTitles.map((title, i) => `${i + 1}. ${title}`).join(\"\\n\") + promptInfo + userRequestInfo;\n};\n\n// 프롬프트 오케스트레이션 API\nexport const orchestrationAPI = {\n  // 오케스트레이션 실행\n  executeOrchestration: async (projectId, articleContent, orchestrationConfig = {}, userRequest = \"\") => {\n    // 개발 환경에서 CORS 문제 우회용 모키 응답\n    if (IS_MOCK_MODE) {\n      var _orchestrationConfig$;\n      console.log(\"🚀 고도화된 모키 모드: Bedrock Claude 시뮬레이션 + 실제 프롬프트 사용\");\n      console.log(\"📝 사용자 추가 요청:\", userRequest);\n\n      // localStorage에서 실제 저장된 프롬프트들 가져오기\n      const savedPrompts = JSON.parse(localStorage.getItem(`prompts_${projectId}`) || \"{}\");\n      console.log(\"💾 사용할 프롬프트들:\", savedPrompts);\n\n      // 실제와 유사한 응답 시뮬레이션\n      await new Promise(resolve => setTimeout(resolve, 2000)); // 2초 지연\n\n      // 실제 저장된 프롬프트를 반영한 제목 생성\n      const titles = generateTitlesWithUserPrompts(articleContent, userRequest, savedPrompts);\n      console.log(\"✨ 사용자 프롬프트 기반 생성된 제목들:\", titles);\n      return {\n        message: \"제목 생성이 완료되었습니다\",\n        executionId: `mock-${Date.now()}`,\n        projectId: \"mock-project\",\n        result: titles,\n        mode: \"mock\",\n        timestamp: new Date().toISOString(),\n        debug: {\n          promptCount: ((_orchestrationConfig$ = orchestrationConfig.enabledSteps) === null || _orchestrationConfig$ === void 0 ? void 0 : _orchestrationConfig$.length) || 5,\n          usedDefaultGuidelines: false,\n          combinedPromptsLength: 1500,\n          promptTitles: orchestrationConfig.enabledSteps || [\"instruction\", \"knowledge\", \"secondary\", \"style_guide\", \"validation\"],\n          firstPromptPreview: \"모키 모드에서 실행된 프롬프트입니다...\"\n        }\n      };\n    }\n\n    // 실제 API 호출 - /generate 엔드포인트 사용\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article: articleContent,\n      userRequest: userRequest,\n      useStepFunction: false,\n      // 직접 모드 사용\n      enabledSteps: orchestrationConfig.enabledSteps || [],\n      temperature: orchestrationConfig.temperature || 0.7\n    });\n    console.log(\"🔍 실제 Generate API 응답:\", response.data);\n    return response.data;\n  },\n  // 오케스트레이션 상태 조회\n  getOrchestrationStatus: async (projectId, executionId) => {\n    const response = await api.get(`/projects/${projectId}/orchestrate/${executionId}/status`);\n    return response.data;\n  },\n  // 오케스트레이션 결과 조회\n  getOrchestrationResult: async (projectId, executionId) => {\n    const response = await api.get(`/projects/${projectId}/orchestrate/${executionId}/result`);\n    return response.data;\n  },\n  // 오케스트레이션 로그 조회\n  getOrchestrationLogs: async (projectId, executionId) => {\n    const response = await api.get(`/projects/${projectId}/orchestrate/${executionId}/logs`);\n    return response.data;\n  },\n  // 오케스트레이션 전략 테스트\n  testOrchestrationStep: async (projectId, stepType, promptContent, articleContent) => {\n    const response = await api.post(`/projects/${projectId}/orchestrate/test`, {\n      stepType,\n      promptContent,\n      articleContent\n    });\n    return response.data;\n  },\n  // 오케스트레이션 고도화 설정\n  updateOrchestrationConfig: async (projectId, config) => {\n    const response = await api.put(`/projects/${projectId}/orchestration-config`, config);\n    return response.data;\n  },\n  // 오케스트레이션 메트릭 조회\n  getOrchestrationMetrics: async (projectId, timeRange = \"24h\") => {\n    const response = await api.get(`/projects/${projectId}/orchestration-metrics`, {\n      params: {\n        timeRange\n      }\n    });\n    return response.data;\n  }\n};\n\n// 오케스트레이션 단계 정의\nexport const ORCHESTRATION_STEPS = {\n  PERSONA_DEFINITION: {\n    id: \"persona_definition\",\n    name: \"역할 정의\",\n    description: \"AI 모델에게 역할과 페르소나를 부여\",\n    order: 1,\n    required: true\n  },\n  CONSTRAINT_DEFINITION: {\n    id: \"constraint_definition\",\n    name: \"제약 조건 설정\",\n    description: \"명확한 룰과 제한사항 적용\",\n    order: 2,\n    required: true\n  },\n  PROCESS_EXECUTION: {\n    id: \"process_execution\",\n    name: \"워크플로우 실행\",\n    description: \"단계별 작업 프로세스 수행\",\n    order: 3,\n    required: true\n  },\n  FORMAT_VALIDATION: {\n    id: \"format_validation\",\n    name: \"포맷 검증\",\n    description: \"출력 결과물 포맷 검증 및 조정\",\n    order: 4,\n    required: false\n  },\n  EXAMPLE_LEARNING: {\n    id: \"example_learning\",\n    name: \"예시 학습\",\n    description: \"Few-shot 예제를 통한 학습 및 측고\",\n    order: 5,\n    required: false\n  },\n  QUALITY_ASSESSMENT: {\n    id: \"quality_assessment\",\n    name: \"품질 평가\",\n    description: \"결과물 품질 평가 및 점수 매기기\",\n    order: 6,\n    required: false\n  }\n};\n\n// 🆕 파일 크기 포맷팅 유틸리티\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return \"0 B\";\n  const k = 1024;\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + \" \" + sizes[i];\n};\n\n// 🆕 토큰 수 포맷팅 유틸리티\nexport const formatTokenCount = tokens => {\n  if (tokens < 1000) return tokens.toString();\n  if (tokens < 1000000) return (tokens / 1000).toFixed(1) + \"K\";\n  return (tokens / 1000000).toFixed(1) + \"M\";\n};\n\n// 🆕 카테고리 관련 유틸리티 (수정됨)\nexport const getCategoryInfo = (categoryId, userCategories = []) => {\n  const allCategories = [...DEFAULT_PROJECT_CATEGORIES, ...userCategories];\n  return allCategories.find(cat => cat.id === categoryId) || DEFAULT_PROJECT_CATEGORIES.find(cat => cat.id === \"news\");\n};\n\n// 🆕 카테고리별 색상 클래스 반환 (수정됨)\nexport const getCategoryColorClasses = color => {\n  const colors = {\n    blue: \"bg-blue-100 text-blue-800 border-blue-200\",\n    green: \"bg-green-100 text-green-800 border-green-200\",\n    purple: \"bg-purple-100 text-purple-800 border-purple-200\",\n    orange: \"bg-orange-100 text-orange-800 border-orange-200\",\n    yellow: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n    indigo: \"bg-indigo-100 text-indigo-800 border-indigo-200\",\n    cyan: \"bg-cyan-100 text-cyan-800 border-cyan-200\",\n    red: \"bg-red-100 text-red-800 border-red-200\",\n    pink: \"bg-pink-100 text-pink-800 border-pink-200\",\n    gray: \"bg-gray-100 text-gray-800 border-gray-200\"\n  };\n  return colors[color] || colors.gray;\n};\n\n// 🆕 색상 옵션 (카테고리 생성 시 사용)\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파란색\",\n  class: \"bg-blue-500\"\n}, {\n  id: \"green\",\n  name: \"초록색\",\n  class: \"bg-green-500\"\n}, {\n  id: \"purple\",\n  name: \"보라색\",\n  class: \"bg-purple-500\"\n}, {\n  id: \"orange\",\n  name: \"주황색\",\n  class: \"bg-orange-500\"\n}, {\n  id: \"yellow\",\n  name: \"노란색\",\n  class: \"bg-yellow-500\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  class: \"bg-indigo-500\"\n}, {\n  id: \"cyan\",\n  name: \"청록색\",\n  class: \"bg-cyan-500\"\n}, {\n  id: \"red\",\n  name: \"빨간색\",\n  class: \"bg-red-500\"\n}, {\n  id: \"pink\",\n  name: \"분홍색\",\n  class: \"bg-pink-500\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  class: \"bg-gray-500\"\n}];\n\n// 🆕 프로젝트 검색 및 필터링 유틸리티\nexport const filterProjects = (projects, {\n  category,\n  searchQuery,\n  sortBy\n}) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터링\n  if (category && category !== \"all\") {\n    filtered = filtered.filter(project => project.category === category);\n  }\n\n  // 검색 필터링\n  if (searchQuery && searchQuery.trim()) {\n    const query = searchQuery.toLowerCase().trim();\n    filtered = filtered.filter(project => project.name.toLowerCase().includes(query) || project.description && project.description.toLowerCase().includes(query) || project.tags && project.tags.some(tag => tag.toLowerCase().includes(query)));\n  }\n\n  // 정렬\n  switch (sortBy) {\n    case \"name\":\n      filtered.sort((a, b) => a.name.localeCompare(b.name));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"created\":\n    default:\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n  }\n  return filtered;\n};\n\n// 🆕 디바운스 훅 (검색 최적화용)\nexport const useDebounce = (value, delay) => {\n  _s();\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n  return debouncedValue;\n};\n_s(useDebounce, \"KDuPAtDOgxm8PU6legVJOb3oOmA=\");\nexport default api;","map":{"version":3,"names":["axios","React","API_BASE_URL","process","env","REACT_APP_API_URL","IS_MOCK_MODE","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","_error$response","_error$response2","_error$response3","data","message","removeItem","window","location","href","projectAPI","getProjects","params","get","createProject","projectData","post","getProject","projectId","updateProject","put","deleteProject","delete","getUploadUrl","category","filename","generateAPI","startTitleGeneration","article","aiSettings","payload","getExecutionStatus","executionArn","encodedArn","encodeURIComponent","pollForResult","maxRetries","interval","success","retries","resolve","setTimeout","generateTitle","onProgress","startResponse","mode","result","conversationId","executionId","Date","now","usage","timestamp","toISOString","debug","pollResponse","completedAt","Error","promptCardAPI","getPromptCards","includeContent","includeDisabled","savedPrompts","JSON","parse","defaultPrompts","promptId","id","title","enabled","stepOrder","s3Key","description","prompt_text","instruction","knowledge","secondary","style_guide","validation","enhancement","promptCards","count","length","include_content","include_disabled","createPromptCard","promptData","content","setItem","stringify","updatePromptCard","replace","savedContent","deletePromptCard","reorderPromptCard","newStepOrder","step_order","togglePromptCard","getPromptContent","mockContents","lastModified","authAPI","signup","userData","signin","credentials","accessToken","idToken","refreshToken","signout","verifyEmail","verificationData","forgotPassword","email","confirmPassword","resetData","getCurrentUser","atob","split","name","sub","isAuthenticated","currentTime","exp","uploadAPI","uploadFile","uploadUrl","file","PROMPT_CATEGORIES","required","PROMPT_CARD_CATEGORIES","color","icon","order","orchestration_step","AVAILABLE_MODELS","maxTokens","handleAPIError","DEFAULT_PROJECT_CATEGORIES","isDefault","categoryAPI","getUserCategories","savedCategories","categories","createCategory","categoryData","newCategory","createdAt","push","updateCategory","categoryId","categoryIndex","findIndex","cat","updatedAt","deleteCategory","splice","projectCategoryAPI","updateProjectCategory","projectStatsAPI","getProjectStats","getAllProjectsStats","calculatePromptStats","stats","totalCards","activeCards","filter","card","totalTokens","totalSize","avgTokensPerCard","Set","models","temperatureRange","min","max","forEach","add","model","textLength","estimatedTokens","Math","ceil","temp","parseFloat","temperature","round","Array","from","generateSmartTitles","articleContent","userRequest","toLowerCase","analysis","analyzeArticleContent","keywords","extractRealKeywords","isShortRequest","includes","isImpactfulRequest","isConservativeRequest","titles","mainSubject","mainAction","specificInfo","timeframe","target","timeInfo","expectedResult","industry","finalTitles","slice","map","substring","requestNote","i","join","companies","foundCompany","find","company","actions","action","foundAction","actionGroup","some","keyword","specificTerms","foundSpecific","term","timeframes","foundTimeframe","time","results","foundResult","industries","foundIndustry","cleanCompany","extractSubjectFromSentence","sentences","s","firstSentence","trim","words","subject","commonWords","word","frequency","Object","entries","sort","a","b","generateTitlesWithUserPrompts","rolePrompt","knowledgePrompt","reasoningPrompt","title1","title2","title3","effectTopic","resultTitles","promptInfo","keys","userRequestInfo","orchestrationAPI","executeOrchestration","orchestrationConfig","_orchestrationConfig$","promptCount","enabledSteps","usedDefaultGuidelines","combinedPromptsLength","promptTitles","firstPromptPreview","useStepFunction","getOrchestrationStatus","getOrchestrationResult","getOrchestrationLogs","testOrchestrationStep","stepType","promptContent","updateOrchestrationConfig","getOrchestrationMetrics","timeRange","ORCHESTRATION_STEPS","PERSONA_DEFINITION","CONSTRAINT_DEFINITION","PROCESS_EXECUTION","FORMAT_VALIDATION","EXAMPLE_LEARNING","QUALITY_ASSESSMENT","formatFileSize","bytes","k","sizes","floor","pow","toFixed","formatTokenCount","tokens","toString","getCategoryInfo","userCategories","allCategories","getCategoryColorClasses","colors","blue","green","purple","orange","yellow","indigo","cyan","red","pink","gray","COLOR_OPTIONS","class","filterProjects","projects","searchQuery","sortBy","filtered","project","query","tags","tag","localeCompare","useDebounce","value","delay","_s","debouncedValue","setDebouncedValue","useState","useEffect","handler","clearTimeout"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\nimport React from \"react\"; // Added for useDebounce\n\n// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// 실제 Bedrock Claude API 사용\nconst IS_MOCK_MODE = false;\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n\n    // 개발/테스트 모드: 더미 토큰 사용\n    const token =\n      localStorage.getItem(\"idToken\") ||\n      localStorage.getItem(\"accessToken\") ||\n      \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0LXVzZXIiLCJuYW1lIjoiVGVzdCBVc2VyIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwiaWF0IjoxNjE2MjM5MDIyfQ.test\";\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\n      \"API 오류:\",\n      error.response?.status,\n      error.response?.data || error.message\n    );\n\n    // 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\n    if (error.response?.status === 401) {\n      // 토큰 만료 처리\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"idToken\");\n      localStorage.removeItem(\"refreshToken\");\n\n      // 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\n      window.location.href = \"/login\";\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// 프로젝트 관련 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async (params = {}) => {\n    const response = await api.get(\"/projects\", { params });\n    return response.data;\n  },\n\n  // 프로젝트 생성\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  // 프로젝트 상세 조회\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 프로젝트 업데이트\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  // 프로젝트 삭제\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 업로드 URL 요청\n  getUploadUrl: async (projectId, category, filename) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { category, filename },\n    });\n    return response.data;\n  },\n};\n\n// 제목 생성 API (Step Functions 기반)\nexport const generateAPI = {\n  // 제목 생성 시작 (Step Functions 실행)\n  startTitleGeneration: async (projectId, article, aiSettings) => {\n    const payload = {\n      article,\n    };\n\n    // AI 설정이 있으면 추가\n    if (aiSettings) {\n      payload.aiSettings = aiSettings;\n    }\n\n    const response = await api.post(`/projects/${projectId}/generate`, payload);\n    return response.data;\n  },\n\n  // 실행 상태 조회\n  getExecutionStatus: async (executionArn) => {\n    const encodedArn = encodeURIComponent(executionArn);\n    const response = await api.get(`/executions/${encodedArn}`);\n    return response.data;\n  },\n\n  // 폴링을 통한 결과 대기\n  pollForResult: async (executionArn, maxRetries = 30, interval = 2000) => {\n    if (!executionArn || executionArn === \"undefined\") {\n      return {\n        success: false,\n        error: \"실행 ARN이 없습니다. 직접 모드에서는 폴링이 필요하지 않습니다.\",\n      };\n    }\n\n    let retries = 0;\n\n    while (retries < maxRetries) {\n      try {\n        const status = await generateAPI.getExecutionStatus(executionArn);\n\n        if (status.status === \"SUCCEEDED\") {\n          return {\n            success: true,\n            data: status,\n          };\n        } else if (status.status === \"FAILED\") {\n          return {\n            success: false,\n            error: status.error || \"실행이 실패했습니다\",\n          };\n        } else if (status.status === \"TIMED_OUT\") {\n          return {\n            success: false,\n            error: \"실행 시간이 초과되었습니다\",\n          };\n        } else if (status.status === \"ABORTED\") {\n          return {\n            success: false,\n            error: \"실행이 중단되었습니다\",\n          };\n        }\n\n        // 아직 실행 중이면 대기\n        await new Promise((resolve) => setTimeout(resolve, interval));\n        retries++;\n      } catch (error) {\n        console.error(\"폴링 중 오류:\", error);\n        retries++;\n\n        if (retries >= maxRetries) {\n          return {\n            success: false,\n            error: \"상태 조회 중 오류가 발생했습니다\",\n          };\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, interval));\n      }\n    }\n\n    return {\n      success: false,\n      error: \"실행 시간이 초과되었습니다\",\n    };\n  },\n\n  // 제목 생성 (직접 모드 + Step Functions 모드 지원)\n  generateTitle: async (projectId, article, onProgress, aiSettings) => {\n    try {\n      // 제목 생성 시작\n      const startResponse = await generateAPI.startTitleGeneration(\n        projectId,\n        article,\n        aiSettings\n      );\n\n      // 직접 모드인 경우 (mode가 'direct'이거나 result가 바로 있는 경우)\n      if (startResponse.mode === \"direct\" || startResponse.result) {\n        if (onProgress) {\n          onProgress({\n            status: \"completed\",\n            message: \"제목 생성이 완료되었습니다!\",\n            result: startResponse.result,\n          });\n        }\n\n        return {\n          conversationId: startResponse.executionId || \"direct-\" + Date.now(),\n          projectId: projectId,\n          result: startResponse.result,\n          usage: startResponse.usage || {},\n          timestamp: startResponse.timestamp || new Date().toISOString(),\n          mode: \"direct\",\n          debug: startResponse.debug || {},\n        };\n      }\n\n      // Step Functions 모드인 경우\n      if (startResponse.executionArn) {\n        if (onProgress) {\n          onProgress({\n            status: \"started\",\n            message: \"제목 생성이 시작되었습니다...\",\n            executionArn: startResponse.executionArn,\n          });\n        }\n\n        // 폴링을 통한 결과 대기\n        const pollResponse = await generateAPI.pollForResult(\n          startResponse.executionArn\n        );\n\n        if (pollResponse.success) {\n          return {\n            conversationId: pollResponse.data.conversationId,\n            projectId: projectId,\n            result: pollResponse.data.result,\n            usage: pollResponse.data.usage,\n            timestamp:\n              pollResponse.data.completedAt || new Date().toISOString(),\n            executionArn: startResponse.executionArn,\n            mode: \"stepfunctions\",\n          };\n        } else {\n          throw new Error(pollResponse.error);\n        }\n      }\n\n      throw new Error(\"알 수 없는 응답 형식입니다\");\n    } catch (error) {\n      console.error(\"제목 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// 🆕 프롬프트 카드 관리 API\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회 (step_order 순으로 정렬)\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeDisabled = false\n  ) => {\n    if (IS_MOCK_MODE) {\n      console.log(\n        \"🎭 개선된 모키 모드: 프롬프트 카드 목록 (localStorage 기반)\"\n      );\n\n      // localStorage에서 수정된 프롬프트들 가져오기\n      const savedPrompts = JSON.parse(\n        localStorage.getItem(`prompts_${projectId}`) || \"{}\"\n      );\n\n      const defaultPrompts = [\n        {\n          promptId: \"template-instruction\",\n          id: \"template-instruction\",\n          title: \"역할 및 목표 프롬프트\",\n          category: \"instruction\",\n          enabled: true,\n          stepOrder: 1,\n          s3Key: \"prompts/instruction.txt\",\n          description: \"AI의 역할, 정체성, 핵심 목표를 명확히 정의합니다\",\n          prompt_text:\n            savedPrompts.instruction ||\n            \"당신은 전문적인 기사 제목 생성 AI입니다.\\n목표: 독자의 관심을 끌고 정확한 정보를 전달하는 제목 생성\",\n        },\n        {\n          promptId: \"template-knowledge\",\n          id: \"template-knowledge\",\n          title: \"지식 베이스 프롬프트\",\n          category: \"knowledge\",\n          enabled: true,\n          stepOrder: 2,\n          s3Key: \"prompts/knowledge.txt\",\n          description: \"작업 수행에 필요한 핵심 지식과 원칙을 제공합니다\",\n          prompt_text:\n            savedPrompts.knowledge ||\n            \"제목 작성 원칙:\\n- 간결하고 명확한 표현\\n- 핵심 키워드 포함\\n- 독자의 관심 유발\",\n        },\n        {\n          promptId: \"template-secondary\",\n          id: \"template-secondary\",\n          title: \"CoT (사고 과정) 프롬프트\",\n          category: \"secondary\",\n          enabled: true,\n          stepOrder: 3,\n          s3Key: \"prompts/secondary.txt\",\n          description: \"단계별 추론 과정을 통해 사고의 투명성을 확보합니다\",\n          prompt_text:\n            savedPrompts.secondary ||\n            \"다음 단계로 사고하세요:\\n1. 기사의 핵심 내용 파악\\n2. 주요 키워드 추출\\n3. 독자 관점에서 흥미도 평가\\n4. 제목 후보 생성\\n5. 최적 제목 선택\",\n        },\n        {\n          promptId: \"template-style_guide\",\n          id: \"template-style_guide\",\n          title: \"스타일 가이드 프롬프트\",\n          category: \"style_guide\",\n          enabled: true,\n          stepOrder: 4,\n          s3Key: \"prompts/style_guide.txt\",\n          description: \"일관된 스타일과 형식을 유지하기 위한 가이드라인\",\n          prompt_text:\n            savedPrompts.style_guide ||\n            \"스타일 요구사항:\\n- 길이: 15-25자 권장\\n- 톤: 전문적이면서 친근\\n- 형식: 명사형 종결\",\n        },\n        {\n          promptId: \"template-validation\",\n          id: \"template-validation\",\n          title: \"ReAct (추론+행동) 프롬프트\",\n          category: \"validation\",\n          enabled: true,\n          stepOrder: 5,\n          s3Key: \"prompts/validation.txt\",\n          description: \"추론과 행동을 결합하여 더 정확한 결과를 도출합니다\",\n          prompt_text:\n            savedPrompts.validation ||\n            \"Thought: 이 기사의 핵심은 무엇인가?\\nAction: 키워드를 추출하고 중요도를 평가한다\\nObservation: 추출된 정보를 바탕으로 제목을 구성한다\\nThought: 생성된 제목이 요구사항을 충족하는가?\\nAction: 필요시 수정하고 최종 검증한다\",\n        },\n        {\n          promptId: \"template-enhancement\",\n          id: \"template-enhancement\",\n          title: \"품질 검증 프롬프트\",\n          category: \"enhancement\",\n          enabled: true,\n          stepOrder: 6,\n          s3Key: \"prompts/enhancement.txt\",\n          description: \"최종 결과물의 품질을 검증하고 개선합니다\",\n          prompt_text:\n            savedPrompts.enhancement ||\n            \"품질 검증 기준:\\n- 정확성: 기사 내용과 일치\\n- 매력도: 독자 관심 유발\\n- 적절성: 매체 성격에 부합\\n- 완성도: 문법과 표현의 정확성\",\n        },\n      ];\n\n      return {\n        projectId,\n        promptCards: defaultPrompts,\n        count: defaultPrompts.length,\n      };\n    }\n\n    const params = {};\n    if (includeContent) params.include_content = \"true\";\n    if (includeDisabled) params.include_disabled = \"true\";\n\n    const response = await api.get(`/prompts/${projectId}`, { params });\n    return response.data;\n  },\n\n  // 새 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  // 새 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    if (IS_MOCK_MODE) {\n      console.log(\"🎭 모키 모드: 프롬프트 카드 생성 시뮬레이션\", {\n        projectId,\n        promptData,\n      });\n\n      // localStorage에 저장\n      const savedPrompts = JSON.parse(\n        localStorage.getItem(`prompts_${projectId}`) || \"{}\"\n      );\n      savedPrompts[promptData.category] =\n        promptData.prompt_text || promptData.content;\n      localStorage.setItem(\n        `prompts_${projectId}`,\n        JSON.stringify(savedPrompts)\n      );\n\n      return {\n        success: true,\n        message: \"프롬프트가 생성되었습니다\",\n        promptId: `template-${promptData.category}`,\n      };\n    }\n\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  // 프롬프트 카드 수정\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    if (IS_MOCK_MODE) {\n      console.log(\n        \"🎭 개선된 모키 모드: 프롬프트 카드 수정 (localStorage 저장)\",\n        {\n          projectId,\n          promptId,\n          promptData,\n        }\n      );\n\n      // promptId에서 카테고리 추출 (template-instruction -> instruction)\n      const category = promptId.replace(\"template-\", \"\");\n\n      // localStorage에 저장\n      const savedPrompts = JSON.parse(\n        localStorage.getItem(`prompts_${projectId}`) || \"{}\"\n      );\n      savedPrompts[category] = promptData.prompt_text || promptData.content;\n      localStorage.setItem(\n        `prompts_${projectId}`,\n        JSON.stringify(savedPrompts)\n      );\n\n      console.log(\"💾 localStorage에 저장된 프롬프트:\", savedPrompts);\n\n      return {\n        success: true,\n        message: \"프롬프트가 수정되어 localStorage에 저장되었습니다\",\n        category,\n        savedContent: savedPrompts[category],\n      };\n    }\n\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  // 프롬프트 카드 순서 변경\n  reorderPromptCard: async (projectId, promptId, newStepOrder) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      step_order: newStepOrder,\n    });\n    return response.data;\n  },\n\n  // 프롬프트 카드 활성/비활성 토글\n  togglePromptCard: async (projectId, promptId, enabled) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      enabled: enabled,\n    });\n    return response.data;\n  },\n\n  // 프롬프트 내용 조회 (S3에서 직접 로드)\n  getPromptContent: async (projectId, promptId) => {\n    if (IS_MOCK_MODE) {\n      console.log(\"🎭 모키 모드: 프롬프트 내용 조회 시뮬레이션\", {\n        projectId,\n        promptId,\n      });\n      const mockContents = {\n        \"template-instruction\":\n          \"당신은 전문적인 기사 제목 생성 AI입니다.\\n목표: 독자의 관심을 끌고 정확한 정보를 전달하는 제목 생성\",\n        \"template-knowledge\":\n          \"제목 작성 원칙:\\n- 간결하고 명확한 표현\\n- 핵심 키워드 포함\\n- 독자의 관심 유발\",\n        \"template-secondary\":\n          \"다음 단계로 사고하세요:\\n1. 기사의 핵심 내용 파악\\n2. 주요 키워드 추출\\n3. 독자 관점에서 흥미도 평가\\n4. 제목 후보 생성\\n5. 최적 제목 선택\",\n      };\n      return {\n        projectId,\n        promptId,\n        content: mockContents[promptId] || \"샘플 프롬프트 내용입니다.\",\n        lastModified: new Date().toISOString(),\n      };\n    }\n\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n};\n\n// 🆕 인증 API\nexport const authAPI = {\n  // 회원가입\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  // 로그인\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    const { accessToken, idToken, refreshToken } = response.data;\n\n    // 토큰 저장\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"idToken\", idToken);\n    localStorage.setItem(\"refreshToken\", refreshToken);\n\n    return response.data;\n  },\n\n  // 로그아웃\n  signout: async () => {\n    try {\n      await api.post(\"/auth/signout\");\n    } finally {\n      // 로컬 토큰 삭제\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"idToken\");\n      localStorage.removeItem(\"refreshToken\");\n    }\n  },\n\n  // 토큰 갱신\n  refreshToken: async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      throw new Error(\"리프레시 토큰이 없습니다\");\n    }\n\n    const response = await api.post(\"/auth/refresh\", { refreshToken });\n    const { accessToken, idToken } = response.data;\n\n    // 새 토큰 저장\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"idToken\", idToken);\n\n    return response.data;\n  },\n\n  // 이메일 인증\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify\", verificationData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 현재 사용자 정보 (토큰에서 추출)\n  getCurrentUser: () => {\n    const token = localStorage.getItem(\"idToken\");\n    if (!token) return null;\n\n    try {\n      // JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      return {\n        email: payload.email,\n        name: payload.name,\n        sub: payload.sub,\n      };\n    } catch (error) {\n      console.error(\"토큰 디코딩 오류:\", error);\n      return null;\n    }\n  },\n\n  // 로그인 상태 확인\n  isAuthenticated: () => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (!token) return false;\n\n    try {\n      // 토큰 만료 시간 확인\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  },\n};\n\n// 파일 업로드 API\nexport const uploadAPI = {\n  // S3 Pre-signed URL로 파일 업로드\n  uploadFile: async (uploadUrl, file) => {\n    const response = await axios.put(uploadUrl, file, {\n      headers: {\n        \"Content-Type\": \"text/plain\",\n      },\n    });\n    return response;\n  },\n};\n\n// 🆕 프롬프트 카테고리 정의 (레거시 - 기존 파일 업로드용)\nexport const PROMPT_CATEGORIES = [\n  {\n    id: \"title_type_guidelines\",\n    name: \"제목 유형 가이드라인\",\n    description: \"제목의 다양한 유형과 작성 원칙\",\n    required: true,\n  },\n  {\n    id: \"stylebook_guidelines\",\n    name: \"스타일북 가이드라인\",\n    description: \"서울경제신문의 스타일북 규정\",\n    required: true,\n  },\n  {\n    id: \"workflow\",\n    name: \"워크플로우\",\n    description: \"제목 생성 6단계 워크플로우\",\n    required: true,\n  },\n  {\n    id: \"audience_optimization\",\n    name: \"독자 최적화\",\n    description: \"대상 독자층별 최적화 전략\",\n    required: true,\n  },\n  {\n    id: \"seo_optimization\",\n    name: \"SEO 최적화\",\n    description: \"검색 엔진 최적화 가이드라인\",\n    required: false,\n  },\n  {\n    id: \"digital_elements_guidelines\",\n    name: \"디지털 요소 가이드라인\",\n    description: \"온라인 매체 특성에 맞는 제목 작성법\",\n    required: true,\n  },\n  {\n    id: \"quality_assessment\",\n    name: \"품질 평가\",\n    description: \"제목 품질 평가 기준\",\n    required: true,\n  },\n  {\n    id: \"uncertainty_handling\",\n    name: \"불확실성 처리\",\n    description: \"불확실한 정보 처리 가이드라인\",\n    required: true,\n  },\n  {\n    id: \"output_format\",\n    name: \"출력 형식\",\n    description: \"결과 출력 형식 정의\",\n    required: true,\n  },\n  {\n    id: \"description\",\n    name: \"프로젝트 설명\",\n    description: \"TITLE-NOMICS 시스템 설명\",\n    required: true,\n  },\n  {\n    id: \"knowledge\",\n    name: \"핵심 지식\",\n    description: \"제목 작성 핵심 지식\",\n    required: true,\n  },\n];\n\n// 🆕 프롬프트 카드 카테고리 정의 (새로운 카드 시스템용)\n// 프롬프트 오케스트레이션 카테고리 체계\nexport const PROMPT_CARD_CATEGORIES = [\n  {\n    id: \"role\",\n    name: \"역할 (Role)\",\n    description: \"모델이 맡게 될 페르소나 및 역할 정의\",\n    color: \"purple\",\n    icon: \"🎭\",\n    order: 1,\n    orchestration_step: \"persona_definition\",\n  },\n  {\n    id: \"guideline\",\n    name: \"가이드라인 (Guideline)\",\n    description: \"명확한 제한사항, 룰, 조건\",\n    color: \"blue\",\n    icon: \"📦\",\n    order: 2,\n    orchestration_step: \"constraint_definition\",\n  },\n  {\n    id: \"workflow\",\n    name: \"워크플로우 (Workflow)\",\n    description: \"작업을 수행할 단계, 순서\",\n    color: \"green\",\n    icon: \"🧩\",\n    order: 3,\n    orchestration_step: \"process_execution\",\n  },\n  {\n    id: \"output_format\",\n    name: \"출력결과 (Output Format)\",\n    description: \"최종 결과물 포맷 정의\",\n    color: \"orange\",\n    icon: \"🎯\",\n    order: 4,\n    orchestration_step: \"format_validation\",\n  },\n  {\n    id: \"few_shot\",\n    name: \"예시 (Few-shot)\",\n    description: \"few-shot learning 예제\",\n    color: \"yellow\",\n    icon: \"💡\",\n    order: 5,\n    orchestration_step: \"example_learning\",\n  },\n  {\n    id: \"scoring\",\n    name: \"검수 (Scoring)\",\n    description: \"검수 규칙 및 평가 기준\",\n    color: \"red\",\n    icon: \"🔍\",\n    order: 6,\n    orchestration_step: \"quality_assessment\",\n  },\n];\n\n// 사용 가능한 AI 모델 목록\nexport const AVAILABLE_MODELS = [\n  {\n    id: \"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    name: \"Claude 3.5 Sonnet (최신)\",\n    description: \"가장 최신이고 성능이 뛰어난 모델\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"us.anthropic.claude-3-sonnet-20240229-v1:0\",\n    name: \"Claude 3 Sonnet\",\n    description: \"균형잡힌 성능과 속도\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"us.anthropic.claude-3-haiku-20240307-v1:0\",\n    name: \"Claude 3 Haiku\",\n    description: \"빠른 속도, 효율적인 처리\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"anthropic.claude-instant-v1\",\n    name: \"Claude Instant\",\n    description: \"즉시 응답, 간단한 작업용\",\n    maxTokens: 100000,\n  },\n  {\n    id: \"amazon.titan-text-lite-v1\",\n    name: \"Titan Text Lite\",\n    description: \"가벼운 텍스트 처리\",\n    maxTokens: 4000,\n  },\n  {\n    id: \"amazon.titan-text-express-v1\",\n    name: \"Titan Text Express\",\n    description: \"빠른 텍스트 생성\",\n    maxTokens: 8000,\n  },\n];\n\n// 에러 핸들링 유틸리티\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // 서버 응답 오류\n    const { status, data } = error.response;\n    return {\n      message: data?.error || `서버 오류 (${status})`,\n      status,\n    };\n  } else if (error.request) {\n    // 네트워크 오류\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0,\n    };\n  } else {\n    // 기타 오류\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1,\n    };\n  }\n};\n\n// 기본 프로젝트 카테고리 정의 (이모지 제거, 전문적 디자인)\nexport const DEFAULT_PROJECT_CATEGORIES = [\n  {\n    id: \"news\",\n    name: \"뉴스/언론\",\n    color: \"blue\",\n    description: \"뉴스 기사, 언론 보도 제목 생성\",\n    isDefault: true,\n  },\n  {\n    id: \"business\",\n    name: \"비즈니스\",\n    color: \"green\",\n    description: \"비즈니스 문서, 기업 커뮤니케이션\",\n    isDefault: true,\n  },\n  {\n    id: \"corporate\",\n    name: \"기업 홍보\",\n    color: \"purple\",\n    description: \"기업 홍보, 마케팅 콘텐츠\",\n    isDefault: true,\n  },\n  {\n    id: \"education\",\n    name: \"교육/연구\",\n    color: \"orange\",\n    description: \"교육 자료, 연구 논문, 학술 자료\",\n    isDefault: true,\n  },\n  {\n    id: \"marketing\",\n    name: \"마케팅/광고\",\n    color: \"yellow\",\n    description: \"광고 카피, 마케팅 캠페인\",\n    isDefault: true,\n  },\n  {\n    id: \"social\",\n    name: \"소셜미디어\",\n    color: \"indigo\",\n    description: \"SNS 포스팅, 소셜 콘텐츠\",\n    isDefault: true,\n  },\n  {\n    id: \"tech\",\n    name: \"기술/IT\",\n    color: \"cyan\",\n    description: \"기술 문서, IT 뉴스, 개발 관련\",\n    isDefault: true,\n  },\n];\n\n// 사용자 정의 카테고리 API\nexport const categoryAPI = {\n  // 사용자 카테고리 목록 조회\n  getUserCategories: async () => {\n    try {\n      const response = await api.get(\"/categories\");\n      return response.data;\n    } catch (error) {\n      // 백엔드 API가 없는 경우 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      if (savedCategories) {\n        return JSON.parse(savedCategories);\n      }\n      return { categories: DEFAULT_PROJECT_CATEGORIES };\n    }\n  },\n\n  // 사용자 카테고리 생성\n  createCategory: async (categoryData) => {\n    try {\n      const response = await api.post(\"/categories\", categoryData);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories\n        ? JSON.parse(savedCategories)\n        : { categories: [...DEFAULT_PROJECT_CATEGORIES] };\n\n      const newCategory = {\n        ...categoryData,\n        id: `custom_${Date.now()}`,\n        isDefault: false,\n        createdAt: new Date().toISOString(),\n      };\n\n      categories.categories.push(newCategory);\n      localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n      return newCategory;\n    }\n  },\n\n  // 사용자 카테고리 수정\n  updateCategory: async (categoryId, categoryData) => {\n    try {\n      const response = await api.put(`/categories/${categoryId}`, categoryData);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories\n        ? JSON.parse(savedCategories)\n        : { categories: [...DEFAULT_PROJECT_CATEGORIES] };\n\n      const categoryIndex = categories.categories.findIndex(\n        (cat) => cat.id === categoryId\n      );\n      if (categoryIndex !== -1) {\n        categories.categories[categoryIndex] = {\n          ...categories.categories[categoryIndex],\n          ...categoryData,\n          updatedAt: new Date().toISOString(),\n        };\n        localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n        return categories.categories[categoryIndex];\n      }\n      throw new Error(\"카테고리를 찾을 수 없습니다\");\n    }\n  },\n\n  // 사용자 카테고리 삭제\n  deleteCategory: async (categoryId) => {\n    try {\n      const response = await api.delete(`/categories/${categoryId}`);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories\n        ? JSON.parse(savedCategories)\n        : { categories: [...DEFAULT_PROJECT_CATEGORIES] };\n\n      const categoryIndex = categories.categories.findIndex(\n        (cat) => cat.id === categoryId\n      );\n      if (categoryIndex !== -1) {\n        categories.categories.splice(categoryIndex, 1);\n        localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n        return { success: true };\n      }\n      throw new Error(\"카테고리를 찾을 수 없습니다\");\n    }\n  },\n};\n\n// 프로젝트 카테고리 변경 API\nexport const projectCategoryAPI = {\n  // 프로젝트 카테고리 변경\n  updateProjectCategory: async (projectId, categoryId) => {\n    try {\n      const response = await api.put(`/projects/${projectId}/category`, {\n        category: categoryId,\n      });\n      return response.data;\n    } catch (error) {\n      // 임시로 클라이언트에서 처리 (실제로는 백엔드에서 처리해야 함)\n      console.log(`프로젝트 ${projectId}의 카테고리를 ${categoryId}로 변경`);\n      return { success: true, projectId, category: categoryId };\n    }\n  },\n};\n\n//프로젝트 통계 정보 API\nexport const projectStatsAPI = {\n  // 프로젝트 상세 통계 조회\n  getProjectStats: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}/stats`);\n    return response.data;\n  },\n\n  // 모든 프로젝트 통계 요약\n  getAllProjectsStats: async () => {\n    const response = await api.get(\"/projects/stats\");\n    return response.data;\n  },\n};\n\n// 프롬프트 통계 정보 계산 유틸리티\nexport const calculatePromptStats = (promptCards) => {\n  const stats = {\n    totalCards: promptCards.length,\n    activeCards: promptCards.filter((card) => card.enabled !== false).length,\n    totalTokens: 0,\n    totalSize: 0,\n    avgTokensPerCard: 0,\n    categories: new Set(),\n    models: new Set(),\n    temperatureRange: { min: 1, max: 0 },\n  };\n\n  promptCards.forEach((card) => {\n    // 카테고리 수집\n    stats.categories.add(card.category);\n\n    // 모델 수집\n    stats.models.add(card.model);\n\n    // 프롬프트 텍스트 통계\n    if (card.prompt_text) {\n      const textLength = card.prompt_text.length;\n      stats.totalSize += textLength;\n\n      // 대략적인 토큰 수 계산 (영어: 4자/토큰, 한국어: 2자/토큰)\n      const estimatedTokens = Math.ceil(textLength / 2.5);\n      stats.totalTokens += estimatedTokens;\n    }\n\n    // 온도 범위 계산\n    const temp = parseFloat(card.temperature);\n    if (temp < stats.temperatureRange.min) stats.temperatureRange.min = temp;\n    if (temp > stats.temperatureRange.max) stats.temperatureRange.max = temp;\n  });\n\n  // 평균 토큰 계산\n  stats.avgTokensPerCard =\n    stats.totalCards > 0 ? Math.round(stats.totalTokens / stats.totalCards) : 0;\n\n  // Set을 배열로 변환\n  stats.categories = Array.from(stats.categories);\n  stats.models = Array.from(stats.models);\n\n  return stats;\n};\n\n// 스마트 제목 생성 함수 (실제 뉴스 분석)\nconst generateSmartTitles = (articleContent, userRequest = \"\") => {\n  const content = articleContent.toLowerCase();\n\n  // 더 정교한 분석\n  const analysis = analyzeArticleContent(content);\n  const keywords = extractRealKeywords(content);\n\n  // 사용자 요청 분석\n  const isShortRequest =\n    userRequest.includes(\"짧게\") ||\n    userRequest.includes(\"간결\") ||\n    userRequest.includes(\"단순\");\n  const isImpactfulRequest =\n    userRequest.includes(\"임팩트\") ||\n    userRequest.includes(\"강렬\") ||\n    userRequest.includes(\"눈에 띄\");\n  const isConservativeRequest =\n    userRequest.includes(\"보수적\") ||\n    userRequest.includes(\"안전\") ||\n    userRequest.includes(\"전문적\");\n\n  console.log(\"📰 기사 분석 결과:\", analysis);\n  console.log(\"🔑 추출된 키워드:\", keywords);\n\n  // 실제 기사 내용 기반 제목 생성\n  const titles = [];\n\n  // 기본적인 사실 전달형 제목들\n  if (analysis.mainSubject && analysis.mainAction) {\n    titles.push(`${analysis.mainSubject} ${analysis.mainAction}`);\n    titles.push(`${analysis.mainSubject}, ${analysis.mainAction} 나서`);\n  }\n\n  // 구체적 정보가 있는 경우\n  if (analysis.specificInfo) {\n    titles.push(\n      `${analysis.mainSubject} ${analysis.specificInfo} ${analysis.mainAction}`\n    );\n  }\n\n  // 시점/전망 정보가 있는 경우\n  if (analysis.timeframe || analysis.target) {\n    const timeInfo = analysis.timeframe || analysis.target;\n    titles.push(\n      `${analysis.mainSubject}, ${timeInfo} ${analysis.mainAction} 계획`\n    );\n  }\n\n  // 결과/효과 중심 제목\n  if (analysis.expectedResult) {\n    titles.push(\n      `${analysis.mainSubject} ${analysis.mainAction}로 ${analysis.expectedResult} 노린다`\n    );\n  }\n\n  // 폴백: 기본 제목들\n  if (titles.length < 3) {\n    titles.push(`${analysis.mainSubject || \"기업\"} 새로운 도전`);\n    titles.push(`주목받는 ${analysis.mainAction || \"사업 전략\"}`);\n    titles.push(`${analysis.industry || \"업계\"} 변화 바람`);\n  }\n\n  // 사용자 요청에 따른 제목 조정\n  let finalTitles = titles.slice(0, 5);\n\n  if (isShortRequest) {\n    // 짧은 제목 요청 시 글자 수 축약\n    finalTitles = finalTitles.map((title) => {\n      if (title.length > 20) {\n        return title.substring(0, 18) + \"..\";\n      }\n      return title;\n    });\n  }\n\n  if (isImpactfulRequest) {\n    // 임팩트 강화 요청 시 강렬한 표현 추가\n    finalTitles = finalTitles.map((title) => {\n      if (!title.includes(\"!\") && !title.includes(\"주목\")) {\n        return title.replace(/계획|예정/, \"확정\").replace(/추진|진행/, \"단행\");\n      }\n      return title;\n    });\n  }\n\n  if (isConservativeRequest) {\n    // 보수적 요청 시 안정적 표현으로 변경\n    finalTitles = finalTitles.map((title) => {\n      return title.replace(/게임체인저|승부수/, \"전략\").replace(/!/, \"\");\n    });\n  }\n\n  // userRequest가 있으면 첫 번째 제목에 반영 상태 표시\n  const requestNote = userRequest\n    ? `\\n\\n💡 \"${userRequest}\" 요청을 반영하여 생성했습니다.`\n    : \"\";\n\n  return (\n    finalTitles.map((title, i) => `${i + 1}. ${title}`).join(\"\\n\") + requestNote\n  );\n};\n\n// 실제 기사 내용 분석 함수\nconst analyzeArticleContent = (content) => {\n  // 회사명 추출\n  const companies = [\n    \"lg전자\",\n    \"lg\",\n    \"엘지전자\",\n    \"삼성전자\",\n    \"삼성\",\n    \"sk하이닉스\",\n    \"sk\",\n    \"현대자동차\",\n    \"현대\",\n    \"포스코\",\n    \"네이버\",\n    \"카카오\",\n    \"쿠팡\",\n    \"kt\",\n    \"skt\",\n    \"롯데\",\n    \"신세계\",\n    \"하나금융\",\n    \"우리은행\",\n    \"kb금융\",\n    \"기아\",\n    \"두산\",\n    \"gs\",\n    \"한화\",\n    \"ls\",\n    \"오리온\",\n    \"cj\",\n  ];\n\n  const foundCompany = companies.find((company) => content.includes(company));\n\n  // 액션 동사 추출\n  const actions = [\n    { keywords: [\"출시\", \"런칭\", \"발표\"], action: \"출시\" },\n    { keywords: [\"개발\", \"연구\", \"제작\"], action: \"개발\" },\n    { keywords: [\"인수\", \"합병\", \"투자\"], action: \"투자\" },\n    { keywords: [\"진출\", \"확장\", \"진입\"], action: \"진출\" },\n    { keywords: [\"계획\", \"예정\", \"추진\"], action: \"추진\" },\n    { keywords: [\"협력\", \"제휴\", \"파트너십\"], action: \"협력\" },\n    { keywords: [\"구축\", \"설립\", \"건설\"], action: \"구축\" },\n  ];\n\n  const foundAction = actions.find((actionGroup) =>\n    actionGroup.keywords.some((keyword) => content.includes(keyword))\n  );\n\n  // 구체적 정보 추출\n  const specificTerms = [\n    \"ai\",\n    \"인공지능\",\n    \"반도체\",\n    \"hbm\",\n    \"전기차\",\n    \"ev\",\n    \"배터리\",\n    \"소프트웨어\",\n    \"플랫폼\",\n    \"서비스\",\n    \"솔루션\",\n    \"시스템\",\n    \"기술\",\n    \"장비\",\n    \"제품\",\n  ];\n\n  const foundSpecific = specificTerms.find((term) => content.includes(term));\n\n  // 시간 관련 정보\n  const timeframes = [\n    \"2024년\",\n    \"2025년\",\n    \"2026년\",\n    \"내년\",\n    \"올해\",\n    \"상반기\",\n    \"하반기\",\n    \"1분기\",\n    \"2분기\",\n    \"3분기\",\n    \"4분기\",\n    \"연말\",\n    \"연초\",\n  ];\n\n  const foundTimeframe = timeframes.find((time) => content.includes(time));\n\n  // 목표/결과 관련\n  const results = [\n    \"매출 증대\",\n    \"시장 점유율\",\n    \"경쟁력 강화\",\n    \"수익성 개선\",\n    \"글로벌 진출\",\n    \"디지털 전환\",\n    \"탄소중립\",\n    \"esg\",\n    \"지속가능\",\n  ];\n\n  const foundResult = results.find((result) => content.includes(result));\n\n  // 산업 분야\n  const industries = [\n    \"반도체\",\n    \"자동차\",\n    \"금융\",\n    \"유통\",\n    \"통신\",\n    \"건설\",\n    \"에너지\",\n    \"바이오\",\n    \"게임\",\n    \"it\",\n    \"소프트웨어\",\n    \"하드웨어\",\n  ];\n\n  const foundIndustry = industries.find((industry) =>\n    content.includes(industry)\n  );\n\n  // 회사명 정리\n  let cleanCompany = foundCompany;\n  if (foundCompany) {\n    if (foundCompany === \"lg\" || foundCompany === \"lg전자\")\n      cleanCompany = \"LG전자\";\n    else if (foundCompany === \"삼성\" || foundCompany === \"삼성전자\")\n      cleanCompany = \"삼성전자\";\n    else if (foundCompany === \"sk\" || foundCompany === \"sk하이닉스\")\n      cleanCompany = \"SK하이닉스\";\n    else if (foundCompany === \"현대\" || foundCompany === \"현대자동차\")\n      cleanCompany = \"현대자동차\";\n    else cleanCompany = foundCompany;\n  }\n\n  return {\n    mainSubject: cleanCompany || extractSubjectFromSentence(content),\n    mainAction: foundAction ? foundAction.action : \"발표\",\n    specificInfo: foundSpecific,\n    timeframe: foundTimeframe,\n    expectedResult: foundResult,\n    industry: foundIndustry,\n  };\n};\n\n// 문장에서 주어 추출 (간단한 방식)\nconst extractSubjectFromSentence = (content) => {\n  const sentences = content.split(/[.!?]/).filter((s) => s.length > 10);\n  if (sentences.length === 0) return \"기업\";\n\n  const firstSentence = sentences[0].trim();\n  const words = firstSentence.split(\" \");\n\n  // 첫 번째 문장의 첫 번째 단어가 주어인 경우가 많음\n  if (words.length > 0) {\n    const subject = words[0].replace(/[^가-힣a-zA-Z0-9]/g, \"\");\n    if (subject.length > 1) {\n      return subject;\n    }\n  }\n\n  return \"기업\";\n};\n\n// 실제 키워드 추출 (빈도 기반)\nconst extractRealKeywords = (content) => {\n  const commonWords = [\n    \"그는\",\n    \"그녀는\",\n    \"이는\",\n    \"이번\",\n    \"최근\",\n    \"당시\",\n    \"현재\",\n    \"앞서\",\n    \"또한\",\n    \"하지만\",\n    \"그러나\",\n    \"따라서\",\n  ];\n  const words = content\n    .split(/\\s+/)\n    .map((word) => word.replace(/[^가-힣a-zA-Z0-9]/g, \"\"))\n    .filter((word) => word.length > 1 && !commonWords.includes(word));\n\n  // 빈도 계산\n  const frequency = {};\n  words.forEach((word) => {\n    frequency[word] = (frequency[word] || 0) + 1;\n  });\n\n  // 상위 키워드 반환\n  return Object.entries(frequency)\n    .sort(([, a], [, b]) => b - a)\n    .slice(0, 5)\n    .map(([word]) => word);\n};\n\n// 사용자 프롬프트를 반영한 제목 생성 (Bedrock Claude 시뮬레이션)\nconst generateTitlesWithUserPrompts = (\n  articleContent,\n  userRequest = \"\",\n  savedPrompts = {}\n) => {\n  console.log(\"🧠 Claude 시뮬레이션: 단계별 프롬프트 처리\");\n\n  // 1단계: 역할 및 목표 (instruction)\n  const rolePrompt =\n    savedPrompts.instruction || \"당신은 전문적인 기사 제목 생성 AI입니다.\";\n  console.log(\"1️⃣ 역할 정의:\", rolePrompt.substring(0, 50) + \"...\");\n\n  // 2단계: 지식 베이스 (knowledge)\n  const knowledgePrompt =\n    savedPrompts.knowledge || \"제목 작성 원칙: 간결하고 명확한 표현\";\n  console.log(\"2️⃣ 지식 베이스:\", knowledgePrompt.substring(0, 50) + \"...\");\n\n  // 3단계: 사고 과정 (secondary - CoT)\n  const reasoningPrompt =\n    savedPrompts.secondary || \"단계별 사고 과정을 거쳐 제목을 생성합니다.\";\n  console.log(\"3️⃣ 사고 과정:\", reasoningPrompt.substring(0, 50) + \"...\");\n\n  // 기사 분석\n  const analysis = analyzeArticleContent(articleContent.toLowerCase());\n\n  // 사용자 요청 분석\n  const isShortRequest =\n    userRequest.includes(\"짧게\") || userRequest.includes(\"간결\");\n  const isImpactfulRequest =\n    userRequest.includes(\"임팩트\") ||\n    userRequest.includes(\"강렬\") ||\n    userRequest.includes(\"눈에 띄\");\n  const isConservativeRequest =\n    userRequest.includes(\"보수적\") || userRequest.includes(\"안전\");\n\n  // Claude 스타일의 제목 생성 (단계별 프롬프트 반영)\n  const titles = [];\n\n  // 기본 정보 전달형 (knowledge 프롬프트 반영)\n  if (analysis.mainSubject && analysis.mainAction) {\n    let title1 = `${analysis.mainSubject} ${analysis.mainAction}`;\n    let title2 = `${analysis.mainSubject}, ${analysis.mainAction} 계획`;\n\n    // 스타일 가이드 적용\n    if (savedPrompts.style_guide) {\n      if (savedPrompts.style_guide.includes(\"간결\") || isShortRequest) {\n        title1 = title1.length > 15 ? title1.substring(0, 13) + \"..\" : title1;\n        title2 = title2.length > 15 ? title2.substring(0, 13) + \"..\" : title2;\n      }\n    }\n\n    titles.push(title1);\n    titles.push(title2);\n  }\n\n  // 상세 정보 포함형 (secondary 프롬프트의 단계별 사고 반영)\n  if (analysis.specificInfo) {\n    let title3 = `${analysis.mainSubject} ${analysis.specificInfo} ${analysis.mainAction}`;\n    if (analysis.timeframe) {\n      title3 = `${analysis.mainSubject}, ${analysis.timeframe} ${analysis.specificInfo} ${analysis.mainAction}`;\n    }\n    titles.push(title3);\n  }\n\n  // 결과/효과 중심 (validation 프롬프트의 ReAct 패턴 반영)\n  if (analysis.expectedResult || analysis.industry) {\n    const effectTopic = analysis.expectedResult || `${analysis.industry} 혁신`;\n    titles.push(\n      `${analysis.mainSubject} ${analysis.mainAction}로 ${effectTopic} 노린다`\n    );\n  }\n\n  // enhancement 프롬프트 반영 - 품질 검증 및 개선\n  let finalTitles = titles.slice(0, 4);\n\n  // 사용자 요청에 따른 조정\n  if (isImpactfulRequest) {\n    finalTitles = finalTitles.map((title) => {\n      if (!title.includes(\"!\")) {\n        return (\n          title.replace(/계획|예정/, \"확정\").replace(/노린다/, \"목표\") + \"!\"\n        );\n      }\n      return title;\n    });\n  }\n\n  if (isConservativeRequest) {\n    finalTitles = finalTitles.map((title) => {\n      return title.replace(/!/, \"\").replace(/노린다/, \"전망\");\n    });\n  }\n\n  // 프롬프트 기반 추가 제목\n  if (savedPrompts.enhancement && savedPrompts.enhancement.includes(\"매력도\")) {\n    finalTitles.push(\n      `주목! ${analysis.mainSubject}의 ${\n        analysis.specificInfo || \"새로운\"\n      } 도전`\n    );\n  }\n\n  // 최종 정리 및 반환\n  const resultTitles = finalTitles.slice(0, 5);\n  const promptInfo =\n    Object.keys(savedPrompts).length > 0\n      ? `\\n\\n🎯 적용된 사용자 프롬프트: ${Object.keys(savedPrompts).join(\", \")}`\n      : \"\\n\\n📝 기본 프롬프트 사용\";\n\n  const userRequestInfo = userRequest\n    ? `\\n💡 \"${userRequest}\" 요청이 반영되었습니다.`\n    : \"\";\n\n  return (\n    resultTitles.map((title, i) => `${i + 1}. ${title}`).join(\"\\n\") +\n    promptInfo +\n    userRequestInfo\n  );\n};\n\n// 프롬프트 오케스트레이션 API\nexport const orchestrationAPI = {\n  // 오케스트레이션 실행\n  executeOrchestration: async (\n    projectId,\n    articleContent,\n    orchestrationConfig = {},\n    userRequest = \"\"\n  ) => {\n    // 개발 환경에서 CORS 문제 우회용 모키 응답\n    if (IS_MOCK_MODE) {\n      console.log(\n        \"🚀 고도화된 모키 모드: Bedrock Claude 시뮬레이션 + 실제 프롬프트 사용\"\n      );\n      console.log(\"📝 사용자 추가 요청:\", userRequest);\n\n      // localStorage에서 실제 저장된 프롬프트들 가져오기\n      const savedPrompts = JSON.parse(\n        localStorage.getItem(`prompts_${projectId}`) || \"{}\"\n      );\n      console.log(\"💾 사용할 프롬프트들:\", savedPrompts);\n\n      // 실제와 유사한 응답 시뮬레이션\n      await new Promise((resolve) => setTimeout(resolve, 2000)); // 2초 지연\n\n      // 실제 저장된 프롬프트를 반영한 제목 생성\n      const titles = generateTitlesWithUserPrompts(\n        articleContent,\n        userRequest,\n        savedPrompts\n      );\n      console.log(\"✨ 사용자 프롬프트 기반 생성된 제목들:\", titles);\n\n      return {\n        message: \"제목 생성이 완료되었습니다\",\n        executionId: `mock-${Date.now()}`,\n        projectId: \"mock-project\",\n        result: titles,\n        mode: \"mock\",\n        timestamp: new Date().toISOString(),\n        debug: {\n          promptCount: orchestrationConfig.enabledSteps?.length || 5,\n          usedDefaultGuidelines: false,\n          combinedPromptsLength: 1500,\n          promptTitles: orchestrationConfig.enabledSteps || [\n            \"instruction\",\n            \"knowledge\",\n            \"secondary\",\n            \"style_guide\",\n            \"validation\",\n          ],\n          firstPromptPreview: \"모키 모드에서 실행된 프롬프트입니다...\",\n        },\n      };\n    }\n\n    // 실제 API 호출 - /generate 엔드포인트 사용\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article: articleContent,\n      userRequest: userRequest,\n      useStepFunction: false, // 직접 모드 사용\n      enabledSteps: orchestrationConfig.enabledSteps || [],\n      temperature: orchestrationConfig.temperature || 0.7,\n    });\n\n    console.log(\"🔍 실제 Generate API 응답:\", response.data);\n    return response.data;\n  },\n\n  // 오케스트레이션 상태 조회\n  getOrchestrationStatus: async (projectId, executionId) => {\n    const response = await api.get(\n      `/projects/${projectId}/orchestrate/${executionId}/status`\n    );\n    return response.data;\n  },\n\n  // 오케스트레이션 결과 조회\n  getOrchestrationResult: async (projectId, executionId) => {\n    const response = await api.get(\n      `/projects/${projectId}/orchestrate/${executionId}/result`\n    );\n    return response.data;\n  },\n\n  // 오케스트레이션 로그 조회\n  getOrchestrationLogs: async (projectId, executionId) => {\n    const response = await api.get(\n      `/projects/${projectId}/orchestrate/${executionId}/logs`\n    );\n    return response.data;\n  },\n\n  // 오케스트레이션 전략 테스트\n  testOrchestrationStep: async (\n    projectId,\n    stepType,\n    promptContent,\n    articleContent\n  ) => {\n    const response = await api.post(`/projects/${projectId}/orchestrate/test`, {\n      stepType,\n      promptContent,\n      articleContent,\n    });\n    return response.data;\n  },\n\n  // 오케스트레이션 고도화 설정\n  updateOrchestrationConfig: async (projectId, config) => {\n    const response = await api.put(\n      `/projects/${projectId}/orchestration-config`,\n      config\n    );\n    return response.data;\n  },\n\n  // 오케스트레이션 메트릭 조회\n  getOrchestrationMetrics: async (projectId, timeRange = \"24h\") => {\n    const response = await api.get(\n      `/projects/${projectId}/orchestration-metrics`,\n      {\n        params: { timeRange },\n      }\n    );\n    return response.data;\n  },\n};\n\n// 오케스트레이션 단계 정의\nexport const ORCHESTRATION_STEPS = {\n  PERSONA_DEFINITION: {\n    id: \"persona_definition\",\n    name: \"역할 정의\",\n    description: \"AI 모델에게 역할과 페르소나를 부여\",\n    order: 1,\n    required: true,\n  },\n  CONSTRAINT_DEFINITION: {\n    id: \"constraint_definition\",\n    name: \"제약 조건 설정\",\n    description: \"명확한 룰과 제한사항 적용\",\n    order: 2,\n    required: true,\n  },\n  PROCESS_EXECUTION: {\n    id: \"process_execution\",\n    name: \"워크플로우 실행\",\n    description: \"단계별 작업 프로세스 수행\",\n    order: 3,\n    required: true,\n  },\n  FORMAT_VALIDATION: {\n    id: \"format_validation\",\n    name: \"포맷 검증\",\n    description: \"출력 결과물 포맷 검증 및 조정\",\n    order: 4,\n    required: false,\n  },\n  EXAMPLE_LEARNING: {\n    id: \"example_learning\",\n    name: \"예시 학습\",\n    description: \"Few-shot 예제를 통한 학습 및 측고\",\n    order: 5,\n    required: false,\n  },\n  QUALITY_ASSESSMENT: {\n    id: \"quality_assessment\",\n    name: \"품질 평가\",\n    description: \"결과물 품질 평가 및 점수 매기기\",\n    order: 6,\n    required: false,\n  },\n};\n\n// 🆕 파일 크기 포맷팅 유틸리티\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return \"0 B\";\n  const k = 1024;\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + \" \" + sizes[i];\n};\n\n// 🆕 토큰 수 포맷팅 유틸리티\nexport const formatTokenCount = (tokens) => {\n  if (tokens < 1000) return tokens.toString();\n  if (tokens < 1000000) return (tokens / 1000).toFixed(1) + \"K\";\n  return (tokens / 1000000).toFixed(1) + \"M\";\n};\n\n// 🆕 카테고리 관련 유틸리티 (수정됨)\nexport const getCategoryInfo = (categoryId, userCategories = []) => {\n  const allCategories = [...DEFAULT_PROJECT_CATEGORIES, ...userCategories];\n  return (\n    allCategories.find((cat) => cat.id === categoryId) ||\n    DEFAULT_PROJECT_CATEGORIES.find((cat) => cat.id === \"news\")\n  );\n};\n\n// 🆕 카테고리별 색상 클래스 반환 (수정됨)\nexport const getCategoryColorClasses = (color) => {\n  const colors = {\n    blue: \"bg-blue-100 text-blue-800 border-blue-200\",\n    green: \"bg-green-100 text-green-800 border-green-200\",\n    purple: \"bg-purple-100 text-purple-800 border-purple-200\",\n    orange: \"bg-orange-100 text-orange-800 border-orange-200\",\n    yellow: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n    indigo: \"bg-indigo-100 text-indigo-800 border-indigo-200\",\n    cyan: \"bg-cyan-100 text-cyan-800 border-cyan-200\",\n    red: \"bg-red-100 text-red-800 border-red-200\",\n    pink: \"bg-pink-100 text-pink-800 border-pink-200\",\n    gray: \"bg-gray-100 text-gray-800 border-gray-200\",\n  };\n  return colors[color] || colors.gray;\n};\n\n// 🆕 색상 옵션 (카테고리 생성 시 사용)\nexport const COLOR_OPTIONS = [\n  { id: \"blue\", name: \"파란색\", class: \"bg-blue-500\" },\n  { id: \"green\", name: \"초록색\", class: \"bg-green-500\" },\n  { id: \"purple\", name: \"보라색\", class: \"bg-purple-500\" },\n  { id: \"orange\", name: \"주황색\", class: \"bg-orange-500\" },\n  { id: \"yellow\", name: \"노란색\", class: \"bg-yellow-500\" },\n  { id: \"indigo\", name: \"남색\", class: \"bg-indigo-500\" },\n  { id: \"cyan\", name: \"청록색\", class: \"bg-cyan-500\" },\n  { id: \"red\", name: \"빨간색\", class: \"bg-red-500\" },\n  { id: \"pink\", name: \"분홍색\", class: \"bg-pink-500\" },\n  { id: \"gray\", name: \"회색\", class: \"bg-gray-500\" },\n];\n\n// 🆕 프로젝트 검색 및 필터링 유틸리티\nexport const filterProjects = (projects, { category, searchQuery, sortBy }) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터링\n  if (category && category !== \"all\") {\n    filtered = filtered.filter((project) => project.category === category);\n  }\n\n  // 검색 필터링\n  if (searchQuery && searchQuery.trim()) {\n    const query = searchQuery.toLowerCase().trim();\n    filtered = filtered.filter(\n      (project) =>\n        project.name.toLowerCase().includes(query) ||\n        (project.description &&\n          project.description.toLowerCase().includes(query)) ||\n        (project.tags &&\n          project.tags.some((tag) => tag.toLowerCase().includes(query)))\n    );\n  }\n\n  // 정렬\n  switch (sortBy) {\n    case \"name\":\n      filtered.sort((a, b) => a.name.localeCompare(b.name));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"created\":\n    default:\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n  }\n\n  return filtered;\n};\n\n// 🆕 디바운스 훅 (검색 최적화용)\nexport const useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default api;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AACA,MAAMC,YAAY,GAChBC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAC7B,6DAA6D;;AAE/D;AACA,MAAMC,YAAY,GAAG,KAAK;;AAE1B;AACA,MAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAM,CAAC;EACvBC,OAAO,EAAEP,YAAY;EACrBQ,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,SAAS,GAAAF,cAAA,GAAED,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,EAAEL,MAAM,CAACM,GAAG,CAAC;;EAEhE;EACA,MAAMC,KAAK,GACTC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAC/BD,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IACnC,0JAA0J;EAC5J,IAAIF,KAAK,EAAE;IACTP,MAAM,CAACJ,OAAO,CAACc,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EAEA,OAAOP,MAAM;AACf,CAAC,EACAW,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAlB,GAAG,CAACI,YAAY,CAACiB,QAAQ,CAACf,GAAG,CAC1Be,QAAQ,IAAK;EACZZ,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEW,QAAQ,CAACC,MAAM,EAAED,QAAQ,CAACd,MAAM,CAACM,GAAG,CAAC;EAC5D,OAAOQ,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAK,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACThB,OAAO,CAACS,KAAK,CACX,SAAS,GAAAK,eAAA,GACTL,KAAK,CAACG,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBD,MAAM,EACtB,EAAAE,gBAAA,GAAAN,KAAK,CAACG,QAAQ,cAAAG,gBAAA,uBAAdA,gBAAA,CAAgBE,IAAI,KAAIR,KAAK,CAACS,OAChC,CAAC;;EAED;EACA,IAAI,EAAAF,gBAAA,GAAAP,KAAK,CAACG,QAAQ,cAAAI,gBAAA,uBAAdA,gBAAA,CAAgBH,MAAM,MAAK,GAAG,EAAE;IAClC;IACAP,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC;IACtCb,YAAY,CAACa,UAAU,CAAC,SAAS,CAAC;IAClCb,YAAY,CAACa,UAAU,CAAC,cAAc,CAAC;;IAEvC;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EAEA,OAAOZ,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMc,UAAU,GAAG;EACxB;EACAC,WAAW,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IAClC,MAAMb,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,WAAW,EAAE;MAAED;IAAO,CAAC,CAAC;IACvD,OAAOb,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAU,aAAa,EAAE,MAAOC,WAAW,IAAK;IACpC,MAAMhB,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,WAAW,EAAED,WAAW,CAAC;IACzD,OAAOhB,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAa,UAAU,EAAE,MAAOC,SAAS,IAAK;IAC/B,MAAMnB,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,aAAaK,SAAS,EAAE,CAAC;IACxD,OAAOnB,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAe,aAAa,EAAE,MAAAA,CAAOD,SAAS,EAAEH,WAAW,KAAK;IAC/C,MAAMhB,QAAQ,GAAG,MAAMrB,GAAG,CAAC0C,GAAG,CAAC,aAAaF,SAAS,EAAE,EAAEH,WAAW,CAAC;IACrE,OAAOhB,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAiB,aAAa,EAAE,MAAOH,SAAS,IAAK;IAClC,MAAMnB,QAAQ,GAAG,MAAMrB,GAAG,CAAC4C,MAAM,CAAC,aAAaJ,SAAS,EAAE,CAAC;IAC3D,OAAOnB,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAmB,YAAY,EAAE,MAAAA,CAAOL,SAAS,EAAEM,QAAQ,EAAEC,QAAQ,KAAK;IACrD,MAAM1B,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,aAAaK,SAAS,aAAa,EAAE;MAClEN,MAAM,EAAE;QAAEY,QAAQ;QAAEC;MAAS;IAC/B,CAAC,CAAC;IACF,OAAO1B,QAAQ,CAACK,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,WAAW,GAAG;EACzB;EACAC,oBAAoB,EAAE,MAAAA,CAAOT,SAAS,EAAEU,OAAO,EAAEC,UAAU,KAAK;IAC9D,MAAMC,OAAO,GAAG;MACdF;IACF,CAAC;;IAED;IACA,IAAIC,UAAU,EAAE;MACdC,OAAO,CAACD,UAAU,GAAGA,UAAU;IACjC;IAEA,MAAM9B,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,aAAaE,SAAS,WAAW,EAAEY,OAAO,CAAC;IAC3E,OAAO/B,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA2B,kBAAkB,EAAE,MAAOC,YAAY,IAAK;IAC1C,MAAMC,UAAU,GAAGC,kBAAkB,CAACF,YAAY,CAAC;IACnD,MAAMjC,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,eAAeoB,UAAU,EAAE,CAAC;IAC3D,OAAOlC,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA+B,aAAa,EAAE,MAAAA,CAAOH,YAAY,EAAEI,UAAU,GAAG,EAAE,EAAEC,QAAQ,GAAG,IAAI,KAAK;IACvE,IAAI,CAACL,YAAY,IAAIA,YAAY,KAAK,WAAW,EAAE;MACjD,OAAO;QACLM,OAAO,EAAE,KAAK;QACd1C,KAAK,EAAE;MACT,CAAC;IACH;IAEA,IAAI2C,OAAO,GAAG,CAAC;IAEf,OAAOA,OAAO,GAAGH,UAAU,EAAE;MAC3B,IAAI;QACF,MAAMpC,MAAM,GAAG,MAAM0B,WAAW,CAACK,kBAAkB,CAACC,YAAY,CAAC;QAEjE,IAAIhC,MAAM,CAACA,MAAM,KAAK,WAAW,EAAE;UACjC,OAAO;YACLsC,OAAO,EAAE,IAAI;YACblC,IAAI,EAAEJ;UACR,CAAC;QACH,CAAC,MAAM,IAAIA,MAAM,CAACA,MAAM,KAAK,QAAQ,EAAE;UACrC,OAAO;YACLsC,OAAO,EAAE,KAAK;YACd1C,KAAK,EAAEI,MAAM,CAACJ,KAAK,IAAI;UACzB,CAAC;QACH,CAAC,MAAM,IAAII,MAAM,CAACA,MAAM,KAAK,WAAW,EAAE;UACxC,OAAO;YACLsC,OAAO,EAAE,KAAK;YACd1C,KAAK,EAAE;UACT,CAAC;QACH,CAAC,MAAM,IAAII,MAAM,CAACA,MAAM,KAAK,SAAS,EAAE;UACtC,OAAO;YACLsC,OAAO,EAAE,KAAK;YACd1C,KAAK,EAAE;UACT,CAAC;QACH;;QAEA;QACA,MAAM,IAAIC,OAAO,CAAE2C,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEH,QAAQ,CAAC,CAAC;QAC7DE,OAAO,EAAE;MACX,CAAC,CAAC,OAAO3C,KAAK,EAAE;QACdT,OAAO,CAACS,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;QAChC2C,OAAO,EAAE;QAET,IAAIA,OAAO,IAAIH,UAAU,EAAE;UACzB,OAAO;YACLE,OAAO,EAAE,KAAK;YACd1C,KAAK,EAAE;UACT,CAAC;QACH;QAEA,MAAM,IAAIC,OAAO,CAAE2C,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAEH,QAAQ,CAAC,CAAC;MAC/D;IACF;IAEA,OAAO;MACLC,OAAO,EAAE,KAAK;MACd1C,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EAED;EACA8C,aAAa,EAAE,MAAAA,CAAOxB,SAAS,EAAEU,OAAO,EAAEe,UAAU,EAAEd,UAAU,KAAK;IACnE,IAAI;MACF;MACA,MAAMe,aAAa,GAAG,MAAMlB,WAAW,CAACC,oBAAoB,CAC1DT,SAAS,EACTU,OAAO,EACPC,UACF,CAAC;;MAED;MACA,IAAIe,aAAa,CAACC,IAAI,KAAK,QAAQ,IAAID,aAAa,CAACE,MAAM,EAAE;QAC3D,IAAIH,UAAU,EAAE;UACdA,UAAU,CAAC;YACT3C,MAAM,EAAE,WAAW;YACnBK,OAAO,EAAE,iBAAiB;YAC1ByC,MAAM,EAAEF,aAAa,CAACE;UACxB,CAAC,CAAC;QACJ;QAEA,OAAO;UACLC,cAAc,EAAEH,aAAa,CAACI,WAAW,IAAI,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;UACnEhC,SAAS,EAAEA,SAAS;UACpB4B,MAAM,EAAEF,aAAa,CAACE,MAAM;UAC5BK,KAAK,EAAEP,aAAa,CAACO,KAAK,IAAI,CAAC,CAAC;UAChCC,SAAS,EAAER,aAAa,CAACQ,SAAS,IAAI,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;UAC9DR,IAAI,EAAE,QAAQ;UACdS,KAAK,EAAEV,aAAa,CAACU,KAAK,IAAI,CAAC;QACjC,CAAC;MACH;;MAEA;MACA,IAAIV,aAAa,CAACZ,YAAY,EAAE;QAC9B,IAAIW,UAAU,EAAE;UACdA,UAAU,CAAC;YACT3C,MAAM,EAAE,SAAS;YACjBK,OAAO,EAAE,mBAAmB;YAC5B2B,YAAY,EAAEY,aAAa,CAACZ;UAC9B,CAAC,CAAC;QACJ;;QAEA;QACA,MAAMuB,YAAY,GAAG,MAAM7B,WAAW,CAACS,aAAa,CAClDS,aAAa,CAACZ,YAChB,CAAC;QAED,IAAIuB,YAAY,CAACjB,OAAO,EAAE;UACxB,OAAO;YACLS,cAAc,EAAEQ,YAAY,CAACnD,IAAI,CAAC2C,cAAc;YAChD7B,SAAS,EAAEA,SAAS;YACpB4B,MAAM,EAAES,YAAY,CAACnD,IAAI,CAAC0C,MAAM;YAChCK,KAAK,EAAEI,YAAY,CAACnD,IAAI,CAAC+C,KAAK;YAC9BC,SAAS,EACPG,YAAY,CAACnD,IAAI,CAACoD,WAAW,IAAI,IAAIP,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;YAC3DrB,YAAY,EAAEY,aAAa,CAACZ,YAAY;YACxCa,IAAI,EAAE;UACR,CAAC;QACH,CAAC,MAAM;UACL,MAAM,IAAIY,KAAK,CAACF,YAAY,CAAC3D,KAAK,CAAC;QACrC;MACF;MAEA,MAAM,IAAI6D,KAAK,CAAC,iBAAiB,CAAC;IACpC,CAAC,CAAC,OAAO7D,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAM8D,aAAa,GAAG;EAC3B;EACAC,cAAc,EAAE,MAAAA,CACdzC,SAAS,EACT0C,cAAc,GAAG,KAAK,EACtBC,eAAe,GAAG,KAAK,KACpB;IACH,IAAIpF,YAAY,EAAE;MAChBU,OAAO,CAACC,GAAG,CACT,4CACF,CAAC;;MAED;MACA,MAAM0E,YAAY,GAAGC,IAAI,CAACC,KAAK,CAC7BvE,YAAY,CAACC,OAAO,CAAC,WAAWwB,SAAS,EAAE,CAAC,IAAI,IAClD,CAAC;MAED,MAAM+C,cAAc,GAAG,CACrB;QACEC,QAAQ,EAAE,sBAAsB;QAChCC,EAAE,EAAE,sBAAsB;QAC1BC,KAAK,EAAE,cAAc;QACrB5C,QAAQ,EAAE,aAAa;QACvB6C,OAAO,EAAE,IAAI;QACbC,SAAS,EAAE,CAAC;QACZC,KAAK,EAAE,yBAAyB;QAChCC,WAAW,EAAE,+BAA+B;QAC5CC,WAAW,EACTX,YAAY,CAACY,WAAW,IACxB;MACJ,CAAC,EACD;QACER,QAAQ,EAAE,oBAAoB;QAC9BC,EAAE,EAAE,oBAAoB;QACxBC,KAAK,EAAE,aAAa;QACpB5C,QAAQ,EAAE,WAAW;QACrB6C,OAAO,EAAE,IAAI;QACbC,SAAS,EAAE,CAAC;QACZC,KAAK,EAAE,uBAAuB;QAC9BC,WAAW,EAAE,6BAA6B;QAC1CC,WAAW,EACTX,YAAY,CAACa,SAAS,IACtB;MACJ,CAAC,EACD;QACET,QAAQ,EAAE,oBAAoB;QAC9BC,EAAE,EAAE,oBAAoB;QACxBC,KAAK,EAAE,kBAAkB;QACzB5C,QAAQ,EAAE,WAAW;QACrB6C,OAAO,EAAE,IAAI;QACbC,SAAS,EAAE,CAAC;QACZC,KAAK,EAAE,uBAAuB;QAC9BC,WAAW,EAAE,8BAA8B;QAC3CC,WAAW,EACTX,YAAY,CAACc,SAAS,IACtB;MACJ,CAAC,EACD;QACEV,QAAQ,EAAE,sBAAsB;QAChCC,EAAE,EAAE,sBAAsB;QAC1BC,KAAK,EAAE,cAAc;QACrB5C,QAAQ,EAAE,aAAa;QACvB6C,OAAO,EAAE,IAAI;QACbC,SAAS,EAAE,CAAC;QACZC,KAAK,EAAE,yBAAyB;QAChCC,WAAW,EAAE,4BAA4B;QACzCC,WAAW,EACTX,YAAY,CAACe,WAAW,IACxB;MACJ,CAAC,EACD;QACEX,QAAQ,EAAE,qBAAqB;QAC/BC,EAAE,EAAE,qBAAqB;QACzBC,KAAK,EAAE,oBAAoB;QAC3B5C,QAAQ,EAAE,YAAY;QACtB6C,OAAO,EAAE,IAAI;QACbC,SAAS,EAAE,CAAC;QACZC,KAAK,EAAE,wBAAwB;QAC/BC,WAAW,EAAE,8BAA8B;QAC3CC,WAAW,EACTX,YAAY,CAACgB,UAAU,IACvB;MACJ,CAAC,EACD;QACEZ,QAAQ,EAAE,sBAAsB;QAChCC,EAAE,EAAE,sBAAsB;QAC1BC,KAAK,EAAE,YAAY;QACnB5C,QAAQ,EAAE,aAAa;QACvB6C,OAAO,EAAE,IAAI;QACbC,SAAS,EAAE,CAAC;QACZC,KAAK,EAAE,yBAAyB;QAChCC,WAAW,EAAE,wBAAwB;QACrCC,WAAW,EACTX,YAAY,CAACiB,WAAW,IACxB;MACJ,CAAC,CACF;MAED,OAAO;QACL7D,SAAS;QACT8D,WAAW,EAAEf,cAAc;QAC3BgB,KAAK,EAAEhB,cAAc,CAACiB;MACxB,CAAC;IACH;IAEA,MAAMtE,MAAM,GAAG,CAAC,CAAC;IACjB,IAAIgD,cAAc,EAAEhD,MAAM,CAACuE,eAAe,GAAG,MAAM;IACnD,IAAItB,eAAe,EAAEjD,MAAM,CAACwE,gBAAgB,GAAG,MAAM;IAErD,MAAMrF,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,YAAYK,SAAS,EAAE,EAAE;MAAEN;IAAO,CAAC,CAAC;IACnE,OAAOb,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAiF,gBAAgB,EAAE,MAAAA,CAAOnE,SAAS,EAAEoE,UAAU,KAAK;IACjD,MAAMvF,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,YAAYE,SAAS,EAAE,EAAEoE,UAAU,CAAC;IACpE,OAAOvF,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAiF,gBAAgB,EAAE,MAAAA,CAAOnE,SAAS,EAAEoE,UAAU,KAAK;IACjD,IAAI7G,YAAY,EAAE;MAChBU,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;QACxC8B,SAAS;QACToE;MACF,CAAC,CAAC;;MAEF;MACA,MAAMxB,YAAY,GAAGC,IAAI,CAACC,KAAK,CAC7BvE,YAAY,CAACC,OAAO,CAAC,WAAWwB,SAAS,EAAE,CAAC,IAAI,IAClD,CAAC;MACD4C,YAAY,CAACwB,UAAU,CAAC9D,QAAQ,CAAC,GAC/B8D,UAAU,CAACb,WAAW,IAAIa,UAAU,CAACC,OAAO;MAC9C9F,YAAY,CAAC+F,OAAO,CAClB,WAAWtE,SAAS,EAAE,EACtB6C,IAAI,CAAC0B,SAAS,CAAC3B,YAAY,CAC7B,CAAC;MAED,OAAO;QACLxB,OAAO,EAAE,IAAI;QACbjC,OAAO,EAAE,eAAe;QACxB6D,QAAQ,EAAE,YAAYoB,UAAU,CAAC9D,QAAQ;MAC3C,CAAC;IACH;IAEA,MAAMzB,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,YAAYE,SAAS,EAAE,EAAEoE,UAAU,CAAC;IACpE,OAAOvF,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAsF,gBAAgB,EAAE,MAAAA,CAAOxE,SAAS,EAAEgD,QAAQ,EAAEoB,UAAU,KAAK;IAC3D,IAAI7G,YAAY,EAAE;MAChBU,OAAO,CAACC,GAAG,CACT,4CAA4C,EAC5C;QACE8B,SAAS;QACTgD,QAAQ;QACRoB;MACF,CACF,CAAC;;MAED;MACA,MAAM9D,QAAQ,GAAG0C,QAAQ,CAACyB,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;;MAElD;MACA,MAAM7B,YAAY,GAAGC,IAAI,CAACC,KAAK,CAC7BvE,YAAY,CAACC,OAAO,CAAC,WAAWwB,SAAS,EAAE,CAAC,IAAI,IAClD,CAAC;MACD4C,YAAY,CAACtC,QAAQ,CAAC,GAAG8D,UAAU,CAACb,WAAW,IAAIa,UAAU,CAACC,OAAO;MACrE9F,YAAY,CAAC+F,OAAO,CAClB,WAAWtE,SAAS,EAAE,EACtB6C,IAAI,CAAC0B,SAAS,CAAC3B,YAAY,CAC7B,CAAC;MAED3E,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE0E,YAAY,CAAC;MAEvD,OAAO;QACLxB,OAAO,EAAE,IAAI;QACbjC,OAAO,EAAE,kCAAkC;QAC3CmB,QAAQ;QACRoE,YAAY,EAAE9B,YAAY,CAACtC,QAAQ;MACrC,CAAC;IACH;IAEA,MAAMzB,QAAQ,GAAG,MAAMrB,GAAG,CAAC0C,GAAG,CAC5B,YAAYF,SAAS,IAAIgD,QAAQ,EAAE,EACnCoB,UACF,CAAC;IACD,OAAOvF,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAyF,gBAAgB,EAAE,MAAAA,CAAO3E,SAAS,EAAEgD,QAAQ,KAAK;IAC/C,MAAMnE,QAAQ,GAAG,MAAMrB,GAAG,CAAC4C,MAAM,CAAC,YAAYJ,SAAS,IAAIgD,QAAQ,EAAE,CAAC;IACtE,OAAOnE,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA0F,iBAAiB,EAAE,MAAAA,CAAO5E,SAAS,EAAEgD,QAAQ,EAAE6B,YAAY,KAAK;IAC9D,MAAMhG,QAAQ,GAAG,MAAMrB,GAAG,CAAC0C,GAAG,CAAC,YAAYF,SAAS,IAAIgD,QAAQ,EAAE,EAAE;MAClE8B,UAAU,EAAED;IACd,CAAC,CAAC;IACF,OAAOhG,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA6F,gBAAgB,EAAE,MAAAA,CAAO/E,SAAS,EAAEgD,QAAQ,EAAEG,OAAO,KAAK;IACxD,MAAMtE,QAAQ,GAAG,MAAMrB,GAAG,CAAC0C,GAAG,CAAC,YAAYF,SAAS,IAAIgD,QAAQ,EAAE,EAAE;MAClEG,OAAO,EAAEA;IACX,CAAC,CAAC;IACF,OAAOtE,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA8F,gBAAgB,EAAE,MAAAA,CAAOhF,SAAS,EAAEgD,QAAQ,KAAK;IAC/C,IAAIzF,YAAY,EAAE;MAChBU,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;QACxC8B,SAAS;QACTgD;MACF,CAAC,CAAC;MACF,MAAMiC,YAAY,GAAG;QACnB,sBAAsB,EACpB,6DAA6D;QAC/D,oBAAoB,EAClB,oDAAoD;QACtD,oBAAoB,EAClB;MACJ,CAAC;MACD,OAAO;QACLjF,SAAS;QACTgD,QAAQ;QACRqB,OAAO,EAAEY,YAAY,CAACjC,QAAQ,CAAC,IAAI,gBAAgB;QACnDkC,YAAY,EAAE,IAAInD,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;MACvC,CAAC;IACH;IAEA,MAAMtD,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,YAAYK,SAAS,IAAIgD,QAAQ,UAAU,CAAC;IAC3E,OAAOnE,QAAQ,CAACK,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMiG,OAAO,GAAG;EACrB;EACAC,MAAM,EAAE,MAAOC,QAAQ,IAAK;IAC1B,MAAMxG,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,cAAc,EAAEuF,QAAQ,CAAC;IACzD,OAAOxG,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAoG,MAAM,EAAE,MAAOC,WAAW,IAAK;IAC7B,MAAM1G,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,cAAc,EAAEyF,WAAW,CAAC;IAC5D,MAAM;MAAEC,WAAW;MAAEC,OAAO;MAAEC;IAAa,CAAC,GAAG7G,QAAQ,CAACK,IAAI;;IAE5D;IACAX,YAAY,CAAC+F,OAAO,CAAC,aAAa,EAAEkB,WAAW,CAAC;IAChDjH,YAAY,CAAC+F,OAAO,CAAC,SAAS,EAAEmB,OAAO,CAAC;IACxClH,YAAY,CAAC+F,OAAO,CAAC,cAAc,EAAEoB,YAAY,CAAC;IAElD,OAAO7G,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAyG,OAAO,EAAE,MAAAA,CAAA,KAAY;IACnB,IAAI;MACF,MAAMnI,GAAG,CAACsC,IAAI,CAAC,eAAe,CAAC;IACjC,CAAC,SAAS;MACR;MACAvB,YAAY,CAACa,UAAU,CAAC,aAAa,CAAC;MACtCb,YAAY,CAACa,UAAU,CAAC,SAAS,CAAC;MAClCb,YAAY,CAACa,UAAU,CAAC,cAAc,CAAC;IACzC;EACF,CAAC;EAED;EACAsG,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,MAAMA,YAAY,GAAGnH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IACzD,IAAI,CAACkH,YAAY,EAAE;MACjB,MAAM,IAAInD,KAAK,CAAC,eAAe,CAAC;IAClC;IAEA,MAAM1D,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,eAAe,EAAE;MAAE4F;IAAa,CAAC,CAAC;IAClE,MAAM;MAAEF,WAAW;MAAEC;IAAQ,CAAC,GAAG5G,QAAQ,CAACK,IAAI;;IAE9C;IACAX,YAAY,CAAC+F,OAAO,CAAC,aAAa,EAAEkB,WAAW,CAAC;IAChDjH,YAAY,CAAC+F,OAAO,CAAC,SAAS,EAAEmB,OAAO,CAAC;IAExC,OAAO5G,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA0G,WAAW,EAAE,MAAOC,gBAAgB,IAAK;IACvC,MAAMhH,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,cAAc,EAAE+F,gBAAgB,CAAC;IACjE,OAAOhH,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA4G,cAAc,EAAE,MAAOC,KAAK,IAAK;IAC/B,MAAMlH,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,uBAAuB,EAAE;MAAEiG;IAAM,CAAC,CAAC;IACnE,OAAOlH,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA8G,eAAe,EAAE,MAAOC,SAAS,IAAK;IACpC,MAAMpH,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,wBAAwB,EAAEmG,SAAS,CAAC;IACpE,OAAOpH,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAgH,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAM5H,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAC7C,IAAI,CAACF,KAAK,EAAE,OAAO,IAAI;IAEvB,IAAI;MACF;MACA,MAAMsC,OAAO,GAAGiC,IAAI,CAACC,KAAK,CAACqD,IAAI,CAAC7H,KAAK,CAAC8H,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrD,OAAO;QACLL,KAAK,EAAEnF,OAAO,CAACmF,KAAK;QACpBM,IAAI,EAAEzF,OAAO,CAACyF,IAAI;QAClBC,GAAG,EAAE1F,OAAO,CAAC0F;MACf,CAAC;IACH,CAAC,CAAC,OAAO5H,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC,OAAO,IAAI;IACb;EACF,CAAC;EAED;EACA6H,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAMjI,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAI,CAACF,KAAK,EAAE,OAAO,KAAK;IAExB,IAAI;MACF;MACA,MAAMsC,OAAO,GAAGiC,IAAI,CAACC,KAAK,CAACqD,IAAI,CAAC7H,KAAK,CAAC8H,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrD,MAAMI,WAAW,GAAGzE,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;MACrC,OAAOpB,OAAO,CAAC6F,GAAG,GAAGD,WAAW;IAClC,CAAC,CAAC,OAAO9H,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMgI,SAAS,GAAG;EACvB;EACAC,UAAU,EAAE,MAAAA,CAAOC,SAAS,EAAEC,IAAI,KAAK;IACrC,MAAMhI,QAAQ,GAAG,MAAM5B,KAAK,CAACiD,GAAG,CAAC0G,SAAS,EAAEC,IAAI,EAAE;MAChDlJ,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IACF,OAAOkB,QAAQ;EACjB;AACF,CAAC;;AAED;AACA,OAAO,MAAMiI,iBAAiB,GAAG,CAC/B;EACE7D,EAAE,EAAE,uBAAuB;EAC3BoD,IAAI,EAAE,aAAa;EACnB/C,WAAW,EAAE,mBAAmB;EAChCyD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,sBAAsB;EAC1BoD,IAAI,EAAE,YAAY;EAClB/C,WAAW,EAAE,iBAAiB;EAC9ByD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,UAAU;EACdoD,IAAI,EAAE,OAAO;EACb/C,WAAW,EAAE,iBAAiB;EAC9ByD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,uBAAuB;EAC3BoD,IAAI,EAAE,QAAQ;EACd/C,WAAW,EAAE,gBAAgB;EAC7ByD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,kBAAkB;EACtBoD,IAAI,EAAE,SAAS;EACf/C,WAAW,EAAE,iBAAiB;EAC9ByD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,6BAA6B;EACjCoD,IAAI,EAAE,cAAc;EACpB/C,WAAW,EAAE,sBAAsB;EACnCyD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,oBAAoB;EACxBoD,IAAI,EAAE,OAAO;EACb/C,WAAW,EAAE,aAAa;EAC1ByD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,sBAAsB;EAC1BoD,IAAI,EAAE,SAAS;EACf/C,WAAW,EAAE,kBAAkB;EAC/ByD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,eAAe;EACnBoD,IAAI,EAAE,OAAO;EACb/C,WAAW,EAAE,aAAa;EAC1ByD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,aAAa;EACjBoD,IAAI,EAAE,SAAS;EACf/C,WAAW,EAAE,qBAAqB;EAClCyD,QAAQ,EAAE;AACZ,CAAC,EACD;EACE9D,EAAE,EAAE,WAAW;EACfoD,IAAI,EAAE,OAAO;EACb/C,WAAW,EAAE,aAAa;EAC1ByD,QAAQ,EAAE;AACZ,CAAC,CACF;;AAED;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,CACpC;EACE/D,EAAE,EAAE,MAAM;EACVoD,IAAI,EAAE,WAAW;EACjB/C,WAAW,EAAE,uBAAuB;EACpC2D,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EACRC,kBAAkB,EAAE;AACtB,CAAC,EACD;EACEnE,EAAE,EAAE,WAAW;EACfoD,IAAI,EAAE,mBAAmB;EACzB/C,WAAW,EAAE,iBAAiB;EAC9B2D,KAAK,EAAE,MAAM;EACbC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EACRC,kBAAkB,EAAE;AACtB,CAAC,EACD;EACEnE,EAAE,EAAE,UAAU;EACdoD,IAAI,EAAE,kBAAkB;EACxB/C,WAAW,EAAE,gBAAgB;EAC7B2D,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EACRC,kBAAkB,EAAE;AACtB,CAAC,EACD;EACEnE,EAAE,EAAE,eAAe;EACnBoD,IAAI,EAAE,sBAAsB;EAC5B/C,WAAW,EAAE,cAAc;EAC3B2D,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EACRC,kBAAkB,EAAE;AACtB,CAAC,EACD;EACEnE,EAAE,EAAE,UAAU;EACdoD,IAAI,EAAE,eAAe;EACrB/C,WAAW,EAAE,sBAAsB;EACnC2D,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EACRC,kBAAkB,EAAE;AACtB,CAAC,EACD;EACEnE,EAAE,EAAE,SAAS;EACboD,IAAI,EAAE,cAAc;EACpB/C,WAAW,EAAE,eAAe;EAC5B2D,KAAK,EAAE,KAAK;EACZC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,CAAC;EACRC,kBAAkB,EAAE;AACtB,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAC9B;EACEpE,EAAE,EAAE,8CAA8C;EAClDoD,IAAI,EAAE,wBAAwB;EAC9B/C,WAAW,EAAE,oBAAoB;EACjCgE,SAAS,EAAE;AACb,CAAC,EACD;EACErE,EAAE,EAAE,4CAA4C;EAChDoD,IAAI,EAAE,iBAAiB;EACvB/C,WAAW,EAAE,aAAa;EAC1BgE,SAAS,EAAE;AACb,CAAC,EACD;EACErE,EAAE,EAAE,2CAA2C;EAC/CoD,IAAI,EAAE,gBAAgB;EACtB/C,WAAW,EAAE,gBAAgB;EAC7BgE,SAAS,EAAE;AACb,CAAC,EACD;EACErE,EAAE,EAAE,6BAA6B;EACjCoD,IAAI,EAAE,gBAAgB;EACtB/C,WAAW,EAAE,gBAAgB;EAC7BgE,SAAS,EAAE;AACb,CAAC,EACD;EACErE,EAAE,EAAE,2BAA2B;EAC/BoD,IAAI,EAAE,iBAAiB;EACvB/C,WAAW,EAAE,YAAY;EACzBgE,SAAS,EAAE;AACb,CAAC,EACD;EACErE,EAAE,EAAE,8BAA8B;EAClCoD,IAAI,EAAE,oBAAoB;EAC1B/C,WAAW,EAAE,WAAW;EACxBgE,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,cAAc,GAAI7I,KAAK,IAAK;EACvC,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAClB;IACA,MAAM;MAAEC,MAAM;MAAEI;IAAK,CAAC,GAAGR,KAAK,CAACG,QAAQ;IACvC,OAAO;MACLM,OAAO,EAAE,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAER,KAAK,KAAI,UAAUI,MAAM,GAAG;MAC3CA;IACF,CAAC;EACH,CAAC,MAAM,IAAIJ,KAAK,CAACb,OAAO,EAAE;IACxB;IACA,OAAO;MACLsB,OAAO,EAAE,iBAAiB;MAC1BL,MAAM,EAAE;IACV,CAAC;EACH,CAAC,MAAM;IACL;IACA,OAAO;MACLK,OAAO,EAAET,KAAK,CAACS,OAAO,IAAI,mBAAmB;MAC7CL,MAAM,EAAE,CAAC;IACX,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAM0I,0BAA0B,GAAG,CACxC;EACEvE,EAAE,EAAE,MAAM;EACVoD,IAAI,EAAE,OAAO;EACbY,KAAK,EAAE,MAAM;EACb3D,WAAW,EAAE,oBAAoB;EACjCmE,SAAS,EAAE;AACb,CAAC,EACD;EACExE,EAAE,EAAE,UAAU;EACdoD,IAAI,EAAE,MAAM;EACZY,KAAK,EAAE,OAAO;EACd3D,WAAW,EAAE,oBAAoB;EACjCmE,SAAS,EAAE;AACb,CAAC,EACD;EACExE,EAAE,EAAE,WAAW;EACfoD,IAAI,EAAE,OAAO;EACbY,KAAK,EAAE,QAAQ;EACf3D,WAAW,EAAE,gBAAgB;EAC7BmE,SAAS,EAAE;AACb,CAAC,EACD;EACExE,EAAE,EAAE,WAAW;EACfoD,IAAI,EAAE,OAAO;EACbY,KAAK,EAAE,QAAQ;EACf3D,WAAW,EAAE,qBAAqB;EAClCmE,SAAS,EAAE;AACb,CAAC,EACD;EACExE,EAAE,EAAE,WAAW;EACfoD,IAAI,EAAE,QAAQ;EACdY,KAAK,EAAE,QAAQ;EACf3D,WAAW,EAAE,gBAAgB;EAC7BmE,SAAS,EAAE;AACb,CAAC,EACD;EACExE,EAAE,EAAE,QAAQ;EACZoD,IAAI,EAAE,OAAO;EACbY,KAAK,EAAE,QAAQ;EACf3D,WAAW,EAAE,iBAAiB;EAC9BmE,SAAS,EAAE;AACb,CAAC,EACD;EACExE,EAAE,EAAE,MAAM;EACVoD,IAAI,EAAE,OAAO;EACbY,KAAK,EAAE,MAAM;EACb3D,WAAW,EAAE,qBAAqB;EAClCmE,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,iBAAiB,EAAE,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAM9I,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,aAAa,CAAC;MAC7C,OAAOd,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd;MACA,MAAMkJ,eAAe,GAAGrJ,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;MAC9D,IAAIoJ,eAAe,EAAE;QACnB,OAAO/E,IAAI,CAACC,KAAK,CAAC8E,eAAe,CAAC;MACpC;MACA,OAAO;QAAEC,UAAU,EAAEL;MAA2B,CAAC;IACnD;EACF,CAAC;EAED;EACAM,cAAc,EAAE,MAAOC,YAAY,IAAK;IACtC,IAAI;MACF,MAAMlJ,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,aAAa,EAAEiI,YAAY,CAAC;MAC5D,OAAOlJ,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd;MACA,MAAMkJ,eAAe,GAAGrJ,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;MAC9D,MAAMqJ,UAAU,GAAGD,eAAe,GAC9B/E,IAAI,CAACC,KAAK,CAAC8E,eAAe,CAAC,GAC3B;QAAEC,UAAU,EAAE,CAAC,GAAGL,0BAA0B;MAAE,CAAC;MAEnD,MAAMQ,WAAW,GAAG;QAClB,GAAGD,YAAY;QACf9E,EAAE,EAAE,UAAUlB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QAC1ByF,SAAS,EAAE,KAAK;QAChBQ,SAAS,EAAE,IAAIlG,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;MACpC,CAAC;MAED0F,UAAU,CAACA,UAAU,CAACK,IAAI,CAACF,WAAW,CAAC;MACvCzJ,YAAY,CAAC+F,OAAO,CAAC,gBAAgB,EAAEzB,IAAI,CAAC0B,SAAS,CAACsD,UAAU,CAAC,CAAC;MAClE,OAAOG,WAAW;IACpB;EACF,CAAC;EAED;EACAG,cAAc,EAAE,MAAAA,CAAOC,UAAU,EAAEL,YAAY,KAAK;IAClD,IAAI;MACF,MAAMlJ,QAAQ,GAAG,MAAMrB,GAAG,CAAC0C,GAAG,CAAC,eAAekI,UAAU,EAAE,EAAEL,YAAY,CAAC;MACzE,OAAOlJ,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd;MACA,MAAMkJ,eAAe,GAAGrJ,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;MAC9D,MAAMqJ,UAAU,GAAGD,eAAe,GAC9B/E,IAAI,CAACC,KAAK,CAAC8E,eAAe,CAAC,GAC3B;QAAEC,UAAU,EAAE,CAAC,GAAGL,0BAA0B;MAAE,CAAC;MAEnD,MAAMa,aAAa,GAAGR,UAAU,CAACA,UAAU,CAACS,SAAS,CAClDC,GAAG,IAAKA,GAAG,CAACtF,EAAE,KAAKmF,UACtB,CAAC;MACD,IAAIC,aAAa,KAAK,CAAC,CAAC,EAAE;QACxBR,UAAU,CAACA,UAAU,CAACQ,aAAa,CAAC,GAAG;UACrC,GAAGR,UAAU,CAACA,UAAU,CAACQ,aAAa,CAAC;UACvC,GAAGN,YAAY;UACfS,SAAS,EAAE,IAAIzG,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;QACpC,CAAC;QACD5D,YAAY,CAAC+F,OAAO,CAAC,gBAAgB,EAAEzB,IAAI,CAAC0B,SAAS,CAACsD,UAAU,CAAC,CAAC;QAClE,OAAOA,UAAU,CAACA,UAAU,CAACQ,aAAa,CAAC;MAC7C;MACA,MAAM,IAAI9F,KAAK,CAAC,iBAAiB,CAAC;IACpC;EACF,CAAC;EAED;EACAkG,cAAc,EAAE,MAAOL,UAAU,IAAK;IACpC,IAAI;MACF,MAAMvJ,QAAQ,GAAG,MAAMrB,GAAG,CAAC4C,MAAM,CAAC,eAAegI,UAAU,EAAE,CAAC;MAC9D,OAAOvJ,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd;MACA,MAAMkJ,eAAe,GAAGrJ,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;MAC9D,MAAMqJ,UAAU,GAAGD,eAAe,GAC9B/E,IAAI,CAACC,KAAK,CAAC8E,eAAe,CAAC,GAC3B;QAAEC,UAAU,EAAE,CAAC,GAAGL,0BAA0B;MAAE,CAAC;MAEnD,MAAMa,aAAa,GAAGR,UAAU,CAACA,UAAU,CAACS,SAAS,CAClDC,GAAG,IAAKA,GAAG,CAACtF,EAAE,KAAKmF,UACtB,CAAC;MACD,IAAIC,aAAa,KAAK,CAAC,CAAC,EAAE;QACxBR,UAAU,CAACA,UAAU,CAACa,MAAM,CAACL,aAAa,EAAE,CAAC,CAAC;QAC9C9J,YAAY,CAAC+F,OAAO,CAAC,gBAAgB,EAAEzB,IAAI,CAAC0B,SAAS,CAACsD,UAAU,CAAC,CAAC;QAClE,OAAO;UAAEzG,OAAO,EAAE;QAAK,CAAC;MAC1B;MACA,MAAM,IAAImB,KAAK,CAAC,iBAAiB,CAAC;IACpC;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMoG,kBAAkB,GAAG;EAChC;EACAC,qBAAqB,EAAE,MAAAA,CAAO5I,SAAS,EAAEoI,UAAU,KAAK;IACtD,IAAI;MACF,MAAMvJ,QAAQ,GAAG,MAAMrB,GAAG,CAAC0C,GAAG,CAAC,aAAaF,SAAS,WAAW,EAAE;QAChEM,QAAQ,EAAE8H;MACZ,CAAC,CAAC;MACF,OAAOvJ,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd;MACAT,OAAO,CAACC,GAAG,CAAC,QAAQ8B,SAAS,WAAWoI,UAAU,MAAM,CAAC;MACzD,OAAO;QAAEhH,OAAO,EAAE,IAAI;QAAEpB,SAAS;QAAEM,QAAQ,EAAE8H;MAAW,CAAC;IAC3D;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,eAAe,GAAG;EAC7B;EACAC,eAAe,EAAE,MAAO9I,SAAS,IAAK;IACpC,MAAMnB,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,aAAaK,SAAS,QAAQ,CAAC;IAC9D,OAAOnB,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACA6J,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,MAAMlK,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAAC,iBAAiB,CAAC;IACjD,OAAOd,QAAQ,CAACK,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM8J,oBAAoB,GAAIlF,WAAW,IAAK;EACnD,MAAMmF,KAAK,GAAG;IACZC,UAAU,EAAEpF,WAAW,CAACE,MAAM;IAC9BmF,WAAW,EAAErF,WAAW,CAACsF,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAAClG,OAAO,KAAK,KAAK,CAAC,CAACa,MAAM;IACxEsF,WAAW,EAAE,CAAC;IACdC,SAAS,EAAE,CAAC;IACZC,gBAAgB,EAAE,CAAC;IACnB3B,UAAU,EAAE,IAAI4B,GAAG,CAAC,CAAC;IACrBC,MAAM,EAAE,IAAID,GAAG,CAAC,CAAC;IACjBE,gBAAgB,EAAE;MAAEC,GAAG,EAAE,CAAC;MAAEC,GAAG,EAAE;IAAE;EACrC,CAAC;EAED/F,WAAW,CAACgG,OAAO,CAAET,IAAI,IAAK;IAC5B;IACAJ,KAAK,CAACpB,UAAU,CAACkC,GAAG,CAACV,IAAI,CAAC/I,QAAQ,CAAC;;IAEnC;IACA2I,KAAK,CAACS,MAAM,CAACK,GAAG,CAACV,IAAI,CAACW,KAAK,CAAC;;IAE5B;IACA,IAAIX,IAAI,CAAC9F,WAAW,EAAE;MACpB,MAAM0G,UAAU,GAAGZ,IAAI,CAAC9F,WAAW,CAACS,MAAM;MAC1CiF,KAAK,CAACM,SAAS,IAAIU,UAAU;;MAE7B;MACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,IAAI,CAACH,UAAU,GAAG,GAAG,CAAC;MACnDhB,KAAK,CAACK,WAAW,IAAIY,eAAe;IACtC;;IAEA;IACA,MAAMG,IAAI,GAAGC,UAAU,CAACjB,IAAI,CAACkB,WAAW,CAAC;IACzC,IAAIF,IAAI,GAAGpB,KAAK,CAACU,gBAAgB,CAACC,GAAG,EAAEX,KAAK,CAACU,gBAAgB,CAACC,GAAG,GAAGS,IAAI;IACxE,IAAIA,IAAI,GAAGpB,KAAK,CAACU,gBAAgB,CAACE,GAAG,EAAEZ,KAAK,CAACU,gBAAgB,CAACE,GAAG,GAAGQ,IAAI;EAC1E,CAAC,CAAC;;EAEF;EACApB,KAAK,CAACO,gBAAgB,GACpBP,KAAK,CAACC,UAAU,GAAG,CAAC,GAAGiB,IAAI,CAACK,KAAK,CAACvB,KAAK,CAACK,WAAW,GAAGL,KAAK,CAACC,UAAU,CAAC,GAAG,CAAC;;EAE7E;EACAD,KAAK,CAACpB,UAAU,GAAG4C,KAAK,CAACC,IAAI,CAACzB,KAAK,CAACpB,UAAU,CAAC;EAC/CoB,KAAK,CAACS,MAAM,GAAGe,KAAK,CAACC,IAAI,CAACzB,KAAK,CAACS,MAAM,CAAC;EAEvC,OAAOT,KAAK;AACd,CAAC;;AAED;AACA,MAAM0B,mBAAmB,GAAGA,CAACC,cAAc,EAAEC,WAAW,GAAG,EAAE,KAAK;EAChE,MAAMxG,OAAO,GAAGuG,cAAc,CAACE,WAAW,CAAC,CAAC;;EAE5C;EACA,MAAMC,QAAQ,GAAGC,qBAAqB,CAAC3G,OAAO,CAAC;EAC/C,MAAM4G,QAAQ,GAAGC,mBAAmB,CAAC7G,OAAO,CAAC;;EAE7C;EACA,MAAM8G,cAAc,GAClBN,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC,IAC1BP,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC,IAC1BP,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC;EAC5B,MAAMC,kBAAkB,GACtBR,WAAW,CAACO,QAAQ,CAAC,KAAK,CAAC,IAC3BP,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC,IAC1BP,WAAW,CAACO,QAAQ,CAAC,MAAM,CAAC;EAC9B,MAAME,qBAAqB,GACzBT,WAAW,CAACO,QAAQ,CAAC,KAAK,CAAC,IAC3BP,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC,IAC1BP,WAAW,CAACO,QAAQ,CAAC,KAAK,CAAC;EAE7BnN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE6M,QAAQ,CAAC;EACrC9M,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE+M,QAAQ,CAAC;;EAEpC;EACA,MAAMM,MAAM,GAAG,EAAE;;EAEjB;EACA,IAAIR,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACU,UAAU,EAAE;IAC/CF,MAAM,CAACrD,IAAI,CAAC,GAAG6C,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACU,UAAU,EAAE,CAAC;IAC7DF,MAAM,CAACrD,IAAI,CAAC,GAAG6C,QAAQ,CAACS,WAAW,KAAKT,QAAQ,CAACU,UAAU,KAAK,CAAC;EACnE;;EAEA;EACA,IAAIV,QAAQ,CAACW,YAAY,EAAE;IACzBH,MAAM,CAACrD,IAAI,CACT,GAAG6C,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACW,YAAY,IAAIX,QAAQ,CAACU,UAAU,EACzE,CAAC;EACH;;EAEA;EACA,IAAIV,QAAQ,CAACY,SAAS,IAAIZ,QAAQ,CAACa,MAAM,EAAE;IACzC,MAAMC,QAAQ,GAAGd,QAAQ,CAACY,SAAS,IAAIZ,QAAQ,CAACa,MAAM;IACtDL,MAAM,CAACrD,IAAI,CACT,GAAG6C,QAAQ,CAACS,WAAW,KAAKK,QAAQ,IAAId,QAAQ,CAACU,UAAU,KAC7D,CAAC;EACH;;EAEA;EACA,IAAIV,QAAQ,CAACe,cAAc,EAAE;IAC3BP,MAAM,CAACrD,IAAI,CACT,GAAG6C,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACU,UAAU,KAAKV,QAAQ,CAACe,cAAc,MAC5E,CAAC;EACH;;EAEA;EACA,IAAIP,MAAM,CAACvH,MAAM,GAAG,CAAC,EAAE;IACrBuH,MAAM,CAACrD,IAAI,CAAC,GAAG6C,QAAQ,CAACS,WAAW,IAAI,IAAI,SAAS,CAAC;IACrDD,MAAM,CAACrD,IAAI,CAAC,QAAQ6C,QAAQ,CAACU,UAAU,IAAI,OAAO,EAAE,CAAC;IACrDF,MAAM,CAACrD,IAAI,CAAC,GAAG6C,QAAQ,CAACgB,QAAQ,IAAI,IAAI,QAAQ,CAAC;EACnD;;EAEA;EACA,IAAIC,WAAW,GAAGT,MAAM,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAEpC,IAAId,cAAc,EAAE;IAClB;IACAa,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAEhJ,KAAK,IAAK;MACvC,IAAIA,KAAK,CAACc,MAAM,GAAG,EAAE,EAAE;QACrB,OAAOd,KAAK,CAACiJ,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI;MACtC;MACA,OAAOjJ,KAAK;IACd,CAAC,CAAC;EACJ;EAEA,IAAImI,kBAAkB,EAAE;IACtB;IACAW,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAEhJ,KAAK,IAAK;MACvC,IAAI,CAACA,KAAK,CAACkI,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAClI,KAAK,CAACkI,QAAQ,CAAC,IAAI,CAAC,EAAE;QACjD,OAAOlI,KAAK,CAACuB,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;MAC5D;MACA,OAAOvB,KAAK;IACd,CAAC,CAAC;EACJ;EAEA,IAAIoI,qBAAqB,EAAE;IACzB;IACAU,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAEhJ,KAAK,IAAK;MACvC,OAAOA,KAAK,CAACuB,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IAC1D,CAAC,CAAC;EACJ;;EAEA;EACA,MAAM2H,WAAW,GAAGvB,WAAW,GAC3B,WAAWA,WAAW,oBAAoB,GAC1C,EAAE;EAEN,OACEmB,WAAW,CAACE,GAAG,CAAC,CAAChJ,KAAK,EAAEmJ,CAAC,KAAK,GAAGA,CAAC,GAAG,CAAC,KAAKnJ,KAAK,EAAE,CAAC,CAACoJ,IAAI,CAAC,IAAI,CAAC,GAAGF,WAAW;AAEhF,CAAC;;AAED;AACA,MAAMpB,qBAAqB,GAAI3G,OAAO,IAAK;EACzC;EACA,MAAMkI,SAAS,GAAG,CAChB,MAAM,EACN,IAAI,EACJ,MAAM,EACN,MAAM,EACN,IAAI,EACJ,QAAQ,EACR,IAAI,EACJ,OAAO,EACP,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,MAAM,EACN,MAAM,EACN,MAAM,EACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,IAAI,CACL;EAED,MAAMC,YAAY,GAAGD,SAAS,CAACE,IAAI,CAAEC,OAAO,IAAKrI,OAAO,CAAC+G,QAAQ,CAACsB,OAAO,CAAC,CAAC;;EAE3E;EACA,MAAMC,OAAO,GAAG,CACd;IAAE1B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAAE2B,MAAM,EAAE;EAAK,CAAC,EAC9C;IAAE3B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAAE2B,MAAM,EAAE;EAAK,CAAC,EAC9C;IAAE3B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAAE2B,MAAM,EAAE;EAAK,CAAC,EAC9C;IAAE3B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAAE2B,MAAM,EAAE;EAAK,CAAC,EAC9C;IAAE3B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAAE2B,MAAM,EAAE;EAAK,CAAC,EAC9C;IAAE3B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC;IAAE2B,MAAM,EAAE;EAAK,CAAC,EAChD;IAAE3B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAAE2B,MAAM,EAAE;EAAK,CAAC,CAC/C;EAED,MAAMC,WAAW,GAAGF,OAAO,CAACF,IAAI,CAAEK,WAAW,IAC3CA,WAAW,CAAC7B,QAAQ,CAAC8B,IAAI,CAAEC,OAAO,IAAK3I,OAAO,CAAC+G,QAAQ,CAAC4B,OAAO,CAAC,CAClE,CAAC;;EAED;EACA,MAAMC,aAAa,GAAG,CACpB,IAAI,EACJ,MAAM,EACN,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,KAAK,EACL,OAAO,EACP,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,CACL;EAED,MAAMC,aAAa,GAAGD,aAAa,CAACR,IAAI,CAAEU,IAAI,IAAK9I,OAAO,CAAC+G,QAAQ,CAAC+B,IAAI,CAAC,CAAC;;EAE1E;EACA,MAAMC,UAAU,GAAG,CACjB,OAAO,EACP,OAAO,EACP,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,CACL;EAED,MAAMC,cAAc,GAAGD,UAAU,CAACX,IAAI,CAAEa,IAAI,IAAKjJ,OAAO,CAAC+G,QAAQ,CAACkC,IAAI,CAAC,CAAC;;EAExE;EACA,MAAMC,OAAO,GAAG,CACd,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,KAAK,EACL,MAAM,CACP;EAED,MAAMC,WAAW,GAAGD,OAAO,CAACd,IAAI,CAAE7K,MAAM,IAAKyC,OAAO,CAAC+G,QAAQ,CAACxJ,MAAM,CAAC,CAAC;;EAEtE;EACA,MAAM6L,UAAU,GAAG,CACjB,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,MAAM,CACP;EAED,MAAMC,aAAa,GAAGD,UAAU,CAAChB,IAAI,CAAEV,QAAQ,IAC7C1H,OAAO,CAAC+G,QAAQ,CAACW,QAAQ,CAC3B,CAAC;;EAED;EACA,IAAI4B,YAAY,GAAGnB,YAAY;EAC/B,IAAIA,YAAY,EAAE;IAChB,IAAIA,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,MAAM,EAClDmB,YAAY,GAAG,MAAM,CAAC,KACnB,IAAInB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,MAAM,EACvDmB,YAAY,GAAG,MAAM,CAAC,KACnB,IAAInB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,QAAQ,EACzDmB,YAAY,GAAG,QAAQ,CAAC,KACrB,IAAInB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,OAAO,EACxDmB,YAAY,GAAG,OAAO,CAAC,KACpBA,YAAY,GAAGnB,YAAY;EAClC;EAEA,OAAO;IACLhB,WAAW,EAAEmC,YAAY,IAAIC,0BAA0B,CAACvJ,OAAO,CAAC;IAChEoH,UAAU,EAAEoB,WAAW,GAAGA,WAAW,CAACD,MAAM,GAAG,IAAI;IACnDlB,YAAY,EAAEwB,aAAa;IAC3BvB,SAAS,EAAE0B,cAAc;IACzBvB,cAAc,EAAE0B,WAAW;IAC3BzB,QAAQ,EAAE2B;EACZ,CAAC;AACH,CAAC;;AAED;AACA,MAAME,0BAA0B,GAAIvJ,OAAO,IAAK;EAC9C,MAAMwJ,SAAS,GAAGxJ,OAAO,CAAC+B,KAAK,CAAC,OAAO,CAAC,CAACgD,MAAM,CAAE0E,CAAC,IAAKA,CAAC,CAAC9J,MAAM,GAAG,EAAE,CAAC;EACrE,IAAI6J,SAAS,CAAC7J,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAEvC,MAAM+J,aAAa,GAAGF,SAAS,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;EACzC,MAAMC,KAAK,GAAGF,aAAa,CAAC3H,KAAK,CAAC,GAAG,CAAC;;EAEtC;EACA,IAAI6H,KAAK,CAACjK,MAAM,GAAG,CAAC,EAAE;IACpB,MAAMkK,OAAO,GAAGD,KAAK,CAAC,CAAC,CAAC,CAACxJ,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;IACxD,IAAIyJ,OAAO,CAAClK,MAAM,GAAG,CAAC,EAAE;MACtB,OAAOkK,OAAO;IAChB;EACF;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,MAAMhD,mBAAmB,GAAI7G,OAAO,IAAK;EACvC,MAAM8J,WAAW,GAAG,CAClB,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,KAAK,EACL,KAAK,CACN;EACD,MAAMF,KAAK,GAAG5J,OAAO,CAClB+B,KAAK,CAAC,KAAK,CAAC,CACZ8F,GAAG,CAAEkC,IAAI,IAAKA,IAAI,CAAC3J,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC,CACnD2E,MAAM,CAAEgF,IAAI,IAAKA,IAAI,CAACpK,MAAM,GAAG,CAAC,IAAI,CAACmK,WAAW,CAAC/C,QAAQ,CAACgD,IAAI,CAAC,CAAC;;EAEnE;EACA,MAAMC,SAAS,GAAG,CAAC,CAAC;EACpBJ,KAAK,CAACnE,OAAO,CAAEsE,IAAI,IAAK;IACtBC,SAAS,CAACD,IAAI,CAAC,GAAG,CAACC,SAAS,CAACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;EAC9C,CAAC,CAAC;;EAEF;EACA,OAAOE,MAAM,CAACC,OAAO,CAACF,SAAS,CAAC,CAC7BG,IAAI,CAAC,CAAC,GAAGC,CAAC,CAAC,EAAE,GAAGC,CAAC,CAAC,KAAKA,CAAC,GAAGD,CAAC,CAAC,CAC7BxC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,GAAG,CAAC,CAAC,CAACkC,IAAI,CAAC,KAAKA,IAAI,CAAC;AAC1B,CAAC;;AAED;AACA,MAAMO,6BAA6B,GAAGA,CACpC/D,cAAc,EACdC,WAAW,GAAG,EAAE,EAChBjI,YAAY,GAAG,CAAC,CAAC,KACd;EACH3E,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;;EAE3C;EACA,MAAM0Q,UAAU,GACdhM,YAAY,CAACY,WAAW,IAAI,0BAA0B;EACxDvF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE0Q,UAAU,CAACzC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;;EAE9D;EACA,MAAM0C,eAAe,GACnBjM,YAAY,CAACa,SAAS,IAAI,uBAAuB;EACnDxF,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE2Q,eAAe,CAAC1C,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;;EAEpE;EACA,MAAM2C,eAAe,GACnBlM,YAAY,CAACc,SAAS,IAAI,0BAA0B;EACtDzF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE4Q,eAAe,CAAC3C,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;;EAEnE;EACA,MAAMpB,QAAQ,GAAGC,qBAAqB,CAACJ,cAAc,CAACE,WAAW,CAAC,CAAC,CAAC;;EAEpE;EACA,MAAMK,cAAc,GAClBN,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC,IAAIP,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAMC,kBAAkB,GACtBR,WAAW,CAACO,QAAQ,CAAC,KAAK,CAAC,IAC3BP,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC,IAC1BP,WAAW,CAACO,QAAQ,CAAC,MAAM,CAAC;EAC9B,MAAME,qBAAqB,GACzBT,WAAW,CAACO,QAAQ,CAAC,KAAK,CAAC,IAAIP,WAAW,CAACO,QAAQ,CAAC,IAAI,CAAC;;EAE3D;EACA,MAAMG,MAAM,GAAG,EAAE;;EAEjB;EACA,IAAIR,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACU,UAAU,EAAE;IAC/C,IAAIsD,MAAM,GAAG,GAAGhE,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACU,UAAU,EAAE;IAC7D,IAAIuD,MAAM,GAAG,GAAGjE,QAAQ,CAACS,WAAW,KAAKT,QAAQ,CAACU,UAAU,KAAK;;IAEjE;IACA,IAAI7I,YAAY,CAACe,WAAW,EAAE;MAC5B,IAAIf,YAAY,CAACe,WAAW,CAACyH,QAAQ,CAAC,IAAI,CAAC,IAAID,cAAc,EAAE;QAC7D4D,MAAM,GAAGA,MAAM,CAAC/K,MAAM,GAAG,EAAE,GAAG+K,MAAM,CAAC5C,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG4C,MAAM;QACrEC,MAAM,GAAGA,MAAM,CAAChL,MAAM,GAAG,EAAE,GAAGgL,MAAM,CAAC7C,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG6C,MAAM;MACvE;IACF;IAEAzD,MAAM,CAACrD,IAAI,CAAC6G,MAAM,CAAC;IACnBxD,MAAM,CAACrD,IAAI,CAAC8G,MAAM,CAAC;EACrB;;EAEA;EACA,IAAIjE,QAAQ,CAACW,YAAY,EAAE;IACzB,IAAIuD,MAAM,GAAG,GAAGlE,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACW,YAAY,IAAIX,QAAQ,CAACU,UAAU,EAAE;IACtF,IAAIV,QAAQ,CAACY,SAAS,EAAE;MACtBsD,MAAM,GAAG,GAAGlE,QAAQ,CAACS,WAAW,KAAKT,QAAQ,CAACY,SAAS,IAAIZ,QAAQ,CAACW,YAAY,IAAIX,QAAQ,CAACU,UAAU,EAAE;IAC3G;IACAF,MAAM,CAACrD,IAAI,CAAC+G,MAAM,CAAC;EACrB;;EAEA;EACA,IAAIlE,QAAQ,CAACe,cAAc,IAAIf,QAAQ,CAACgB,QAAQ,EAAE;IAChD,MAAMmD,WAAW,GAAGnE,QAAQ,CAACe,cAAc,IAAI,GAAGf,QAAQ,CAACgB,QAAQ,KAAK;IACxER,MAAM,CAACrD,IAAI,CACT,GAAG6C,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACU,UAAU,KAAKyD,WAAW,MAChE,CAAC;EACH;;EAEA;EACA,IAAIlD,WAAW,GAAGT,MAAM,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEpC;EACA,IAAIZ,kBAAkB,EAAE;IACtBW,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAEhJ,KAAK,IAAK;MACvC,IAAI,CAACA,KAAK,CAACkI,QAAQ,CAAC,GAAG,CAAC,EAAE;QACxB,OACElI,KAAK,CAACuB,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,GAAG;MAE3D;MACA,OAAOvB,KAAK;IACd,CAAC,CAAC;EACJ;EAEA,IAAIoI,qBAAqB,EAAE;IACzBU,WAAW,GAAGA,WAAW,CAACE,GAAG,CAAEhJ,KAAK,IAAK;MACvC,OAAOA,KAAK,CAACuB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;IACpD,CAAC,CAAC;EACJ;;EAEA;EACA,IAAI7B,YAAY,CAACiB,WAAW,IAAIjB,YAAY,CAACiB,WAAW,CAACuH,QAAQ,CAAC,KAAK,CAAC,EAAE;IACxEY,WAAW,CAAC9D,IAAI,CACd,OAAO6C,QAAQ,CAACS,WAAW,KACzBT,QAAQ,CAACW,YAAY,IAAI,KAAK,KAElC,CAAC;EACH;;EAEA;EACA,MAAMyD,YAAY,GAAGnD,WAAW,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5C,MAAMmD,UAAU,GACdd,MAAM,CAACe,IAAI,CAACzM,YAAY,CAAC,CAACoB,MAAM,GAAG,CAAC,GAChC,wBAAwBsK,MAAM,CAACe,IAAI,CAACzM,YAAY,CAAC,CAAC0J,IAAI,CAAC,IAAI,CAAC,EAAE,GAC9D,mBAAmB;EAEzB,MAAMgD,eAAe,GAAGzE,WAAW,GAC/B,SAASA,WAAW,gBAAgB,GACpC,EAAE;EAEN,OACEsE,YAAY,CAACjD,GAAG,CAAC,CAAChJ,KAAK,EAAEmJ,CAAC,KAAK,GAAGA,CAAC,GAAG,CAAC,KAAKnJ,KAAK,EAAE,CAAC,CAACoJ,IAAI,CAAC,IAAI,CAAC,GAC/D8C,UAAU,GACVE,eAAe;AAEnB,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG;EAC9B;EACAC,oBAAoB,EAAE,MAAAA,CACpBxP,SAAS,EACT4K,cAAc,EACd6E,mBAAmB,GAAG,CAAC,CAAC,EACxB5E,WAAW,GAAG,EAAE,KACb;IACH;IACA,IAAItN,YAAY,EAAE;MAAA,IAAAmS,qBAAA;MAChBzR,OAAO,CAACC,GAAG,CACT,kDACF,CAAC;MACDD,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE2M,WAAW,CAAC;;MAEzC;MACA,MAAMjI,YAAY,GAAGC,IAAI,CAACC,KAAK,CAC7BvE,YAAY,CAACC,OAAO,CAAC,WAAWwB,SAAS,EAAE,CAAC,IAAI,IAClD,CAAC;MACD/B,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE0E,YAAY,CAAC;;MAE1C;MACA,MAAM,IAAIjE,OAAO,CAAE2C,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;;MAE3D;MACA,MAAMiK,MAAM,GAAGoD,6BAA6B,CAC1C/D,cAAc,EACdC,WAAW,EACXjI,YACF,CAAC;MACD3E,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEqN,MAAM,CAAC;MAE7C,OAAO;QACLpM,OAAO,EAAE,gBAAgB;QACzB2C,WAAW,EAAE,QAAQC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACjChC,SAAS,EAAE,cAAc;QACzB4B,MAAM,EAAE2J,MAAM;QACd5J,IAAI,EAAE,MAAM;QACZO,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;QACnCC,KAAK,EAAE;UACLuN,WAAW,EAAE,EAAAD,qBAAA,GAAAD,mBAAmB,CAACG,YAAY,cAAAF,qBAAA,uBAAhCA,qBAAA,CAAkC1L,MAAM,KAAI,CAAC;UAC1D6L,qBAAqB,EAAE,KAAK;UAC5BC,qBAAqB,EAAE,IAAI;UAC3BC,YAAY,EAAEN,mBAAmB,CAACG,YAAY,IAAI,CAChD,aAAa,EACb,WAAW,EACX,WAAW,EACX,aAAa,EACb,YAAY,CACb;UACDI,kBAAkB,EAAE;QACtB;MACF,CAAC;IACH;;IAEA;IACA,MAAMnR,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,aAAaE,SAAS,WAAW,EAAE;MACjEU,OAAO,EAAEkK,cAAc;MACvBC,WAAW,EAAEA,WAAW;MACxBoF,eAAe,EAAE,KAAK;MAAE;MACxBL,YAAY,EAAEH,mBAAmB,CAACG,YAAY,IAAI,EAAE;MACpDrF,WAAW,EAAEkF,mBAAmB,CAAClF,WAAW,IAAI;IAClD,CAAC,CAAC;IAEFtM,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEW,QAAQ,CAACK,IAAI,CAAC;IACpD,OAAOL,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAgR,sBAAsB,EAAE,MAAAA,CAAOlQ,SAAS,EAAE8B,WAAW,KAAK;IACxD,MAAMjD,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAC5B,aAAaK,SAAS,gBAAgB8B,WAAW,SACnD,CAAC;IACD,OAAOjD,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAiR,sBAAsB,EAAE,MAAAA,CAAOnQ,SAAS,EAAE8B,WAAW,KAAK;IACxD,MAAMjD,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAC5B,aAAaK,SAAS,gBAAgB8B,WAAW,SACnD,CAAC;IACD,OAAOjD,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAkR,oBAAoB,EAAE,MAAAA,CAAOpQ,SAAS,EAAE8B,WAAW,KAAK;IACtD,MAAMjD,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAC5B,aAAaK,SAAS,gBAAgB8B,WAAW,OACnD,CAAC;IACD,OAAOjD,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAmR,qBAAqB,EAAE,MAAAA,CACrBrQ,SAAS,EACTsQ,QAAQ,EACRC,aAAa,EACb3F,cAAc,KACX;IACH,MAAM/L,QAAQ,GAAG,MAAMrB,GAAG,CAACsC,IAAI,CAAC,aAAaE,SAAS,mBAAmB,EAAE;MACzEsQ,QAAQ;MACRC,aAAa;MACb3F;IACF,CAAC,CAAC;IACF,OAAO/L,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAsR,yBAAyB,EAAE,MAAAA,CAAOxQ,SAAS,EAAEjC,MAAM,KAAK;IACtD,MAAMc,QAAQ,GAAG,MAAMrB,GAAG,CAAC0C,GAAG,CAC5B,aAAaF,SAAS,uBAAuB,EAC7CjC,MACF,CAAC;IACD,OAAOc,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAuR,uBAAuB,EAAE,MAAAA,CAAOzQ,SAAS,EAAE0Q,SAAS,GAAG,KAAK,KAAK;IAC/D,MAAM7R,QAAQ,GAAG,MAAMrB,GAAG,CAACmC,GAAG,CAC5B,aAAaK,SAAS,wBAAwB,EAC9C;MACEN,MAAM,EAAE;QAAEgR;MAAU;IACtB,CACF,CAAC;IACD,OAAO7R,QAAQ,CAACK,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMyR,mBAAmB,GAAG;EACjCC,kBAAkB,EAAE;IAClB3N,EAAE,EAAE,oBAAoB;IACxBoD,IAAI,EAAE,OAAO;IACb/C,WAAW,EAAE,sBAAsB;IACnC6D,KAAK,EAAE,CAAC;IACRJ,QAAQ,EAAE;EACZ,CAAC;EACD8J,qBAAqB,EAAE;IACrB5N,EAAE,EAAE,uBAAuB;IAC3BoD,IAAI,EAAE,UAAU;IAChB/C,WAAW,EAAE,gBAAgB;IAC7B6D,KAAK,EAAE,CAAC;IACRJ,QAAQ,EAAE;EACZ,CAAC;EACD+J,iBAAiB,EAAE;IACjB7N,EAAE,EAAE,mBAAmB;IACvBoD,IAAI,EAAE,UAAU;IAChB/C,WAAW,EAAE,gBAAgB;IAC7B6D,KAAK,EAAE,CAAC;IACRJ,QAAQ,EAAE;EACZ,CAAC;EACDgK,iBAAiB,EAAE;IACjB9N,EAAE,EAAE,mBAAmB;IACvBoD,IAAI,EAAE,OAAO;IACb/C,WAAW,EAAE,mBAAmB;IAChC6D,KAAK,EAAE,CAAC;IACRJ,QAAQ,EAAE;EACZ,CAAC;EACDiK,gBAAgB,EAAE;IAChB/N,EAAE,EAAE,kBAAkB;IACtBoD,IAAI,EAAE,OAAO;IACb/C,WAAW,EAAE,yBAAyB;IACtC6D,KAAK,EAAE,CAAC;IACRJ,QAAQ,EAAE;EACZ,CAAC;EACDkK,kBAAkB,EAAE;IAClBhO,EAAE,EAAE,oBAAoB;IACxBoD,IAAI,EAAE,OAAO;IACb/C,WAAW,EAAE,oBAAoB;IACjC6D,KAAK,EAAE,CAAC;IACRJ,QAAQ,EAAE;EACZ;AACF,CAAC;;AAED;AACA,OAAO,MAAMmK,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,KAAK;EAC7B,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACrC,MAAMhF,CAAC,GAAGlC,IAAI,CAACmH,KAAK,CAACnH,IAAI,CAACjM,GAAG,CAACiT,KAAK,CAAC,GAAGhH,IAAI,CAACjM,GAAG,CAACkT,CAAC,CAAC,CAAC;EACnD,OAAO9G,UAAU,CAAC,CAAC6G,KAAK,GAAGhH,IAAI,CAACoH,GAAG,CAACH,CAAC,EAAE/E,CAAC,CAAC,EAAEmF,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGH,KAAK,CAAChF,CAAC,CAAC;AACzE,CAAC;;AAED;AACA,OAAO,MAAMoF,gBAAgB,GAAIC,MAAM,IAAK;EAC1C,IAAIA,MAAM,GAAG,IAAI,EAAE,OAAOA,MAAM,CAACC,QAAQ,CAAC,CAAC;EAC3C,IAAID,MAAM,GAAG,OAAO,EAAE,OAAO,CAACA,MAAM,GAAG,IAAI,EAAEF,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;EAC7D,OAAO,CAACE,MAAM,GAAG,OAAO,EAAEF,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG;AAC5C,CAAC;;AAED;AACA,OAAO,MAAMI,eAAe,GAAGA,CAACxJ,UAAU,EAAEyJ,cAAc,GAAG,EAAE,KAAK;EAClE,MAAMC,aAAa,GAAG,CAAC,GAAGtK,0BAA0B,EAAE,GAAGqK,cAAc,CAAC;EACxE,OACEC,aAAa,CAACrF,IAAI,CAAElE,GAAG,IAAKA,GAAG,CAACtF,EAAE,KAAKmF,UAAU,CAAC,IAClDZ,0BAA0B,CAACiF,IAAI,CAAElE,GAAG,IAAKA,GAAG,CAACtF,EAAE,KAAK,MAAM,CAAC;AAE/D,CAAC;;AAED;AACA,OAAO,MAAM8O,uBAAuB,GAAI9K,KAAK,IAAK;EAChD,MAAM+K,MAAM,GAAG;IACbC,IAAI,EAAE,2CAA2C;IACjDC,KAAK,EAAE,8CAA8C;IACrDC,MAAM,EAAE,iDAAiD;IACzDC,MAAM,EAAE,iDAAiD;IACzDC,MAAM,EAAE,iDAAiD;IACzDC,MAAM,EAAE,iDAAiD;IACzDC,IAAI,EAAE,2CAA2C;IACjDC,GAAG,EAAE,wCAAwC;IAC7CC,IAAI,EAAE,2CAA2C;IACjDC,IAAI,EAAE;EACR,CAAC;EACD,OAAOV,MAAM,CAAC/K,KAAK,CAAC,IAAI+K,MAAM,CAACU,IAAI;AACrC,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,CAC3B;EAAE1P,EAAE,EAAE,MAAM;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAc,CAAC,EACjD;EAAE3P,EAAE,EAAE,OAAO;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAe,CAAC,EACnD;EAAE3P,EAAE,EAAE,QAAQ;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAgB,CAAC,EACrD;EAAE3P,EAAE,EAAE,QAAQ;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAgB,CAAC,EACrD;EAAE3P,EAAE,EAAE,QAAQ;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAgB,CAAC,EACrD;EAAE3P,EAAE,EAAE,QAAQ;EAAEoD,IAAI,EAAE,IAAI;EAAEuM,KAAK,EAAE;AAAgB,CAAC,EACpD;EAAE3P,EAAE,EAAE,MAAM;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAc,CAAC,EACjD;EAAE3P,EAAE,EAAE,KAAK;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAa,CAAC,EAC/C;EAAE3P,EAAE,EAAE,MAAM;EAAEoD,IAAI,EAAE,KAAK;EAAEuM,KAAK,EAAE;AAAc,CAAC,EACjD;EAAE3P,EAAE,EAAE,MAAM;EAAEoD,IAAI,EAAE,IAAI;EAAEuM,KAAK,EAAE;AAAc,CAAC,CACjD;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,QAAQ,EAAE;EAAExS,QAAQ;EAAEyS,WAAW;EAAEC;AAAO,CAAC,KAAK;EAC7E,IAAIC,QAAQ,GAAG,CAAC,GAAGH,QAAQ,CAAC;;EAE5B;EACA,IAAIxS,QAAQ,IAAIA,QAAQ,KAAK,KAAK,EAAE;IAClC2S,QAAQ,GAAGA,QAAQ,CAAC7J,MAAM,CAAE8J,OAAO,IAAKA,OAAO,CAAC5S,QAAQ,KAAKA,QAAQ,CAAC;EACxE;;EAEA;EACA,IAAIyS,WAAW,IAAIA,WAAW,CAAC/E,IAAI,CAAC,CAAC,EAAE;IACrC,MAAMmF,KAAK,GAAGJ,WAAW,CAACjI,WAAW,CAAC,CAAC,CAACkD,IAAI,CAAC,CAAC;IAC9CiF,QAAQ,GAAGA,QAAQ,CAAC7J,MAAM,CACvB8J,OAAO,IACNA,OAAO,CAAC7M,IAAI,CAACyE,WAAW,CAAC,CAAC,CAACM,QAAQ,CAAC+H,KAAK,CAAC,IACzCD,OAAO,CAAC5P,WAAW,IAClB4P,OAAO,CAAC5P,WAAW,CAACwH,WAAW,CAAC,CAAC,CAACM,QAAQ,CAAC+H,KAAK,CAAE,IACnDD,OAAO,CAACE,IAAI,IACXF,OAAO,CAACE,IAAI,CAACrG,IAAI,CAAEsG,GAAG,IAAKA,GAAG,CAACvI,WAAW,CAAC,CAAC,CAACM,QAAQ,CAAC+H,KAAK,CAAC,CAClE,CAAC;EACH;;EAEA;EACA,QAAQH,MAAM;IACZ,KAAK,MAAM;MACTC,QAAQ,CAACzE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACpI,IAAI,CAACiN,aAAa,CAAC5E,CAAC,CAACrI,IAAI,CAAC,CAAC;MACrD;IACF,KAAK,SAAS;MACZ4M,QAAQ,CAACzE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAI3M,IAAI,CAAC2M,CAAC,CAAClG,SAAS,CAAC,GAAG,IAAIzG,IAAI,CAAC0M,CAAC,CAACjG,SAAS,CAAC,CAAC;MACtE;IACF,KAAK,SAAS;IACd;MACEyK,QAAQ,CAACzE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAI3M,IAAI,CAAC2M,CAAC,CAACzG,SAAS,CAAC,GAAG,IAAIlG,IAAI,CAAC0M,CAAC,CAACxG,SAAS,CAAC,CAAC;MACtE;EACJ;EAEA,OAAOgL,QAAQ;AACjB,CAAC;;AAED;AACA,OAAO,MAAMM,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG1W,KAAK,CAAC2W,QAAQ,CAACL,KAAK,CAAC;EAEjEtW,KAAK,CAAC4W,SAAS,CAAC,MAAM;IACpB,MAAMC,OAAO,GAAGxS,UAAU,CAAC,MAAM;MAC/BqS,iBAAiB,CAACJ,KAAK,CAAC;IAC1B,CAAC,EAAEC,KAAK,CAAC;IAET,OAAO,MAAM;MACXO,YAAY,CAACD,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACP,KAAK,EAAEC,KAAK,CAAC,CAAC;EAElB,OAAOE,cAAc;AACvB,CAAC;AAACD,EAAA,CAdWH,WAAW;AAgBxB,eAAe/V,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}