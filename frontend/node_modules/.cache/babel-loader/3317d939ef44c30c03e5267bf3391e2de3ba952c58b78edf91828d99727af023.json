{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export const useTheme=()=>{const context=useContext(ThemeContext);if(!context){throw new Error(\"useTheme must be used within a ThemeProvider\");}return context;};export const ThemeProvider=_ref=>{let{children}=_ref;// 시스템 테마 감지 함수\nconst getSystemTheme=()=>{return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;};// 초기 테마 설정 (깜빡임 방지)\nconst getInitialTheme=()=>{const saved=localStorage.getItem(\"theme\");if(saved===\"dark\")return true;if(saved===\"light\")return false;if(saved===\"system\")return getSystemTheme();return getSystemTheme();// 기본값: 시스템 설정 따름\n};const[isDarkMode,setIsDarkMode]=useState(getInitialTheme);const[themeMode,setThemeMode]=useState(()=>{const saved=localStorage.getItem(\"theme\");return saved||\"system\";});// 시스템 테마 변화 감지\nuseEffect(()=>{const mediaQuery=window.matchMedia(\"(prefers-color-scheme: dark)\");const handleSystemThemeChange=e=>{if(themeMode===\"system\"){setIsDarkMode(e.matches);}};mediaQuery.addEventListener(\"change\",handleSystemThemeChange);return()=>mediaQuery.removeEventListener(\"change\",handleSystemThemeChange);},[themeMode]);// DOM 클래스 업데이트\nuseEffect(()=>{const root=document.documentElement;const themeColorMeta=document.getElementById(\"theme-color\");// 깜빡임 방지를 위한 transition 비활성화\nroot.style.setProperty(\"--tw-transition-duration\",\"0ms\");if(isDarkMode){root.classList.add(\"dark\");// 다크모드 시 어두운 테마 색상\nif(themeColorMeta){themeColorMeta.setAttribute(\"content\",\"#111827\");}}else{root.classList.remove(\"dark\");// 라이트모드 시 밝은 테마 색상\nif(themeColorMeta){themeColorMeta.setAttribute(\"content\",\"#ffffff\");}}// transition 재활성화\nsetTimeout(()=>{root.style.removeProperty(\"--tw-transition-duration\");},0);// 테마 상태 저장\nlocalStorage.setItem(\"theme\",themeMode);localStorage.setItem(\"isDarkMode\",JSON.stringify(isDarkMode));},[isDarkMode,themeMode]);// 테마 토글 함수들\nconst toggleDarkMode=()=>{const newMode=isDarkMode?\"light\":\"dark\";setThemeMode(newMode);setIsDarkMode(!isDarkMode);};const setTheme=mode=>{setThemeMode(mode);switch(mode){case\"dark\":setIsDarkMode(true);break;case\"light\":setIsDarkMode(false);break;case\"system\":setIsDarkMode(getSystemTheme());break;default:setIsDarkMode(false);}};const value={isDarkMode,isDark:isDarkMode,// DarkModeToggle 호환성을 위한 별칭\ntheme:themeMode,themeMode,toggleDarkMode,toggleTheme:toggleDarkMode,// DarkModeToggle 호환성을 위한 별칭\nsetTheme,systemTheme:getSystemTheme()};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","ThemeContext","useTheme","context","Error","ThemeProvider","_ref","children","getSystemTheme","window","matchMedia","matches","getInitialTheme","saved","localStorage","getItem","isDarkMode","setIsDarkMode","themeMode","setThemeMode","mediaQuery","handleSystemThemeChange","e","addEventListener","removeEventListener","root","document","documentElement","themeColorMeta","getElementById","style","setProperty","classList","add","setAttribute","remove","setTimeout","removeProperty","setItem","JSON","stringify","toggleDarkMode","newMode","setTheme","mode","value","isDark","theme","toggleTheme","systemTheme","Provider"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n};\n\nexport const ThemeProvider = ({ children }) => {\n  // 시스템 테마 감지 함수\n  const getSystemTheme = () => {\n    return window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  };\n\n  // 초기 테마 설정 (깜빡임 방지)\n  const getInitialTheme = () => {\n    const saved = localStorage.getItem(\"theme\");\n    if (saved === \"dark\") return true;\n    if (saved === \"light\") return false;\n    if (saved === \"system\") return getSystemTheme();\n    return getSystemTheme(); // 기본값: 시스템 설정 따름\n  };\n\n  const [isDarkMode, setIsDarkMode] = useState(getInitialTheme);\n  const [themeMode, setThemeMode] = useState(() => {\n    const saved = localStorage.getItem(\"theme\");\n    return saved || \"system\";\n  });\n\n  // 시스템 테마 변화 감지\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    const handleSystemThemeChange = (e) => {\n      if (themeMode === \"system\") {\n        setIsDarkMode(e.matches);\n      }\n    };\n\n    mediaQuery.addEventListener(\"change\", handleSystemThemeChange);\n    return () =>\n      mediaQuery.removeEventListener(\"change\", handleSystemThemeChange);\n  }, [themeMode]);\n\n  // DOM 클래스 업데이트\n  useEffect(() => {\n    const root = document.documentElement;\n    const themeColorMeta = document.getElementById(\"theme-color\");\n\n    // 깜빡임 방지를 위한 transition 비활성화\n    root.style.setProperty(\"--tw-transition-duration\", \"0ms\");\n\n    if (isDarkMode) {\n      root.classList.add(\"dark\");\n      // 다크모드 시 어두운 테마 색상\n      if (themeColorMeta) {\n        themeColorMeta.setAttribute(\"content\", \"#111827\");\n      }\n    } else {\n      root.classList.remove(\"dark\");\n      // 라이트모드 시 밝은 테마 색상\n      if (themeColorMeta) {\n        themeColorMeta.setAttribute(\"content\", \"#ffffff\");\n      }\n    }\n\n    // transition 재활성화\n    setTimeout(() => {\n      root.style.removeProperty(\"--tw-transition-duration\");\n    }, 0);\n\n    // 테마 상태 저장\n    localStorage.setItem(\"theme\", themeMode);\n    localStorage.setItem(\"isDarkMode\", JSON.stringify(isDarkMode));\n  }, [isDarkMode, themeMode]);\n\n  // 테마 토글 함수들\n  const toggleDarkMode = () => {\n    const newMode = isDarkMode ? \"light\" : \"dark\";\n    setThemeMode(newMode);\n    setIsDarkMode(!isDarkMode);\n  };\n\n  const setTheme = (mode) => {\n    setThemeMode(mode);\n    switch (mode) {\n      case \"dark\":\n        setIsDarkMode(true);\n        break;\n      case \"light\":\n        setIsDarkMode(false);\n        break;\n      case \"system\":\n        setIsDarkMode(getSystemTheme());\n        break;\n      default:\n        setIsDarkMode(false);\n    }\n  };\n\n  const value = {\n    isDarkMode,\n    isDark: isDarkMode, // DarkModeToggle 호환성을 위한 별칭\n    theme: themeMode,\n    themeMode,\n    toggleDarkMode,\n    toggleTheme: toggleDarkMode, // DarkModeToggle 호환성을 위한 별칭\n    setTheme,\n    systemTheme: getSystemTheme(),\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}