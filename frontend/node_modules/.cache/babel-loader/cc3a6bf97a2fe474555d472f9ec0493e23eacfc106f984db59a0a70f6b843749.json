{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from\"react\";import{Amplify}from\"aws-amplify\";import{signUp,signIn,signOut,getCurrentUser,fetchAuthSession,confirmSignUp,resendSignUpCode,resetPassword,confirmResetPassword}from\"aws-amplify/auth\";import awsConfig from\"../aws-config\";// Amplify 설정\nimport{jsx as _jsx}from\"react/jsx-runtime\";Amplify.configure(awsConfig);const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(false);const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{checkAuthStatus();},[]);const checkAuthStatus=async()=>{try{var _session$tokens,_session$tokens$idTok,_session$tokens2,_session$tokens2$idTo,_session$tokens2$idTo2,_session$tokens3,_session$tokens3$idTo;setLoading(true);const currentUser=await getCurrentUser();const session=await fetchAuthSession();// 사용자 그룹 정보 가져오기\nconst groups=(session===null||session===void 0?void 0:(_session$tokens=session.tokens)===null||_session$tokens===void 0?void 0:(_session$tokens$idTok=_session$tokens.idToken)===null||_session$tokens$idTok===void 0?void 0:_session$tokens$idTok.payload[\"cognito:groups\"])||[];const userRole=groups.includes(\"admin\")?\"admin\":\"user\";// ID 토큰에서 이메일 정보 추출\nconst email=(session===null||session===void 0?void 0:(_session$tokens2=session.tokens)===null||_session$tokens2===void 0?void 0:(_session$tokens2$idTo=_session$tokens2.idToken)===null||_session$tokens2$idTo===void 0?void 0:(_session$tokens2$idTo2=_session$tokens2$idTo.payload)===null||_session$tokens2$idTo2===void 0?void 0:_session$tokens2$idTo2.email)||currentUser.username;const userName=email.includes(\"@\")?email.split(\"@\")[0]:email;console.log(\"사용자 인증 정보:\",{userId:currentUser.userId,username:currentUser.username,email:email,groups:groups,userRole:userRole,fullPayload:session===null||session===void 0?void 0:(_session$tokens3=session.tokens)===null||_session$tokens3===void 0?void 0:(_session$tokens3$idTo=_session$tokens3.idToken)===null||_session$tokens3$idTo===void 0?void 0:_session$tokens3$idTo.payload});setIsAuthenticated(true);setUser({id:currentUser.userId,email:email,name:userName,role:userRole,groups:groups});}catch(error){console.log(\"사용자가 인증되지 않음:\",error);setIsAuthenticated(false);setUser(null);}finally{setLoading(false);}};const login=async credentials=>{try{const{email,password}=credentials;console.log(\"로그인 시도:\",{email});const user=await signIn({username:email,password});console.log(\"signIn 결과:\",user);if(user.isSignedIn===false){var _user$nextStep,_user$nextStep2;if(((_user$nextStep=user.nextStep)===null||_user$nextStep===void 0?void 0:_user$nextStep.signInStep)===\"CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED\"){console.log(\"새 비밀번호 필요\");throw new Error(\"새 비밀번호가 필요합니다\");}else if(((_user$nextStep2=user.nextStep)===null||_user$nextStep2===void 0?void 0:_user$nextStep2.signInStep)===\"CONFIRM_SIGN_UP\"){console.log(\"이메일 인증 필요\");throw new Error(\"이메일 인증이 필요합니다\");}else{console.log(\"로그인 실패 - 알 수 없는 상태:\",user.nextStep);throw new Error(\"로그인에 실패했습니다\");}}console.log(\"인증 상태 확인 중...\");await checkAuthStatus();console.log(\"로그인 성공\");return{success:true,user};}catch(error){console.error(\"로그인 오류:\",error);let errorMessage=\"로그인에 실패했습니다.\";if(error.name===\"NotAuthorizedException\"){errorMessage=\"이메일 또는 비밀번호가 올바르지 않습니다.\";}else if(error.name===\"UserNotConfirmedException\"){errorMessage=\"이메일 인증이 필요합니다.\";}else if(error.name===\"UserNotFoundException\"){errorMessage=\"존재하지 않는 사용자입니다.\";}else if(error.message){errorMessage=error.message;}throw new Error(errorMessage);}};const signup=async userData=>{try{const{email,password,fullname}=userData;const result=await signUp({username:email,password:password,options:{userAttributes:{email:email,name:fullname||email.split(\"@\")[0]}}});return{success:true,message:\"회원가입이 완료되었습니다. 이메일로 전송된 인증 코드를 확인해주세요.\",userSub:result.userId};}catch(error){console.error(\"회원가입 오류:\",error);let errorMessage=\"회원가입에 실패했습니다.\";if(error.name===\"UsernameExistsException\"){errorMessage=\"이미 존재하는 이메일입니다.\";}else if(error.name===\"InvalidPasswordException\"){errorMessage=\"비밀번호가 정책에 맞지 않습니다. (최소 8자, 숫자 및 특수문자 포함)\";}else if(error.message){errorMessage=error.message;}throw new Error(errorMessage);}};const logout=async()=>{try{await signOut();setIsAuthenticated(false);setUser(null);}catch(error){console.error(\"로그아웃 오류:\",error);// 로그아웃은 항상 성공으로 처리\nsetIsAuthenticated(false);setUser(null);}};const verifyEmail=async verificationData=>{try{const{email,code}=verificationData;await confirmSignUp({username:email,confirmationCode:code});return{success:true,message:\"이메일 인증이 완료되었습니다. 로그인하세요.\"};}catch(error){console.error(\"이메일 인증 오류:\",error);let errorMessage=\"이메일 인증에 실패했습니다.\";if(error.name===\"CodeMismatchException\"){errorMessage=\"인증 코드가 올바르지 않습니다.\";}else if(error.name===\"ExpiredCodeException\"){errorMessage=\"인증 코드가 만료되었습니다.\";}else if(error.message){errorMessage=error.message;}throw new Error(errorMessage);}};const resendVerificationCode=async email=>{try{await resendSignUpCode({username:email});return{success:true,message:\"인증 코드가 다시 전송되었습니다.\"};}catch(error){console.error(\"인증 코드 재전송 오류:\",error);throw new Error(\"인증 코드 재전송에 실패했습니다.\");}};const forgotPassword=async email=>{try{await resetPassword({username:email});return{success:true,message:\"비밀번호 재설정 코드가 이메일로 전송되었습니다.\"};}catch(error){console.error(\"비밀번호 찾기 오류:\",error);throw new Error(\"비밀번호 찾기에 실패했습니다.\");}};const confirmPassword=async resetData=>{try{const{email,code,newPassword}=resetData;await confirmResetPassword({username:email,confirmationCode:code,newPassword:newPassword});return{success:true,message:\"비밀번호가 성공적으로 변경되었습니다.\"};}catch(error){console.error(\"비밀번호 재설정 오류:\",error);let errorMessage=\"비밀번호 재설정에 실패했습니다.\";if(error.name===\"CodeMismatchException\"){errorMessage=\"인증 코드가 올바르지 않습니다.\";}else if(error.name===\"ExpiredCodeException\"){errorMessage=\"인증 코드가 만료되었습니다.\";}else if(error.message){errorMessage=error.message;}throw new Error(errorMessage);}};// 토큰 갱신\nconst refreshToken=async()=>{try{const session=await fetchAuthSession();return session;}catch(error){console.error(\"토큰 갱신 오류:\",error);setIsAuthenticated(false);setUser(null);throw error;}};// API 요청용 인증 토큰 가져오기\nconst getAuthToken=async()=>{try{var _session$tokens4,_session$tokens4$idTo;const session=await fetchAuthSession();return session===null||session===void 0?void 0:(_session$tokens4=session.tokens)===null||_session$tokens4===void 0?void 0:(_session$tokens4$idTo=_session$tokens4.idToken)===null||_session$tokens4$idTo===void 0?void 0:_session$tokens4$idTo.toString();}catch(error){console.error(\"토큰 가져오기 오류:\",error);return null;}};const value={isAuthenticated,user,loading,login,signup,logout,verifyEmail,resendVerificationCode,forgotPassword,confirmResetPassword:confirmPassword,checkAuthStatus,refreshToken,getAuthToken};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Amplify","signUp","signIn","signOut","getCurrentUser","fetchAuthSession","confirmSignUp","resendSignUpCode","resetPassword","confirmResetPassword","awsConfig","jsx","_jsx","configure","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkAuthStatus","_session$tokens","_session$tokens$idTok","_session$tokens2","_session$tokens2$idTo","_session$tokens2$idTo2","_session$tokens3","_session$tokens3$idTo","currentUser","session","groups","tokens","idToken","payload","userRole","includes","email","username","userName","split","console","log","userId","fullPayload","id","name","role","error","login","credentials","password","isSignedIn","_user$nextStep","_user$nextStep2","nextStep","signInStep","success","errorMessage","message","signup","userData","fullname","result","options","userAttributes","userSub","logout","verifyEmail","verificationData","code","confirmationCode","resendVerificationCode","forgotPassword","confirmPassword","resetData","newPassword","refreshToken","getAuthToken","_session$tokens4","_session$tokens4$idTo","toString","value","Provider"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { Amplify } from \"aws-amplify\";\nimport {\n  signUp,\n  signIn,\n  signOut,\n  getCurrentUser,\n  fetchAuthSession,\n  confirmSignUp,\n  resendSignUpCode,\n  resetPassword,\n  confirmResetPassword,\n} from \"aws-amplify/auth\";\nimport awsConfig from \"../aws-config\";\n\n// Amplify 설정\nAmplify.configure(awsConfig);\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      setLoading(true);\n      const currentUser = await getCurrentUser();\n      const session = await fetchAuthSession();\n\n      // 사용자 그룹 정보 가져오기\n      const groups = session?.tokens?.idToken?.payload[\"cognito:groups\"] || [];\n      const userRole = groups.includes(\"admin\") ? \"admin\" : \"user\";\n\n      // ID 토큰에서 이메일 정보 추출\n      const email = session?.tokens?.idToken?.payload?.email || currentUser.username;\n      const userName = email.includes(\"@\") ? email.split(\"@\")[0] : email;\n\n      console.log(\"사용자 인증 정보:\", {\n        userId: currentUser.userId,\n        username: currentUser.username,\n        email: email,\n        groups: groups,\n        userRole: userRole,\n        fullPayload: session?.tokens?.idToken?.payload\n      });\n\n      setIsAuthenticated(true);\n      setUser({\n        id: currentUser.userId,\n        email: email,\n        name: userName,\n        role: userRole,\n        groups: groups,\n      });\n    } catch (error) {\n      console.log(\"사용자가 인증되지 않음:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      const { email, password } = credentials;\n      \n      console.log(\"로그인 시도:\", { email });\n\n      const user = await signIn({ username: email, password });\n      \n      console.log(\"signIn 결과:\", user);\n\n      if (user.isSignedIn === false) {\n        if (user.nextStep?.signInStep === \"CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED\") {\n          console.log(\"새 비밀번호 필요\");\n          throw new Error(\"새 비밀번호가 필요합니다\");\n        } else if (user.nextStep?.signInStep === \"CONFIRM_SIGN_UP\") {\n          console.log(\"이메일 인증 필요\");\n          throw new Error(\"이메일 인증이 필요합니다\");\n        } else {\n          console.log(\"로그인 실패 - 알 수 없는 상태:\", user.nextStep);\n          throw new Error(\"로그인에 실패했습니다\");\n        }\n      }\n\n      console.log(\"인증 상태 확인 중...\");\n      await checkAuthStatus();\n\n      console.log(\"로그인 성공\");\n      return { success: true, user };\n    } catch (error) {\n      console.error(\"로그인 오류:\", error);\n\n      let errorMessage = \"로그인에 실패했습니다.\";\n\n      if (error.name === \"NotAuthorizedException\") {\n        errorMessage = \"이메일 또는 비밀번호가 올바르지 않습니다.\";\n      } else if (error.name === \"UserNotConfirmedException\") {\n        errorMessage = \"이메일 인증이 필요합니다.\";\n      } else if (error.name === \"UserNotFoundException\") {\n        errorMessage = \"존재하지 않는 사용자입니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  const signup = async (userData) => {\n    try {\n      const { email, password, fullname } = userData;\n\n      const result = await signUp({\n        username: email,\n        password: password,\n        options: {\n          userAttributes: {\n            email: email,\n            name: fullname || email.split(\"@\")[0],\n          },\n        },\n      });\n\n      return {\n        success: true,\n        message:\n          \"회원가입이 완료되었습니다. 이메일로 전송된 인증 코드를 확인해주세요.\",\n        userSub: result.userId,\n      };\n    } catch (error) {\n      console.error(\"회원가입 오류:\", error);\n\n      let errorMessage = \"회원가입에 실패했습니다.\";\n\n      if (error.name === \"UsernameExistsException\") {\n        errorMessage = \"이미 존재하는 이메일입니다.\";\n      } else if (error.name === \"InvalidPasswordException\") {\n        errorMessage =\n          \"비밀번호가 정책에 맞지 않습니다. (최소 8자, 숫자 및 특수문자 포함)\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut();\n      setIsAuthenticated(false);\n      setUser(null);\n    } catch (error) {\n      console.error(\"로그아웃 오류:\", error);\n      // 로그아웃은 항상 성공으로 처리\n      setIsAuthenticated(false);\n      setUser(null);\n    }\n  };\n\n  const verifyEmail = async (verificationData) => {\n    try {\n      const { email, code } = verificationData;\n\n      await confirmSignUp({ username: email, confirmationCode: code });\n\n      return {\n        success: true,\n        message: \"이메일 인증이 완료되었습니다. 로그인하세요.\",\n      };\n    } catch (error) {\n      console.error(\"이메일 인증 오류:\", error);\n\n      let errorMessage = \"이메일 인증에 실패했습니다.\";\n\n      if (error.name === \"CodeMismatchException\") {\n        errorMessage = \"인증 코드가 올바르지 않습니다.\";\n      } else if (error.name === \"ExpiredCodeException\") {\n        errorMessage = \"인증 코드가 만료되었습니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  const resendVerificationCode = async (email) => {\n    try {\n      await resendSignUpCode({ username: email });\n      return {\n        success: true,\n        message: \"인증 코드가 다시 전송되었습니다.\",\n      };\n    } catch (error) {\n      console.error(\"인증 코드 재전송 오류:\", error);\n      throw new Error(\"인증 코드 재전송에 실패했습니다.\");\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    try {\n      await resetPassword({ username: email });\n      return {\n        success: true,\n        message: \"비밀번호 재설정 코드가 이메일로 전송되었습니다.\",\n      };\n    } catch (error) {\n      console.error(\"비밀번호 찾기 오류:\", error);\n      throw new Error(\"비밀번호 찾기에 실패했습니다.\");\n    }\n  };\n\n  const confirmPassword = async (resetData) => {\n    try {\n      const { email, code, newPassword } = resetData;\n\n      await confirmResetPassword({ \n        username: email, \n        confirmationCode: code, \n        newPassword: newPassword \n      });\n\n      return {\n        success: true,\n        message: \"비밀번호가 성공적으로 변경되었습니다.\",\n      };\n    } catch (error) {\n      console.error(\"비밀번호 재설정 오류:\", error);\n\n      let errorMessage = \"비밀번호 재설정에 실패했습니다.\";\n\n      if (error.name === \"CodeMismatchException\") {\n        errorMessage = \"인증 코드가 올바르지 않습니다.\";\n      } else if (error.name === \"ExpiredCodeException\") {\n        errorMessage = \"인증 코드가 만료되었습니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 토큰 갱신\n  const refreshToken = async () => {\n    try {\n      const session = await fetchAuthSession();\n      return session;\n    } catch (error) {\n      console.error(\"토큰 갱신 오류:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n      throw error;\n    }\n  };\n\n  // API 요청용 인증 토큰 가져오기\n  const getAuthToken = async () => {\n    try {\n      const session = await fetchAuthSession();\n      return session?.tokens?.idToken?.toString();\n    } catch (error) {\n      console.error(\"토큰 가져오기 오류:\", error);\n      return null;\n    }\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    signup,\n    logout,\n    verifyEmail,\n    resendVerificationCode,\n    forgotPassword,\n    confirmResetPassword: confirmPassword,\n    checkAuthStatus,\n    refreshToken,\n    getAuthToken,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}