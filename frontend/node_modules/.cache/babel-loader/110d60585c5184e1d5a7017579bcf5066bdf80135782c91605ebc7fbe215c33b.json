{"ast":null,"code":"import axios from\"axios\";// API 기본 설정\nconst API_BASE_URL=process.env.REACT_APP_API_URL||\"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";// Axios 인스턴스\nconst api=axios.create({baseURL:API_BASE_URL,headers:{\"Content-Type\":\"application/json\"},timeout:300000// 5분\n});// 요청 인터셉터\napi.interceptors.request.use(config=>{var _config$method;console.log(\"API 요청:\",(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);return config;});// 응답 인터셉터\napi.interceptors.response.use(response=>{console.log(\"API 응답:\",response.status,response.config.url);return response;},error=>{var _error$response,_error$config,_error$response2;console.error(\"API 오류 상세:\",{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,message:error.message,code:error.code,url:(_error$config=error.config)===null||_error$config===void 0?void 0:_error$config.url,data:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data});return Promise.reject(error);});// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\nexport const projectAPI={getProjects:async()=>{const response=await api.get(\"/projects\");return response.data;},getProject:async projectId=>{const response=await api.get(`/projects/${projectId}`);return response.data;},createProject:async projectData=>{const response=await api.post(\"/projects\",projectData);return response.data;},updateProject:async(projectId,projectData)=>{const response=await api.put(`/projects/${projectId}`,projectData);return response.data;},deleteProject:async projectId=>{const response=await api.delete(`/projects/${projectId}`);return response.data;},getUploadUrl:async(projectId,fileName)=>{const response=await api.get(`/projects/${projectId}/upload-url`,{params:{fileName}});return response.data;}};// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\nexport const promptCardAPI={getPromptCards:async function(projectId){let includeContent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let includeStats=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const response=await api.get(`/prompts/${projectId}`,{params:{includeContent,includeStats}});return response.data;},createPromptCard:async(projectId,promptData)=>{const response=await api.post(`/prompts/${projectId}`,promptData);return response.data;},updatePromptCard:async(projectId,promptId,promptData)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,promptData);return response.data;},getPromptContent:async(projectId,promptId)=>{const response=await api.get(`/prompts/${projectId}/${promptId}/content`);return response.data;},deletePromptCard:async(projectId,promptId)=>{const response=await api.delete(`/prompts/${projectId}/${promptId}`);return response.data;},reorderPromptCards:async(projectId,reorderData)=>{const updatePromises=reorderData.map(_ref=>{let{promptId,stepOrder}=_ref;return api.put(`/prompts/${projectId}/${promptId}`,{stepOrder});});const responses=await Promise.all(updatePromises);return{message:\"프롬프트 카드 순서가 업데이트되었습니다.\",updatedCards:responses.map(r=>r.data)};}};// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\nexport const generateAPI={generateTitle:async(projectId,data)=>{var _data$chat_history;console.log(\"대화 생성 요청 시작:\",{projectId,inputLength:data.userInput.length,historyLength:((_data$chat_history=data.chat_history)===null||_data$chat_history===void 0?void 0:_data$chat_history.length)||0,timestamp:new Date().toISOString()});try{const response=await api.post(`/projects/${projectId}/generate`,data);console.log(\"대화 생성 성공:\",{status:response.status,mode:response.data.mode,message:response.data.message,timestamp:new Date().toISOString()});return response.data;}catch(error){var _error$response3,_error$response4;console.error(\"대화 생성 실패:\",{code:error.code,message:error.message,status:(_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status,responseData:(_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data,timestamp:new Date().toISOString()});throw error;}},// 🔧 완전 새로운 스트리밍 구현 - POST 기반\ngenerateTitleStream:async(projectId,data,onChunk,onError,onComplete)=>{var _data$chat_history2;console.log(\"스트리밍 대화 생성 요청 시작:\",{projectId,inputLength:data.userInput.length,historyLength:((_data$chat_history2=data.chat_history)===null||_data$chat_history2===void 0?void 0:_data$chat_history2.length)||0,timestamp:new Date().toISOString()});// 🔧 단계 1: 즉시 일반 API로 폴백 (스트리밍 기능 비활성화)\nconsole.log(\"🔧 현재 CORS 문제로 인해 일반 API로 처리합니다...\");try{const fallbackResponse=await api.post(`/projects/${projectId}/generate`,data);console.log(\"✅ 일반 API 성공:\",{mode:fallbackResponse.data.mode,timestamp:new Date().toISOString()});// 🔧 일반 응답을 스트리밍처럼 시뮬레이션\nif(fallbackResponse.data.result&&onChunk){const fullText=fallbackResponse.data.result;const words=fullText.split(\" \");// 빠른 워드 단위 시뮬레이션\nfor(let i=0;i<words.length;i++){const word=words[i]+(i<words.length-1?\" \":\"\");onChunk(word,{content:word});// 매우 짧은 지연 (실시간 느낌)\nawait new Promise(resolve=>setTimeout(resolve,30));}}// 완료 콜백 호출\nif(onComplete){onComplete({result:fallbackResponse.data.result,model_info:fallbackResponse.data.model_info,performance_metrics:fallbackResponse.data.performance_metrics,timestamp:new Date().toISOString()});}return fallbackResponse.data;}catch(error){console.error(\"❌ 일반 API도 실패:\",error);if(onError){onError(new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\"));}throw new Error(\"서비스를 사용할 수 없습니다.\");}},getExecutionStatus:async executionArn=>{return{status:\"SUCCEEDED\",output:\"{}\"};}};// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\nexport const chatAPI={sendMessage:async function(projectId,message,sessionId){let userId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:\"default\";console.log(\"채팅 메시지를 generate API로 전달:\",{projectId,message,sessionId,userId});try{const response=await generateAPI.generateTitle(projectId,{userInput:message,userRequest:\"\",chat_history:[]});return{response:response.result,sessionId,userId,timestamp:new Date().toISOString(),mode:response.mode||\"chat\"};}catch(error){console.error(\"채팅 메시지 처리 실패:\",error);throw error;}},getChatHistory:async function(projectId,sessionId){let userId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"default\";console.log(\"채팅 히스토리 조회:\",{projectId,sessionId,userId});return{messages:[],sessionId,userId,message:\"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"};},getChatSessions:async function(projectId){let userId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"default\";console.log(\"채팅 세션 목록 조회:\",{projectId,userId});return{sessions:[],message:\"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"};},deleteChatSession:async function(projectId,sessionId){let userId=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"default\";console.log(\"채팅 세션 삭제:\",{projectId,sessionId,userId});return{message:\"채팅 세션 삭제가 완료되었습니다.\",sessionId,userId};}};// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\nexport const authAPI={isAuthenticated:()=>{return true;},getCurrentUser:()=>{return{id:\"user\",email:\"user@example.com\",name:\"사용자\"};},signin:async credentials=>{const response=await api.post(\"/auth/signin\",credentials);return response.data;},signup:async userData=>{const response=await api.post(\"/auth/signup\",userData);return response.data;},signout:async()=>{const response=await api.post(\"/auth/signout\");return response.data;},verifyEmail:async verificationData=>{const response=await api.post(\"/auth/verify-email\",verificationData);return response.data;},forgotPassword:async email=>{const response=await api.post(\"/auth/forgot-password\",{email});return response.data;},confirmPassword:async resetData=>{const response=await api.post(\"/auth/confirm-password\",resetData);return response.data;}};// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\nexport const handleAPIError=error=>{var _error$response5,_error$response6,_error$response7,_error$response8,_error$response9,_error$message,_error$message2;console.error(\"API 오류 상세 분석:\",{message:error.message,code:error.code,status:(_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status,statusText:(_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.statusText,data:(_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data,timestamp:new Date().toISOString()});// 403 Forbidden 특별 처리\nif(((_error$response8=error.response)===null||_error$response8===void 0?void 0:_error$response8.status)===403){return{message:\"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",statusCode:403,errorType:\"FORBIDDEN\"};}// Gateway Timeout 특별 처리\nif(((_error$response9=error.response)===null||_error$response9===void 0?void 0:_error$response9.status)===504){return{message:\"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",statusCode:504,errorType:\"GATEWAY_TIMEOUT\"};}// CORS 오류 특별 처리\nif((_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes(\"CORS\")||error.code===\"ERR_NETWORK\"||(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes(\"Access-Control-Allow-Origin\")){return{message:\"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",statusCode:0,errorType:\"CORS_ERROR\"};}// 타임아웃 오류 특별 처리\nif(error.code===\"ECONNABORTED\"){return{message:\"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",statusCode:0,errorType:\"TIMEOUT_ERROR\"};}if(error.response){var _error$response$data,_error$response$data2;const status=error.response.status;const message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.error)||\"서버 오류가 발생했습니다\";switch(status){case 400:return{message:`잘못된 요청: ${message}`,statusCode:400};case 401:return{message:\"인증이 필요합니다\",statusCode:401};case 404:return{message:\"요청한 리소스를 찾을 수 없습니다\",statusCode:404};case 429:return{message:\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",statusCode:429};case 500:return{message:\"서버 내부 오류가 발생했습니다\",statusCode:500};default:return{message:`서버 오류 (${status}): ${message}`,statusCode:status};}}else if(error.request){return{message:\"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",statusCode:0,errorType:\"NETWORK_ERROR\"};}else{return{message:`요청 오류: ${error.message}`,statusCode:-1,errorType:\"REQUEST_ERROR\"};}};// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\nexport const DYNAMIC_PROMPT_SYSTEM={message:\"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",maxPromptCards:50,supportedFormats:[\"text\",\"markdown\"],defaultStepOrder:1};export const COLOR_OPTIONS=[{id:\"blue\",name:\"파랑\",bgClass:\"bg-blue-100\",textClass:\"text-blue-800\",borderClass:\"border-blue-200\"},{id:\"green\",name:\"초록\",bgClass:\"bg-green-100\",textClass:\"text-green-800\",borderClass:\"border-green-200\"},{id:\"purple\",name:\"보라\",bgClass:\"bg-purple-100\",textClass:\"text-purple-800\",borderClass:\"border-purple-200\"},{id:\"orange\",name:\"주황\",bgClass:\"bg-orange-100\",textClass:\"text-orange-800\",borderClass:\"border-orange-200\"},{id:\"red\",name:\"빨강\",bgClass:\"bg-red-100\",textClass:\"text-red-800\",borderClass:\"border-red-200\"},{id:\"indigo\",name:\"남색\",bgClass:\"bg-indigo-100\",textClass:\"text-indigo-800\",borderClass:\"border-indigo-200\"},{id:\"pink\",name:\"분홍\",bgClass:\"bg-pink-100\",textClass:\"text-pink-800\",borderClass:\"border-pink-200\"},{id:\"yellow\",name:\"노랑\",bgClass:\"bg-yellow-100\",textClass:\"text-yellow-800\",borderClass:\"border-yellow-200\"},{id:\"gray\",name:\"회색\",bgClass:\"bg-gray-100\",textClass:\"text-gray-800\",borderClass:\"border-gray-200\"}];export const getPromptCardInfo=promptCard=>{return{id:promptCard.promptId||promptCard.id,title:promptCard.title||\"새 프롬프트 카드\",color:promptCard.color||\"gray\",description:promptCard.description||\"\",stepOrder:promptCard.stepOrder||1,isActive:promptCard.isActive!==false};};export const filterProjects=(projects,filters)=>{let filtered=[...projects];if(filters.searchQuery){const query=filters.searchQuery.toLowerCase();filtered=filtered.filter(project=>{var _project$name,_project$description,_project$tags;return((_project$name=project.name)===null||_project$name===void 0?void 0:_project$name.toLowerCase().includes(query))||((_project$description=project.description)===null||_project$description===void 0?void 0:_project$description.toLowerCase().includes(query))||((_project$tags=project.tags)===null||_project$tags===void 0?void 0:_project$tags.some(tag=>tag.toLowerCase().includes(query)));});}switch(filters.sortBy){case\"created\":filtered.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));break;case\"updated\":filtered.sort((a,b)=>new Date(b.updatedAt)-new Date(a.updatedAt));break;case\"name\":filtered.sort((a,b)=>{var _a$name;return(_a$name=a.name)===null||_a$name===void 0?void 0:_a$name.localeCompare(b.name);});break;default:break;}return filtered;};export const formatTokenCount=count=>{if(count>=1000){return`${(count/1000).toFixed(1)}K`;}return count.toString();};export const formatFileSize=bytes=>{if(bytes>=1024){return`${(bytes/1024).toFixed(1)}KB`;}return`${bytes}B`;};export const calculatePromptStats=promptCards=>{if(!promptCards||promptCards.length===0){return{totalCards:0,totalTokens:0,averageTokens:0,activeCards:0,maxStepOrder:0,hasCustomOrder:false};}const activeCards=promptCards.filter(card=>card.isActive!==false);const totalTokens=activeCards.reduce((sum,card)=>{return sum+(card.tokenCount||card.contentLength||0);},0);const stepOrders=activeCards.map(card=>card.stepOrder||0).filter(step=>step>0);const hasCustomOrder=stepOrders.length>0;const maxStepOrder=stepOrders.length>0?Math.max(...stepOrders):0;return{totalCards:promptCards.length,activeCards:activeCards.length,totalTokens,averageTokens:activeCards.length>0?Math.round(totalTokens/activeCards.length):0,maxStepOrder,hasCustomOrder,stepOrderRange:{min:stepOrders.length>0?Math.min(...stepOrders):0,max:maxStepOrder}};};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","_error$config","_error$response2","message","code","data","Promise","reject","projectAPI","getProjects","get","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","arguments","length","undefined","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","map","_ref","stepOrder","responses","all","updatedCards","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","historyLength","chat_history","timestamp","Date","toISOString","mode","_error$response3","_error$response4","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","fallbackResponse","result","fullText","words","split","i","word","content","resolve","setTimeout","model_info","performance_metrics","Error","getExecutionStatus","executionArn","output","chatAPI","sendMessage","sessionId","userId","userRequest","getChatHistory","messages","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","handleAPIError","_error$response5","_error$response6","_error$response7","_error$response8","_error$response9","_error$message","_error$message2","statusText","statusCode","errorType","includes","_error$response$data","_error$response$data2","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","promptCard","title","color","description","isActive","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","toString","formatFileSize","bytes","calculatePromptStats","promptCards","totalCards","totalTokens","averageTokens","activeCards","maxStepOrder","hasCustomOrder","card","reduce","sum","tokenCount","contentLength","stepOrders","step","Math","max","round","stepOrderRange","min"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 완전 새로운 스트리밍 구현 - POST 기반\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    // 🔧 단계 1: 즉시 일반 API로 폴백 (스트리밍 기능 비활성화)\n    console.log(\"🔧 현재 CORS 문제로 인해 일반 API로 처리합니다...\");\n\n    try {\n      const fallbackResponse = await api.post(\n        `/projects/${projectId}/generate`,\n        data\n      );\n\n      console.log(\"✅ 일반 API 성공:\", {\n        mode: fallbackResponse.data.mode,\n        timestamp: new Date().toISOString(),\n      });\n\n      // 🔧 일반 응답을 스트리밍처럼 시뮬레이션\n      if (fallbackResponse.data.result && onChunk) {\n        const fullText = fallbackResponse.data.result;\n        const words = fullText.split(\" \");\n\n        // 빠른 워드 단위 시뮬레이션\n        for (let i = 0; i < words.length; i++) {\n          const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n          onChunk(word, { content: word });\n\n          // 매우 짧은 지연 (실시간 느낌)\n          await new Promise((resolve) => setTimeout(resolve, 30));\n        }\n      }\n\n      // 완료 콜백 호출\n      if (onComplete) {\n        onComplete({\n          result: fallbackResponse.data.result,\n          model_info: fallbackResponse.data.model_info,\n          performance_metrics: fallbackResponse.data.performance_metrics,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      return fallbackResponse.data;\n    } catch (error) {\n      console.error(\"❌ 일반 API도 실패:\", error);\n      if (onError) {\n        onError(\n          new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n        );\n      }\n      throw new Error(\"서비스를 사용할 수 없습니다.\");\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}