{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { conversationAPI, mockMessages } from '../services/api';\n\n/**\n * 특정 대화의 메시지 관리를 위한 커스텀 훅\n * 페이지네이션과 실시간 메시지 추가 지원\n */\nexport const useMessages = conversationId => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 메시지 로드\n  const loadMessages = useCallback(async (reset = false) => {\n    if (!conversationId || loading) {\n      console.log('useMessages - 메시지 로드 중단:', {\n        conversationId,\n        loading\n      });\n      return;\n    }\n    console.log('useMessages - 메시지 로드 시작:', {\n      conversationId,\n      reset,\n      cursor: reset ? null : nextCursor,\n      currentMessagesCount: messages.length\n    });\n    setLoading(true);\n    setError(null);\n    try {\n      var _response$messages;\n      const cursor = reset ? null : nextCursor;\n      const response = await conversationAPI.getMessages(conversationId, cursor);\n      console.log('useMessages - API 응답:', {\n        conversationId,\n        messagesReceived: ((_response$messages = response.messages) === null || _response$messages === void 0 ? void 0 : _response$messages.length) || 0,\n        hasMore: response.hasMore,\n        nextCursor: response.nextCursor,\n        reset\n      });\n      if (reset) {\n        setMessages(response.messages);\n      } else {\n        // 이전 메시지들을 앞에 추가 (페이지네이션)\n        setMessages(prev => [...response.messages, ...prev]);\n      }\n      setHasMore(response.hasMore);\n      setNextCursor(response.nextCursor);\n    } catch (err) {\n      console.error('메시지 로드 실패:', err);\n      console.error('실패한 conversationId:', conversationId);\n      setError('메시지를 불러오는데 실패했습니다.');\n\n      // API 실패시 mock 데이터로 fallback\n      const conversationMessages = mockMessages[conversationId] || [];\n      console.log('useMessages - Mock 데이터 사용:', {\n        conversationId,\n        mockMessagesCount: conversationMessages.length\n      });\n      if (reset) {\n        setMessages(conversationMessages);\n        setHasMore(false);\n        setNextCursor(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId, loading, nextCursor, messages.length]);\n\n  // 새 메시지 추가 (실시간)\n  const addMessage = useCallback(message => {\n    const newMessage = {\n      id: message.timestamp || new Date().toISOString(),\n      role: message.role,\n      content: message.content,\n      tokenCount: message.tokenCount || 0,\n      timestamp: message.timestamp || new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    return newMessage;\n  }, []);\n\n  // 메시지 업데이트 (스트리밍 중 내용 업데이트)\n  const updateMessage = useCallback((messageId, updates) => {\n    setMessages(prev => prev.map(msg => msg.id === messageId ? {\n      ...msg,\n      ...updates\n    } : msg));\n  }, []);\n\n  // 메시지 삭제\n  const removeMessage = useCallback(messageId => {\n    setMessages(prev => prev.filter(msg => msg.id !== messageId));\n  }, []);\n\n  // 이전 메시지 로드 (스크롤 최상단에서)\n  const loadPreviousMessages = useCallback(() => {\n    if (hasMore && !loading) {\n      return loadMessages(false);\n    }\n    return Promise.resolve();\n  }, [hasMore, loading, loadMessages]);\n\n  // 메시지 초기화 (새 대화 시작시)\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setHasMore(true);\n    setNextCursor(null);\n    setError(null);\n  }, []);\n\n  // conversationId 변경시 메시지 로드\n  useEffect(() => {\n    console.log('useMessages - conversationId 변경 감지:', {\n      conversationId,\n      previousConversationId: conversationId\n    });\n    if (conversationId) {\n      console.log('useMessages - 메시지 클리어 및 로드 시작:', conversationId);\n      clearMessages();\n      loadMessages(true);\n    } else {\n      console.log('useMessages - conversationId가 null/undefined, 메시지 클리어');\n      clearMessages();\n    }\n  }, [conversationId]);\n  return {\n    messages,\n    loading,\n    error,\n    hasMore,\n    addMessage,\n    updateMessage,\n    removeMessage,\n    loadPreviousMessages,\n    clearMessages,\n    refresh: () => loadMessages(true)\n  };\n};\n_s(useMessages, \"zrRYwIEHrdmdgHrlSh8KhJG7Gr4=\");","map":{"version":3,"names":["useState","useEffect","useCallback","conversationAPI","mockMessages","useMessages","conversationId","_s","messages","setMessages","loading","setLoading","error","setError","hasMore","setHasMore","nextCursor","setNextCursor","loadMessages","reset","console","log","cursor","currentMessagesCount","length","_response$messages","response","getMessages","messagesReceived","prev","err","conversationMessages","mockMessagesCount","addMessage","message","newMessage","id","timestamp","Date","toISOString","role","content","tokenCount","updateMessage","messageId","updates","map","msg","removeMessage","filter","loadPreviousMessages","Promise","resolve","clearMessages","previousConversationId","refresh"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useMessages.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { conversationAPI, mockMessages } from '../services/api';\n\n/**\n * 특정 대화의 메시지 관리를 위한 커스텀 훅\n * 페이지네이션과 실시간 메시지 추가 지원\n */\nexport const useMessages = (conversationId) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 메시지 로드\n  const loadMessages = useCallback(async (reset = false) => {\n    if (!conversationId || loading) {\n      console.log('useMessages - 메시지 로드 중단:', { conversationId, loading });\n      return;\n    }\n    \n    console.log('useMessages - 메시지 로드 시작:', { \n      conversationId, \n      reset, \n      cursor: reset ? null : nextCursor,\n      currentMessagesCount: messages.length\n    });\n    \n    setLoading(true);\n    setError(null);\n\n    try {\n      const cursor = reset ? null : nextCursor;\n      const response = await conversationAPI.getMessages(conversationId, cursor);\n      \n      console.log('useMessages - API 응답:', {\n        conversationId,\n        messagesReceived: response.messages?.length || 0,\n        hasMore: response.hasMore,\n        nextCursor: response.nextCursor,\n        reset\n      });\n      \n      if (reset) {\n        setMessages(response.messages);\n      } else {\n        // 이전 메시지들을 앞에 추가 (페이지네이션)\n        setMessages(prev => [...response.messages, ...prev]);\n      }\n      \n      setHasMore(response.hasMore);\n      setNextCursor(response.nextCursor);\n      \n    } catch (err) {\n      console.error('메시지 로드 실패:', err);\n      console.error('실패한 conversationId:', conversationId);\n      setError('메시지를 불러오는데 실패했습니다.');\n      \n      // API 실패시 mock 데이터로 fallback\n      const conversationMessages = mockMessages[conversationId] || [];\n      console.log('useMessages - Mock 데이터 사용:', {\n        conversationId,\n        mockMessagesCount: conversationMessages.length\n      });\n      \n      if (reset) {\n        setMessages(conversationMessages);\n        setHasMore(false);\n        setNextCursor(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [conversationId, loading, nextCursor, messages.length]);\n\n  // 새 메시지 추가 (실시간)\n  const addMessage = useCallback((message) => {\n    const newMessage = {\n      id: message.timestamp || new Date().toISOString(),\n      role: message.role,\n      content: message.content,\n      tokenCount: message.tokenCount || 0,\n      timestamp: message.timestamp || new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    return newMessage;\n  }, []);\n\n  // 메시지 업데이트 (스트리밍 중 내용 업데이트)\n  const updateMessage = useCallback((messageId, updates) => {\n    setMessages(prev =>\n      prev.map(msg =>\n        msg.id === messageId ? { ...msg, ...updates } : msg\n      )\n    );\n  }, []);\n\n  // 메시지 삭제\n  const removeMessage = useCallback((messageId) => {\n    setMessages(prev => prev.filter(msg => msg.id !== messageId));\n  }, []);\n\n  // 이전 메시지 로드 (스크롤 최상단에서)\n  const loadPreviousMessages = useCallback(() => {\n    if (hasMore && !loading) {\n      return loadMessages(false);\n    }\n    return Promise.resolve();\n  }, [hasMore, loading, loadMessages]);\n\n  // 메시지 초기화 (새 대화 시작시)\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setHasMore(true);\n    setNextCursor(null);\n    setError(null);\n  }, []);\n\n  // conversationId 변경시 메시지 로드\n  useEffect(() => {\n    console.log('useMessages - conversationId 변경 감지:', {\n      conversationId,\n      previousConversationId: conversationId\n    });\n    \n    if (conversationId) {\n      console.log('useMessages - 메시지 클리어 및 로드 시작:', conversationId);\n      clearMessages();\n      loadMessages(true);\n    } else {\n      console.log('useMessages - conversationId가 null/undefined, 메시지 클리어');\n      clearMessages();\n    }\n  }, [conversationId]);\n\n  return {\n    messages,\n    loading,\n    error,\n    hasMore,\n    addMessage,\n    updateMessage,\n    removeMessage,\n    loadPreviousMessages,\n    clearMessages,\n    refresh: () => loadMessages(true)\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}