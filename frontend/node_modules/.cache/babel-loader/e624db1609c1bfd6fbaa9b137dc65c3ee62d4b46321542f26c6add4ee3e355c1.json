{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = result => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  // 핵심 수정: useRef를 사용하여 ID 관리\n  const streamingMessageIdRef = useRef(null);\n  const [connectionError, setConnectionError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const [streamingMetrics, setStreamingMetrics] = useState({\n    startTime: null,\n    firstChunkTime: null,\n    lastChunkTime: null,\n    totalChunks: 0,\n    avgChunkSize: 0\n  });\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]);\n    setConnectionError(null);\n    setRetryCount(0);\n    streamingMessageIdRef.current = null; // ref 초기화\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  /**\n   * 개선: 스트리밍 응답 처리 함수 - ref 사용\n   */\n  const handleStreamingResponse = useCallback((chunk, metadata) => {\n    const currentStreamingId = streamingMessageIdRef.current;\n    console.log(\"청크 수신:\", chunk, \"메타데이터:\", metadata);\n    console.log(\"현재 스트리밍 ID:\", currentStreamingId);\n    if (!currentStreamingId) {\n      console.error(\"스트리밍 ID가 null입니다!\");\n      return;\n    }\n\n    // 스트리밍 메트릭 업데이트\n    setStreamingMetrics(prev => {\n      const now = Date.now();\n      const isFirstChunk = prev.totalChunks === 0;\n      const newTotalChunks = prev.totalChunks + 1;\n      const chunkSize = chunk.length;\n      const newAvgChunkSize = (prev.avgChunkSize * prev.totalChunks + chunkSize) / newTotalChunks;\n      return {\n        ...prev,\n        firstChunkTime: isFirstChunk ? now : prev.firstChunkTime,\n        lastChunkTime: now,\n        totalChunks: newTotalChunks,\n        avgChunkSize: newAvgChunkSize\n      };\n    });\n\n    // 연결 오류 해결\n    if (connectionError) {\n      setConnectionError(null);\n      setRetryCount(0);\n    }\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n      console.log(\"스트리밍 메시지 찾기:\", {\n        streamingMessageId: currentStreamingId,\n        foundIndex: streamingMsgIndex,\n        totalMessages: updatedMessages.length,\n        availableIds: updatedMessages.map(msg => msg.id)\n      });\n      if (streamingMsgIndex !== -1) {\n        // 기존 스트리밍 메시지 업데이트\n        console.log(\"스트리밍 메시지 업데이트 성공\");\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: updatedMessages[streamingMsgIndex].content + chunk,\n          isLoading: true,\n          isStreaming: true\n        };\n      } else {\n        console.log(\"스트리밍 메시지를 찾을 수 없음!\", {\n          streamingMessageId: currentStreamingId,\n          availableIds: updatedMessages.map(msg => msg.id)\n        });\n\n        // 새로운 해결책: 마지막 로딩 중인 메시지 찾기\n        const lastLoadingIndex = updatedMessages.findIndex(msg => msg.isLoading === true && msg.isStreaming === true);\n        if (lastLoadingIndex !== -1) {\n          console.log(\"마지막 로딩 메시지 업데이트:\", lastLoadingIndex);\n          updatedMessages[lastLoadingIndex] = {\n            ...updatedMessages[lastLoadingIndex],\n            content: updatedMessages[lastLoadingIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true\n          };\n        }\n      }\n      return updatedMessages;\n    });\n\n    // 스크롤 조정\n    scrollToBottom();\n  }, [connectionError, scrollToBottom]);\n\n  /**\n   * 개선: 스트리밍 완료 처리 함수 - ref 사용\n   */\n  const handleStreamingComplete = useCallback(result => {\n    var _result$result;\n    const currentStreamingId = streamingMessageIdRef.current;\n    console.log(\"스트리밍 완료 처리:\", {\n      streamingMessageId: currentStreamingId,\n      resultLength: ((_result$result = result.result) === null || _result$result === void 0 ? void 0 : _result$result.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n\n    // 연결 오류 해결\n    if (connectionError) {\n      setConnectionError(null);\n      setRetryCount(0);\n    }\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      let streamingMsgIndex = -1;\n\n      // 1차: ID로 찾기\n      if (currentStreamingId) {\n        streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n      }\n\n      // 2차: 로딩 중인 메시지 찾기\n      if (streamingMsgIndex === -1) {\n        streamingMsgIndex = updatedMessages.findIndex(msg => msg.isLoading === true && msg.isStreaming === true);\n      }\n      console.log(\"완료 처리 - 메시지 찾기:\", {\n        streamingMessageId: currentStreamingId,\n        foundIndex: streamingMsgIndex,\n        totalMessages: updatedMessages.length\n      });\n      if (streamingMsgIndex !== -1) {\n        console.log(\"완료 처리 - 스트리밍 메시지 업데이트 성공\");\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: result.result,\n          isLoading: false,\n          isStreaming: false,\n          performance_metrics: result.performance_metrics,\n          model_info: result.model_info,\n          timestamp: new Date()\n        };\n      } else {\n        console.log(\"완료 처리 - 스트리밍 메시지를 찾을 수 없음!\");\n        // 새 메시지로 추가\n        updatedMessages.push({\n          id: \"response-\" + Date.now(),\n          type: \"assistant\",\n          content: result.result,\n          timestamp: new Date(),\n          performance_metrics: result.performance_metrics,\n          model_info: result.model_info\n        });\n      }\n      return updatedMessages;\n    });\n\n    // 스트리밍 ID 초기화\n    streamingMessageIdRef.current = null;\n\n    // 스크롤 조정\n    scrollToBottom();\n  }, [connectionError, scrollToBottom]);\n\n  /**\n   * 개선: 스트리밍 오류 처리 함수\n   */\n  const handleStreamingError = useCallback(error => {\n    var _error$message, _error$message2;\n    const currentStreamingId = streamingMessageIdRef.current;\n    console.error(\"스트리밍 오류 처리:\", error);\n\n    // 연결 오류 상태 업데이트\n    if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"CORS\") || error.code === \"ERR_NETWORK\" || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"Access-Control-Allow-Origin\")) {\n      setConnectionError({\n        type: \"CORS\",\n        message: \"CORS 정책 오류가 발생했습니다. 서버 설정을 확인해주세요.\",\n        timestamp: new Date()\n      });\n    } else if (error.code === \"ECONNABORTED\") {\n      setConnectionError({\n        type: \"TIMEOUT\",\n        message: \"요청 시간이 초과되었습니다.\",\n        timestamp: new Date()\n      });\n    } else {\n      setConnectionError({\n        type: \"GENERAL\",\n        message: \"서버 연결 오류가 발생했습니다.\",\n        timestamp: new Date()\n      });\n    }\n\n    // 재시도 횟수 증가\n    setRetryCount(prev => prev + 1);\n\n    // 오류 메시지로 변환\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      let streamingMsgIndex = -1;\n\n      // 1차: ID로 찾기\n      if (currentStreamingId) {\n        streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n      }\n\n      // 2차: 로딩 중인 메시지 찾기\n      if (streamingMsgIndex === -1) {\n        streamingMsgIndex = updatedMessages.findIndex(msg => msg.isLoading === true && msg.isStreaming === true);\n      }\n      if (streamingMsgIndex !== -1) {\n        var _error$message3, _error$message4, _error$response;\n        let errorMessage = \"메시지 처리 중 오류가 발생했습니다.\";\n        if ((_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes(\"CORS\")) {\n          errorMessage = \"서버 연결 오류가 발생했습니다. 관리자에게 문의하세요.\";\n        } else if (error.code === \"ECONNABORTED\") {\n          errorMessage = \"처리 시간이 초과되었습니다. 요청을 단순화하거나 잠시 후 다시 시도해주세요.\";\n        } else if ((_error$message4 = error.message) !== null && _error$message4 !== void 0 && _error$message4.includes(\"Network Error\")) {\n          errorMessage = \"네트워크 연결을 확인하고 다시 시도해주세요.\";\n        }\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: errorMessage,\n          isLoading: false,\n          isStreaming: false,\n          isError: true,\n          timestamp: new Date(),\n          errorDetails: {\n            type: error.code || \"UNKNOWN\",\n            message: error.message,\n            status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n            retryCount: retryCount + 1\n          }\n        };\n      }\n      return updatedMessages;\n    });\n\n    // 스트리밍 ID 초기화\n    streamingMessageIdRef.current = null;\n  }, [retryCount]);\n\n  /**\n   * 개선: 메시지 전송 함수 - ref 사용\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date()\n    };\n\n    // 개선: 스트리밍 메시지 ID 생성 및 ref에 저장\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n\n    // 스트리밍 메트릭 초기화\n    setStreamingMetrics({\n      startTime: Date.now(),\n      firstChunkTime: null,\n      lastChunkTime: null,\n      totalChunks: 0,\n      avgChunkSize: 0\n    });\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n    try {\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: messages.filter(msg => !msg.isLoading && !msg.isError).map(msg => ({\n          role: msg.type === \"user\" ? \"user\" : \"assistant\",\n          content: msg.content\n        }))\n      };\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        onChunk: handleStreamingResponse,\n        onError: handleStreamingError,\n        onComplete: handleStreamingComplete\n      };\n\n      // 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      handleStreamingError(error);\n    }\n  }, [inputValue, isGenerating, executeOrchestration, handleStreamingResponse, handleStreamingComplete, handleStreamingError, messages]);\n\n  /**\n   * 재시도 함수\n   */\n  const handleRetry = useCallback(async () => {\n    if (isGenerating || !messages.length) return;\n\n    // 마지막 사용자 메시지 찾기\n    const lastUserMessage = messages.slice().reverse().find(msg => msg.type === \"user\");\n    if (lastUserMessage) {\n      // 기존 오류 메시지 제거\n      setMessages(prev => prev.filter(msg => !msg.isError));\n\n      // 입력값 설정 후 다시 전송\n      setInputValue(lastUserMessage.content);\n\n      // 짧은 지연 후 전송\n      setTimeout(() => {\n        handleSendMessage();\n      }, 100);\n    }\n  }, [messages, isGenerating, handleSendMessage]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    streamingMessageIdRef.current = null; // ref 초기화\n    setConnectionError(null);\n    setRetryCount(0);\n    setStreamingMetrics({\n      startTime: null,\n      firstChunkTime: null,\n      lastChunkTime: null,\n      totalChunks: 0,\n      avgChunkSize: 0\n    });\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  /**\n   * 연결 상태 확인 함수\n   */\n  const checkConnection = useCallback(async () => {\n    try {\n      // 간단한 연결 테스트 (프로젝트 정보 조회)\n      const response = await fetch(`/api/projects/${projectId}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        setConnectionError(null);\n        setRetryCount(0);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"연결 확인 실패:\", error);\n      return false;\n    }\n  }, [projectId]);\n\n  // 스트리밍 디버그 정보 (개발 환경에서만)\n  const debugInfo = useMemo(() => {\n    var _messages;\n    if (process.env.NODE_ENV !== 'development') return null;\n    return {\n      streamingMessageId: streamingMessageIdRef.current,\n      messageCount: messages.length,\n      isGenerating,\n      isStreaming,\n      connectionError,\n      retryCount,\n      hasLoadingMessages: messages.some(msg => msg.isLoading),\n      lastMessageType: (_messages = messages[messages.length - 1]) === null || _messages === void 0 ? void 0 : _messages.type,\n      streamingMetrics\n    };\n  }, [messages, isGenerating, isStreaming, connectionError, retryCount, streamingMetrics]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    streamingMessageId: streamingMessageIdRef.current,\n    // ref 값 반환\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    connectionError,\n    retryCount,\n    handleRetry,\n    checkConnection,\n    debugInfo,\n    // 개발 환경에서 디버깅용\n    streamingMetrics // 스트리밍 성능 메트릭\n  };\n};\n_s(useChat, \"nBvRmFhMWmm5shuPYFZjPZT1Gj4=\", false, function () {\n  return [useOrchestration];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useMemo","toast","copyToClipboard","useOrchestration","processAIResponse","result","console","error","id","Date","now","type","content","timestamp","isError","responseContent","performance_metrics","model_info","useChat","projectId","projectName","promptCards","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","streamingMessageIdRef","connectionError","setConnectionError","retryCount","setRetryCount","streamingMetrics","setStreamingMetrics","startTime","firstChunkTime","lastChunkTime","totalChunks","avgChunkSize","messagesEndRef","inputRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","current","scrollToBottom","_messagesEndRef$curre","scrollIntoView","behavior","handleStreamingResponse","chunk","metadata","currentStreamingId","log","prev","isFirstChunk","newTotalChunks","chunkSize","length","newAvgChunkSize","updatedMessages","streamingMsgIndex","findIndex","msg","streamingMessageId","foundIndex","totalMessages","availableIds","map","isLoading","lastLoadingIndex","handleStreamingComplete","_result$result","resultLength","toISOString","push","handleStreamingError","_error$message","_error$message2","message","includes","code","_error$message3","_error$message4","_error$response","errorMessage","errorDetails","status","response","handleSendMessage","trim","userMessage","streamMsgId","streamingMessage","orchestrationData","userInput","chat_history","filter","role","streamingOptions","useStreaming","onChunk","onError","onComplete","handleRetry","lastUserMessage","slice","reverse","find","setTimeout","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","success","handleCopyTitle","title","index","resetChat","checkConnection","fetch","method","headers","ok","debugInfo","_messages","process","env","NODE_ENV","messageCount","hasLoadingMessages","some","lastMessageType"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info,\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  // 핵심 수정: useRef를 사용하여 ID 관리\n  const streamingMessageIdRef = useRef(null);\n  const [connectionError, setConnectionError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const [streamingMetrics, setStreamingMetrics] = useState({\n    startTime: null,\n    firstChunkTime: null,\n    lastChunkTime: null,\n    totalChunks: 0,\n    avgChunkSize: 0,\n  });\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]);\n    setConnectionError(null);\n    setRetryCount(0);\n    streamingMessageIdRef.current = null; // ref 초기화\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 개선: 스트리밍 응답 처리 함수 - ref 사용\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"청크 수신:\", chunk, \"메타데이터:\", metadata);\n      console.log(\"현재 스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 ID가 null입니다!\");\n        return;\n      }\n\n      // 스트리밍 메트릭 업데이트\n      setStreamingMetrics(prev => {\n        const now = Date.now();\n        const isFirstChunk = prev.totalChunks === 0;\n        const newTotalChunks = prev.totalChunks + 1;\n        const chunkSize = chunk.length;\n        const newAvgChunkSize = ((prev.avgChunkSize * prev.totalChunks) + chunkSize) / newTotalChunks;\n        \n        return {\n          ...prev,\n          firstChunkTime: isFirstChunk ? now : prev.firstChunkTime,\n          lastChunkTime: now,\n          totalChunks: newTotalChunks,\n          avgChunkSize: newAvgChunkSize,\n        };\n      });\n\n      // 연결 오류 해결\n      if (connectionError) {\n        setConnectionError(null);\n        setRetryCount(0);\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        console.log(\"스트리밍 메시지 찾기:\", {\n          streamingMessageId: currentStreamingId,\n          foundIndex: streamingMsgIndex,\n          totalMessages: updatedMessages.length,\n          availableIds: updatedMessages.map((msg) => msg.id),\n        });\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          console.log(\"스트리밍 메시지 업데이트 성공\");\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n        } else {\n          console.log(\"스트리밍 메시지를 찾을 수 없음!\", {\n            streamingMessageId: currentStreamingId,\n            availableIds: updatedMessages.map((msg) => msg.id),\n          });\n\n          // 새로운 해결책: 마지막 로딩 중인 메시지 찾기\n          const lastLoadingIndex = updatedMessages.findIndex(\n            (msg) => msg.isLoading === true && msg.isStreaming === true\n          );\n\n          if (lastLoadingIndex !== -1) {\n            console.log(\"마지막 로딩 메시지 업데이트:\", lastLoadingIndex);\n            updatedMessages[lastLoadingIndex] = {\n              ...updatedMessages[lastLoadingIndex],\n              content: updatedMessages[lastLoadingIndex].content + chunk,\n              isLoading: true,\n              isStreaming: true,\n            };\n          }\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [connectionError, scrollToBottom]\n  );\n\n  /**\n   * 개선: 스트리밍 완료 처리 함수 - ref 사용\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"스트리밍 완료 처리:\", {\n        streamingMessageId: currentStreamingId,\n        resultLength: result.result?.length || 0,\n        timestamp: new Date().toISOString(),\n      });\n\n      // 연결 오류 해결\n      if (connectionError) {\n        setConnectionError(null);\n        setRetryCount(0);\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        let streamingMsgIndex = -1;\n\n        // 1차: ID로 찾기\n        if (currentStreamingId) {\n          streamingMsgIndex = updatedMessages.findIndex(\n            (msg) => msg.id === currentStreamingId\n          );\n        }\n\n        // 2차: 로딩 중인 메시지 찾기\n        if (streamingMsgIndex === -1) {\n          streamingMsgIndex = updatedMessages.findIndex(\n            (msg) => msg.isLoading === true && msg.isStreaming === true\n          );\n        }\n\n        console.log(\"완료 처리 - 메시지 찾기:\", {\n          streamingMessageId: currentStreamingId,\n          foundIndex: streamingMsgIndex,\n          totalMessages: updatedMessages.length,\n        });\n\n        if (streamingMsgIndex !== -1) {\n          console.log(\"완료 처리 - 스트리밍 메시지 업데이트 성공\");\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date(),\n          };\n        } else {\n          console.log(\"완료 처리 - 스트리밍 메시지를 찾을 수 없음!\");\n          // 새 메시지로 추가\n          updatedMessages.push({\n            id: \"response-\" + Date.now(),\n            type: \"assistant\",\n            content: result.result,\n            timestamp: new Date(),\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n          });\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [connectionError, scrollToBottom]\n  );\n\n  /**\n   * 개선: 스트리밍 오류 처리 함수\n   */\n  const handleStreamingError = useCallback(\n    (error) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.error(\"스트리밍 오류 처리:\", error);\n\n      // 연결 오류 상태 업데이트\n      if (\n        error.message?.includes(\"CORS\") ||\n        error.code === \"ERR_NETWORK\" ||\n        error.message?.includes(\"Access-Control-Allow-Origin\")\n      ) {\n        setConnectionError({\n          type: \"CORS\",\n          message: \"CORS 정책 오류가 발생했습니다. 서버 설정을 확인해주세요.\",\n          timestamp: new Date(),\n        });\n      } else if (error.code === \"ECONNABORTED\") {\n        setConnectionError({\n          type: \"TIMEOUT\",\n          message: \"요청 시간이 초과되었습니다.\",\n          timestamp: new Date(),\n        });\n      } else {\n        setConnectionError({\n          type: \"GENERAL\",\n          message: \"서버 연결 오류가 발생했습니다.\",\n          timestamp: new Date(),\n        });\n      }\n\n      // 재시도 횟수 증가\n      setRetryCount((prev) => prev + 1);\n\n      // 오류 메시지로 변환\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        let streamingMsgIndex = -1;\n\n        // 1차: ID로 찾기\n        if (currentStreamingId) {\n          streamingMsgIndex = updatedMessages.findIndex(\n            (msg) => msg.id === currentStreamingId\n          );\n        }\n\n        // 2차: 로딩 중인 메시지 찾기\n        if (streamingMsgIndex === -1) {\n          streamingMsgIndex = updatedMessages.findIndex(\n            (msg) => msg.isLoading === true && msg.isStreaming === true\n          );\n        }\n\n        if (streamingMsgIndex !== -1) {\n          let errorMessage = \"메시지 처리 중 오류가 발생했습니다.\";\n\n          if (error.message?.includes(\"CORS\")) {\n            errorMessage =\n              \"서버 연결 오류가 발생했습니다. 관리자에게 문의하세요.\";\n          } else if (error.code === \"ECONNABORTED\") {\n            errorMessage =\n              \"처리 시간이 초과되었습니다. 요청을 단순화하거나 잠시 후 다시 시도해주세요.\";\n          } else if (error.message?.includes(\"Network Error\")) {\n            errorMessage = \"네트워크 연결을 확인하고 다시 시도해주세요.\";\n          }\n\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: errorMessage,\n            isLoading: false,\n            isStreaming: false,\n            isError: true,\n            timestamp: new Date(),\n            errorDetails: {\n              type: error.code || \"UNKNOWN\",\n              message: error.message,\n              status: error.response?.status,\n              retryCount: retryCount + 1,\n            },\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n    },\n    [retryCount]\n  );\n\n  /**\n   * 개선: 메시지 전송 함수 - ref 사용\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date(),\n    };\n\n    // 개선: 스트리밍 메시지 ID 생성 및 ref에 저장\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n\n    // 스트리밍 메트릭 초기화\n    setStreamingMetrics({\n      startTime: Date.now(),\n      firstChunkTime: null,\n      lastChunkTime: null,\n      totalChunks: 0,\n      avgChunkSize: 0,\n    });\n\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n\n    try {\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: messages\n          .filter((msg) => !msg.isLoading && !msg.isError)\n          .map((msg) => ({\n            role: msg.type === \"user\" ? \"user\" : \"assistant\",\n            content: msg.content,\n          })),\n      };\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        onChunk: handleStreamingResponse,\n        onError: handleStreamingError,\n        onComplete: handleStreamingComplete,\n      };\n\n      // 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      handleStreamingError(error);\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    handleStreamingError,\n    messages,\n  ]);\n\n  /**\n   * 재시도 함수\n   */\n  const handleRetry = useCallback(async () => {\n    if (isGenerating || !messages.length) return;\n\n    // 마지막 사용자 메시지 찾기\n    const lastUserMessage = messages\n      .slice()\n      .reverse()\n      .find((msg) => msg.type === \"user\");\n\n    if (lastUserMessage) {\n      // 기존 오류 메시지 제거\n      setMessages((prev) => prev.filter((msg) => !msg.isError));\n\n      // 입력값 설정 후 다시 전송\n      setInputValue(lastUserMessage.content);\n\n      // 짧은 지연 후 전송\n      setTimeout(() => {\n        handleSendMessage();\n      }, 100);\n    }\n  }, [messages, isGenerating, handleSendMessage]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    streamingMessageIdRef.current = null; // ref 초기화\n    setConnectionError(null);\n    setRetryCount(0);\n    setStreamingMetrics({\n      startTime: null,\n      firstChunkTime: null,\n      lastChunkTime: null,\n      totalChunks: 0,\n      avgChunkSize: 0,\n    });\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  /**\n   * 연결 상태 확인 함수\n   */\n  const checkConnection = useCallback(async () => {\n    try {\n      // 간단한 연결 테스트 (프로젝트 정보 조회)\n      const response = await fetch(`/api/projects/${projectId}`, {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n\n      if (response.ok) {\n        setConnectionError(null);\n        setRetryCount(0);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error(\"연결 확인 실패:\", error);\n      return false;\n    }\n  }, [projectId]);\n\n  // 스트리밍 디버그 정보 (개발 환경에서만)\n  const debugInfo = useMemo(() => {\n    if (process.env.NODE_ENV !== 'development') return null;\n    \n    return {\n      streamingMessageId: streamingMessageIdRef.current,\n      messageCount: messages.length,\n      isGenerating,\n      isStreaming,\n      connectionError,\n      retryCount,\n      hasLoadingMessages: messages.some(msg => msg.isLoading),\n      lastMessageType: messages[messages.length - 1]?.type,\n      streamingMetrics,\n    };\n  }, [messages, isGenerating, isStreaming, connectionError, retryCount, streamingMetrics]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    streamingMessageId: streamingMessageIdRef.current, // ref 값 반환\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    connectionError,\n    retryCount,\n    handleRetry,\n    checkConnection,\n    debugInfo, // 개발 환경에서 디버깅용\n    streamingMetrics, // 스트리밍 성능 메트릭\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}