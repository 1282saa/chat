{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 900000 // 15분 타임아웃 (긴 텍스트 및 복잡한 대화 처리를 위해 대폭 연장)\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error(\"API 오류 상세:\", {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: error.message,\n    code: error.code,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n  deleteProject: async projectId => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: {\n        fileName\n      }\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 2. 프롬프트 카드 API\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (projectId, includeContent = false, includeStats = false) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: {\n        includeContent,\n        includeStats\n      }\n    });\n    return response.data;\n  },\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n  reorderPromptCards: async (projectId, reorderData) => {\n    // 백엔드에서 별도의 reorder API가 없으므로 개별 업데이트로 처리\n    // reorderData = [{ promptId, stepOrder }, ...]\n    const updatePromises = reorderData.map(({\n      promptId,\n      stepOrder\n    }) => api.put(`/prompts/${projectId}/${promptId}`, {\n      stepOrder\n    }));\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map(r => r.data)\n    };\n  }\n};\n\n// =============================================================================\n// 3. 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    var _data$chat_history;\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history = data.chat_history) === null || _data$chat_history === void 0 ? void 0 : _data$chat_history.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n        responseData: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  }\n};\n\n// =============================================================================\n// 4. 채팅 API (generate API로 리다이렉트)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    // 채팅은 generate API를 사용하여 처리\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId\n    });\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [] // 현재 채팅 히스토리는 비워둠\n      });\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\"\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 채팅 히스토리를 별도로 저장하지 않음\n    console.log(\"채팅 히스토리 조회:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message: \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"\n    };\n  },\n  getChatSessions: async (projectId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 목록 조회:\", {\n      projectId,\n      userId\n    });\n    return {\n      sessions: [],\n      message: \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"\n    };\n  },\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 삭제:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId\n    };\n  }\n};\n\n// =============================================================================\n// 5. 카테고리 API (동적 프롬프트 카드 시스템)\n// =============================================================================\n\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 🔧 수정: 실제 백엔드에서 사용자 카테고리 조회 (CRUD 가능)\n    try {\n      const response = await api.get(\"/categories\");\n      return response.data;\n    } catch (error) {\n      console.warn(\"카테고리 로드 실패, 기본 카테고리 사용:\", error);\n      // 백엔드 실패 시 기본 카테고리 제공\n      return {\n        categories: DEFAULT_PROJECT_CATEGORIES,\n        message: \"백엔드 연결 실패로 기본 카테고리를 사용합니다.\",\n        fallback: true\n      };\n    }\n  },\n  createCategory: async categoryData => {\n    // 🔧 복원: 카테고리 생성 기능\n    const response = await api.post(\"/categories\", categoryData);\n    return response.data;\n  },\n  updateCategory: async (categoryId, categoryData) => {\n    // 🔧 복원: 카테고리 수정 기능\n    const response = await api.put(`/categories/${categoryId}`, categoryData);\n    return response.data;\n  },\n  deleteCategory: async categoryId => {\n    // 🔧 복원: 카테고리 삭제 기능\n    const response = await api.delete(`/categories/${categoryId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 6. 프로젝트 카테고리 API (단순화)\n// =============================================================================\n\nexport const projectCategoryAPI = {\n  changeProjectCategory: async (projectId, categoryId) => {\n    // 프로젝트 자체의 카테고리 변경 (프롬프트 카드와는 별개)\n    const response = await api.post(`/projects/${projectId}/category`, {\n      category: categoryId\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 7. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\"\n    };\n  },\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 공통 유틸리티\n// =============================================================================\n\nexport const handleAPIError = error => {\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // 서버에서 응답을 받았지만 오류 상태\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || \"서버 오류가 발생했습니다\";\n    switch (status) {\n      case 400:\n        return {\n          message: `잘못된 요청: ${message}`,\n          statusCode: 400\n        };\n      case 401:\n        return {\n          message: \"인증이 필요합니다\",\n          statusCode: 401\n        };\n      case 403:\n        return {\n          message: \"권한이 없습니다\",\n          statusCode: 403\n        };\n      case 404:\n        return {\n          message: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404\n        };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429\n        };\n      case 500:\n        return {\n          message: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500\n        };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status\n        };\n    }\n  } else if (error.request) {\n    // 요청은 보냈지만 응답을 받지 못함\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0\n    };\n  } else {\n    // 요청 설정 중 오류 발생\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1\n    };\n  }\n};\n\n// =============================================================================\n// 8. 동적 프롬프트 시스템 - 기본 설정 및 헬퍼 함수들\n// =============================================================================\n\n// 🔧 완전 빈 깡통 시스템 - 사용자가 직접 프롬프트 카드를 만들어야 함\nexport const DEFAULT_PROJECT_CATEGORIES = [];\n\n// 🔧 카테고리 정보 조회 함수 (빈 깡통 시스템용)\nexport const getCategoryInfo = (categoryId, userCategories = []) => {\n  // 사용자 정의 카테고리에서만 찾기 (기본 카테고리 없음)\n  const userCategory = userCategories.find(cat => cat.id === categoryId);\n  if (userCategory) {\n    return userCategory;\n  }\n\n  // 찾을 수 없는 경우 커스텀 카테고리로 표시\n  return {\n    id: categoryId || \"custom\",\n    name: categoryId || \"커스텀\",\n    description: \"사용자 정의 카테고리\",\n    color: \"gray\",\n    icon: \"📝\"\n  };\n};\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message: \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  // 최대 프롬프트 카드 개수 제한 (선택사항)\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1\n};\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파랑\",\n  bgClass: \"bg-blue-100\",\n  textClass: \"text-blue-800\",\n  borderClass: \"border-blue-200\"\n}, {\n  id: \"green\",\n  name: \"초록\",\n  bgClass: \"bg-green-100\",\n  textClass: \"text-green-800\",\n  borderClass: \"border-green-200\"\n}, {\n  id: \"purple\",\n  name: \"보라\",\n  bgClass: \"bg-purple-100\",\n  textClass: \"text-purple-800\",\n  borderClass: \"border-purple-200\"\n}, {\n  id: \"orange\",\n  name: \"주황\",\n  bgClass: \"bg-orange-100\",\n  textClass: \"text-orange-800\",\n  borderClass: \"border-orange-200\"\n}, {\n  id: \"red\",\n  name: \"빨강\",\n  bgClass: \"bg-red-100\",\n  textClass: \"text-red-800\",\n  borderClass: \"border-red-200\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  bgClass: \"bg-indigo-100\",\n  textClass: \"text-indigo-800\",\n  borderClass: \"border-indigo-200\"\n}, {\n  id: \"pink\",\n  name: \"분홍\",\n  bgClass: \"bg-pink-100\",\n  textClass: \"text-pink-800\",\n  borderClass: \"border-pink-200\"\n}, {\n  id: \"yellow\",\n  name: \"노랑\",\n  bgClass: \"bg-yellow-100\",\n  textClass: \"text-yellow-800\",\n  borderClass: \"border-yellow-200\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  bgClass: \"bg-gray-100\",\n  textClass: \"text-gray-800\",\n  borderClass: \"border-gray-200\"\n}];\nexport const getPromptCardInfo = promptCard => {\n  // 동적 프롬프트 카드 정보 반환\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false\n  };\n};\nexport const getCategoryColorClasses = color => {\n  const colorOption = COLOR_OPTIONS.find(option => option.id === color);\n  if (colorOption) {\n    return {\n      bg: colorOption.bgClass,\n      text: colorOption.textClass,\n      border: colorOption.borderClass\n    };\n  }\n  // 기본값\n  return {\n    bg: \"bg-gray-100\",\n    text: \"text-gray-800\",\n    border: \"border-gray-200\"\n  };\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 프로젝트 타입 필터 (카테고리 대신)\n  if (filters.type && filters.type !== \"all\") {\n    filtered = filtered.filter(project => project.type === filters.type);\n  }\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => {\n      var _project$name, _project$description, _project$tags;\n      return ((_project$name = project.name) === null || _project$name === void 0 ? void 0 : _project$name.toLowerCase().includes(query)) || ((_project$description = project.description) === null || _project$description === void 0 ? void 0 : _project$description.toLowerCase().includes(query)) || ((_project$tags = project.tags) === null || _project$tags === void 0 ? void 0 : _project$tags.some(tag => tag.toLowerCase().includes(query)));\n    });\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => {\n        var _a$name;\n        return (_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b.name);\n      });\n      break;\n    default:\n      break;\n  }\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\nexport const formatFileSize = bytes => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false\n    };\n  }\n  const activeCards = promptCards.filter(card => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n  const stepOrders = activeCards.map(card => card.stepOrder || 0).filter(step => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens: activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder\n    }\n  };\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","_error$config","_error$response2","message","code","data","Promise","reject","projectAPI","getProjects","get","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","map","stepOrder","responses","all","updatedCards","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","length","historyLength","chat_history","timestamp","Date","toISOString","mode","_error$response3","_error$response4","responseData","chatAPI","sendMessage","sessionId","userId","userRequest","result","getChatHistory","messages","getChatSessions","sessions","deleteChatSession","categoryAPI","getUserCategories","warn","categories","DEFAULT_PROJECT_CATEGORIES","fallback","createCategory","categoryData","updateCategory","categoryId","deleteCategory","projectCategoryAPI","changeProjectCategory","category","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","handleAPIError","_error$response$data","_error$response$data2","statusCode","getCategoryInfo","userCategories","userCategory","find","cat","description","color","icon","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","promptCard","title","isActive","getCategoryColorClasses","colorOption","option","bg","text","border","filterProjects","projects","filters","filtered","type","filter","project","searchQuery","query","toLowerCase","_project$name","_project$description","_project$tags","includes","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","toString","formatFileSize","bytes","calculatePromptStats","promptCards","totalCards","totalTokens","averageTokens","activeCards","maxStepOrder","hasCustomOrder","card","reduce","sum","tokenCount","contentLength","stepOrders","step","Math","max","round","stepOrderRange","min"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 900000, // 15분 타임아웃 (긴 텍스트 및 복잡한 대화 처리를 위해 대폭 연장)\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 2. 프롬프트 카드 API\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    // 백엔드에서 별도의 reorder API가 없으므로 개별 업데이트로 처리\n    // reorderData = [{ promptId, stepOrder }, ...]\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 3. 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 4. 채팅 API (generate API로 리다이렉트)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    // 채팅은 generate API를 사용하여 처리\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [], // 현재 채팅 히스토리는 비워둠\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 채팅 히스토리를 별도로 저장하지 않음\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 5. 카테고리 API (동적 프롬프트 카드 시스템)\n// =============================================================================\n\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 🔧 수정: 실제 백엔드에서 사용자 카테고리 조회 (CRUD 가능)\n    try {\n      const response = await api.get(\"/categories\");\n      return response.data;\n    } catch (error) {\n      console.warn(\"카테고리 로드 실패, 기본 카테고리 사용:\", error);\n      // 백엔드 실패 시 기본 카테고리 제공\n      return {\n        categories: DEFAULT_PROJECT_CATEGORIES,\n        message: \"백엔드 연결 실패로 기본 카테고리를 사용합니다.\",\n        fallback: true,\n      };\n    }\n  },\n\n  createCategory: async (categoryData) => {\n    // 🔧 복원: 카테고리 생성 기능\n    const response = await api.post(\"/categories\", categoryData);\n    return response.data;\n  },\n\n  updateCategory: async (categoryId, categoryData) => {\n    // 🔧 복원: 카테고리 수정 기능\n    const response = await api.put(`/categories/${categoryId}`, categoryData);\n    return response.data;\n  },\n\n  deleteCategory: async (categoryId) => {\n    // 🔧 복원: 카테고리 삭제 기능\n    const response = await api.delete(`/categories/${categoryId}`);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 6. 프로젝트 카테고리 API (단순화)\n// =============================================================================\n\nexport const projectCategoryAPI = {\n  changeProjectCategory: async (projectId, categoryId) => {\n    // 프로젝트 자체의 카테고리 변경 (프롬프트 카드와는 별개)\n    const response = await api.post(`/projects/${projectId}/category`, {\n      category: categoryId,\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 7. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 공통 유틸리티\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // 서버에서 응답을 받았지만 오류 상태\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 403:\n        return { message: \"권한이 없습니다\", statusCode: 403 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    // 요청은 보냈지만 응답을 받지 못함\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n    };\n  } else {\n    // 요청 설정 중 오류 발생\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n    };\n  }\n};\n\n// =============================================================================\n// 8. 동적 프롬프트 시스템 - 기본 설정 및 헬퍼 함수들\n// =============================================================================\n\n// 🔧 완전 빈 깡통 시스템 - 사용자가 직접 프롬프트 카드를 만들어야 함\nexport const DEFAULT_PROJECT_CATEGORIES = [];\n\n// 🔧 카테고리 정보 조회 함수 (빈 깡통 시스템용)\nexport const getCategoryInfo = (categoryId, userCategories = []) => {\n  // 사용자 정의 카테고리에서만 찾기 (기본 카테고리 없음)\n  const userCategory = userCategories.find((cat) => cat.id === categoryId);\n  if (userCategory) {\n    return userCategory;\n  }\n\n  // 찾을 수 없는 경우 커스텀 카테고리로 표시\n  return {\n    id: categoryId || \"custom\",\n    name: categoryId || \"커스텀\",\n    description: \"사용자 정의 카테고리\",\n    color: \"gray\",\n    icon: \"📝\",\n  };\n};\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50, // 최대 프롬프트 카드 개수 제한 (선택사항)\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  // 동적 프롬프트 카드 정보 반환\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const getCategoryColorClasses = (color) => {\n  const colorOption = COLOR_OPTIONS.find((option) => option.id === color);\n  if (colorOption) {\n    return {\n      bg: colorOption.bgClass,\n      text: colorOption.textClass,\n      border: colorOption.borderClass,\n    };\n  }\n  // 기본값\n  return {\n    bg: \"bg-gray-100\",\n    text: \"text-gray-800\",\n    border: \"border-gray-200\",\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 프로젝트 타입 필터 (카테고리 대신)\n  if (filters.type && filters.type !== \"all\") {\n    filtered = filtered.filter((project) => project.type === filters.type);\n  }\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}