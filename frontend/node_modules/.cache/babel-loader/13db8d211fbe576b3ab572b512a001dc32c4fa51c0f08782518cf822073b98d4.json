{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { orchestrationAPI } from \"../services/api\";\n\n/**\n * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ Î∞è Í≤∞Í≥º Ìè¥ÎßÅÏùÑ ÏúÑÌïú Ïª§Ïä§ÌÖÄ ÌõÖ\n * @param {string} projectId - ÌîÑÎ°úÏ†ùÌä∏ ID\n * @returns {Object} - Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Í¥ÄÎ†® ÏÉÅÌÉúÏôÄ Ìï®ÏàòÎì§\n */\nexport const useOrchestration = projectId => {\n  _s();\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ\n   * @param {string} content - ÏûÖÎ†• ÎÇ¥Ïö©\n   * @param {Object} config - Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏÑ§Ï†ï\n   * @param {string} userRequest - ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä ÏöîÏ≤≠\n   * @returns {Promise<string>} - Ïã§Ìñâ ID\n   */\n  const executeOrchestration = useCallback(async (content, config = {}, userRequest = \"\") => {\n    if (!content.trim()) {\n      toast.error(\"ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\");\n      return null;\n    }\n    try {\n      setIsExecuting(true);\n      setExecutionStatus(\"STARTING\");\n      const defaultConfig = {\n        useAllSteps: true,\n        enabledSteps: [],\n        maxRetries: 3,\n        temperature: 0.7,\n        ...config\n      };\n      const response = await orchestrationAPI.executeOrchestration(projectId, content, defaultConfig);\n      console.log(\"üîç Orchestration API ÏùëÎãµ:\", response);\n      setCurrentExecution(response.executionId || response.conversationId);\n      setExecutionStatus(\"COMPLETED\");\n      setIsExecuting(false); // Ï§ëÏöî: Ïã§Ìñâ ÏôÑÎ£å ÌõÑ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî\n\n      // Ï†ÑÏ≤¥ ÏùëÎãµ Í∞ùÏ≤¥ Î∞òÌôò (executionIdÎßåÏù¥ ÏïÑÎãå)\n      return response;\n    } catch (error) {\n      console.error(\"Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ Ïã§Ìå®:\", error);\n      setIsExecuting(false);\n      setExecutionStatus(\"FAILED\");\n      throw error;\n    }\n  }, [projectId]);\n\n  /**\n   * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Í≤∞Í≥º Ìè¥ÎßÅ\n   * @param {string} executionId - Ïã§Ìñâ ID\n   * @param {Function} onComplete - ÏôÑÎ£å Ïãú ÏΩúÎ∞±\n   * @param {Function} onError - ÏóêÎü¨ Ïãú ÏΩúÎ∞±\n   */\n  const pollOrchestrationResult = useCallback(async (executionId, onComplete, onError) => {\n    const poll = async () => {\n      try {\n        const status = await orchestrationAPI.getOrchestrationStatus(projectId, executionId);\n        setExecutionStatus(status.status);\n        if (status.status === \"COMPLETED\") {\n          const result = await orchestrationAPI.getOrchestrationResult(projectId, executionId);\n          setIsExecuting(false);\n          setExecutionStatus(\"COMPLETED\");\n          if (onComplete) {\n            onComplete(result);\n          }\n        } else if (status.status === \"FAILED\") {\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n          if (onError) {\n            onError(new Error(\"Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìå®\"));\n          }\n        } else if (status.status === \"RUNNING\") {\n          // 3Ï¥à ÌõÑ Îã§Ïãú Ìè¥ÎßÅ\n          setTimeout(poll, 3000);\n        }\n      } catch (error) {\n        console.error(\"Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:\", error);\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n        if (onError) {\n          onError(error);\n        }\n      }\n    };\n    poll();\n  }, [projectId]);\n\n  /**\n   * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n  return {\n    isExecuting,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  };\n};\n_s(useOrchestration, \"K+BNpOj7OFZjdBwrogtQ3usZzys=\");","map":{"version":3,"names":["useState","useCallback","toast","orchestrationAPI","useOrchestration","projectId","_s","isExecuting","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","executeOrchestration","content","config","userRequest","trim","error","defaultConfig","useAllSteps","enabledSteps","maxRetries","temperature","response","console","log","executionId","conversationId","pollOrchestrationResult","onComplete","onError","poll","status","getOrchestrationStatus","result","getOrchestrationResult","Error","setTimeout","resetOrchestration"],"sources":["/Users/yeong-gwang/Documents/work/·Ñâ·Ö•·Ñã·ÖÆ·ÜØ·ÑÄ·Öß·Üº·Ñå·Ö¶·Ñâ·Öµ·Ü´·ÑÜ·ÖÆ·Ü´/ai_·Ñå·Ö¶·ÑÜ·Ö©·Ü®·ÑÉ·Ö°·ÜØ·ÑÄ·Öµ/frontend/src/hooks/useOrchestration.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { orchestrationAPI } from \"../services/api\";\n\n/**\n * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ Î∞è Í≤∞Í≥º Ìè¥ÎßÅÏùÑ ÏúÑÌïú Ïª§Ïä§ÌÖÄ ÌõÖ\n * @param {string} projectId - ÌîÑÎ°úÏ†ùÌä∏ ID\n * @returns {Object} - Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Í¥ÄÎ†® ÏÉÅÌÉúÏôÄ Ìï®ÏàòÎì§\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ\n   * @param {string} content - ÏûÖÎ†• ÎÇ¥Ïö©\n   * @param {Object} config - Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏÑ§Ï†ï\n   * @param {string} userRequest - ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä ÏöîÏ≤≠\n   * @returns {Promise<string>} - Ïã§Ìñâ ID\n   */\n  const executeOrchestration = useCallback(\n    async (content, config = {}, userRequest = \"\") => {\n      if (!content.trim()) {\n        toast.error(\"ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        const defaultConfig = {\n          useAllSteps: true,\n          enabledSteps: [],\n          maxRetries: 3,\n          temperature: 0.7,\n          ...config,\n        };\n\n        const response = await orchestrationAPI.executeOrchestration(\n          projectId,\n          content,\n          defaultConfig\n        );\n\n        console.log(\"üîç Orchestration API ÏùëÎãµ:\", response);\n\n        setCurrentExecution(response.executionId || response.conversationId);\n        setExecutionStatus(\"COMPLETED\");\n        setIsExecuting(false); // Ï§ëÏöî: Ïã§Ìñâ ÏôÑÎ£å ÌõÑ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî\n\n        // Ï†ÑÏ≤¥ ÏùëÎãµ Í∞ùÏ≤¥ Î∞òÌôò (executionIdÎßåÏù¥ ÏïÑÎãå)\n        return response;\n      } catch (error) {\n        console.error(\"Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ Ïã§Ìå®:\", error);\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Í≤∞Í≥º Ìè¥ÎßÅ\n   * @param {string} executionId - Ïã§Ìñâ ID\n   * @param {Function} onComplete - ÏôÑÎ£å Ïãú ÏΩúÎ∞±\n   * @param {Function} onError - ÏóêÎü¨ Ïãú ÏΩúÎ∞±\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionId, onComplete, onError) => {\n      const poll = async () => {\n        try {\n          const status = await orchestrationAPI.getOrchestrationStatus(\n            projectId,\n            executionId\n          );\n\n          setExecutionStatus(status.status);\n\n          if (status.status === \"COMPLETED\") {\n            const result = await orchestrationAPI.getOrchestrationResult(\n              projectId,\n              executionId\n            );\n\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (status.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìå®\"));\n            }\n          } else if (status.status === \"RUNNING\") {\n            // 3Ï¥à ÌõÑ Îã§Ïãú Ìè¥ÎßÅ\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId]\n  );\n\n  /**\n   * Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}