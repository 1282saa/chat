{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 300000 // 5분\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error(\"API 오류 상세:\", {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: error.message,\n    code: error.code,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n  deleteProject: async projectId => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: {\n        fileName\n      }\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (projectId, includeContent = false, includeStats = false) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: {\n        includeContent,\n        includeStats\n      }\n    });\n    return response.data;\n  },\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({\n      promptId,\n      stepOrder\n    }) => api.put(`/prompts/${projectId}/${promptId}`, {\n      stepOrder\n    }));\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map(r => r.data)\n    };\n  }\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    var _data$chat_history;\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history = data.chat_history) === null || _data$chat_history === void 0 ? void 0 : _data$chat_history.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n        responseData: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n  // 🔧 완전 새로운 스트리밍 구현 - POST 기반\n  generateTitleStream: async (projectId, data, onChunk, onError, onComplete) => {\n    var _data$chat_history2;\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history2 = data.chat_history) === null || _data$chat_history2 === void 0 ? void 0 : _data$chat_history2.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n\n    // 🔧 단계 1: 즉시 일반 API로 폴백 (스트리밍 기능 비활성화)\n    console.log(\"🔧 현재 CORS 문제로 인해 일반 API로 처리합니다...\");\n    try {\n      const fallbackResponse = await api.post(`/projects/${projectId}/generate`, data);\n      console.log(\"✅ 일반 API 성공:\", {\n        mode: fallbackResponse.data.mode,\n        timestamp: new Date().toISOString()\n      });\n\n      // 🔧 일반 응답을 스트리밍처럼 시뮬레이션\n      if (fallbackResponse.data.result && onChunk) {\n        const fullText = fallbackResponse.data.result;\n        const words = fullText.split(\" \");\n\n        // 빠른 워드 단위 시뮬레이션\n        for (let i = 0; i < words.length; i++) {\n          const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n          onChunk(word, {\n            content: word\n          });\n\n          // 매우 짧은 지연 (실시간 느낌)\n          await new Promise(resolve => setTimeout(resolve, 30));\n        }\n      }\n\n      // 완료 콜백 호출\n      if (onComplete) {\n        onComplete({\n          result: fallbackResponse.data.result,\n          model_info: fallbackResponse.data.model_info,\n          performance_metrics: fallbackResponse.data.performance_metrics,\n          timestamp: new Date().toISOString()\n        });\n      }\n      return fallbackResponse.data;\n    } catch (error) {\n      console.error(\"❌ 일반 API도 실패:\", error);\n      if (onError) {\n        onError(new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\"));\n      }\n      throw new Error(\"서비스를 사용할 수 없습니다.\");\n    }\n  },\n  getExecutionStatus: async executionArn => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\"\n    };\n  }\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId\n    });\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: []\n      });\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\"\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message: \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"\n    };\n  },\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", {\n      projectId,\n      userId\n    });\n    return {\n      sessions: [],\n      message: \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"\n    };\n  },\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId\n    };\n  }\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\"\n    };\n  },\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = error => {\n  var _error$response5, _error$response6, _error$response7, _error$response8, _error$response9, _error$message, _error$message2;\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    statusText: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.statusText,\n    data: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data,\n    timestamp: new Date().toISOString()\n  });\n\n  // 403 Forbidden 특별 처리\n  if (((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\"\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.status) === 504) {\n    return {\n      message: \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\"\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"CORS\") || error.code === \"ERR_NETWORK\" || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"Access-Control-Allow-Origin\")) {\n    return {\n      message: \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\"\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message: \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\"\n    };\n  }\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || \"서버 오류가 발생했습니다\";\n    switch (status) {\n      case 400:\n        return {\n          message: `잘못된 요청: ${message}`,\n          statusCode: 400\n        };\n      case 401:\n        return {\n          message: \"인증이 필요합니다\",\n          statusCode: 401\n        };\n      case 404:\n        return {\n          message: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404\n        };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429\n        };\n      case 500:\n        return {\n          message: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500\n        };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\"\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\"\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message: \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1\n};\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파랑\",\n  bgClass: \"bg-blue-100\",\n  textClass: \"text-blue-800\",\n  borderClass: \"border-blue-200\"\n}, {\n  id: \"green\",\n  name: \"초록\",\n  bgClass: \"bg-green-100\",\n  textClass: \"text-green-800\",\n  borderClass: \"border-green-200\"\n}, {\n  id: \"purple\",\n  name: \"보라\",\n  bgClass: \"bg-purple-100\",\n  textClass: \"text-purple-800\",\n  borderClass: \"border-purple-200\"\n}, {\n  id: \"orange\",\n  name: \"주황\",\n  bgClass: \"bg-orange-100\",\n  textClass: \"text-orange-800\",\n  borderClass: \"border-orange-200\"\n}, {\n  id: \"red\",\n  name: \"빨강\",\n  bgClass: \"bg-red-100\",\n  textClass: \"text-red-800\",\n  borderClass: \"border-red-200\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  bgClass: \"bg-indigo-100\",\n  textClass: \"text-indigo-800\",\n  borderClass: \"border-indigo-200\"\n}, {\n  id: \"pink\",\n  name: \"분홍\",\n  bgClass: \"bg-pink-100\",\n  textClass: \"text-pink-800\",\n  borderClass: \"border-pink-200\"\n}, {\n  id: \"yellow\",\n  name: \"노랑\",\n  bgClass: \"bg-yellow-100\",\n  textClass: \"text-yellow-800\",\n  borderClass: \"border-yellow-200\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  bgClass: \"bg-gray-100\",\n  textClass: \"text-gray-800\",\n  borderClass: \"border-gray-200\"\n}];\nexport const getPromptCardInfo = promptCard => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false\n  };\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => {\n      var _project$name, _project$description, _project$tags;\n      return ((_project$name = project.name) === null || _project$name === void 0 ? void 0 : _project$name.toLowerCase().includes(query)) || ((_project$description = project.description) === null || _project$description === void 0 ? void 0 : _project$description.toLowerCase().includes(query)) || ((_project$tags = project.tags) === null || _project$tags === void 0 ? void 0 : _project$tags.some(tag => tag.toLowerCase().includes(query)));\n    });\n  }\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => {\n        var _a$name;\n        return (_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b.name);\n      });\n      break;\n    default:\n      break;\n  }\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\nexport const formatFileSize = bytes => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false\n    };\n  }\n  const activeCards = promptCards.filter(card => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n  const stepOrders = activeCards.map(card => card.stepOrder || 0).filter(step => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens: activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder\n    }\n  };\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","_error$config","_error$response2","message","code","data","Promise","reject","projectAPI","getProjects","get","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","map","stepOrder","responses","all","updatedCards","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","length","historyLength","chat_history","timestamp","Date","toISOString","mode","_error$response3","_error$response4","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","fallbackResponse","result","fullText","words","split","i","word","content","resolve","setTimeout","model_info","performance_metrics","Error","getExecutionStatus","executionArn","output","chatAPI","sendMessage","sessionId","userId","userRequest","getChatHistory","messages","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","handleAPIError","_error$response5","_error$response6","_error$response7","_error$response8","_error$response9","_error$message","_error$message2","statusText","statusCode","errorType","includes","_error$response$data","_error$response$data2","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","promptCard","title","color","description","isActive","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","toString","formatFileSize","bytes","calculatePromptStats","promptCards","totalCards","totalTokens","averageTokens","activeCards","maxStepOrder","hasCustomOrder","card","reduce","sum","tokenCount","contentLength","stepOrders","step","Math","max","round","stepOrderRange","min"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 완전 새로운 스트리밍 구현 - POST 기반\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    // 🔧 단계 1: 즉시 일반 API로 폴백 (스트리밍 기능 비활성화)\n    console.log(\"🔧 현재 CORS 문제로 인해 일반 API로 처리합니다...\");\n\n    try {\n      const fallbackResponse = await api.post(\n        `/projects/${projectId}/generate`,\n        data\n      );\n\n      console.log(\"✅ 일반 API 성공:\", {\n        mode: fallbackResponse.data.mode,\n        timestamp: new Date().toISOString(),\n      });\n\n      // 🔧 일반 응답을 스트리밍처럼 시뮬레이션\n      if (fallbackResponse.data.result && onChunk) {\n        const fullText = fallbackResponse.data.result;\n        const words = fullText.split(\" \");\n\n        // 빠른 워드 단위 시뮬레이션\n        for (let i = 0; i < words.length; i++) {\n          const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n          onChunk(word, { content: word });\n\n          // 매우 짧은 지연 (실시간 느낌)\n          await new Promise((resolve) => setTimeout(resolve, 30));\n        }\n      }\n\n      // 완료 콜백 호출\n      if (onComplete) {\n        onComplete({\n          result: fallbackResponse.data.result,\n          model_info: fallbackResponse.data.model_info,\n          performance_metrics: fallbackResponse.data.performance_metrics,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      return fallbackResponse.data;\n    } catch (error) {\n      console.error(\"❌ 일반 API도 실패:\", error);\n      if (onError) {\n        onError(\n          new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n        );\n      }\n      throw new Error(\"서비스를 사용할 수 없습니다.\");\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}