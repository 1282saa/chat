{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 30000 // 30초 타임아웃 (AI 처리 시간 고려)\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response;\n  console.error(\"API 오류:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n  deleteProject: async projectId => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: {\n        fileName\n      }\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 2. 프롬프트 카드 API\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (projectId, includeContent = false, includeStats = false) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: {\n        includeContent,\n        includeStats\n      }\n    });\n    return response.data;\n  },\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n  reorderPromptCards: async (projectId, reorderData) => {\n    const response = await api.post(`/prompts/${projectId}/reorder`, reorderData);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 3. 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, article, userRequest = \"\") => {\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article,\n      userRequest\n    });\n    return response.data;\n  },\n  getExecutionStatus: async executionArn => {\n    const response = await api.get(`/executions/${encodeURIComponent(executionArn)}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 4. 채팅 API\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    const response = await api.post(`/projects/${projectId}/chat`, {\n      message,\n      sessionId,\n      userId\n    });\n    return response.data;\n  },\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    const response = await api.get(`/projects/${projectId}/chat/sessions/${sessionId}`, {\n      params: {\n        userId\n      }\n    });\n    return response.data;\n  },\n  getChatSessions: async (projectId, userId = \"default\") => {\n    const response = await api.get(`/projects/${projectId}/chat/sessions`, {\n      params: {\n        userId\n      }\n    });\n    return response.data;\n  },\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    const response = await api.delete(`/projects/${projectId}/chat/sessions/${sessionId}`, {\n      params: {\n        userId\n      }\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 5. 카테고리 API\n// =============================================================================\n\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    try {\n      const response = await api.get(\"/categories\");\n      return response.data;\n    } catch (error) {\n      console.warn(\"카테고리 API 오류, 기본 카테고리 사용:\", error.message);\n      return {\n        categories: DEFAULT_PROJECT_CATEGORIES\n      };\n    }\n  },\n  createCategory: async categoryData => {\n    const response = await api.post(\"/categories\", categoryData);\n    return response.data;\n  },\n  updateCategory: async (categoryId, categoryData) => {\n    const response = await api.put(`/categories/${categoryId}`, categoryData);\n    return response.data;\n  },\n  deleteCategory: async categoryId => {\n    const response = await api.delete(`/categories/${categoryId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 6. 프로젝트 카테고리 API\n// =============================================================================\n\nexport const projectCategoryAPI = {\n  changeProjectCategory: async (projectId, categoryId) => {\n    const response = await api.post(`/projects/${projectId}/category`, {\n      category: categoryId\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 7. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\"\n    };\n  },\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 공통 유틸리티\n// =============================================================================\n\nexport const handleAPIError = error => {\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // 서버에서 응답을 받았지만 오류 상태\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || \"서버 오류가 발생했습니다\";\n    switch (status) {\n      case 400:\n        return {\n          message: `잘못된 요청: ${message}`,\n          statusCode: 400\n        };\n      case 401:\n        return {\n          message: \"인증이 필요합니다\",\n          statusCode: 401\n        };\n      case 403:\n        return {\n          message: \"권한이 없습니다\",\n          statusCode: 403\n        };\n      case 404:\n        return {\n          message: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404\n        };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429\n        };\n      case 500:\n        return {\n          message: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500\n        };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status\n        };\n    }\n  } else if (error.request) {\n    // 요청은 보냈지만 응답을 받지 못함\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0\n    };\n  } else {\n    // 요청 설정 중 오류 발생\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1\n    };\n  }\n};\n\n// =============================================================================\n// 상수 정의\n// =============================================================================\n\nexport const DEFAULT_PROJECT_CATEGORIES = [{\n  id: \"news\",\n  name: \"뉴스\",\n  color: \"blue\",\n  description: \"일반 뉴스\"\n}, {\n  id: \"economy\",\n  name: \"경제\",\n  color: \"green\",\n  description: \"경제 뉴스\"\n}, {\n  id: \"tech\",\n  name: \"기술\",\n  color: \"purple\",\n  description: \"기술 뉴스\"\n}, {\n  id: \"sports\",\n  name: \"스포츠\",\n  color: \"orange\",\n  description: \"스포츠 뉴스\"\n}, {\n  id: \"politics\",\n  name: \"정치\",\n  color: \"red\",\n  description: \"정치 뉴스\"\n}, {\n  id: \"society\",\n  name: \"사회\",\n  color: \"indigo\",\n  description: \"사회 뉴스\"\n}, {\n  id: \"culture\",\n  name: \"문화\",\n  color: \"pink\",\n  description: \"문화 뉴스\"\n}, {\n  id: \"international\",\n  name: \"국제\",\n  color: \"yellow\",\n  description: \"국제 뉴스\"\n}];\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파랑\",\n  bgClass: \"bg-blue-100\",\n  textClass: \"text-blue-800\",\n  borderClass: \"border-blue-200\"\n}, {\n  id: \"green\",\n  name: \"초록\",\n  bgClass: \"bg-green-100\",\n  textClass: \"text-green-800\",\n  borderClass: \"border-green-200\"\n}, {\n  id: \"purple\",\n  name: \"보라\",\n  bgClass: \"bg-purple-100\",\n  textClass: \"text-purple-800\",\n  borderClass: \"border-purple-200\"\n}, {\n  id: \"orange\",\n  name: \"주황\",\n  bgClass: \"bg-orange-100\",\n  textClass: \"text-orange-800\",\n  borderClass: \"border-orange-200\"\n}, {\n  id: \"red\",\n  name: \"빨강\",\n  bgClass: \"bg-red-100\",\n  textClass: \"text-red-800\",\n  borderClass: \"border-red-200\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  bgClass: \"bg-indigo-100\",\n  textClass: \"text-indigo-800\",\n  borderClass: \"border-indigo-200\"\n}, {\n  id: \"pink\",\n  name: \"분홍\",\n  bgClass: \"bg-pink-100\",\n  textClass: \"text-pink-800\",\n  borderClass: \"border-pink-200\"\n}, {\n  id: \"yellow\",\n  name: \"노랑\",\n  bgClass: \"bg-yellow-100\",\n  textClass: \"text-yellow-800\",\n  borderClass: \"border-yellow-200\"\n}];\nexport const getCategoryInfo = (categoryId, userCategories = DEFAULT_PROJECT_CATEGORIES) => {\n  return userCategories.find(cat => cat.id === categoryId) || DEFAULT_PROJECT_CATEGORIES.find(cat => cat.id === categoryId) || {\n    id: categoryId,\n    name: categoryId,\n    color: \"gray\",\n    description: \"기타\"\n  };\n};\nexport const getCategoryColorClasses = color => {\n  const colorOption = COLOR_OPTIONS.find(option => option.id === color);\n  if (colorOption) {\n    return {\n      bg: colorOption.bgClass,\n      text: colorOption.textClass,\n      border: colorOption.borderClass\n    };\n  }\n  // 기본값\n  return {\n    bg: \"bg-gray-100\",\n    text: \"text-gray-800\",\n    border: \"border-gray-200\"\n  };\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(project => project.category === filters.category);\n  }\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => {\n      var _project$name, _project$description, _project$tags;\n      return ((_project$name = project.name) === null || _project$name === void 0 ? void 0 : _project$name.toLowerCase().includes(query)) || ((_project$description = project.description) === null || _project$description === void 0 ? void 0 : _project$description.toLowerCase().includes(query)) || ((_project$tags = project.tags) === null || _project$tags === void 0 ? void 0 : _project$tags.some(tag => tag.toLowerCase().includes(query)));\n    });\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => {\n        var _a$name;\n        return (_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b.name);\n      });\n      break;\n    default:\n      break;\n  }\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\nexport const formatFileSize = bytes => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      categories: []\n    };\n  }\n  const totalTokens = promptCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || 0);\n  }, 0);\n  const categories = [...new Set(promptCards.map(card => card.category))];\n  return {\n    totalCards: promptCards.length,\n    totalTokens,\n    averageTokens: Math.round(totalTokens / promptCards.length),\n    categories\n  };\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","message","Promise","reject","projectAPI","getProjects","get","data","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","includeStats","createPromptCard","promptData","updatePromptCard","promptId","deletePromptCard","reorderPromptCards","reorderData","generateAPI","generateTitle","article","userRequest","getExecutionStatus","executionArn","encodeURIComponent","chatAPI","sendMessage","sessionId","userId","getChatHistory","getChatSessions","deleteChatSession","categoryAPI","getUserCategories","warn","categories","DEFAULT_PROJECT_CATEGORIES","createCategory","categoryData","updateCategory","categoryId","deleteCategory","projectCategoryAPI","changeProjectCategory","category","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","handleAPIError","_error$response$data","_error$response$data2","statusCode","color","description","COLOR_OPTIONS","bgClass","textClass","borderClass","getCategoryInfo","userCategories","find","cat","getCategoryColorClasses","colorOption","option","bg","text","border","filterProjects","projects","filters","filtered","filter","project","searchQuery","query","toLowerCase","_project$name","_project$description","_project$tags","includes","tags","some","tag","sortBy","sort","a","b","Date","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","toString","formatFileSize","bytes","calculatePromptStats","promptCards","length","totalCards","totalTokens","averageTokens","reduce","sum","card","tokenCount","Set","map","Math","round"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 30000, // 30초 타임아웃 (AI 처리 시간 고려)\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류:\", error.response?.status, error.message);\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 2. 프롬프트 카드 API\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    const response = await api.post(\n      `/prompts/${projectId}/reorder`,\n      reorderData\n    );\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 3. 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, article, userRequest = \"\") => {\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article,\n      userRequest,\n    });\n    return response.data;\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    const response = await api.get(\n      `/executions/${encodeURIComponent(executionArn)}`\n    );\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 4. 채팅 API\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    const response = await api.post(`/projects/${projectId}/chat`, {\n      message,\n      sessionId,\n      userId,\n    });\n    return response.data;\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    const response = await api.get(\n      `/projects/${projectId}/chat/sessions/${sessionId}`,\n      {\n        params: { userId },\n      }\n    );\n    return response.data;\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    const response = await api.get(`/projects/${projectId}/chat/sessions`, {\n      params: { userId },\n    });\n    return response.data;\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    const response = await api.delete(\n      `/projects/${projectId}/chat/sessions/${sessionId}`,\n      {\n        params: { userId },\n      }\n    );\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 5. 카테고리 API\n// =============================================================================\n\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    try {\n      const response = await api.get(\"/categories\");\n      return response.data;\n    } catch (error) {\n      console.warn(\"카테고리 API 오류, 기본 카테고리 사용:\", error.message);\n      return { categories: DEFAULT_PROJECT_CATEGORIES };\n    }\n  },\n\n  createCategory: async (categoryData) => {\n    const response = await api.post(\"/categories\", categoryData);\n    return response.data;\n  },\n\n  updateCategory: async (categoryId, categoryData) => {\n    const response = await api.put(`/categories/${categoryId}`, categoryData);\n    return response.data;\n  },\n\n  deleteCategory: async (categoryId) => {\n    const response = await api.delete(`/categories/${categoryId}`);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 6. 프로젝트 카테고리 API\n// =============================================================================\n\nexport const projectCategoryAPI = {\n  changeProjectCategory: async (projectId, categoryId) => {\n    const response = await api.post(`/projects/${projectId}/category`, {\n      category: categoryId,\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 7. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 공통 유틸리티\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // 서버에서 응답을 받았지만 오류 상태\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 403:\n        return { message: \"권한이 없습니다\", statusCode: 403 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    // 요청은 보냈지만 응답을 받지 못함\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n    };\n  } else {\n    // 요청 설정 중 오류 발생\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n    };\n  }\n};\n\n// =============================================================================\n// 상수 정의\n// =============================================================================\n\nexport const DEFAULT_PROJECT_CATEGORIES = [\n  { id: \"news\", name: \"뉴스\", color: \"blue\", description: \"일반 뉴스\" },\n  { id: \"economy\", name: \"경제\", color: \"green\", description: \"경제 뉴스\" },\n  { id: \"tech\", name: \"기술\", color: \"purple\", description: \"기술 뉴스\" },\n  { id: \"sports\", name: \"스포츠\", color: \"orange\", description: \"스포츠 뉴스\" },\n  { id: \"politics\", name: \"정치\", color: \"red\", description: \"정치 뉴스\" },\n  { id: \"society\", name: \"사회\", color: \"indigo\", description: \"사회 뉴스\" },\n  { id: \"culture\", name: \"문화\", color: \"pink\", description: \"문화 뉴스\" },\n  {\n    id: \"international\",\n    name: \"국제\",\n    color: \"yellow\",\n    description: \"국제 뉴스\",\n  },\n];\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n];\n\nexport const getCategoryInfo = (\n  categoryId,\n  userCategories = DEFAULT_PROJECT_CATEGORIES\n) => {\n  return (\n    userCategories.find((cat) => cat.id === categoryId) ||\n    DEFAULT_PROJECT_CATEGORIES.find((cat) => cat.id === categoryId) || {\n      id: categoryId,\n      name: categoryId,\n      color: \"gray\",\n      description: \"기타\",\n    }\n  );\n};\n\nexport const getCategoryColorClasses = (color) => {\n  const colorOption = COLOR_OPTIONS.find((option) => option.id === color);\n  if (colorOption) {\n    return {\n      bg: colorOption.bgClass,\n      text: colorOption.textClass,\n      border: colorOption.borderClass,\n    };\n  }\n  // 기본값\n  return {\n    bg: \"bg-gray-100\",\n    text: \"text-gray-800\",\n    border: \"border-gray-200\",\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(\n      (project) => project.category === filters.category\n    );\n  }\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      categories: [],\n    };\n  }\n\n  const totalTokens = promptCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || 0);\n  }, 0);\n\n  const categories = [...new Set(promptCards.map((card) => card.category))];\n\n  return {\n    totalCards: promptCards.length,\n    totalTokens,\n    averageTokens: Math.round(totalTokens / promptCards.length),\n    categories,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}