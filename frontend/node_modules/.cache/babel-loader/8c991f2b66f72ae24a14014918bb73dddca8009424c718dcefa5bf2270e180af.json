{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response;\n  console.error(\"API 오류:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\n// 개발 모드용 더미 데이터\nconst DUMMY_PROJECTS = [{\n  projectId: \"proj_001\",\n  name: \"경제 뉴스 제목 생성\",\n  description: \"경제 관련 뉴스 기사의 제목을 생성하는 프로젝트\",\n  category: \"economy\",\n  createdAt: \"2024-07-10T10:00:00Z\",\n  updatedAt: \"2024-07-14T15:30:00Z\",\n  tags: [\"경제\", \"뉴스\", \"제목생성\"],\n  title: \"경제 뉴스 제목 생성\" // ProjectDetail에서 사용\n}, {\n  projectId: \"proj_002\",\n  name: \"기술 뉴스 제목 최적화\",\n  description: \"IT 및 기술 관련 뉴스의 SEO 최적화된 제목 생성\",\n  category: \"tech\",\n  createdAt: \"2024-07-08T14:20:00Z\",\n  updatedAt: \"2024-07-12T09:15:00Z\",\n  tags: [\"기술\", \"IT\", \"SEO\"],\n  title: \"기술 뉴스 제목 최적화\"\n}, {\n  projectId: \"proj_003\",\n  name: \"스포츠 뉴스 제목\",\n  description: \"스포츠 관련 뉴스 제목 생성 및 최적화\",\n  category: \"sports\",\n  createdAt: \"2024-07-05T11:45:00Z\",\n  updatedAt: \"2024-07-13T16:20:00Z\",\n  tags: [\"스포츠\", \"뉴스\"],\n  title: \"스포츠 뉴스 제목\"\n}];\nexport const projectAPI = {\n  getProjects: async () => {\n    console.log(\"🔍 프로젝트 목록 조회 (개발 모드)\");\n    // 실제 API 호출 시도 후 실패하면 더미 데이터 반환\n    try {\n      const response = await api.get(\"/projects\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      return {\n        projects: DUMMY_PROJECTS,\n        count: DUMMY_PROJECTS.length\n      };\n    }\n  },\n  getProject: async projectId => {\n    console.log(\"🔍 프로젝트 상세 조회 (개발 모드):\", projectId);\n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      const project = DUMMY_PROJECTS.find(p => p.projectId === projectId);\n      if (!project) {\n        throw new Error(\"프로젝트를 찾을 수 없습니다\");\n      }\n      return project;\n    }\n  },\n  createProject: async projectData => {\n    console.log(\"🆕 프로젝트 생성 (개발 모드):\", projectData);\n    try {\n      const response = await api.post(\"/projects\", projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const newProject = {\n        projectId: `proj_${Date.now()}`,\n        ...projectData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        title: projectData.name // ProjectDetail 호환성\n      };\n      DUMMY_PROJECTS.push(newProject);\n      return newProject;\n    }\n  },\n  updateProject: async (projectId, projectData) => {\n    console.log(\"✏️ 프로젝트 수정 (개발 모드):\", projectId, projectData);\n    try {\n      const response = await api.put(`/projects/${projectId}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS[index] = {\n          ...DUMMY_PROJECTS[index],\n          ...projectData,\n          updatedAt: new Date().toISOString()\n        };\n        return DUMMY_PROJECTS[index];\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  },\n  deleteProject: async projectId => {\n    console.log(\"🗑️ 프로젝트 삭제 (개발 모드):\", projectId);\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS.splice(index, 1);\n        return {\n          success: true\n        };\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  }\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회:\", projectId);\n    const params = includeContent ? {\n      include_content: \"true\"\n    } : {};\n    const response = await api.get(`/prompts/${projectId}`, {\n      params\n    });\n    console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n    return response.data;\n  },\n  // 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    console.log(\"🆕 프롬프트 생성:\", {\n      projectId,\n      promptData\n    });\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  // 프롬프트 카드 수정 - S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정:\", {\n      projectId,\n      promptId\n    });\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    console.log(\"🗑️ 프롬프트 삭제:\", {\n      projectId,\n      promptId\n    });\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 3. 제목 생성 API (Bedrock Claude 호출)\n// =============================================================================\nexport const generateAPI = {\n  // 실제 Bedrock Claude 호출\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작:\", {\n      projectId,\n      articleLength: articleContent.length,\n      userRequest\n    });\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article: articleContent,\n      userRequest\n    });\n    console.log(\"✅ 제목 생성 완료\");\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 4. 유틸리티\n// =============================================================================\nexport const handleAPIError = error => {\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    return {\n      message: (data === null || data === void 0 ? void 0 : data.error) || `서버 오류 (${status})`,\n      status\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 개발 모드: 항상 인증된 상태로 처리\n    return true;\n  },\n  getCurrentUser: () => {\n    // 개발 모드: 가짜 사용자 정보 반환\n    return {\n      id: \"dev-user\",\n      email: \"dev@example.com\",\n      name: \"개발자\"\n    };\n  },\n  signin: async credentials => {\n    // 개발 모드: 가짜 로그인\n    console.log(\"🔐 개발 모드 로그인:\", credentials);\n    return {\n      success: true,\n      message: \"로그인 성공 (개발 모드)\"\n    };\n  },\n  signup: async userData => {\n    // 개발 모드: 가짜 회원가입\n    console.log(\"📝 개발 모드 회원가입:\", userData);\n    return {\n      success: true,\n      message: \"회원가입 성공 (개발 모드)\"\n    };\n  },\n  signout: async () => {\n    // 개발 모드: 가짜 로그아웃\n    console.log(\"👋 개발 모드 로그아웃\");\n    return {\n      success: true\n    };\n  },\n  verifyEmail: async verificationData => {\n    console.log(\"✉️ 개발 모드 이메일 인증:\", verificationData);\n    return {\n      success: true,\n      message: \"이메일 인증 성공 (개발 모드)\"\n    };\n  },\n  forgotPassword: async email => {\n    console.log(\"🔄 개발 모드 비밀번호 재설정:\", email);\n    return {\n      success: true,\n      message: \"비밀번호 재설정 이메일 발송 (개발 모드)\"\n    };\n  },\n  confirmPassword: async resetData => {\n    console.log(\"🔒 개발 모드 비밀번호 확인:\", resetData);\n    return {\n      success: true,\n      message: \"비밀번호 재설정 성공 (개발 모드)\"\n    };\n  }\n};\n\n// =============================================================================\n// 6. 카테고리 API\n// =============================================================================\nexport const DEFAULT_PROJECT_CATEGORIES = [{\n  id: \"news\",\n  name: \"뉴스\",\n  color: \"blue\",\n  description: \"일반 뉴스 기사\"\n}, {\n  id: \"economy\",\n  name: \"경제\",\n  color: \"green\",\n  description: \"경제 관련 기사\"\n}, {\n  id: \"tech\",\n  name: \"기술\",\n  color: \"purple\",\n  description: \"기술 및 IT 기사\"\n}, {\n  id: \"sports\",\n  name: \"스포츠\",\n  color: \"orange\",\n  description: \"스포츠 기사\"\n}, {\n  id: \"culture\",\n  name: \"문화\",\n  color: \"pink\",\n  description: \"문화 및 예술 기사\"\n}];\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 개발 모드: 기본 카테고리 반환\n    return {\n      categories: DEFAULT_PROJECT_CATEGORIES\n    };\n  },\n  createCategory: async categoryData => {\n    console.log(\"📁 카테고리 생성:\", categoryData);\n    return {\n      id: `cat_${Date.now()}`,\n      ...categoryData,\n      createdAt: new Date().toISOString()\n    };\n  },\n  updateCategory: async (categoryId, categoryData) => {\n    console.log(\"📝 카테고리 수정:\", categoryId, categoryData);\n    return {\n      success: true\n    };\n  },\n  deleteCategory: async categoryId => {\n    console.log(\"🗑️ 카테고리 삭제:\", categoryId);\n    return {\n      success: true\n    };\n  }\n};\nexport const projectCategoryAPI = {\n  updateProjectCategory: async (projectId, categoryId) => {\n    console.log(\"📂 프로젝트 카테고리 변경:\", projectId, categoryId);\n    return {\n      success: true\n    };\n  }\n};\n\n// =============================================================================\n// 7. 오케스트레이션 API\n// =============================================================================\nexport const orchestrationAPI = {\n  startExecution: async (projectId, data) => {\n    console.log(\"🚀 오케스트레이션 시작:\", projectId, data);\n    return {\n      executionArn: `exec_${Date.now()}`,\n      status: \"RUNNING\"\n    };\n  },\n  getExecutionStatus: async executionArn => {\n    console.log(\"📊 실행 상태 조회:\", executionArn);\n    return {\n      status: \"SUCCEEDED\",\n      result: {\n        message: \"완료됨\"\n      }\n    };\n  }\n};\n\n// =============================================================================\n// 8. 유틸리티 함수들\n// =============================================================================\nexport const getCategoryInfo = (categoryId, userCategories = DEFAULT_PROJECT_CATEGORIES) => {\n  const category = userCategories.find(cat => cat.id === categoryId);\n  return category || {\n    id: categoryId,\n    name: \"알 수 없음\",\n    color: \"gray\",\n    description: \"알 수 없는 카테고리\"\n  };\n};\nexport const getCategoryColorClasses = color => {\n  const colorMap = {\n    blue: \"bg-blue-50 text-blue-700 border-blue-200\",\n    green: \"bg-green-50 text-green-700 border-green-200\",\n    purple: \"bg-purple-50 text-purple-700 border-purple-200\",\n    orange: \"bg-orange-50 text-orange-700 border-orange-200\",\n    pink: \"bg-pink-50 text-pink-700 border-pink-200\",\n    red: \"bg-red-50 text-red-700 border-red-200\",\n    yellow: \"bg-yellow-50 text-yellow-700 border-yellow-200\",\n    indigo: \"bg-indigo-50 text-indigo-700 border-indigo-200\",\n    gray: \"bg-gray-50 text-gray-700 border-gray-200\"\n  };\n  return colorMap[color] || colorMap.gray;\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(project => project.category === filters.category);\n  }\n\n  // 검색 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => project.name.toLowerCase().includes(query) || project.description && project.description.toLowerCase().includes(query) || project.tags && project.tags.some(tag => tag.toLowerCase().includes(query)));\n  }\n\n  // 정렬\n  filtered.sort((a, b) => {\n    switch (filters.sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name, \"ko\");\n      case \"updated\":\n        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);\n      case \"created\":\n      default:\n        return new Date(b.createdAt) - new Date(a.createdAt);\n    }\n  });\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (!count || count === 0) return \"0\";\n  if (count < 1000) return count.toString();\n  if (count < 1000000) return `${(count / 1000).toFixed(1)}K`;\n  return `${(count / 1000000).toFixed(1)}M`;\n};\nexport const formatFileSize = bytes => {\n  if (!bytes || bytes === 0) return \"0 B\";\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      totalSize: 0,\n      categories: {}\n    };\n  }\n  const stats = {\n    totalCards: promptCards.length,\n    totalTokens: 0,\n    totalSize: 0,\n    categories: {}\n  };\n  promptCards.forEach(card => {\n    // 토큰 수 계산 (대략적으로 글자 수 / 4)\n    const contentLength = (card.content || \"\").length;\n    const estimatedTokens = Math.ceil(contentLength / 4);\n    stats.totalTokens += estimatedTokens;\n\n    // 파일 크기 계산 (UTF-8 기준)\n    stats.totalSize += new Blob([card.content || \"\"]).size;\n\n    // 카테고리별 통계\n    const category = card.category || \"uncategorized\";\n    if (!stats.categories[category]) {\n      stats.categories[category] = {\n        count: 0,\n        tokens: 0,\n        size: 0\n      };\n    }\n    stats.categories[category].count++;\n    stats.categories[category].tokens += estimatedTokens;\n    stats.categories[category].size += new Blob([card.content || \"\"]).size;\n  });\n  return stats;\n};\n\n// 색상 옵션\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파란색\",\n  class: \"bg-blue-500\"\n}, {\n  id: \"green\",\n  name: \"초록색\",\n  class: \"bg-green-500\"\n}, {\n  id: \"purple\",\n  name: \"보라색\",\n  class: \"bg-purple-500\"\n}, {\n  id: \"orange\",\n  name: \"주황색\",\n  class: \"bg-orange-500\"\n}, {\n  id: \"pink\",\n  name: \"분홍색\",\n  class: \"bg-pink-500\"\n}, {\n  id: \"red\",\n  name: \"빨간색\",\n  class: \"bg-red-500\"\n}, {\n  id: \"yellow\",\n  name: \"노란색\",\n  class: \"bg-yellow-500\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  class: \"bg-indigo-500\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  class: \"bg-gray-500\"\n}];\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","message","Promise","reject","DUMMY_PROJECTS","projectId","name","description","category","createdAt","updatedAt","tags","title","projectAPI","getProjects","get","data","projects","count","length","getProject","project","find","p","Error","createProject","projectData","post","newProject","Date","now","toISOString","push","updateProject","put","index","findIndex","deleteProject","delete","splice","success","promptCardAPI","getPromptCards","includeContent","params","include_content","createPromptCard","promptData","updatePromptCard","promptId","deletePromptCard","generateAPI","generateTitle","articleContent","userRequest","articleLength","article","handleAPIError","authAPI","isAuthenticated","getCurrentUser","id","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","DEFAULT_PROJECT_CATEGORIES","color","categoryAPI","getUserCategories","categories","createCategory","categoryData","updateCategory","categoryId","deleteCategory","projectCategoryAPI","updateProjectCategory","orchestrationAPI","startExecution","executionArn","getExecutionStatus","result","getCategoryInfo","userCategories","cat","getCategoryColorClasses","colorMap","blue","green","purple","orange","pink","red","yellow","indigo","gray","filterProjects","filters","filtered","filter","searchQuery","query","toLowerCase","includes","some","tag","sort","a","b","sortBy","localeCompare","formatTokenCount","toString","toFixed","formatFileSize","bytes","sizes","i","Math","floor","pow","calculatePromptStats","promptCards","totalCards","totalTokens","totalSize","stats","forEach","card","contentLength","content","estimatedTokens","ceil","Blob","size","tokens","COLOR_OPTIONS","class"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류:\", error.response?.status, error.message);\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\n// 개발 모드용 더미 데이터\nconst DUMMY_PROJECTS = [\n  {\n    projectId: \"proj_001\",\n    name: \"경제 뉴스 제목 생성\",\n    description: \"경제 관련 뉴스 기사의 제목을 생성하는 프로젝트\",\n    category: \"economy\",\n    createdAt: \"2024-07-10T10:00:00Z\",\n    updatedAt: \"2024-07-14T15:30:00Z\",\n    tags: [\"경제\", \"뉴스\", \"제목생성\"],\n    title: \"경제 뉴스 제목 생성\" // ProjectDetail에서 사용\n  },\n  {\n    projectId: \"proj_002\", \n    name: \"기술 뉴스 제목 최적화\",\n    description: \"IT 및 기술 관련 뉴스의 SEO 최적화된 제목 생성\",\n    category: \"tech\",\n    createdAt: \"2024-07-08T14:20:00Z\",\n    updatedAt: \"2024-07-12T09:15:00Z\",\n    tags: [\"기술\", \"IT\", \"SEO\"],\n    title: \"기술 뉴스 제목 최적화\"\n  },\n  {\n    projectId: \"proj_003\",\n    name: \"스포츠 뉴스 제목\",\n    description: \"스포츠 관련 뉴스 제목 생성 및 최적화\",\n    category: \"sports\", \n    createdAt: \"2024-07-05T11:45:00Z\",\n    updatedAt: \"2024-07-13T16:20:00Z\",\n    tags: [\"스포츠\", \"뉴스\"],\n    title: \"스포츠 뉴스 제목\"\n  }\n];\n\nexport const projectAPI = {\n  getProjects: async () => {\n    console.log(\"🔍 프로젝트 목록 조회 (개발 모드)\");\n    // 실제 API 호출 시도 후 실패하면 더미 데이터 반환\n    try {\n      const response = await api.get(\"/projects\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      return { \n        projects: DUMMY_PROJECTS,\n        count: DUMMY_PROJECTS.length \n      };\n    }\n  },\n\n  getProject: async (projectId) => {\n    console.log(\"🔍 프로젝트 상세 조회 (개발 모드):\", projectId);\n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      const project = DUMMY_PROJECTS.find(p => p.projectId === projectId);\n      if (!project) {\n        throw new Error(\"프로젝트를 찾을 수 없습니다\");\n      }\n      return project;\n    }\n  },\n\n  createProject: async (projectData) => {\n    console.log(\"🆕 프로젝트 생성 (개발 모드):\", projectData);\n    try {\n      const response = await api.post(\"/projects\", projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const newProject = {\n        projectId: `proj_${Date.now()}`,\n        ...projectData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        title: projectData.name // ProjectDetail 호환성\n      };\n      DUMMY_PROJECTS.push(newProject);\n      return newProject;\n    }\n  },\n\n  updateProject: async (projectId, projectData) => {\n    console.log(\"✏️ 프로젝트 수정 (개발 모드):\", projectId, projectData);\n    try {\n      const response = await api.put(`/projects/${projectId}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS[index] = {\n          ...DUMMY_PROJECTS[index],\n          ...projectData,\n          updatedAt: new Date().toISOString()\n        };\n        return DUMMY_PROJECTS[index];\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  },\n\n  deleteProject: async (projectId) => {\n    console.log(\"🗑️ 프로젝트 삭제 (개발 모드):\", projectId);\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS.splice(index, 1);\n        return { success: true };\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  },\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회:\", projectId);\n\n    const params = includeContent ? { include_content: \"true\" } : {};\n    const response = await api.get(`/prompts/${projectId}`, { params });\n\n    console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n    return response.data;\n  },\n\n  // 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    console.log(\"🆕 프롬프트 생성:\", { projectId, promptData });\n\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  // 프롬프트 카드 수정 - S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정:\", { projectId, promptId });\n\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    console.log(\"🗑️ 프롬프트 삭제:\", { projectId, promptId });\n\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 3. 제목 생성 API (Bedrock Claude 호출)\n// =============================================================================\nexport const generateAPI = {\n  // 실제 Bedrock Claude 호출\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작:\", {\n      projectId,\n      articleLength: articleContent.length,\n      userRequest,\n    });\n\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article: articleContent,\n      userRequest,\n    });\n\n    console.log(\"✅ 제목 생성 완료\");\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 4. 유틸리티\n// =============================================================================\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    const { status, data } = error.response;\n    return {\n      message: data?.error || `서버 오류 (${status})`,\n      status,\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0,\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1,\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 개발 모드: 항상 인증된 상태로 처리\n    return true;\n  },\n\n  getCurrentUser: () => {\n    // 개발 모드: 가짜 사용자 정보 반환\n    return {\n      id: \"dev-user\",\n      email: \"dev@example.com\",\n      name: \"개발자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    // 개발 모드: 가짜 로그인\n    console.log(\"🔐 개발 모드 로그인:\", credentials);\n    return { success: true, message: \"로그인 성공 (개발 모드)\" };\n  },\n\n  signup: async (userData) => {\n    // 개발 모드: 가짜 회원가입\n    console.log(\"📝 개발 모드 회원가입:\", userData);\n    return { success: true, message: \"회원가입 성공 (개발 모드)\" };\n  },\n\n  signout: async () => {\n    // 개발 모드: 가짜 로그아웃\n    console.log(\"👋 개발 모드 로그아웃\");\n    return { success: true };\n  },\n\n  verifyEmail: async (verificationData) => {\n    console.log(\"✉️ 개발 모드 이메일 인증:\", verificationData);\n    return { success: true, message: \"이메일 인증 성공 (개발 모드)\" };\n  },\n\n  forgotPassword: async (email) => {\n    console.log(\"🔄 개발 모드 비밀번호 재설정:\", email);\n    return { success: true, message: \"비밀번호 재설정 이메일 발송 (개발 모드)\" };\n  },\n\n  confirmPassword: async (resetData) => {\n    console.log(\"🔒 개발 모드 비밀번호 확인:\", resetData);\n    return { success: true, message: \"비밀번호 재설정 성공 (개발 모드)\" };\n  },\n};\n\n// =============================================================================\n// 6. 카테고리 API\n// =============================================================================\nexport const DEFAULT_PROJECT_CATEGORIES = [\n  { id: \"news\", name: \"뉴스\", color: \"blue\", description: \"일반 뉴스 기사\" },\n  { id: \"economy\", name: \"경제\", color: \"green\", description: \"경제 관련 기사\" },\n  { id: \"tech\", name: \"기술\", color: \"purple\", description: \"기술 및 IT 기사\" },\n  { id: \"sports\", name: \"스포츠\", color: \"orange\", description: \"스포츠 기사\" },\n  { id: \"culture\", name: \"문화\", color: \"pink\", description: \"문화 및 예술 기사\" },\n];\n\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 개발 모드: 기본 카테고리 반환\n    return { categories: DEFAULT_PROJECT_CATEGORIES };\n  },\n\n  createCategory: async (categoryData) => {\n    console.log(\"📁 카테고리 생성:\", categoryData);\n    return { \n      id: `cat_${Date.now()}`, \n      ...categoryData, \n      createdAt: new Date().toISOString() \n    };\n  },\n\n  updateCategory: async (categoryId, categoryData) => {\n    console.log(\"📝 카테고리 수정:\", categoryId, categoryData);\n    return { success: true };\n  },\n\n  deleteCategory: async (categoryId) => {\n    console.log(\"🗑️ 카테고리 삭제:\", categoryId);\n    return { success: true };\n  },\n};\n\nexport const projectCategoryAPI = {\n  updateProjectCategory: async (projectId, categoryId) => {\n    console.log(\"📂 프로젝트 카테고리 변경:\", projectId, categoryId);\n    return { success: true };\n  },\n};\n\n// =============================================================================\n// 7. 오케스트레이션 API\n// =============================================================================\nexport const orchestrationAPI = {\n  startExecution: async (projectId, data) => {\n    console.log(\"🚀 오케스트레이션 시작:\", projectId, data);\n    return { \n      executionArn: `exec_${Date.now()}`, \n      status: \"RUNNING\" \n    };\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    console.log(\"📊 실행 상태 조회:\", executionArn);\n    return { \n      status: \"SUCCEEDED\", \n      result: { message: \"완료됨\" } \n    };\n  },\n};\n\n// =============================================================================\n// 8. 유틸리티 함수들\n// =============================================================================\nexport const getCategoryInfo = (categoryId, userCategories = DEFAULT_PROJECT_CATEGORIES) => {\n  const category = userCategories.find(cat => cat.id === categoryId);\n  return category || { \n    id: categoryId, \n    name: \"알 수 없음\", \n    color: \"gray\", \n    description: \"알 수 없는 카테고리\" \n  };\n};\n\nexport const getCategoryColorClasses = (color) => {\n  const colorMap = {\n    blue: \"bg-blue-50 text-blue-700 border-blue-200\",\n    green: \"bg-green-50 text-green-700 border-green-200\",\n    purple: \"bg-purple-50 text-purple-700 border-purple-200\",\n    orange: \"bg-orange-50 text-orange-700 border-orange-200\",\n    pink: \"bg-pink-50 text-pink-700 border-pink-200\",\n    red: \"bg-red-50 text-red-700 border-red-200\",\n    yellow: \"bg-yellow-50 text-yellow-700 border-yellow-200\",\n    indigo: \"bg-indigo-50 text-indigo-700 border-indigo-200\",\n    gray: \"bg-gray-50 text-gray-700 border-gray-200\",\n  };\n  return colorMap[color] || colorMap.gray;\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(project => project.category === filters.category);\n  }\n\n  // 검색 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project =>\n      project.name.toLowerCase().includes(query) ||\n      (project.description && project.description.toLowerCase().includes(query)) ||\n      (project.tags && project.tags.some(tag => tag.toLowerCase().includes(query)))\n    );\n  }\n\n  // 정렬\n  filtered.sort((a, b) => {\n    switch (filters.sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name, \"ko\");\n      case \"updated\":\n        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);\n      case \"created\":\n      default:\n        return new Date(b.createdAt) - new Date(a.createdAt);\n    }\n  });\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (!count || count === 0) return \"0\";\n  if (count < 1000) return count.toString();\n  if (count < 1000000) return `${(count / 1000).toFixed(1)}K`;\n  return `${(count / 1000000).toFixed(1)}M`;\n};\n\nexport const formatFileSize = (bytes) => {\n  if (!bytes || bytes === 0) return \"0 B\";\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      totalSize: 0,\n      categories: {},\n    };\n  }\n\n  const stats = {\n    totalCards: promptCards.length,\n    totalTokens: 0,\n    totalSize: 0,\n    categories: {},\n  };\n\n  promptCards.forEach(card => {\n    // 토큰 수 계산 (대략적으로 글자 수 / 4)\n    const contentLength = (card.content || \"\").length;\n    const estimatedTokens = Math.ceil(contentLength / 4);\n    stats.totalTokens += estimatedTokens;\n    \n    // 파일 크기 계산 (UTF-8 기준)\n    stats.totalSize += new Blob([card.content || \"\"]).size;\n    \n    // 카테고리별 통계\n    const category = card.category || \"uncategorized\";\n    if (!stats.categories[category]) {\n      stats.categories[category] = { count: 0, tokens: 0, size: 0 };\n    }\n    stats.categories[category].count++;\n    stats.categories[category].tokens += estimatedTokens;\n    stats.categories[category].size += new Blob([card.content || \"\"]).size;\n  });\n\n  return stats;\n};\n\n// 색상 옵션\nexport const COLOR_OPTIONS = [\n  { id: \"blue\", name: \"파란색\", class: \"bg-blue-500\" },\n  { id: \"green\", name: \"초록색\", class: \"bg-green-500\" },\n  { id: \"purple\", name: \"보라색\", class: \"bg-purple-500\" },\n  { id: \"orange\", name: \"주황색\", class: \"bg-orange-500\" },\n  { id: \"pink\", name: \"분홍색\", class: \"bg-pink-500\" },\n  { id: \"red\", name: \"빨간색\", class: \"bg-red-500\" },\n  { id: \"yellow\", name: \"노란색\", class: \"bg-yellow-500\" },\n  { id: \"indigo\", name: \"남색\", class: \"bg-indigo-500\" },\n  { id: \"gray\", name: \"회색\", class: \"bg-gray-500\" },\n];\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}