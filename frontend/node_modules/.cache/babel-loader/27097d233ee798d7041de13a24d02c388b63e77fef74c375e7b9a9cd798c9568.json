{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 채팅 기능을 위한 단순화된 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n */\nexport const useChat = (projectId, projectName) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! ${projectName}의 AI 제목 생성기입니다.\\n\\n기사 내용을 입력해주시면 제목을 생성해드릴게요.`,\n      timestamp: new Date()\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  // 메시지 전송 및 제목 생성\n  const handleSendMessage = useCallback(async (content = inputValue, userRequest = \"\") => {\n    const messageContent = content.trim();\n    if (!messageContent) {\n      toast.error(\"내용을 입력해주세요\");\n      return;\n    }\n\n    // 사용자 메시지 추가\n    const userMessage = {\n      id: `user-${Date.now()}`,\n      type: \"user\",\n      content: messageContent,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue(\"\");\n    setIsGenerating(true);\n    try {\n      console.log(\"🚀 제목 생성 요청:\", {\n        projectId,\n        userRequest\n      });\n\n      // 실제 Bedrock Claude API 호출\n      const response = await generateAPI.generateTitle(projectId, messageContent, userRequest);\n\n      // AI 응답 메시지 추가\n      const aiMessage = {\n        id: `ai-${Date.now()}`,\n        type: \"assistant\",\n        content: response.result || response.titles || \"제목 생성에 실패했습니다.\",\n        timestamp: new Date(),\n        metadata: {\n          promptCount: response.promptCount,\n          model: response.model\n        }\n      };\n      setMessages(prev => [...prev, aiMessage]);\n      toast.success(\"제목이 생성되었습니다!\");\n    } catch (error) {\n      console.error(\"❌ 제목 생성 실패:\", error);\n      const errorMessage = {\n        id: `error-${Date.now()}`,\n        type: \"assistant\",\n        content: \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      toast.error(\"제목 생성에 실패했습니다\");\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [projectId, inputValue]);\n\n  // 키보드 이벤트 처리\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      if (!isGenerating) {\n        handleSendMessage();\n      }\n    }\n  }, [handleSendMessage, isGenerating]);\n\n  // 메시지 복사\n  const handleCopyMessage = useCallback(async (messageId, content) => {\n    try {\n      await copyToClipboard(content);\n      setCopiedMessage(messageId);\n      toast.success(\"클립보드에 복사되었습니다\");\n      setTimeout(() => setCopiedMessage(null), 2000);\n    } catch (error) {\n      toast.error(\"복사에 실패했습니다\");\n    }\n  }, []);\n\n  // 제목만 복사\n  const handleCopyTitle = useCallback(async title => {\n    try {\n      await copyToClipboard(title);\n      toast.success(\"제목이 복사되었습니다\");\n    } catch (error) {\n      toast.error(\"복사에 실패했습니다\");\n    }\n  }, []);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle\n  };\n};\n_s(useChat, \"ZxpM+Fb07nzwuSdZLaodgCKNSvM=\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","generateAPI","useChat","projectId","projectName","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","isGenerating","setIsGenerating","messagesEndRef","inputRef","welcomeMessage","id","type","content","timestamp","Date","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","userRequest","messageContent","trim","error","userMessage","now","prev","console","log","response","generateTitle","aiMessage","result","titles","metadata","promptCount","model","success","errorMessage","isError","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","setTimeout","handleCopyTitle","title"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 채팅 기능을 위한 단순화된 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n */\nexport const useChat = (projectId, projectName) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! ${projectName}의 AI 제목 생성기입니다.\\n\\n기사 내용을 입력해주시면 제목을 생성해드릴게요.`,\n      timestamp: new Date(),\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  // 메시지 전송 및 제목 생성\n  const handleSendMessage = useCallback(\n    async (content = inputValue, userRequest = \"\") => {\n      const messageContent = content.trim();\n      if (!messageContent) {\n        toast.error(\"내용을 입력해주세요\");\n        return;\n      }\n\n      // 사용자 메시지 추가\n      const userMessage = {\n        id: `user-${Date.now()}`,\n        type: \"user\",\n        content: messageContent,\n        timestamp: new Date(),\n      };\n\n      setMessages((prev) => [...prev, userMessage]);\n      setInputValue(\"\");\n      setIsGenerating(true);\n\n      try {\n        console.log(\"🚀 제목 생성 요청:\", { projectId, userRequest });\n\n        // 실제 Bedrock Claude API 호출\n        const response = await generateAPI.generateTitle(\n          projectId,\n          messageContent,\n          userRequest\n        );\n\n        // AI 응답 메시지 추가\n        const aiMessage = {\n          id: `ai-${Date.now()}`,\n          type: \"assistant\",\n          content:\n            response.result || response.titles || \"제목 생성에 실패했습니다.\",\n          timestamp: new Date(),\n          metadata: {\n            promptCount: response.promptCount,\n            model: response.model,\n          },\n        };\n\n        setMessages((prev) => [...prev, aiMessage]);\n        toast.success(\"제목이 생성되었습니다!\");\n      } catch (error) {\n        console.error(\"❌ 제목 생성 실패:\", error);\n\n        const errorMessage = {\n          id: `error-${Date.now()}`,\n          type: \"assistant\",\n          content:\n            \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          timestamp: new Date(),\n          isError: true,\n        };\n\n        setMessages((prev) => [...prev, errorMessage]);\n        toast.error(\"제목 생성에 실패했습니다\");\n      } finally {\n        setIsGenerating(false);\n      }\n    },\n    [projectId, inputValue]\n  );\n\n  // 키보드 이벤트 처리\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        if (!isGenerating) {\n          handleSendMessage();\n        }\n      }\n    },\n    [handleSendMessage, isGenerating]\n  );\n\n  // 메시지 복사\n  const handleCopyMessage = useCallback(async (messageId, content) => {\n    try {\n      await copyToClipboard(content);\n      setCopiedMessage(messageId);\n      toast.success(\"클립보드에 복사되었습니다\");\n      setTimeout(() => setCopiedMessage(null), 2000);\n    } catch (error) {\n      toast.error(\"복사에 실패했습니다\");\n    }\n  }, []);\n\n  // 제목만 복사\n  const handleCopyTitle = useCallback(async (title) => {\n    try {\n      await copyToClipboard(title);\n      toast.success(\"제목이 복사되었습니다\");\n    } catch (error) {\n      toast.error(\"복사에 실패했습니다\");\n    }\n  }, []);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}