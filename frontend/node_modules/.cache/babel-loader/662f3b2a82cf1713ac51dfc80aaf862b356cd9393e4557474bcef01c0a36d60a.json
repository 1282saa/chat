{"ast":null,"code":"import axios from \"axios\";\n\n// 🔧 API 기본 설정 개선\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 개선\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 300000 // 🔧 수정: 5분으로 단축 (기존 15분은 너무 길어서 504 타임아웃 발생)\n});\n\n// 🔧 개선된 generateAPI\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    var _data$chat_history;\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history = data.chat_history) === null || _data$chat_history === void 0 ? void 0 : _data$chat_history.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        responseData: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n  // 🔧 스트리밍 API 완전 개선 - 실패 시 즉시 폴백\n  generateTitleStream: async (projectId, data, onChunk, onError, onComplete) => {\n    var _data$chat_history2;\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history2 = data.chat_history) === null || _data$chat_history2 === void 0 ? void 0 : _data$chat_history2.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n\n    // 🔧 스트리밍 시도 전에 간단한 연결 테스트\n    try {\n      // 스트리밍 엔드포인트 사전 테스트 (매우 짧은 타임아웃)\n      await api.post(`/projects/${projectId}/generate/stream`, {\n        userInput: \"test\",\n        chat_history: []\n      }, {\n        timeout: 5000,\n        // 5초 테스트\n        validateStatus: () => false // 모든 상태 코드 허용 (테스트용)\n      });\n    } catch (testError) {\n      console.log(\"🔧 스트리밍 엔드포인트 사전 테스트 실패, 즉시 폴백:\", testError.code);\n\n      // 즉시 일반 API로 폴백\n      try {\n        const fallbackResponse = await api.post(`/projects/${projectId}/generate`, data);\n        console.log(\"✅ 즉시 폴백 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString()\n        });\n\n        // 🔧 폴백 응답을 스트리밍 형태로 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          // 빠른 속도로 워드 단위 스트리밍 시뮬레이션\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, {\n              content: word\n            });\n\n            // 매우 짧은 지연 (실시간 느낌)\n            await new Promise(resolve => setTimeout(resolve, 50));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString()\n          });\n        }\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백도 실패:\", fallbackError);\n        if (onError) {\n          onError(new Error(\"모든 API 엔드포인트가 실패했습니다. 서버 상태를 확인해주세요.\"));\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다. 잠시 후 다시 시도해주세요.\");\n      }\n    }\n\n    // 🔧 실제 스트리밍 시도 (사전 테스트 통과한 경우에만)\n    try {\n      var _responseData$result, _responseData$chunks;\n      console.log(\"🔧 실제 스트리밍 API 호출 시도...\");\n      const response = await api.post(`/projects/${projectId}/generate/stream`, data, {\n        timeout: 120000,\n        // 🔧 2분으로 단축\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      if (!response || !response.data) {\n        throw new Error(\"스트리밍 응답이 없습니다\");\n      }\n      const responseData = response.data;\n      console.log(\"✅ 스트리밍 응답 수신:\", {\n        mode: responseData.mode,\n        resultLength: ((_responseData$result = responseData.result) === null || _responseData$result === void 0 ? void 0 : _responseData$result.length) || 0,\n        chunksCount: ((_responseData$chunks = responseData.chunks) === null || _responseData$chunks === void 0 ? void 0 : _responseData$chunks.length) || 0,\n        timestamp: new Date().toISOString()\n      });\n\n      // 청크 데이터 처리\n      if (responseData.chunks && Array.isArray(responseData.chunks)) {\n        for (const chunk of responseData.chunks) {\n          if (chunk.content && onChunk) {\n            onChunk(chunk.content, chunk);\n            await new Promise(resolve => setTimeout(resolve, 30)); // 스트리밍 효과\n          }\n        }\n      } else if (responseData.result && onChunk) {\n        // 청크 없는 경우 텍스트를 단어 단위로 분할\n        const words = responseData.result.split(\" \");\n        const chunkSize = Math.max(1, Math.floor(words.length / 20)); // 20개 청크\n\n        for (let i = 0; i < words.length; i += chunkSize) {\n          const chunkWords = words.slice(i, i + chunkSize);\n          const chunkContent = chunkWords.join(\" \") + (i + chunkSize < words.length ? \" \" : \"\");\n          if (chunkContent.trim()) {\n            onChunk(chunkContent, {\n              content: chunkContent\n            });\n            await new Promise(resolve => setTimeout(resolve, 80));\n          }\n        }\n      }\n\n      // 완료 콜백 호출\n      if (onComplete) {\n        onComplete({\n          result: responseData.result,\n          model_info: responseData.model_info,\n          performance_metrics: responseData.performance_metrics,\n          timestamp: responseData.timestamp || new Date().toISOString()\n        });\n      }\n      return responseData;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error(\"스트리밍 대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n        timestamp: new Date().toISOString()\n      });\n\n      // 🔧 스트리밍 실패 시 즉시 일반 API로 폴백\n      if (error.code === \"ECONNABORTED\" || error.code === \"ERR_NETWORK\" || ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 504) {\n        console.log(\"🔧 스트리밍 실패로 인한 일반 API 폴백...\");\n        try {\n          const fallbackResponse = await api.post(`/projects/${projectId}/generate`, data);\n          console.log(\"✅ 폴백 API 성공:\", {\n            mode: fallbackResponse.data.mode,\n            timestamp: new Date().toISOString()\n          });\n          if (onComplete) {\n            onComplete({\n              result: fallbackResponse.data.result,\n              model_info: fallbackResponse.data.model_info,\n              performance_metrics: fallbackResponse.data.performance_metrics,\n              timestamp: new Date().toISOString()\n            });\n          }\n          return fallbackResponse.data;\n        } catch (fallbackError) {\n          console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n          if (onError) {\n            onError(new Error(\"네트워크 연결에 문제가 있습니다. 잠시 후 다시 시도해주세요.\"));\n          }\n          throw new Error(\"서비스 연결에 실패했습니다.\");\n        }\n      }\n\n      // 기타 오류\n      if (onError) {\n        onError(error);\n      }\n      throw error;\n    }\n  },\n  getExecutionStatus: async executionArn => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\"\n    };\n  }\n};\n\n// =============================================================================\n// 4. 채팅 API (generate API로 리다이렉트)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    // 채팅은 generate API를 사용하여 처리\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId\n    });\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [] // 현재 채팅 히스토리는 비워둠\n      });\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\"\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 채팅 히스토리를 별도로 저장하지 않음\n    console.log(\"채팅 히스토리 조회:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message: \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"\n    };\n  },\n  getChatSessions: async (projectId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 목록 조회:\", {\n      projectId,\n      userId\n    });\n    return {\n      sessions: [],\n      message: \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"\n    };\n  },\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 삭제:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\"\n    };\n  },\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  }\n};\n\n// 🔧 개선된 오류 처리 함수\nexport const handleAPIError = error => {\n  var _error$response5, _error$response6, _error$response7, _error$response8, _error$message, _error$message2;\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    statusText: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.statusText,\n    data: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data,\n    timestamp: new Date().toISOString()\n  });\n\n  // 🔧 Gateway Timeout 특별 처리\n  if (((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) === 504) {\n    return {\n      message: \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\"\n    };\n  }\n\n  // 🔧 CORS 오류 특별 처리\n  if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"CORS\") || error.code === \"ERR_NETWORK\" || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"Access-Control-Allow-Origin\")) {\n    return {\n      message: \"서버 연결 설정에 문제가 있습니다. 관리자에게 문의하세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\"\n    };\n  }\n\n  // 🔧 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message: \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\"\n    };\n  }\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || \"서버 오류가 발생했습니다\";\n    switch (status) {\n      case 400:\n        return {\n          message: `잘못된 요청: ${message}`,\n          statusCode: 400\n        };\n      case 401:\n        return {\n          message: \"인증이 필요합니다\",\n          statusCode: 401\n        };\n      case 403:\n        return {\n          message: \"권한이 없습니다\",\n          statusCode: 403\n        };\n      case 404:\n        return {\n          message: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404\n        };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429\n        };\n      case 500:\n        return {\n          message: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500\n        };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\"\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\"\n    };\n  }\n};\n\n// =============================================================================\n// 6. 동적 프롬프트 시스템 - 기본 설정 및 헬퍼 함수들\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message: \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  // 최대 프롬프트 카드 개수 제한 (선택사항)\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1\n};\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파랑\",\n  bgClass: \"bg-blue-100\",\n  textClass: \"text-blue-800\",\n  borderClass: \"border-blue-200\"\n}, {\n  id: \"green\",\n  name: \"초록\",\n  bgClass: \"bg-green-100\",\n  textClass: \"text-green-800\",\n  borderClass: \"border-green-200\"\n}, {\n  id: \"purple\",\n  name: \"보라\",\n  bgClass: \"bg-purple-100\",\n  textClass: \"text-purple-800\",\n  borderClass: \"border-purple-200\"\n}, {\n  id: \"orange\",\n  name: \"주황\",\n  bgClass: \"bg-orange-100\",\n  textClass: \"text-orange-800\",\n  borderClass: \"border-orange-200\"\n}, {\n  id: \"red\",\n  name: \"빨강\",\n  bgClass: \"bg-red-100\",\n  textClass: \"text-red-800\",\n  borderClass: \"border-red-200\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  bgClass: \"bg-indigo-100\",\n  textClass: \"text-indigo-800\",\n  borderClass: \"border-indigo-200\"\n}, {\n  id: \"pink\",\n  name: \"분홍\",\n  bgClass: \"bg-pink-100\",\n  textClass: \"text-pink-800\",\n  borderClass: \"border-pink-200\"\n}, {\n  id: \"yellow\",\n  name: \"노랑\",\n  bgClass: \"bg-yellow-100\",\n  textClass: \"text-yellow-800\",\n  borderClass: \"border-yellow-200\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  bgClass: \"bg-gray-100\",\n  textClass: \"text-gray-800\",\n  borderClass: \"border-gray-200\"\n}];\nexport const getPromptCardInfo = promptCard => {\n  // 동적 프롬프트 카드 정보 반환\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false\n  };\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => {\n      var _project$name, _project$description, _project$tags;\n      return ((_project$name = project.name) === null || _project$name === void 0 ? void 0 : _project$name.toLowerCase().includes(query)) || ((_project$description = project.description) === null || _project$description === void 0 ? void 0 : _project$description.toLowerCase().includes(query)) || ((_project$tags = project.tags) === null || _project$tags === void 0 ? void 0 : _project$tags.some(tag => tag.toLowerCase().includes(query)));\n    });\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => {\n        var _a$name;\n        return (_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b.name);\n      });\n      break;\n    default:\n      break;\n  }\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\nexport const formatFileSize = bytes => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false\n    };\n  }\n  const activeCards = promptCards.filter(card => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n  const stepOrders = activeCards.map(card => card.stepOrder || 0).filter(step => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens: activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder\n    }\n  };\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","generateAPI","generateTitle","projectId","data","_data$chat_history","console","log","inputLength","userInput","length","historyLength","chat_history","timestamp","Date","toISOString","response","post","status","mode","message","error","_error$response","_error$response2","code","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","validateStatus","testError","fallbackResponse","result","fullText","words","split","i","word","content","Promise","resolve","setTimeout","model_info","performance_metrics","fallbackError","Error","_responseData$result","_responseData$chunks","Accept","resultLength","chunksCount","chunks","Array","isArray","chunk","chunkSize","Math","max","floor","chunkWords","slice","chunkContent","join","trim","_error$response3","_error$response4","getExecutionStatus","executionArn","output","chatAPI","sendMessage","sessionId","userId","userRequest","getChatHistory","messages","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","handleAPIError","_error$response5","_error$response6","_error$response7","_error$response8","_error$message","_error$message2","statusText","statusCode","errorType","includes","_error$response$data","_error$response$data2","request","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","promptCard","promptId","title","color","description","stepOrder","isActive","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","toString","formatFileSize","bytes","calculatePromptStats","promptCards","totalCards","totalTokens","averageTokens","activeCards","maxStepOrder","hasCustomOrder","card","reduce","sum","tokenCount","contentLength","stepOrders","map","step","round","stepOrderRange","min"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// 🔧 API 기본 설정 개선\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 개선\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 🔧 수정: 5분으로 단축 (기존 15분은 너무 길어서 504 타임아웃 발생)\n});\n\n// 🔧 개선된 generateAPI\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 스트리밍 API 완전 개선 - 실패 시 즉시 폴백\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    // 🔧 스트리밍 시도 전에 간단한 연결 테스트\n    try {\n      // 스트리밍 엔드포인트 사전 테스트 (매우 짧은 타임아웃)\n      await api.post(\n        `/projects/${projectId}/generate/stream`,\n        { userInput: \"test\", chat_history: [] },\n        {\n          timeout: 5000, // 5초 테스트\n          validateStatus: () => false, // 모든 상태 코드 허용 (테스트용)\n        }\n      );\n    } catch (testError) {\n      console.log(\n        \"🔧 스트리밍 엔드포인트 사전 테스트 실패, 즉시 폴백:\",\n        testError.code\n      );\n\n      // 즉시 일반 API로 폴백\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          data\n        );\n\n        console.log(\"✅ 즉시 폴백 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 🔧 폴백 응답을 스트리밍 형태로 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          // 빠른 속도로 워드 단위 스트리밍 시뮬레이션\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n\n            // 매우 짧은 지연 (실시간 느낌)\n            await new Promise((resolve) => setTimeout(resolve, 50));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\n              \"모든 API 엔드포인트가 실패했습니다. 서버 상태를 확인해주세요.\"\n            )\n          );\n        }\n        throw new Error(\n          \"서비스를 사용할 수 없습니다. 잠시 후 다시 시도해주세요.\"\n        );\n      }\n    }\n\n    // 🔧 실제 스트리밍 시도 (사전 테스트 통과한 경우에만)\n    try {\n      console.log(\"🔧 실제 스트리밍 API 호출 시도...\");\n\n      const response = await api.post(\n        `/projects/${projectId}/generate/stream`,\n        data,\n        {\n          timeout: 120000, // 🔧 2분으로 단축\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      );\n\n      if (!response || !response.data) {\n        throw new Error(\"스트리밍 응답이 없습니다\");\n      }\n\n      const responseData = response.data;\n\n      console.log(\"✅ 스트리밍 응답 수신:\", {\n        mode: responseData.mode,\n        resultLength: responseData.result?.length || 0,\n        chunksCount: responseData.chunks?.length || 0,\n        timestamp: new Date().toISOString(),\n      });\n\n      // 청크 데이터 처리\n      if (responseData.chunks && Array.isArray(responseData.chunks)) {\n        for (const chunk of responseData.chunks) {\n          if (chunk.content && onChunk) {\n            onChunk(chunk.content, chunk);\n            await new Promise((resolve) => setTimeout(resolve, 30)); // 스트리밍 효과\n          }\n        }\n      } else if (responseData.result && onChunk) {\n        // 청크 없는 경우 텍스트를 단어 단위로 분할\n        const words = responseData.result.split(\" \");\n        const chunkSize = Math.max(1, Math.floor(words.length / 20)); // 20개 청크\n\n        for (let i = 0; i < words.length; i += chunkSize) {\n          const chunkWords = words.slice(i, i + chunkSize);\n          const chunkContent =\n            chunkWords.join(\" \") + (i + chunkSize < words.length ? \" \" : \"\");\n\n          if (chunkContent.trim()) {\n            onChunk(chunkContent, { content: chunkContent });\n            await new Promise((resolve) => setTimeout(resolve, 80));\n          }\n        }\n      }\n\n      // 완료 콜백 호출\n      if (onComplete) {\n        onComplete({\n          result: responseData.result,\n          model_info: responseData.model_info,\n          performance_metrics: responseData.performance_metrics,\n          timestamp: responseData.timestamp || new Date().toISOString(),\n        });\n      }\n\n      return responseData;\n    } catch (error) {\n      console.error(\"스트리밍 대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        timestamp: new Date().toISOString(),\n      });\n\n      // 🔧 스트리밍 실패 시 즉시 일반 API로 폴백\n      if (\n        error.code === \"ECONNABORTED\" ||\n        error.code === \"ERR_NETWORK\" ||\n        error.response?.status === 504\n      ) {\n        console.log(\"🔧 스트리밍 실패로 인한 일반 API 폴백...\");\n\n        try {\n          const fallbackResponse = await api.post(\n            `/projects/${projectId}/generate`,\n            data\n          );\n\n          console.log(\"✅ 폴백 API 성공:\", {\n            mode: fallbackResponse.data.mode,\n            timestamp: new Date().toISOString(),\n          });\n\n          if (onComplete) {\n            onComplete({\n              result: fallbackResponse.data.result,\n              model_info: fallbackResponse.data.model_info,\n              performance_metrics: fallbackResponse.data.performance_metrics,\n              timestamp: new Date().toISOString(),\n            });\n          }\n\n          return fallbackResponse.data;\n        } catch (fallbackError) {\n          console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n\n          if (onError) {\n            onError(\n              new Error(\n                \"네트워크 연결에 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n              )\n            );\n          }\n\n          throw new Error(\"서비스 연결에 실패했습니다.\");\n        }\n      }\n\n      // 기타 오류\n      if (onError) {\n        onError(error);\n      }\n\n      throw error;\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 4. 채팅 API (generate API로 리다이렉트)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    // 채팅은 generate API를 사용하여 처리\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [], // 현재 채팅 히스토리는 비워둠\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 채팅 히스토리를 별도로 저장하지 않음\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// 🔧 개선된 오류 처리 함수\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 🔧 Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // 🔧 CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message: \"서버 연결 설정에 문제가 있습니다. 관리자에게 문의하세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 🔧 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 403:\n        return { message: \"권한이 없습니다\", statusCode: 403 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 6. 동적 프롬프트 시스템 - 기본 설정 및 헬퍼 함수들\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50, // 최대 프롬프트 카드 개수 제한 (선택사항)\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  // 동적 프롬프트 카드 정보 반환\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}