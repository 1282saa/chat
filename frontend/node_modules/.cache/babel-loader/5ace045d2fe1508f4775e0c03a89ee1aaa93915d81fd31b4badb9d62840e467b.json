{"ast":null,"code":"import{useState,useEffect,useRef,useCallback}from\"react\";/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */export const useWebSocket=projectId=>{const[isConnected,setIsConnected]=useState(false);const[isConnecting,setIsConnecting]=useState(false);const[error,setError]=useState(null);const wsRef=useRef(null);const reconnectTimeoutRef=useRef(null);const reconnectAttempts=useRef(0);const maxReconnectAttempts=5;// WebSocket URL (환경변수나 실제 배포된 URL로 설정)\nconst getWebSocketUrl=useCallback(()=>{const wsUrl=process.env.REACT_APP_WS_URL||\"wss://na17isxiri.execute-api.us-east-1.amazonaws.com/prod\";// URL 형식 검증 및 정규화\nif(!wsUrl.startsWith(\"wss://\")&&!wsUrl.startsWith(\"ws://\")){console.error(\"잘못된 WebSocket URL 형식:\",wsUrl);return null;}// 끝에 슬래시 제거\nconst normalizedUrl=wsUrl.replace(/\\/$/,\"\");console.log(\"WebSocket URL 확인:\",normalizedUrl);console.log(\"환경변수 REACT_APP_WS_URL:\",process.env.REACT_APP_WS_URL);return normalizedUrl;},[]);// WebSocket 연결\nconst connect=useCallback(()=>{var _wsRef$current,_wsRef$current2;// 이미 연결 중이거나 연결된 경우 중복 연결 방지\nif(((_wsRef$current=wsRef.current)===null||_wsRef$current===void 0?void 0:_wsRef$current.readyState)===WebSocket.OPEN||((_wsRef$current2=wsRef.current)===null||_wsRef$current2===void 0?void 0:_wsRef$current2.readyState)===WebSocket.CONNECTING){console.log(\"이미 연결된 WebSocket이 있습니다 (readyState:\",wsRef.current.readyState,\")\");return;}// 이전 연결이 있다면 정리\nif(wsRef.current){wsRef.current.close();wsRef.current=null;}setIsConnecting(true);setError(null);try{const wsUrl=getWebSocketUrl();if(!wsUrl){setError(\"유효하지 않은 WebSocket URL\");setIsConnecting(false);return;}console.log(\"WebSocket 연결 시도:\",wsUrl);console.log(\"브라우저 WebSocket 지원:\",!!window.WebSocket);// 연결 시도 시간 기록\nwindow.wsConnectStart=Date.now();wsRef.current=new WebSocket(wsUrl);// 연결 상태 모니터링\nconst connectionTimeout=setTimeout(()=>{var _wsRef$current3;if(((_wsRef$current3=wsRef.current)===null||_wsRef$current3===void 0?void 0:_wsRef$current3.readyState)===WebSocket.CONNECTING){console.error(\"WebSocket 연결 시간 초과\");wsRef.current.close();setError(\"연결 시간이 초과되었습니다\");setIsConnecting(false);}},10000);// 10초 타임아웃\nwsRef.current.onopen=event=>{var _wsRef$current4,_wsRef$current5,_wsRef$current6;clearTimeout(connectionTimeout);console.log(\"🟢 WebSocket 연결 성공!\");console.log(\"- Event:\",event);console.log(\"- URL:\",(_wsRef$current4=wsRef.current)===null||_wsRef$current4===void 0?void 0:_wsRef$current4.url);console.log(\"- Protocol:\",(_wsRef$current5=wsRef.current)===null||_wsRef$current5===void 0?void 0:_wsRef$current5.protocol);console.log(\"- Extensions:\",(_wsRef$current6=wsRef.current)===null||_wsRef$current6===void 0?void 0:_wsRef$current6.extensions);setIsConnected(true);setIsConnecting(false);setError(null);reconnectAttempts.current=0;};wsRef.current.onclose=event=>{clearTimeout(connectionTimeout);const connectionDuration=Date.now()-(window.wsConnectStart||0);console.log(\"🔴 WebSocket 연결 종료:\");console.log(\"- Code:\",event.code);console.log(\"- Reason:\",event.reason||\"(no reason provided)\");console.log(\"- WasClean:\",event.wasClean);console.log(\"- Connection duration:\",connectionDuration+\"ms\");setIsConnected(false);setIsConnecting(false);// 즉시 종료된 경우 (500ms 이내) - 서버 문제\nif(connectionDuration<500){console.error(\"⚠️ WebSocket이 즉시 종료됨 - 서버 문제 가능성\");// 특정 에러 코드에 따른 세분화된 에러 메시지\nlet errorMessage=\"서버 연결에 실패했습니다.\";switch(event.code){case 1006:errorMessage=\"비정상적인 연결 종료 (네트워크 문제 가능성)\";break;case 1002:errorMessage=\"프로토콜 오류\";break;case 1003:errorMessage=\"지원하지 않는 데이터 타입\";break;case 1011:errorMessage=\"서버 내부 오류\";break;}setError(errorMessage);return;}// 자동 재연결 (정상 종료가 아닌 경우)\nif(event.code!==1000&&reconnectAttempts.current<maxReconnectAttempts){const delay=Math.min(1000*Math.pow(2,reconnectAttempts.current),30000);console.log(`🔄 ${delay}ms 후 재연결 시도 (${reconnectAttempts.current+1}/${maxReconnectAttempts})`);reconnectTimeoutRef.current=setTimeout(()=>{reconnectAttempts.current++;connect();},delay);}else if(reconnectAttempts.current>=maxReconnectAttempts){setError(\"최대 재연결 시도 횟수에 도달했습니다.\");}};wsRef.current.onerror=error=>{var _wsRef$current7,_wsRef$current8;clearTimeout(connectionTimeout);console.error(\"💥 WebSocket 오류:\",error);console.log(\"- ReadyState:\",(_wsRef$current7=wsRef.current)===null||_wsRef$current7===void 0?void 0:_wsRef$current7.readyState);console.log(\"- URL:\",(_wsRef$current8=wsRef.current)===null||_wsRef$current8===void 0?void 0:_wsRef$current8.url);setError(\"WebSocket 연결 오류가 발생했습니다\");setIsConnecting(false);};}catch(err){console.error(\"💥 WebSocket 생성 실패:\",err);setError(\"WebSocket 연결에 실패했습니다: \"+err.message);setIsConnecting(false);}},[getWebSocketUrl]);// WebSocket 연결 해제\nconst disconnect=useCallback(()=>{if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);reconnectTimeoutRef.current=null;}if(wsRef.current){wsRef.current.close(1000,\"Manual disconnect\");wsRef.current=null;}setIsConnected(false);setIsConnecting(false);reconnectAttempts.current=0;},[]);// 메시지 전송\nconst sendMessage=useCallback(message=>{var _wsRef$current9;if(((_wsRef$current9=wsRef.current)===null||_wsRef$current9===void 0?void 0:_wsRef$current9.readyState)===WebSocket.OPEN){wsRef.current.send(JSON.stringify(message));return true;}else{console.error(\"WebSocket이 연결되지 않았습니다\");setError(\"WebSocket 연결이 필요합니다\");return false;}},[]);// 스트리밍 요청\nconst startStreaming=useCallback(function(userInput){let chatHistory=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let promptCards=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let modelId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;if(!isConnected){setError(\"WebSocket 연결이 필요합니다\");return false;}const message={action:\"stream\",projectId,userInput,chat_history:chatHistory,prompt_cards:promptCards,modelId:modelId};console.log('WebSocket 메시지 전송:',{action:message.action,projectId:message.projectId,inputLength:userInput.length,historyLength:chatHistory.length,promptCardsCount:promptCards.length});return sendMessage(message);},[isConnected,projectId,sendMessage]);// 메시지 리스너 등록\nconst addMessageListener=useCallback(listener=>{if(wsRef.current){wsRef.current.addEventListener(\"message\",listener);}},[]);// 메시지 리스너 제거\nconst removeMessageListener=useCallback(listener=>{if(wsRef.current){wsRef.current.removeEventListener(\"message\",listener);}},[]);// 컴포넌트 마운트 시 연결, 언마운트 시 해제\nuseEffect(()=>{// 초기 연결 지연을 통해 React strict mode 이슈 회피\nconst timer=setTimeout(()=>{connect();},100);return()=>{clearTimeout(timer);disconnect();};},[]);// 의존성 배열을 빈 배열로 변경\n// projectId 변경 시 재연결\nuseEffect(()=>{if(isConnected&&projectId){console.log('ProjectId 변경됨, 재연결 중:',projectId);disconnect();setTimeout(connect,200);}},[projectId]);// connect, disconnect 의존성 제거\nreturn{isConnected,isConnecting,error,connect,disconnect,sendMessage,startStreaming,addMessageListener,removeMessageListener};};","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebSocket","projectId","isConnected","setIsConnected","isConnecting","setIsConnecting","error","setError","wsRef","reconnectTimeoutRef","reconnectAttempts","maxReconnectAttempts","getWebSocketUrl","wsUrl","process","env","REACT_APP_WS_URL","startsWith","console","normalizedUrl","replace","log","connect","_wsRef$current","_wsRef$current2","current","readyState","WebSocket","OPEN","CONNECTING","close","window","wsConnectStart","Date","now","connectionTimeout","setTimeout","_wsRef$current3","onopen","event","_wsRef$current4","_wsRef$current5","_wsRef$current6","clearTimeout","url","protocol","extensions","onclose","connectionDuration","code","reason","wasClean","errorMessage","delay","Math","min","pow","onerror","_wsRef$current7","_wsRef$current8","err","message","disconnect","sendMessage","_wsRef$current9","send","JSON","stringify","startStreaming","userInput","chatHistory","arguments","length","undefined","promptCards","modelId","action","chat_history","prompt_cards","inputLength","historyLength","promptCardsCount","addMessageListener","listener","addEventListener","removeMessageListener","removeEventListener","timer"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = (projectId) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(() => {\n    const wsUrl =\n      process.env.REACT_APP_WS_URL ||\n      \"wss://na17isxiri.execute-api.us-east-1.amazonaws.com/prod\";\n    \n    // URL 형식 검증 및 정규화\n    if (!wsUrl.startsWith(\"wss://\") && !wsUrl.startsWith(\"ws://\")) {\n      console.error(\"잘못된 WebSocket URL 형식:\", wsUrl);\n      return null;\n    }\n    \n    // 끝에 슬래시 제거\n    const normalizedUrl = wsUrl.replace(/\\/$/, \"\");\n    console.log(\"WebSocket URL 확인:\", normalizedUrl);\n    console.log(\"환경변수 REACT_APP_WS_URL:\", process.env.REACT_APP_WS_URL);\n    \n    return normalizedUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    // 이미 연결 중이거나 연결된 경우 중복 연결 방지\n    if (wsRef.current?.readyState === WebSocket.OPEN || \n        wsRef.current?.readyState === WebSocket.CONNECTING) {\n      console.log(\"이미 연결된 WebSocket이 있습니다 (readyState:\", wsRef.current.readyState, \")\");\n      return;\n    }\n\n    // 이전 연결이 있다면 정리\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const wsUrl = getWebSocketUrl();\n      \n      if (!wsUrl) {\n        setError(\"유효하지 않은 WebSocket URL\");\n        setIsConnecting(false);\n        return;\n      }\n\n      console.log(\"WebSocket 연결 시도:\", wsUrl);\n      console.log(\"브라우저 WebSocket 지원:\", !!window.WebSocket);\n\n      // 연결 시도 시간 기록\n      window.wsConnectStart = Date.now();\n\n      wsRef.current = new WebSocket(wsUrl);\n\n      // 연결 상태 모니터링\n      const connectionTimeout = setTimeout(() => {\n        if (wsRef.current?.readyState === WebSocket.CONNECTING) {\n          console.error(\"WebSocket 연결 시간 초과\");\n          wsRef.current.close();\n          setError(\"연결 시간이 초과되었습니다\");\n          setIsConnecting(false);\n        }\n      }, 10000); // 10초 타임아웃\n\n      wsRef.current.onopen = (event) => {\n        clearTimeout(connectionTimeout);\n        console.log(\"🟢 WebSocket 연결 성공!\");\n        console.log(\"- Event:\", event);\n        console.log(\"- URL:\", wsRef.current?.url);\n        console.log(\"- Protocol:\", wsRef.current?.protocol);\n        console.log(\"- Extensions:\", wsRef.current?.extensions);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onclose = (event) => {\n        clearTimeout(connectionTimeout);\n        const connectionDuration = Date.now() - (window.wsConnectStart || 0);\n        \n        console.log(\"🔴 WebSocket 연결 종료:\");\n        console.log(\"- Code:\", event.code);\n        console.log(\"- Reason:\", event.reason || \"(no reason provided)\");\n        console.log(\"- WasClean:\", event.wasClean);\n        console.log(\"- Connection duration:\", connectionDuration + \"ms\");\n        \n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 즉시 종료된 경우 (500ms 이내) - 서버 문제\n        if (connectionDuration < 500) {\n          console.error(\"⚠️ WebSocket이 즉시 종료됨 - 서버 문제 가능성\");\n          \n          // 특정 에러 코드에 따른 세분화된 에러 메시지\n          let errorMessage = \"서버 연결에 실패했습니다.\";\n          switch(event.code) {\n            case 1006:\n              errorMessage = \"비정상적인 연결 종료 (네트워크 문제 가능성)\";\n              break;\n            case 1002:\n              errorMessage = \"프로토콜 오류\";\n              break;\n            case 1003:\n              errorMessage = \"지원하지 않는 데이터 타입\";\n              break;\n            case 1011:\n              errorMessage = \"서버 내부 오류\";\n              break;\n          }\n          \n          setError(errorMessage);\n          return;\n        }\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (\n          event.code !== 1000 &&\n          reconnectAttempts.current < maxReconnectAttempts\n        ) {\n          const delay = Math.min(\n            1000 * Math.pow(2, reconnectAttempts.current),\n            30000\n          );\n          console.log(\n            `🔄 ${delay}ms 후 재연결 시도 (${\n              reconnectAttempts.current + 1\n            }/${maxReconnectAttempts})`\n          );\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        } else if (reconnectAttempts.current >= maxReconnectAttempts) {\n          setError(\"최대 재연결 시도 횟수에 도달했습니다.\");\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        clearTimeout(connectionTimeout);\n        console.error(\"💥 WebSocket 오류:\", error);\n        console.log(\"- ReadyState:\", wsRef.current?.readyState);\n        console.log(\"- URL:\", wsRef.current?.url);\n        setError(\"WebSocket 연결 오류가 발생했습니다\");\n        setIsConnecting(false);\n      };\n\n    } catch (err) {\n      console.error(\"💥 WebSocket 생성 실패:\", err);\n      setError(\"WebSocket 연결에 실패했습니다: \" + err.message);\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error(\"WebSocket이 연결되지 않았습니다\");\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback(\n    (userInput, chatHistory = [], promptCards = [], modelId = null) => {\n      if (!isConnected) {\n        setError(\"WebSocket 연결이 필요합니다\");\n        return false;\n      }\n\n      const message = {\n        action: \"stream\",\n        projectId,\n        userInput,\n        chat_history: chatHistory,\n        prompt_cards: promptCards,\n        modelId: modelId,\n      };\n\n      console.log('WebSocket 메시지 전송:', {\n        action: message.action,\n        projectId: message.projectId,\n        inputLength: userInput.length,\n        historyLength: chatHistory.length,\n        promptCardsCount: promptCards.length\n      });\n\n      return sendMessage(message);\n    },\n    [isConnected, projectId, sendMessage]\n  );\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    // 초기 연결 지연을 통해 React strict mode 이슈 회피\n    const timer = setTimeout(() => {\n      connect();\n    }, 100);\n    \n    return () => {\n      clearTimeout(timer);\n      disconnect();\n    };\n  }, []); // 의존성 배열을 빈 배열로 변경\n\n  // projectId 변경 시 재연결\n  useEffect(() => {\n    if (isConnected && projectId) {\n      console.log('ProjectId 변경됨, 재연결 중:', projectId);\n      disconnect();\n      setTimeout(connect, 200);\n    }\n  }, [projectId]); // connect, disconnect 의존성 제거\n\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}