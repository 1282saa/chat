{"ast":null,"code":"import{useState,useEffect,useRef,useCallback}from\"react\";import{toast}from\"react-hot-toast\";import{copyToClipboard}from\"../utils/clipboard\";import{useOrchestration}from\"./useOrchestration\";/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */const processAIResponse=result=>{if(!result||!result.result){console.error(\"AI 응답 오류: 결과가 없습니다\",result);return{id:\"error-\"+Date.now(),type:\"assistant\",content:\"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",timestamp:new Date(),isError:true};}// LangChain과 직접 통신하므로, 결과가 바로 content가 됨\nconst responseContent=result.result;return{id:\"response-\"+Date.now(),type:\"assistant\",content:responseContent,timestamp:new Date(),// 성능 메트릭 포함\nperformance_metrics:result.performance_metrics,model_info:result.model_info};};/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */export const useChat=function(projectId,projectName){let promptCards=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];const[messages,setMessages]=useState([]);const[inputValue,setInputValue]=useState(\"\");const[copiedMessage,setCopiedMessage]=useState(null);const[streamingMessageId,setStreamingMessageId]=useState(null);const messagesEndRef=useRef(null);const inputRef=useRef(null);const{isExecuting:isGenerating,isStreaming,executeOrchestration,pollOrchestrationResult,resetOrchestration}=useOrchestration(projectId);// 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\nuseEffect(()=>{setMessages([]);// 빈 배열로 시작\n},[projectName]);// 메시지 추가 시 스크롤 하단으로\nuseEffect(()=>{scrollToBottom();},[messages]);const scrollToBottom=useCallback(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});},[]);/**\n   * 스트리밍 응답 처리 함수\n   */const handleStreamingResponse=useCallback((chunk,metadata)=>{setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===streamingMessageId);if(streamingMsgIndex!==-1){// 기존 스트리밍 메시지 업데이트\nupdatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:updatedMessages[streamingMsgIndex].content+chunk,isLoading:true,isStreaming:true};}return updatedMessages;});// 스크롤 조정\nscrollToBottom();},[streamingMessageId,scrollToBottom]);/**\n   * 스트리밍 완료 처리 함수\n   */const handleStreamingComplete=useCallback(result=>{setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===streamingMessageId);if(streamingMsgIndex!==-1){// 스트리밍 메시지 완료 처리\nupdatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:result.result,isLoading:false,isStreaming:false,performance_metrics:result.performance_metrics,model_info:result.model_info,timestamp:new Date()};}return updatedMessages;});// 스트리밍 ID 초기화\nsetStreamingMessageId(null);// 스크롤 조정\nscrollToBottom();},[streamingMessageId,scrollToBottom]);/**\n   * 메시지 전송\n   */const handleSendMessage=useCallback(async()=>{if(!inputValue.trim()||isGenerating)return;const userMessage={id:\"user-\"+Date.now(),type:\"user\",content:inputValue.trim(),timestamp:new Date()};// 스트리밍 메시지 ID 생성\nconst streamMsgId=\"streaming-\"+Date.now();setStreamingMessageId(streamMsgId);// 스트리밍 응답을 위한 초기 메시지\nconst streamingMessage={id:streamMsgId,type:\"assistant\",content:\"\",timestamp:new Date(),isLoading:true,isStreaming:true};setMessages(prev=>[...prev,userMessage,streamingMessage]);setInputValue(\"\");try{const orchestrationData={userInput:userMessage.content,chat_history:messages.filter(msg=>!msg.isLoading&&!msg.isError).map(msg=>({role:msg.type===\"user\"?\"user\":\"assistant\",content:msg.content}))};// 스트리밍 옵션 설정\nconst streamingOptions={useStreaming:true,chat_history:orchestrationData.chat_history,onChunk:handleStreamingResponse,onError:error=>{console.error(\"스트리밍 오류:\",error);// 오류 메시지로 변환\nsetMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===streamingMessageId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:\"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",isLoading:false,isStreaming:false,isError:true,timestamp:new Date()};}return updatedMessages;});setStreamingMessageId(null);},onComplete:handleStreamingComplete};// 스트리밍 방식으로 실행\nawait executeOrchestration(userMessage.content,streamingOptions);// 스트리밍에서는 pollOrchestrationResult 호출이 필요 없음\n// 모든 처리는 콜백에서 이루어짐\n}catch(error){var _error$response;console.error(\"메시지 전송 실패:\",error);// 개선된 오류 메시지\nconst errorType=error.code===\"ECONNABORTED\"?\"timeout\":\"general\";const errorMessage={id:\"error-\"+Date.now(),type:\"assistant\",content:errorType===\"timeout\"?\"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\":\"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",timestamp:new Date(),isError:true,errorDetails:{type:errorType,message:error.message,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status}};setMessages(prev=>{// 스트리밍 메시지를 찾아 제거\nconst filteredMessages=prev.filter(msg=>msg.id!==streamingMessageId);return[...filteredMessages,errorMessage];});setStreamingMessageId(null);}},[inputValue,isGenerating,executeOrchestration,handleStreamingResponse,handleStreamingComplete,streamingMessageId,messages]);/**\n   * Enter 키로 전송\n   */const handleKeyPress=useCallback(e=>{if(e.key===\"Enter\"&&!e.shiftKey){e.preventDefault();handleSendMessage();}},[handleSendMessage]);/**\n   * 메시지 복사\n   */const handleCopyMessage=useCallback(async(content,messageId)=>{const success=await copyToClipboard(content);if(success){setCopiedMessage(messageId);setTimeout(()=>setCopiedMessage(null),2000);}},[]);/**\n   * 개별 제목 복사\n   */const handleCopyTitle=useCallback(async(title,messageId,index)=>{const success=await copyToClipboard(title,\"복사되었습니다!\");if(success){setCopiedMessage(`${messageId}_title_${index}`);setTimeout(()=>setCopiedMessage(null),2000);}},[]);/**\n   * 채팅 초기화\n   */const resetChat=useCallback(()=>{setMessages([]);setInputValue(\"\");setCopiedMessage(null);setStreamingMessageId(null);resetOrchestration();},[resetOrchestration]);return{messages,inputValue,setInputValue,copiedMessage,isGenerating,isStreaming,streamingMessageId,messagesEndRef,inputRef,handleSendMessage,handleKeyPress,handleCopyMessage,handleCopyTitle,resetChat,scrollToBottom};};","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","processAIResponse","result","console","error","id","Date","now","type","content","timestamp","isError","responseContent","performance_metrics","model_info","useChat","projectId","projectName","promptCards","arguments","length","undefined","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","streamingMessageId","setStreamingMessageId","messagesEndRef","inputRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleStreamingResponse","chunk","metadata","prev","updatedMessages","streamingMsgIndex","findIndex","msg","isLoading","handleStreamingComplete","handleSendMessage","trim","userMessage","streamMsgId","streamingMessage","orchestrationData","userInput","chat_history","filter","map","role","streamingOptions","useStreaming","onChunk","onError","onComplete","_error$response","errorType","code","errorMessage","errorDetails","message","status","response","filteredMessages","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","success","setTimeout","handleCopyTitle","title","index","resetChat"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info,\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [streamingMessageId, setStreamingMessageId] = useState(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [streamingMessageId, scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      setStreamingMessageId(null);\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [streamingMessageId, scrollToBottom]\n  );\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    setStreamingMessageId(streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n\n    try {\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: messages\n          .filter((msg) => !msg.isLoading && !msg.isError)\n          .map((msg) => ({\n            role: msg.type === \"user\" ? \"user\" : \"assistant\",\n            content: msg.content,\n          })),\n      };\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        onChunk: handleStreamingResponse,\n        onError: (error) => {\n          console.error(\"스트리밍 오류:\", error);\n\n          // 오류 메시지로 변환\n          setMessages((prev) => {\n            const updatedMessages = [...prev];\n            const streamingMsgIndex = updatedMessages.findIndex(\n              (msg) => msg.id === streamingMessageId\n            );\n\n            if (streamingMsgIndex !== -1) {\n              updatedMessages[streamingMsgIndex] = {\n                ...updatedMessages[streamingMsgIndex],\n                content:\n                  \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                isLoading: false,\n                isStreaming: false,\n                isError: true,\n                timestamp: new Date(),\n              };\n            }\n\n            return updatedMessages;\n          });\n\n          setStreamingMessageId(null);\n        },\n        onComplete: handleStreamingComplete,\n      };\n\n      // 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n\n      // 스트리밍에서는 pollOrchestrationResult 호출이 필요 없음\n      // 모든 처리는 콜백에서 이루어짐\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          errorType === \"timeout\"\n            ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\"\n            : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: error.response?.status,\n        },\n      };\n\n      setMessages((prev) => {\n        // 스트리밍 메시지를 찾아 제거\n        const filteredMessages = prev.filter(\n          (msg) => msg.id !== streamingMessageId\n        );\n        return [...filteredMessages, errorMessage];\n      });\n\n      setStreamingMessageId(null);\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    streamingMessageId,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setStreamingMessageId(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    streamingMessageId,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}