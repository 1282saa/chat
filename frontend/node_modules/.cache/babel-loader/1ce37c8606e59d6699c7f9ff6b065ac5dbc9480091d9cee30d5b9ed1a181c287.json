{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = result => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener\n  } = useWebSocket(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket 메시지 수신:', data);\n        const currentStreamingId = streamingMessageIdRef.current;\n        switch (data.type) {\n          case 'stream_start':\n            console.log('WebSocket 스트리밍 시작');\n            break;\n          case 'progress':\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n          case 'stream_chunk':\n            if (currentStreamingId) {\n              setMessages(prev => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent = updatedMessages[streamingMsgIndex].content || \"\";\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true\n                  };\n                }\n                return updatedMessages;\n              });\n              scrollToBottom();\n            }\n            break;\n          case 'stream_complete':\n            if (currentStreamingId) {\n              setMessages(prev => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date()\n                  };\n                }\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n          case 'error':\n            console.error('WebSocket 스트리밍 오류:', data.message);\n            if (currentStreamingId) {\n              setMessages(prev => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: '메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.',\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date()\n                  };\n                }\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n            toast.error(data.message);\n            break;\n          default:\n            console.log('알 수 없는 WebSocket 메시지 타입:', data.type);\n        }\n      } catch (error) {\n        console.error('WebSocket 메시지 파싱 오류:', error);\n      }\n    };\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback((chunk, metadata) => {\n    const currentStreamingId = streamingMessageIdRef.current;\n    console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n    if (!currentStreamingId) {\n      console.error(\"스트리밍 ID가 없습니다!\");\n      return;\n    }\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n      if (streamingMsgIndex !== -1) {\n        // 기존 스트리밍 메시지 업데이트\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: updatedMessages[streamingMsgIndex].content + chunk,\n          isLoading: true,\n          isStreaming: true\n        };\n        console.log(\"스트리밍 메시지 업데이트 성공:\", updatedMessages[streamingMsgIndex].content);\n      } else {\n        console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n      }\n      return updatedMessages;\n    });\n\n    // 스크롤 조정\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(result => {\n    const currentStreamingId = streamingMessageIdRef.current;\n    console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n    if (!currentStreamingId) {\n      console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n      return;\n    }\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n      if (streamingMsgIndex !== -1) {\n        // 스트리밍 메시지 완료 처리\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: result.result,\n          isLoading: false,\n          isStreaming: false,\n          performance_metrics: result.performance_metrics,\n          model_info: result.model_info,\n          timestamp: new Date()\n        };\n        console.log(\"스트리밍 완료 처리 성공:\", updatedMessages[streamingMsgIndex].content);\n      } else {\n        console.error(\"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\", currentStreamingId);\n      }\n      return updatedMessages;\n    });\n\n    // 스트리밍 ID 초기화\n    streamingMessageIdRef.current = null;\n\n    // 입력 활성화\n    console.log('WebSocket 스트리밍 완료 - 입력 활성화');\n    setCanSendMessage(true);\n\n    // 스크롤 조정\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log('생성 중단 요청');\n\n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n\n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n\n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages(prev => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + '\\n\\n[생성이 중단되었습니다]',\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date()\n          };\n        }\n        return updatedMessages;\n      });\n      streamingMessageIdRef.current = null;\n    }\n\n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n\n    // orchestration 상태 리셋\n    resetOrchestration();\n    toast.success('생성이 중단되었습니다');\n  }, [resetOrchestration]);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log('해들 전송 호출:', {\n      inputValue: inputValue.trim(),\n      isGenerating,\n      canSendMessage\n    });\n    if (!inputValue.trim() || isGenerating) {\n      console.log('전송 중단: 조건 부족');\n      return;\n    }\n\n    // 입력 비활성화\n    console.log('입력 비활성화');\n    setCanSendMessage(false);\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date()\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages.filter(msg => !msg.isLoading && !msg.isError && !msg.isStreaming).map(msg => ({\n      role: msg.type === \"user\" ? \"user\" : \"assistant\",\n      content: msg.content\n    }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n    console.log('대화 히스토리 생성:', {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6) // 최근 6개만 로그에 표시\n    });\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const activePromptCards = promptCards.filter(card => card.isActive !== false && card.enabled !== false).map(card => ({\n        promptId: card.promptId || card.prompt_id,\n        title: card.title || 'Untitled',\n        prompt_text: card.prompt_text || card.content || '',\n        tags: card.tags || [],\n        isActive: card.isActive !== false,\n        stepOrder: card.stepOrder || 0\n      })).filter(card => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n      .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n\n      console.log('대화 전송 데이터 확인:', {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map(card => ({\n          id: card.promptId || card.prompt_id,\n          title: card.title,\n          hasContent: !!(card.prompt_text || card.content)\n        }))\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log('WebSocket을 통한 실시간 스트리밍 시작');\n        const success = wsStartStreaming(userMessage.content, trimmedChatHistory, activePromptCards);\n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log('WebSocket 전송 실패, SSE 폴백 모드로 전환');\n        }\n      } else {\n        console.log('WebSocket 미연결, SSE 모드 사용');\n      }\n\n      // WebSocket 실패 시 기존 SSE 방식으로 폴백\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: trimmedChatHistory,\n        prompt_cards: activePromptCards\n      };\n      console.log('백엔드 전송 데이터 최종 확인:', orchestrationData);\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        prompt_cards: orchestrationData.prompt_cards,\n        onChunk: handleStreamingResponse,\n        onError: error => {\n          console.error(\"스트리밍 오류:\", error);\n          const currentStreamingId = streamingMessageIdRef.current;\n          console.log(\"에러 처리 스트리밍 ID:\", currentStreamingId);\n\n          // 오류 메시지로 변환\n          setMessages(prev => {\n            const updatedMessages = [...prev];\n            const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n            if (streamingMsgIndex !== -1) {\n              updatedMessages[streamingMsgIndex] = {\n                ...updatedMessages[streamingMsgIndex],\n                content: \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                isLoading: false,\n                isStreaming: false,\n                isError: true,\n                timestamp: new Date()\n              };\n            }\n            return updatedMessages;\n          });\n          streamingMessageIdRef.current = null;\n        },\n        onComplete: handleStreamingComplete\n      };\n\n      // SSE 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n\n      // SSE 스트리밍 완료 후 입력 활성화\n      console.log('SSE 스트리밍 완료 - 입력 활성화');\n      setCanSendMessage(true);\n    } catch (error) {\n      var _error$response;\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: errorType === \"timeout\" ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\" : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status\n        }\n      };\n      setMessages(prev => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(msg => msg.id !== currentStreamingId);\n        return [...filteredMessages, errorMessage];\n      });\n      streamingMessageIdRef.current = null;\n\n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n\n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [inputValue, isGenerating, executeOrchestration, handleStreamingResponse, handleStreamingComplete, messages]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError\n  };\n};\n_s(useChat, \"mBEvnK8nOx/Qd7NoSFeaAImHFwQ=\", false, function () {\n  return [useOrchestration, useWebSocket];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","useWebSocket","processAIResponse","result","console","error","id","Date","now","type","content","timestamp","isError","responseContent","performance_metrics","model_info","useChat","projectId","projectName","promptCards","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","canSendMessage","setCanSendMessage","streamingMessageIdRef","currentWebSocketRef","currentExecutionIdRef","messagesEndRef","inputRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","isConnected","wsConnected","isConnecting","wsConnecting","wsError","startStreaming","wsStartStreaming","addMessageListener","removeMessageListener","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleWebSocketMessage","event","data","JSON","parse","log","currentStreamingId","step","progress","prev","updatedMessages","streamingMsgIndex","findIndex","msg","currentContent","isLoading","fullContent","message","handleStreamingResponse","chunk","metadata","handleStreamingComplete","handleStopGeneration","close","success","handleSendMessage","trim","userMessage","streamMsgId","streamingMessage","allMessages","chatHistory","filter","map","role","maxHistoryLength","trimmedChatHistory","slice","totalMessages","length","fullHistoryLength","trimmedHistoryLength","recentHistory","activePromptCards","card","isActive","enabled","promptId","prompt_id","title","prompt_text","tags","stepOrder","sort","a","b","messageContent","chatHistoryLength","promptCardsCount","hasContent","orchestrationData","userInput","chat_history","prompt_cards","streamingOptions","useStreaming","onChunk","onError","onComplete","_error$response","errorType","code","errorMessage","errorDetails","status","response","filteredMessages","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","setTimeout","handleCopyTitle","index","resetChat","streamingMessageId"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info,\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener,\n  } = useWebSocket(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket 메시지 수신:', data);\n\n        const currentStreamingId = streamingMessageIdRef.current;\n\n        switch (data.type) {\n          case 'stream_start':\n            console.log('WebSocket 스트리밍 시작');\n            break;\n\n          case 'progress':\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n\n          case 'stream_chunk':\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent = updatedMessages[streamingMsgIndex].content || \"\";\n                  \n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true,\n                  };\n                }\n\n                return updatedMessages;\n              });\n              scrollToBottom();\n            }\n            break;\n\n          case 'stream_complete':\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n\n          case 'error':\n            console.error('WebSocket 스트리밍 오류:', data.message);\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: '메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.',\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n            toast.error(data.message);\n            break;\n\n          default:\n            console.log('알 수 없는 WebSocket 메시지 타입:', data.type);\n        }\n      } catch (error) {\n        console.error('WebSocket 메시지 파싱 오류:', error);\n      }\n    };\n\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n      \n      console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n      \n      if (!currentStreamingId) {\n        console.error(\"스트리밍 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n          console.log(\"스트리밍 메시지 업데이트 성공:\", updatedMessages[streamingMsgIndex].content);\n        } else {\n          console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n      \n      console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n      \n      if (!currentStreamingId) {\n        console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date(),\n          };\n          console.log(\"스트리밍 완료 처리 성공:\", updatedMessages[streamingMsgIndex].content);\n        } else {\n          console.error(\"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\", currentStreamingId);\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n      \n      // 입력 활성화\n      console.log('WebSocket 스트리밍 완료 - 입력 활성화');\n      setCanSendMessage(true);\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log('생성 중단 요청');\n    \n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n    \n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n    \n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n        \n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + '\\n\\n[생성이 중단되었습니다]',\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date(),\n          };\n        }\n        \n        return updatedMessages;\n      });\n      \n      streamingMessageIdRef.current = null;\n    }\n    \n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n    \n    // orchestration 상태 리셋\n    resetOrchestration();\n    \n    toast.success('생성이 중단되었습니다');\n  }, [resetOrchestration]);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log('해들 전송 호출:', { inputValue: inputValue.trim(), isGenerating, canSendMessage });\n    \n    if (!inputValue.trim() || isGenerating) {\n      console.log('전송 중단: 조건 부족');\n      return;\n    }\n    \n    // 입력 비활성화\n    console.log('입력 비활성화');\n    setCanSendMessage(false);\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n    \n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages\n      .filter((msg) => !msg.isLoading && !msg.isError && !msg.isStreaming)\n      .map((msg) => ({\n        role: msg.type === \"user\" ? \"user\" : \"assistant\",\n        content: msg.content,\n      }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n\n    console.log('대화 히스토리 생성:', {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6) // 최근 6개만 로그에 표시\n    });\n\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const activePromptCards = promptCards\n        .filter(card => card.isActive !== false && card.enabled !== false)\n        .map(card => ({\n          promptId: card.promptId || card.prompt_id,\n          title: card.title || 'Untitled',\n          prompt_text: card.prompt_text || card.content || '',\n          tags: card.tags || [],\n          isActive: card.isActive !== false,\n          stepOrder: card.stepOrder || 0\n        }))\n        .filter(card => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n        .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n      \n      console.log('대화 전송 데이터 확인:', {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map(card => ({\n          id: card.promptId || card.prompt_id,\n          title: card.title,\n          hasContent: !!(card.prompt_text || card.content)\n        }))\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log('WebSocket을 통한 실시간 스트리밍 시작');\n        \n        const success = wsStartStreaming(userMessage.content, trimmedChatHistory, activePromptCards);\n        \n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log('WebSocket 전송 실패, SSE 폴백 모드로 전환');\n        }\n      } else {\n        console.log('WebSocket 미연결, SSE 모드 사용');\n      }\n\n      // WebSocket 실패 시 기존 SSE 방식으로 폴백\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: trimmedChatHistory,\n        prompt_cards: activePromptCards,\n      };\n\n      console.log('백엔드 전송 데이터 최종 확인:', orchestrationData);\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        prompt_cards: orchestrationData.prompt_cards,\n        onChunk: handleStreamingResponse,\n        onError: (error) => {\n          console.error(\"스트리밍 오류:\", error);\n          \n          const currentStreamingId = streamingMessageIdRef.current;\n          console.log(\"에러 처리 스트리밍 ID:\", currentStreamingId);\n\n          // 오류 메시지로 변환\n          setMessages((prev) => {\n            const updatedMessages = [...prev];\n            const streamingMsgIndex = updatedMessages.findIndex(\n              (msg) => msg.id === currentStreamingId\n            );\n\n            if (streamingMsgIndex !== -1) {\n              updatedMessages[streamingMsgIndex] = {\n                ...updatedMessages[streamingMsgIndex],\n                content:\n                  \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                isLoading: false,\n                isStreaming: false,\n                isError: true,\n                timestamp: new Date(),\n              };\n            }\n\n            return updatedMessages;\n          });\n\n          streamingMessageIdRef.current = null;\n        },\n        onComplete: handleStreamingComplete,\n      };\n\n      // SSE 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n      \n      // SSE 스트리밍 완료 후 입력 활성화\n      console.log('SSE 스트리밍 완료 - 입력 활성화');\n      setCanSendMessage(true);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          errorType === \"timeout\"\n            ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\"\n            : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: error.response?.status,\n        },\n      };\n\n      setMessages((prev) => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(\n          (msg) => msg.id !== currentStreamingId\n        );\n        return [...filteredMessages, errorMessage];\n      });\n\n      streamingMessageIdRef.current = null;\n      \n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n    \n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}