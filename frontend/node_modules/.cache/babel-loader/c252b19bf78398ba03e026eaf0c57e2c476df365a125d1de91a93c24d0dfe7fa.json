{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// 개발 모드 플래그 (백엔드 연결 문제로 개발 모드로 강제 설정)\nconst DEV_MODE = process.env.NODE_ENV === 'development' || true;\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 3000 // 3초 타임아웃으로 빠른 실패 유도\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response;\n  console.error(\"API 오류:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\n// 개발 모드용 더미 데이터\nconst DUMMY_PROJECTS = [{\n  projectId: \"proj_001\",\n  name: \"경제 뉴스 제목 생성\",\n  description: \"경제 관련 뉴스 기사의 제목을 생성하는 프로젝트\",\n  category: \"economy\",\n  createdAt: \"2024-07-10T10:00:00Z\",\n  updatedAt: \"2024-07-14T15:30:00Z\",\n  tags: [\"경제\", \"뉴스\", \"제목생성\"],\n  title: \"경제 뉴스 제목 생성\" // ProjectDetail에서 사용\n}, {\n  projectId: \"proj_002\",\n  name: \"기술 뉴스 제목 최적화\",\n  description: \"IT 및 기술 관련 뉴스의 SEO 최적화된 제목 생성\",\n  category: \"tech\",\n  createdAt: \"2024-07-08T14:20:00Z\",\n  updatedAt: \"2024-07-12T09:15:00Z\",\n  tags: [\"기술\", \"IT\", \"SEO\"],\n  title: \"기술 뉴스 제목 최적화\"\n}, {\n  projectId: \"proj_003\",\n  name: \"스포츠 뉴스 제목\",\n  description: \"스포츠 관련 뉴스 제목 생성 및 최적화\",\n  category: \"sports\",\n  createdAt: \"2024-07-05T11:45:00Z\",\n  updatedAt: \"2024-07-13T16:20:00Z\",\n  tags: [\"스포츠\", \"뉴스\"],\n  title: \"스포츠 뉴스 제목\"\n}];\nexport const projectAPI = {\n  getProjects: async () => {\n    console.log(\"🔍 프로젝트 목록 조회 (개발 모드)\");\n\n    // 개발 모드에서는 바로 더미 데이터 반환\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 데이터 즉시 반환\");\n      return {\n        projects: DUMMY_PROJECTS,\n        count: DUMMY_PROJECTS.length\n      };\n    }\n\n    // 실제 API 호출 시도 후 실패하면 더미 데이터 반환\n    try {\n      const response = await api.get(\"/projects\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      return {\n        projects: DUMMY_PROJECTS,\n        count: DUMMY_PROJECTS.length\n      };\n    }\n  },\n  getProject: async projectId => {\n    console.log(\"🔍 프로젝트 상세 조회 (개발 모드):\", projectId);\n\n    // 개발 모드에서는 바로 더미 데이터 반환\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 데이터 즉시 반환\");\n\n      // 먼저 더미 데이터에서 찾아보기\n      let project = DUMMY_PROJECTS.find(p => p.projectId === projectId);\n\n      // 없으면 동적으로 생성 (실제 프로젝트 ID 사용)\n      if (!project) {\n        console.log(\"🆕 동적 프로젝트 생성:\", projectId);\n        project = {\n          projectId: projectId,\n          name: \"새 프로젝트\",\n          description: \"동적으로 생성된 프로젝트입니다.\",\n          category: \"news\",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          tags: [\"자동생성\"],\n          title: \"새 프로젝트\"\n        };\n        // 더미 데이터에 추가\n        DUMMY_PROJECTS.push(project);\n      }\n      return project;\n    }\n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n\n      // 먼저 더미 데이터에서 찾아보기\n      let project = DUMMY_PROJECTS.find(p => p.projectId === projectId);\n\n      // 없으면 동적으로 생성 (실제 프로젝트 ID 사용)\n      if (!project) {\n        console.log(\"🆕 동적 프로젝트 생성:\", projectId);\n        project = {\n          projectId: projectId,\n          name: \"새 프로젝트\",\n          description: \"동적으로 생성된 프로젝트입니다.\",\n          category: \"news\",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          tags: [\"자동생성\"],\n          title: \"새 프로젝트\"\n        };\n        // 더미 데이터에 추가\n        DUMMY_PROJECTS.push(project);\n      }\n      return project;\n    }\n  },\n  createProject: async projectData => {\n    console.log(\"🆕 프로젝트 생성 (개발 모드):\", projectData);\n\n    // 현재 날짜/시간으로 정확하게 설정\n    const now = new Date();\n    const koreaTime = new Date(now.getTime() + 9 * 60 * 60 * 1000); // UTC+9 (한국시간)\n\n    try {\n      const response = await api.post(\"/projects\", projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const newProject = {\n        projectId: `proj_${Date.now()}`,\n        ...projectData,\n        createdAt: koreaTime.toISOString(),\n        updatedAt: koreaTime.toISOString(),\n        title: projectData.name,\n        // ProjectDetail 호환성\n        tags: projectData.tags || [] // 태그 지원\n      };\n      DUMMY_PROJECTS.push(newProject);\n      return newProject;\n    }\n  },\n  updateProject: async (projectId, projectData) => {\n    console.log(\"✏️ 프로젝트 수정 (개발 모드):\", projectId, projectData);\n\n    // 현재 날짜/시간으로 정확하게 설정\n    const now = new Date();\n    const koreaTime = new Date(now.getTime() + 9 * 60 * 60 * 1000); // UTC+9 (한국시간)\n\n    try {\n      const response = await api.put(`/projects/${projectId}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS[index] = {\n          ...DUMMY_PROJECTS[index],\n          ...projectData,\n          updatedAt: koreaTime.toISOString(),\n          tags: projectData.tags || DUMMY_PROJECTS[index].tags || [] // 태그 지원\n        };\n        return DUMMY_PROJECTS[index];\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  },\n  deleteProject: async projectId => {\n    console.log(\"🗑️ 프로젝트 삭제 (개발 모드):\", projectId);\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS.splice(index, 1);\n        return {\n          success: true\n        };\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  }\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\n\n// 더미 프롬프트 카드 데이터\nconst DUMMY_PROMPT_CARDS = {\n  \"proj_001\": [{\n    promptId: \"prompt_001\",\n    projectId: \"proj_001\",\n    title: \"기본 제목 생성 가이드라인\",\n    category: \"workflow\",\n    stepOrder: 1,\n    content: `당신은 경제 뉴스 전문 기자입니다. 다음 가이드라인에 따라 제목을 생성해주세요:\n\n1. 핵심 내용을 15-25자로 요약\n2. 독자의 관심을 끄는 키워드 포함\n3. 정확하고 객관적인 표현 사용\n4. SEO 최적화 키워드 포함`,\n    createdAt: \"2024-07-10T10:30:00Z\",\n    updatedAt: \"2024-07-14T09:15:00Z\"\n  }, {\n    promptId: \"prompt_002\",\n    projectId: \"proj_001\",\n    title: \"경제 용어 스타일 가이드\",\n    category: \"stylebook_guidelines\",\n    stepOrder: 2,\n    content: `경제 뉴스 제목 작성 시 다음 스타일을 준수하세요:\n\n- 금융 용어는 일반인이 이해하기 쉽게 표현\n- 수치는 구체적으로 명시 (예: \"크게 상승\" → \"10% 상승\")\n- 부정적 표현보다는 중립적 표현 선호\n- 전문 용어 사용 시 괄호로 설명 추가`,\n    createdAt: \"2024-07-10T11:00:00Z\",\n    updatedAt: \"2024-07-12T14:20:00Z\"\n  }],\n  \"proj_002\": [{\n    promptId: \"prompt_003\",\n    projectId: \"proj_002\",\n    title: \"기술 뉴스 SEO 최적화\",\n    category: \"seo_optimization\",\n    stepOrder: 1,\n    content: `기술 뉴스 제목의 SEO 최적화 방법:\n\n1. 주요 기술 키워드를 제목 앞부분에 배치\n2. 트렌딩 기술 용어 활용 (AI, 메타버스, 블록체인 등)\n3. 검색량이 높은 브랜드명 포함\n4. 숫자나 년도를 활용하여 시의성 강조`,\n    createdAt: \"2024-07-08T15:00:00Z\",\n    updatedAt: \"2024-07-13T10:30:00Z\"\n  }],\n  \"proj_003\": [{\n    promptId: \"prompt_004\",\n    projectId: \"proj_003\",\n    title: \"스포츠 뉴스 제목 스타일\",\n    category: \"title_type_guidelines\",\n    stepOrder: 1,\n    content: `스포츠 뉴스 제목 작성 가이드라인:\n\n1. 선수명이나 팀명을 명확히 표기\n2. 경기 결과는 구체적 스코어 포함\n3. 감정적 표현보다는 사실 중심\n4. 스포츠별 전문 용어 적절히 활용\n5. 실시간성을 나타내는 표현 사용`,\n    createdAt: \"2024-07-05T12:15:00Z\",\n    updatedAt: \"2024-07-13T16:45:00Z\"\n  }]\n};\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회 (개발 모드):\", projectId);\n\n    // 개발 모드에서는 바로 더미 데이터 반환\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 프롬프트 데이터 즉시 반환\");\n      let cards = DUMMY_PROMPT_CARDS[projectId];\n\n      // 해당 프로젝트의 프롬프트가 없으면 기본 프롬프트 생성\n      if (!cards) {\n        console.log(\"🆕 동적 프롬프트 카드 생성:\", projectId);\n        cards = [{\n          promptId: `prompt_${projectId}_001`,\n          projectId: projectId,\n          title: \"기본 제목 생성 가이드라인\",\n          category: \"workflow\",\n          stepOrder: 1,\n          content: `뉴스 제목 생성을 위한 기본 가이드라인:\n\n1. 핵심 내용을 15-25자로 요약\n2. 독자의 관심을 끄는 키워드 포함\n3. 정확하고 객관적인 표현 사용\n4. SEO 최적화 키워드 포함\n5. 감정적 표현보다는 사실 중심으로 작성`,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }, {\n          promptId: `prompt_${projectId}_002`,\n          projectId: projectId,\n          title: \"스타일 가이드\",\n          category: \"stylebook_guidelines\",\n          stepOrder: 2,\n          content: `제목 작성 스타일 가이드:\n\n- 전문 용어는 일반인이 이해하기 쉽게 표현\n- 수치는 구체적으로 명시\n- 중립적이고 객관적인 표현 사용\n- 필요시 괄호로 부연 설명 추가\n- 시의성을 나타내는 표현 활용`,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }];\n        DUMMY_PROMPT_CARDS[projectId] = cards;\n      }\n      return {\n        promptCards: cards,\n        count: cards.length,\n        projectId: projectId\n      };\n    }\n    try {\n      const params = includeContent ? {\n        include_content: \"true\"\n      } : {};\n      const response = await api.get(`/prompts/${projectId}`, {\n        params\n      });\n      console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      let cards = DUMMY_PROMPT_CARDS[projectId];\n\n      // 해당 프로젝트의 프롬프트가 없으면 기본 프롬프트 생성\n      if (!cards) {\n        console.log(\"🆕 동적 프롬프트 카드 생성:\", projectId);\n        cards = [{\n          promptId: `prompt_${projectId}_001`,\n          projectId: projectId,\n          title: \"기본 제목 생성 가이드라인\",\n          category: \"workflow\",\n          stepOrder: 1,\n          content: `뉴스 제목 생성을 위한 기본 가이드라인:\n\n1. 핵심 내용을 15-25자로 요약\n2. 독자의 관심을 끄는 키워드 포함\n3. 정확하고 객관적인 표현 사용\n4. SEO 최적화 키워드 포함\n5. 감정적 표현보다는 사실 중심으로 작성`,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }, {\n          promptId: `prompt_${projectId}_002`,\n          projectId: projectId,\n          title: \"스타일 가이드\",\n          category: \"stylebook_guidelines\",\n          stepOrder: 2,\n          content: `제목 작성 스타일 가이드:\n\n- 전문 용어는 일반인이 이해하기 쉽게 표현\n- 수치는 구체적으로 명시\n- 중립적이고 객관적인 표현 사용\n- 필요시 괄호로 부연 설명 추가\n- 시의성을 나타내는 표현 활용`,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }];\n        DUMMY_PROMPT_CARDS[projectId] = cards;\n      }\n      return {\n        promptCards: cards,\n        count: cards.length,\n        projectId: projectId\n      };\n    }\n  },\n  // 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    console.log(\"🆕 프롬프트 생성 (개발 모드):\", {\n      projectId,\n      promptData\n    });\n\n    // 개발 모드에서는 바로 더미 데이터 사용\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 프롬프트 카드 생성\");\n      const newCard = {\n        promptId: `prompt_${Date.now()}`,\n        prompt_id: `prompt_${Date.now()}`,\n        // 호환성을 위해 둘 다 추가\n        projectId,\n        title: promptData.title || \"새 프롬프트\",\n        prompt_text: promptData.prompt_text,\n        content: promptData.prompt_text,\n        // 호환성을 위해 둘 다 추가\n        category: promptData.category || \"instruction\",\n        enabled: promptData.enabled !== false,\n        stepOrder: DUMMY_PROMPT_CARDS[projectId] ? DUMMY_PROMPT_CARDS[projectId].length + 1 : 1,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      if (!DUMMY_PROMPT_CARDS[projectId]) {\n        DUMMY_PROMPT_CARDS[projectId] = [];\n      }\n      DUMMY_PROMPT_CARDS[projectId].push(newCard);\n      console.log(\"✅ 프롬프트 카드 생성 완료:\", newCard);\n      console.log(\"📋 현재 프로젝트의 카드 목록:\", DUMMY_PROMPT_CARDS[projectId]);\n      return newCard;\n    }\n    try {\n      const response = await api.post(`/prompts/${projectId}`, promptData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const newCard = {\n        promptId: `prompt_${Date.now()}`,\n        prompt_id: `prompt_${Date.now()}`,\n        // 호환성을 위해 둘 다 추가\n        projectId,\n        title: promptData.title || \"새 프롬프트\",\n        prompt_text: promptData.prompt_text,\n        content: promptData.prompt_text,\n        // 호환성을 위해 둘 다 추가\n        category: promptData.category || \"instruction\",\n        enabled: promptData.enabled !== false,\n        stepOrder: DUMMY_PROMPT_CARDS[projectId] ? DUMMY_PROMPT_CARDS[projectId].length + 1 : 1,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      if (!DUMMY_PROMPT_CARDS[projectId]) {\n        DUMMY_PROMPT_CARDS[projectId] = [];\n      }\n      DUMMY_PROMPT_CARDS[projectId].push(newCard);\n      return newCard;\n    }\n  },\n  // 프롬프트 카드 수정 - S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정 (개발 모드):\", {\n      projectId,\n      promptId,\n      promptData\n    });\n\n    // 개발 모드에서는 바로 더미 데이터 수정\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 프롬프트 카드 수정\");\n      const cards = DUMMY_PROMPT_CARDS[projectId] || [];\n      const index = cards.findIndex(card => card.promptId === promptId || card.prompt_id === promptId);\n      if (index !== -1) {\n        DUMMY_PROMPT_CARDS[projectId][index] = {\n          ...DUMMY_PROMPT_CARDS[projectId][index],\n          title: promptData.title,\n          prompt_text: promptData.prompt_text,\n          content: promptData.prompt_text,\n          // 호환성을 위해 둘 다 업데이트\n          category: promptData.category,\n          enabled: promptData.enabled,\n          updatedAt: new Date().toISOString()\n        };\n        console.log(\"✅ 프롬프트 카드 수정 완료:\", DUMMY_PROMPT_CARDS[projectId][index]);\n        return DUMMY_PROMPT_CARDS[projectId][index];\n      }\n      throw new Error(\"프롬프트를 찾을 수 없습니다\");\n    }\n    try {\n      const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const cards = DUMMY_PROMPT_CARDS[projectId] || [];\n      const index = cards.findIndex(card => card.promptId === promptId || card.prompt_id === promptId);\n      if (index !== -1) {\n        DUMMY_PROMPT_CARDS[projectId][index] = {\n          ...DUMMY_PROMPT_CARDS[projectId][index],\n          title: promptData.title,\n          prompt_text: promptData.prompt_text,\n          content: promptData.prompt_text,\n          // 호환성을 위해 둘 다 업데이트\n          category: promptData.category,\n          enabled: promptData.enabled,\n          updatedAt: new Date().toISOString()\n        };\n        return DUMMY_PROMPT_CARDS[projectId][index];\n      }\n      throw new Error(\"프롬프트를 찾을 수 없습니다\");\n    }\n  },\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    console.log(\"🗑️ 프롬프트 삭제 (개발 모드):\", {\n      projectId,\n      promptId\n    });\n    try {\n      const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const cards = DUMMY_PROMPT_CARDS[projectId] || [];\n      const index = cards.findIndex(card => card.promptId === promptId);\n      if (index !== -1) {\n        DUMMY_PROMPT_CARDS[projectId].splice(index, 1);\n        return {\n          success: true\n        };\n      }\n      throw new Error(\"프롬프트를 찾을 수 없습니다\");\n    }\n  }\n};\n\n// =============================================================================\n// 3. 제목 생성 API (Bedrock Claude 호출)\n// =============================================================================\nexport const generateAPI = {\n  // 실제 Bedrock Claude 호출\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작 (개발 모드):\", {\n      projectId,\n      articleLength: articleContent.length,\n      userRequest\n    });\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, {\n        article: articleContent,\n        userRequest\n      });\n      console.log(\"✅ 제목 생성 완료\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 제목 생성 사용\");\n\n      // 더미 제목 생성 결과\n      const dummyTitles = [{\n        type: \"저널리즘 충실형\",\n        title: \"경제성장률 3.2% 기록, 전년 동기 대비 0.5%p 상승\",\n        quality: {\n          clarity: \"상\",\n          readability: \"상\",\n          clickworthiness: \"중\",\n          factuality: \"상\",\n          style_compliance: \"상\"\n        },\n        reasoning: \"객관적 수치를 중심으로 정확한 정보 전달에 중점을 둔 제목\"\n      }, {\n        type: \"균형잡힌 후킹형\",\n        title: \"한국 경제 훨훨, 3.2% 성장으로 예상치 뛰어넘어\",\n        quality: {\n          clarity: \"상\",\n          readability: \"상\",\n          clickworthiness: \"상\",\n          factuality: \"상\",\n          style_compliance: \"중\"\n        },\n        reasoning: \"독자의 관심을 끌면서도 정확한 정보를 포함한 균형 잡힌 제목\"\n      }, {\n        type: \"클릭유도형\",\n        title: \"믿기지 않는 성장률! 한국 경제가 보여준 놀라운 반전\",\n        quality: {\n          clarity: \"중\",\n          readability: \"상\",\n          clickworthiness: \"상\",\n          factuality: \"중\",\n          style_compliance: \"하\"\n        },\n        reasoning: \"강한 감정적 어필로 클릭을 유도하는 제목\"\n      }, {\n        type: \"SEO/AEO 최적화형\",\n        title: \"한국 경제성장률 3.2% 2024년 3분기 GDP 상승률 분석\",\n        quality: {\n          clarity: \"상\",\n          readability: \"중\",\n          clickworthiness: \"중\",\n          factuality: \"상\",\n          style_compliance: \"상\"\n        },\n        reasoning: \"검색 최적화 키워드를 포함한 SEO 친화적 제목\"\n      }, {\n        type: \"소셜미디어 공유형\",\n        title: \"🚀 한국 경제 3.2% 성장 달성! #경제성장 #GDP #한국경제\",\n        quality: {\n          clarity: \"상\",\n          readability: \"상\",\n          clickworthiness: \"상\",\n          factuality: \"상\",\n          style_compliance: \"중\"\n        },\n        reasoning: \"이모지와 해시태그를 활용한 소셜미디어 최적화 제목\"\n      }];\n      return {\n        success: true,\n        titles: dummyTitles,\n        metadata: {\n          projectId,\n          articleLength: articleContent.length,\n          userRequest,\n          processingTime: \"2.3초\",\n          tokensUsed: 1250,\n          model: \"claude-3-5-sonnet-20241022-v2:0 (개발 모드)\"\n        },\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n};\n\n// =============================================================================\n// 4. 유틸리티\n// =============================================================================\nexport const handleAPIError = error => {\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    return {\n      message: (data === null || data === void 0 ? void 0 : data.error) || `서버 오류 (${status})`,\n      status\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 개발 모드: 항상 인증된 상태로 처리\n    return true;\n  },\n  getCurrentUser: () => {\n    // 개발 모드: 가짜 사용자 정보 반환\n    return {\n      id: \"dev-user\",\n      email: \"dev@example.com\",\n      name: \"개발자\"\n    };\n  },\n  signin: async credentials => {\n    // 개발 모드: 가짜 로그인\n    console.log(\"🔐 개발 모드 로그인:\", credentials);\n    return {\n      success: true,\n      message: \"로그인 성공 (개발 모드)\"\n    };\n  },\n  signup: async userData => {\n    // 개발 모드: 가짜 회원가입\n    console.log(\"📝 개발 모드 회원가입:\", userData);\n    return {\n      success: true,\n      message: \"회원가입 성공 (개발 모드)\"\n    };\n  },\n  signout: async () => {\n    // 개발 모드: 가짜 로그아웃\n    console.log(\"👋 개발 모드 로그아웃\");\n    return {\n      success: true\n    };\n  },\n  verifyEmail: async verificationData => {\n    console.log(\"✉️ 개발 모드 이메일 인증:\", verificationData);\n    return {\n      success: true,\n      message: \"이메일 인증 성공 (개발 모드)\"\n    };\n  },\n  forgotPassword: async email => {\n    console.log(\"🔄 개발 모드 비밀번호 재설정:\", email);\n    return {\n      success: true,\n      message: \"비밀번호 재설정 이메일 발송 (개발 모드)\"\n    };\n  },\n  confirmPassword: async resetData => {\n    console.log(\"🔒 개발 모드 비밀번호 확인:\", resetData);\n    return {\n      success: true,\n      message: \"비밀번호 재설정 성공 (개발 모드)\"\n    };\n  }\n};\n\n// =============================================================================\n// 6. 카테고리 API\n// =============================================================================\nexport const DEFAULT_PROJECT_CATEGORIES = [{\n  id: \"news\",\n  name: \"뉴스\",\n  color: \"blue\",\n  description: \"일반 뉴스 기사\"\n}, {\n  id: \"economy\",\n  name: \"경제\",\n  color: \"green\",\n  description: \"경제 관련 기사\"\n}, {\n  id: \"tech\",\n  name: \"기술\",\n  color: \"purple\",\n  description: \"기술 및 IT 기사\"\n}, {\n  id: \"sports\",\n  name: \"스포츠\",\n  color: \"orange\",\n  description: \"스포츠 기사\"\n}, {\n  id: \"culture\",\n  name: \"문화\",\n  color: \"pink\",\n  description: \"문화 및 예술 기사\"\n}];\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 개발 모드: 기본 카테고리 반환\n    return {\n      categories: DEFAULT_PROJECT_CATEGORIES\n    };\n  },\n  createCategory: async categoryData => {\n    console.log(\"📁 카테고리 생성:\", categoryData);\n    return {\n      id: `cat_${Date.now()}`,\n      ...categoryData,\n      createdAt: new Date().toISOString()\n    };\n  },\n  updateCategory: async (categoryId, categoryData) => {\n    console.log(\"📝 카테고리 수정:\", categoryId, categoryData);\n    return {\n      success: true\n    };\n  },\n  deleteCategory: async categoryId => {\n    console.log(\"🗑️ 카테고리 삭제:\", categoryId);\n    return {\n      success: true\n    };\n  }\n};\nexport const projectCategoryAPI = {\n  updateProjectCategory: async (projectId, categoryId) => {\n    console.log(\"📂 프로젝트 카테고리 변경:\", projectId, categoryId);\n    return {\n      success: true\n    };\n  }\n};\n\n// =============================================================================\n// 7. 오케스트레이션 API\n// =============================================================================\nexport const orchestrationAPI = {\n  startExecution: async (projectId, data) => {\n    console.log(\"🚀 오케스트레이션 시작:\", projectId, data);\n    return {\n      executionArn: `exec_${Date.now()}`,\n      status: \"RUNNING\"\n    };\n  },\n  getExecutionStatus: async executionArn => {\n    console.log(\"📊 실행 상태 조회:\", executionArn);\n    return {\n      status: \"SUCCEEDED\",\n      result: {\n        message: \"완료됨\"\n      }\n    };\n  }\n};\n\n// =============================================================================\n// 8. 유틸리티 함수들\n// =============================================================================\nexport const getCategoryInfo = (categoryId, userCategories = DEFAULT_PROJECT_CATEGORIES) => {\n  const category = userCategories.find(cat => cat.id === categoryId);\n  return category || {\n    id: categoryId,\n    name: \"알 수 없음\",\n    color: \"gray\",\n    description: \"알 수 없는 카테고리\"\n  };\n};\nexport const getCategoryColorClasses = color => {\n  const colorMap = {\n    blue: \"bg-blue-50 text-blue-700 border-blue-200\",\n    green: \"bg-green-50 text-green-700 border-green-200\",\n    purple: \"bg-purple-50 text-purple-700 border-purple-200\",\n    orange: \"bg-orange-50 text-orange-700 border-orange-200\",\n    pink: \"bg-pink-50 text-pink-700 border-pink-200\",\n    red: \"bg-red-50 text-red-700 border-red-200\",\n    yellow: \"bg-yellow-50 text-yellow-700 border-yellow-200\",\n    indigo: \"bg-indigo-50 text-indigo-700 border-indigo-200\",\n    gray: \"bg-gray-50 text-gray-700 border-gray-200\"\n  };\n  return colorMap[color] || colorMap.gray;\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(project => project.category === filters.category);\n  }\n\n  // 검색 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => project.name.toLowerCase().includes(query) || project.description && project.description.toLowerCase().includes(query) || project.tags && project.tags.some(tag => tag.toLowerCase().includes(query)));\n  }\n\n  // 정렬\n  filtered.sort((a, b) => {\n    switch (filters.sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name, \"ko\");\n      case \"updated\":\n        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);\n      case \"created\":\n      default:\n        return new Date(b.createdAt) - new Date(a.createdAt);\n    }\n  });\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (!count || count === 0) return \"0\";\n  if (count < 1000) return count.toString();\n  if (count < 1000000) return `${(count / 1000).toFixed(1)}K`;\n  return `${(count / 1000000).toFixed(1)}M`;\n};\nexport const formatFileSize = bytes => {\n  if (!bytes || bytes === 0) return \"0 B\";\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      totalSize: 0,\n      categories: {}\n    };\n  }\n  const stats = {\n    totalCards: promptCards.length,\n    totalTokens: 0,\n    totalSize: 0,\n    categories: {}\n  };\n  promptCards.forEach(card => {\n    // 토큰 수 계산 (대략적으로 글자 수 / 4)\n    const contentLength = (card.content || \"\").length;\n    const estimatedTokens = Math.ceil(contentLength / 4);\n    stats.totalTokens += estimatedTokens;\n\n    // 파일 크기 계산 (UTF-8 기준)\n    stats.totalSize += new Blob([card.content || \"\"]).size;\n\n    // 카테고리별 통계\n    const category = card.category || \"uncategorized\";\n    if (!stats.categories[category]) {\n      stats.categories[category] = {\n        count: 0,\n        tokens: 0,\n        size: 0\n      };\n    }\n    stats.categories[category].count++;\n    stats.categories[category].tokens += estimatedTokens;\n    stats.categories[category].size += new Blob([card.content || \"\"]).size;\n  });\n  return stats;\n};\n\n// 색상 옵션\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파란색\",\n  class: \"bg-blue-500\"\n}, {\n  id: \"green\",\n  name: \"초록색\",\n  class: \"bg-green-500\"\n}, {\n  id: \"purple\",\n  name: \"보라색\",\n  class: \"bg-purple-500\"\n}, {\n  id: \"orange\",\n  name: \"주황색\",\n  class: \"bg-orange-500\"\n}, {\n  id: \"pink\",\n  name: \"분홍색\",\n  class: \"bg-pink-500\"\n}, {\n  id: \"red\",\n  name: \"빨간색\",\n  class: \"bg-red-500\"\n}, {\n  id: \"yellow\",\n  name: \"노란색\",\n  class: \"bg-yellow-500\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  class: \"bg-indigo-500\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  class: \"bg-gray-500\"\n}];\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","DEV_MODE","NODE_ENV","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","message","Promise","reject","DUMMY_PROJECTS","projectId","name","description","category","createdAt","updatedAt","tags","title","projectAPI","getProjects","projects","count","length","get","data","getProject","project","find","p","Date","toISOString","push","createProject","projectData","now","koreaTime","getTime","post","newProject","updateProject","put","index","findIndex","Error","deleteProject","delete","splice","success","DUMMY_PROMPT_CARDS","promptId","stepOrder","content","promptCardAPI","getPromptCards","includeContent","cards","promptCards","params","include_content","createPromptCard","promptData","newCard","prompt_id","prompt_text","enabled","updatePromptCard","card","deletePromptCard","generateAPI","generateTitle","articleContent","userRequest","articleLength","article","dummyTitles","type","quality","clarity","readability","clickworthiness","factuality","style_compliance","reasoning","titles","metadata","processingTime","tokensUsed","model","timestamp","handleAPIError","authAPI","isAuthenticated","getCurrentUser","id","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","DEFAULT_PROJECT_CATEGORIES","color","categoryAPI","getUserCategories","categories","createCategory","categoryData","updateCategory","categoryId","deleteCategory","projectCategoryAPI","updateProjectCategory","orchestrationAPI","startExecution","executionArn","getExecutionStatus","result","getCategoryInfo","userCategories","cat","getCategoryColorClasses","colorMap","blue","green","purple","orange","pink","red","yellow","indigo","gray","filterProjects","filters","filtered","filter","searchQuery","query","toLowerCase","includes","some","tag","sort","a","b","sortBy","localeCompare","formatTokenCount","toString","toFixed","formatFileSize","bytes","sizes","i","Math","floor","pow","calculatePromptStats","totalCards","totalTokens","totalSize","stats","forEach","contentLength","estimatedTokens","ceil","Blob","size","tokens","COLOR_OPTIONS","class"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// 개발 모드 플래그 (백엔드 연결 문제로 개발 모드로 강제 설정)\nconst DEV_MODE = process.env.NODE_ENV === 'development' || true;\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 3000, // 3초 타임아웃으로 빠른 실패 유도\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류:\", error.response?.status, error.message);\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\n// 개발 모드용 더미 데이터\nconst DUMMY_PROJECTS = [\n  {\n    projectId: \"proj_001\",\n    name: \"경제 뉴스 제목 생성\",\n    description: \"경제 관련 뉴스 기사의 제목을 생성하는 프로젝트\",\n    category: \"economy\",\n    createdAt: \"2024-07-10T10:00:00Z\",\n    updatedAt: \"2024-07-14T15:30:00Z\",\n    tags: [\"경제\", \"뉴스\", \"제목생성\"],\n    title: \"경제 뉴스 제목 생성\" // ProjectDetail에서 사용\n  },\n  {\n    projectId: \"proj_002\", \n    name: \"기술 뉴스 제목 최적화\",\n    description: \"IT 및 기술 관련 뉴스의 SEO 최적화된 제목 생성\",\n    category: \"tech\",\n    createdAt: \"2024-07-08T14:20:00Z\",\n    updatedAt: \"2024-07-12T09:15:00Z\",\n    tags: [\"기술\", \"IT\", \"SEO\"],\n    title: \"기술 뉴스 제목 최적화\"\n  },\n  {\n    projectId: \"proj_003\",\n    name: \"스포츠 뉴스 제목\",\n    description: \"스포츠 관련 뉴스 제목 생성 및 최적화\",\n    category: \"sports\", \n    createdAt: \"2024-07-05T11:45:00Z\",\n    updatedAt: \"2024-07-13T16:20:00Z\",\n    tags: [\"스포츠\", \"뉴스\"],\n    title: \"스포츠 뉴스 제목\"\n  }\n];\n\nexport const projectAPI = {\n  getProjects: async () => {\n    console.log(\"🔍 프로젝트 목록 조회 (개발 모드)\");\n    \n    // 개발 모드에서는 바로 더미 데이터 반환\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 데이터 즉시 반환\");\n      return { \n        projects: DUMMY_PROJECTS,\n        count: DUMMY_PROJECTS.length \n      };\n    }\n    \n    // 실제 API 호출 시도 후 실패하면 더미 데이터 반환\n    try {\n      const response = await api.get(\"/projects\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      return { \n        projects: DUMMY_PROJECTS,\n        count: DUMMY_PROJECTS.length \n      };\n    }\n  },\n\n  getProject: async (projectId) => {\n    console.log(\"🔍 프로젝트 상세 조회 (개발 모드):\", projectId);\n    \n    // 개발 모드에서는 바로 더미 데이터 반환\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 데이터 즉시 반환\");\n      \n      // 먼저 더미 데이터에서 찾아보기\n      let project = DUMMY_PROJECTS.find(p => p.projectId === projectId);\n      \n      // 없으면 동적으로 생성 (실제 프로젝트 ID 사용)\n      if (!project) {\n        console.log(\"🆕 동적 프로젝트 생성:\", projectId);\n        project = {\n          projectId: projectId,\n          name: \"새 프로젝트\",\n          description: \"동적으로 생성된 프로젝트입니다.\",\n          category: \"news\",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          tags: [\"자동생성\"],\n          title: \"새 프로젝트\"\n        };\n        // 더미 데이터에 추가\n        DUMMY_PROJECTS.push(project);\n      }\n      \n      return project;\n    }\n    \n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      \n      // 먼저 더미 데이터에서 찾아보기\n      let project = DUMMY_PROJECTS.find(p => p.projectId === projectId);\n      \n      // 없으면 동적으로 생성 (실제 프로젝트 ID 사용)\n      if (!project) {\n        console.log(\"🆕 동적 프로젝트 생성:\", projectId);\n        project = {\n          projectId: projectId,\n          name: \"새 프로젝트\",\n          description: \"동적으로 생성된 프로젝트입니다.\",\n          category: \"news\",\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n          tags: [\"자동생성\"],\n          title: \"새 프로젝트\"\n        };\n        // 더미 데이터에 추가\n        DUMMY_PROJECTS.push(project);\n      }\n      \n      return project;\n    }\n  },\n\n  createProject: async (projectData) => {\n    console.log(\"🆕 프로젝트 생성 (개발 모드):\", projectData);\n    \n    // 현재 날짜/시간으로 정확하게 설정\n    const now = new Date();\n    const koreaTime = new Date(now.getTime() + (9 * 60 * 60 * 1000)); // UTC+9 (한국시간)\n    \n    try {\n      const response = await api.post(\"/projects\", projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const newProject = {\n        projectId: `proj_${Date.now()}`,\n        ...projectData,\n        createdAt: koreaTime.toISOString(),\n        updatedAt: koreaTime.toISOString(),\n        title: projectData.name, // ProjectDetail 호환성\n        tags: projectData.tags || [] // 태그 지원\n      };\n      DUMMY_PROJECTS.push(newProject);\n      return newProject;\n    }\n  },\n\n  updateProject: async (projectId, projectData) => {\n    console.log(\"✏️ 프로젝트 수정 (개발 모드):\", projectId, projectData);\n    \n    // 현재 날짜/시간으로 정확하게 설정\n    const now = new Date();\n    const koreaTime = new Date(now.getTime() + (9 * 60 * 60 * 1000)); // UTC+9 (한국시간)\n    \n    try {\n      const response = await api.put(`/projects/${projectId}`, projectData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS[index] = {\n          ...DUMMY_PROJECTS[index],\n          ...projectData,\n          updatedAt: koreaTime.toISOString(),\n          tags: projectData.tags || DUMMY_PROJECTS[index].tags || [] // 태그 지원\n        };\n        return DUMMY_PROJECTS[index];\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  },\n\n  deleteProject: async (projectId) => {\n    console.log(\"🗑️ 프로젝트 삭제 (개발 모드):\", projectId);\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const index = DUMMY_PROJECTS.findIndex(p => p.projectId === projectId);\n      if (index !== -1) {\n        DUMMY_PROJECTS.splice(index, 1);\n        return { success: true };\n      }\n      throw new Error(\"프로젝트를 찾을 수 없습니다\");\n    }\n  },\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\n\n// 더미 프롬프트 카드 데이터\nconst DUMMY_PROMPT_CARDS = {\n  \"proj_001\": [\n    {\n      promptId: \"prompt_001\",\n      projectId: \"proj_001\",\n      title: \"기본 제목 생성 가이드라인\",\n      category: \"workflow\",\n      stepOrder: 1,\n      content: `당신은 경제 뉴스 전문 기자입니다. 다음 가이드라인에 따라 제목을 생성해주세요:\n\n1. 핵심 내용을 15-25자로 요약\n2. 독자의 관심을 끄는 키워드 포함\n3. 정확하고 객관적인 표현 사용\n4. SEO 최적화 키워드 포함`,\n      createdAt: \"2024-07-10T10:30:00Z\",\n      updatedAt: \"2024-07-14T09:15:00Z\"\n    },\n    {\n      promptId: \"prompt_002\", \n      projectId: \"proj_001\",\n      title: \"경제 용어 스타일 가이드\",\n      category: \"stylebook_guidelines\",\n      stepOrder: 2,\n      content: `경제 뉴스 제목 작성 시 다음 스타일을 준수하세요:\n\n- 금융 용어는 일반인이 이해하기 쉽게 표현\n- 수치는 구체적으로 명시 (예: \"크게 상승\" → \"10% 상승\")\n- 부정적 표현보다는 중립적 표현 선호\n- 전문 용어 사용 시 괄호로 설명 추가`,\n      createdAt: \"2024-07-10T11:00:00Z\",\n      updatedAt: \"2024-07-12T14:20:00Z\"\n    }\n  ],\n  \"proj_002\": [\n    {\n      promptId: \"prompt_003\",\n      projectId: \"proj_002\", \n      title: \"기술 뉴스 SEO 최적화\",\n      category: \"seo_optimization\",\n      stepOrder: 1,\n      content: `기술 뉴스 제목의 SEO 최적화 방법:\n\n1. 주요 기술 키워드를 제목 앞부분에 배치\n2. 트렌딩 기술 용어 활용 (AI, 메타버스, 블록체인 등)\n3. 검색량이 높은 브랜드명 포함\n4. 숫자나 년도를 활용하여 시의성 강조`,\n      createdAt: \"2024-07-08T15:00:00Z\",\n      updatedAt: \"2024-07-13T10:30:00Z\"\n    }\n  ],\n  \"proj_003\": [\n    {\n      promptId: \"prompt_004\",\n      projectId: \"proj_003\",\n      title: \"스포츠 뉴스 제목 스타일\",\n      category: \"title_type_guidelines\", \n      stepOrder: 1,\n      content: `스포츠 뉴스 제목 작성 가이드라인:\n\n1. 선수명이나 팀명을 명확히 표기\n2. 경기 결과는 구체적 스코어 포함\n3. 감정적 표현보다는 사실 중심\n4. 스포츠별 전문 용어 적절히 활용\n5. 실시간성을 나타내는 표현 사용`,\n      createdAt: \"2024-07-05T12:15:00Z\", \n      updatedAt: \"2024-07-13T16:45:00Z\"\n    }\n  ]\n};\n\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회 (개발 모드):\", projectId);\n\n    // 개발 모드에서는 바로 더미 데이터 반환\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 프롬프트 데이터 즉시 반환\");\n      let cards = DUMMY_PROMPT_CARDS[projectId];\n      \n      // 해당 프로젝트의 프롬프트가 없으면 기본 프롬프트 생성\n      if (!cards) {\n        console.log(\"🆕 동적 프롬프트 카드 생성:\", projectId);\n        cards = [\n          {\n            promptId: `prompt_${projectId}_001`,\n            projectId: projectId,\n            title: \"기본 제목 생성 가이드라인\",\n            category: \"workflow\",\n            stepOrder: 1,\n            content: `뉴스 제목 생성을 위한 기본 가이드라인:\n\n1. 핵심 내용을 15-25자로 요약\n2. 독자의 관심을 끄는 키워드 포함\n3. 정확하고 객관적인 표현 사용\n4. SEO 최적화 키워드 포함\n5. 감정적 표현보다는 사실 중심으로 작성`,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          },\n          {\n            promptId: `prompt_${projectId}_002`,\n            projectId: projectId,\n            title: \"스타일 가이드\",\n            category: \"stylebook_guidelines\",\n            stepOrder: 2,\n            content: `제목 작성 스타일 가이드:\n\n- 전문 용어는 일반인이 이해하기 쉽게 표현\n- 수치는 구체적으로 명시\n- 중립적이고 객관적인 표현 사용\n- 필요시 괄호로 부연 설명 추가\n- 시의성을 나타내는 표현 활용`,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        ];\n        DUMMY_PROMPT_CARDS[projectId] = cards;\n      }\n      \n      return {\n        promptCards: cards,\n        count: cards.length,\n        projectId: projectId\n      };\n    }\n\n    try {\n      const params = includeContent ? { include_content: \"true\" } : {};\n      const response = await api.get(`/prompts/${projectId}`, { params });\n      console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 데이터 사용\");\n      let cards = DUMMY_PROMPT_CARDS[projectId];\n      \n      // 해당 프로젝트의 프롬프트가 없으면 기본 프롬프트 생성\n      if (!cards) {\n        console.log(\"🆕 동적 프롬프트 카드 생성:\", projectId);\n        cards = [\n          {\n            promptId: `prompt_${projectId}_001`,\n            projectId: projectId,\n            title: \"기본 제목 생성 가이드라인\",\n            category: \"workflow\",\n            stepOrder: 1,\n            content: `뉴스 제목 생성을 위한 기본 가이드라인:\n\n1. 핵심 내용을 15-25자로 요약\n2. 독자의 관심을 끄는 키워드 포함\n3. 정확하고 객관적인 표현 사용\n4. SEO 최적화 키워드 포함\n5. 감정적 표현보다는 사실 중심으로 작성`,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          },\n          {\n            promptId: `prompt_${projectId}_002`,\n            projectId: projectId,\n            title: \"스타일 가이드\",\n            category: \"stylebook_guidelines\",\n            stepOrder: 2,\n            content: `제목 작성 스타일 가이드:\n\n- 전문 용어는 일반인이 이해하기 쉽게 표현\n- 수치는 구체적으로 명시\n- 중립적이고 객관적인 표현 사용\n- 필요시 괄호로 부연 설명 추가\n- 시의성을 나타내는 표현 활용`,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n          }\n        ];\n        DUMMY_PROMPT_CARDS[projectId] = cards;\n      }\n      \n      return {\n        promptCards: cards,\n        count: cards.length,\n        projectId: projectId\n      };\n    }\n  },\n\n  // 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    console.log(\"🆕 프롬프트 생성 (개발 모드):\", { projectId, promptData });\n\n    // 개발 모드에서는 바로 더미 데이터 사용\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 프롬프트 카드 생성\");\n      const newCard = {\n        promptId: `prompt_${Date.now()}`,\n        prompt_id: `prompt_${Date.now()}`, // 호환성을 위해 둘 다 추가\n        projectId,\n        title: promptData.title || \"새 프롬프트\",\n        prompt_text: promptData.prompt_text,\n        content: promptData.prompt_text, // 호환성을 위해 둘 다 추가\n        category: promptData.category || \"instruction\",\n        enabled: promptData.enabled !== false,\n        stepOrder: DUMMY_PROMPT_CARDS[projectId] ? DUMMY_PROMPT_CARDS[projectId].length + 1 : 1,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      if (!DUMMY_PROMPT_CARDS[projectId]) {\n        DUMMY_PROMPT_CARDS[projectId] = [];\n      }\n      DUMMY_PROMPT_CARDS[projectId].push(newCard);\n      console.log(\"✅ 프롬프트 카드 생성 완료:\", newCard);\n      console.log(\"📋 현재 프로젝트의 카드 목록:\", DUMMY_PROMPT_CARDS[projectId]);\n      return newCard;\n    }\n\n    try {\n      const response = await api.post(`/prompts/${projectId}`, promptData);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const newCard = {\n        promptId: `prompt_${Date.now()}`,\n        prompt_id: `prompt_${Date.now()}`, // 호환성을 위해 둘 다 추가\n        projectId,\n        title: promptData.title || \"새 프롬프트\",\n        prompt_text: promptData.prompt_text,\n        content: promptData.prompt_text, // 호환성을 위해 둘 다 추가\n        category: promptData.category || \"instruction\",\n        enabled: promptData.enabled !== false,\n        stepOrder: DUMMY_PROMPT_CARDS[projectId] ? DUMMY_PROMPT_CARDS[projectId].length + 1 : 1,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n      \n      if (!DUMMY_PROMPT_CARDS[projectId]) {\n        DUMMY_PROMPT_CARDS[projectId] = [];\n      }\n      DUMMY_PROMPT_CARDS[projectId].push(newCard);\n      return newCard;\n    }\n  },\n\n  // 프롬프트 카드 수정 - S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정 (개발 모드):\", { projectId, promptId, promptData });\n\n    // 개발 모드에서는 바로 더미 데이터 수정\n    if (DEV_MODE) {\n      console.log(\"🚀 개발 모드: 더미 프롬프트 카드 수정\");\n      const cards = DUMMY_PROMPT_CARDS[projectId] || [];\n      const index = cards.findIndex(card => \n        card.promptId === promptId || card.prompt_id === promptId\n      );\n      \n      if (index !== -1) {\n        DUMMY_PROMPT_CARDS[projectId][index] = {\n          ...DUMMY_PROMPT_CARDS[projectId][index],\n          title: promptData.title,\n          prompt_text: promptData.prompt_text,\n          content: promptData.prompt_text, // 호환성을 위해 둘 다 업데이트\n          category: promptData.category,\n          enabled: promptData.enabled,\n          updatedAt: new Date().toISOString()\n        };\n        console.log(\"✅ 프롬프트 카드 수정 완료:\", DUMMY_PROMPT_CARDS[projectId][index]);\n        return DUMMY_PROMPT_CARDS[projectId][index];\n      }\n      throw new Error(\"프롬프트를 찾을 수 없습니다\");\n    }\n\n    try {\n      const response = await api.put(\n        `/prompts/${projectId}/${promptId}`,\n        promptData\n      );\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const cards = DUMMY_PROMPT_CARDS[projectId] || [];\n      const index = cards.findIndex(card => \n        card.promptId === promptId || card.prompt_id === promptId\n      );\n      \n      if (index !== -1) {\n        DUMMY_PROMPT_CARDS[projectId][index] = {\n          ...DUMMY_PROMPT_CARDS[projectId][index],\n          title: promptData.title,\n          prompt_text: promptData.prompt_text,\n          content: promptData.prompt_text, // 호환성을 위해 둘 다 업데이트\n          category: promptData.category,\n          enabled: promptData.enabled,\n          updatedAt: new Date().toISOString()\n        };\n        return DUMMY_PROMPT_CARDS[projectId][index];\n      }\n      throw new Error(\"프롬프트를 찾을 수 없습니다\");\n    }\n  },\n\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    console.log(\"🗑️ 프롬프트 삭제 (개발 모드):\", { projectId, promptId });\n\n    try {\n      const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 응답 사용\");\n      const cards = DUMMY_PROMPT_CARDS[projectId] || [];\n      const index = cards.findIndex(card => card.promptId === promptId);\n      \n      if (index !== -1) {\n        DUMMY_PROMPT_CARDS[projectId].splice(index, 1);\n        return { success: true };\n      }\n      throw new Error(\"프롬프트를 찾을 수 없습니다\");\n    }\n  },\n};\n\n// =============================================================================\n// 3. 제목 생성 API (Bedrock Claude 호출)\n// =============================================================================\nexport const generateAPI = {\n  // 실제 Bedrock Claude 호출\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작 (개발 모드):\", {\n      projectId,\n      articleLength: articleContent.length,\n      userRequest,\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, {\n        article: articleContent,\n        userRequest,\n      });\n      console.log(\"✅ 제목 생성 완료\");\n      return response.data;\n    } catch (error) {\n      console.log(\"⚠️ API 실패, 더미 제목 생성 사용\");\n      \n      // 더미 제목 생성 결과\n      const dummyTitles = [\n        {\n          type: \"저널리즘 충실형\",\n          title: \"경제성장률 3.2% 기록, 전년 동기 대비 0.5%p 상승\",\n          quality: {\n            clarity: \"상\",\n            readability: \"상\", \n            clickworthiness: \"중\",\n            factuality: \"상\",\n            style_compliance: \"상\"\n          },\n          reasoning: \"객관적 수치를 중심으로 정확한 정보 전달에 중점을 둔 제목\"\n        },\n        {\n          type: \"균형잡힌 후킹형\",\n          title: \"한국 경제 훨훨, 3.2% 성장으로 예상치 뛰어넘어\", \n          quality: {\n            clarity: \"상\",\n            readability: \"상\",\n            clickworthiness: \"상\", \n            factuality: \"상\",\n            style_compliance: \"중\"\n          },\n          reasoning: \"독자의 관심을 끌면서도 정확한 정보를 포함한 균형 잡힌 제목\"\n        },\n        {\n          type: \"클릭유도형\",\n          title: \"믿기지 않는 성장률! 한국 경제가 보여준 놀라운 반전\",\n          quality: {\n            clarity: \"중\",\n            readability: \"상\",\n            clickworthiness: \"상\",\n            factuality: \"중\", \n            style_compliance: \"하\"\n          },\n          reasoning: \"강한 감정적 어필로 클릭을 유도하는 제목\"\n        },\n        {\n          type: \"SEO/AEO 최적화형\",\n          title: \"한국 경제성장률 3.2% 2024년 3분기 GDP 상승률 분석\",\n          quality: {\n            clarity: \"상\",\n            readability: \"중\",\n            clickworthiness: \"중\",\n            factuality: \"상\",\n            style_compliance: \"상\"\n          },\n          reasoning: \"검색 최적화 키워드를 포함한 SEO 친화적 제목\"\n        },\n        {\n          type: \"소셜미디어 공유형\", \n          title: \"🚀 한국 경제 3.2% 성장 달성! #경제성장 #GDP #한국경제\",\n          quality: {\n            clarity: \"상\",\n            readability: \"상\",\n            clickworthiness: \"상\",\n            factuality: \"상\", \n            style_compliance: \"중\"\n          },\n          reasoning: \"이모지와 해시태그를 활용한 소셜미디어 최적화 제목\"\n        }\n      ];\n\n      return {\n        success: true,\n        titles: dummyTitles,\n        metadata: {\n          projectId,\n          articleLength: articleContent.length,\n          userRequest,\n          processingTime: \"2.3초\",\n          tokensUsed: 1250,\n          model: \"claude-3-5-sonnet-20241022-v2:0 (개발 모드)\"\n        },\n        timestamp: new Date().toISOString()\n      };\n    }\n  },\n};\n\n// =============================================================================\n// 4. 유틸리티\n// =============================================================================\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    const { status, data } = error.response;\n    return {\n      message: data?.error || `서버 오류 (${status})`,\n      status,\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0,\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1,\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 개발 모드: 항상 인증된 상태로 처리\n    return true;\n  },\n\n  getCurrentUser: () => {\n    // 개발 모드: 가짜 사용자 정보 반환\n    return {\n      id: \"dev-user\",\n      email: \"dev@example.com\",\n      name: \"개발자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    // 개발 모드: 가짜 로그인\n    console.log(\"🔐 개발 모드 로그인:\", credentials);\n    return { success: true, message: \"로그인 성공 (개발 모드)\" };\n  },\n\n  signup: async (userData) => {\n    // 개발 모드: 가짜 회원가입\n    console.log(\"📝 개발 모드 회원가입:\", userData);\n    return { success: true, message: \"회원가입 성공 (개발 모드)\" };\n  },\n\n  signout: async () => {\n    // 개발 모드: 가짜 로그아웃\n    console.log(\"👋 개발 모드 로그아웃\");\n    return { success: true };\n  },\n\n  verifyEmail: async (verificationData) => {\n    console.log(\"✉️ 개발 모드 이메일 인증:\", verificationData);\n    return { success: true, message: \"이메일 인증 성공 (개발 모드)\" };\n  },\n\n  forgotPassword: async (email) => {\n    console.log(\"🔄 개발 모드 비밀번호 재설정:\", email);\n    return { success: true, message: \"비밀번호 재설정 이메일 발송 (개발 모드)\" };\n  },\n\n  confirmPassword: async (resetData) => {\n    console.log(\"🔒 개발 모드 비밀번호 확인:\", resetData);\n    return { success: true, message: \"비밀번호 재설정 성공 (개발 모드)\" };\n  },\n};\n\n// =============================================================================\n// 6. 카테고리 API\n// =============================================================================\nexport const DEFAULT_PROJECT_CATEGORIES = [\n  { id: \"news\", name: \"뉴스\", color: \"blue\", description: \"일반 뉴스 기사\" },\n  { id: \"economy\", name: \"경제\", color: \"green\", description: \"경제 관련 기사\" },\n  { id: \"tech\", name: \"기술\", color: \"purple\", description: \"기술 및 IT 기사\" },\n  { id: \"sports\", name: \"스포츠\", color: \"orange\", description: \"스포츠 기사\" },\n  { id: \"culture\", name: \"문화\", color: \"pink\", description: \"문화 및 예술 기사\" },\n];\n\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 개발 모드: 기본 카테고리 반환\n    return { categories: DEFAULT_PROJECT_CATEGORIES };\n  },\n\n  createCategory: async (categoryData) => {\n    console.log(\"📁 카테고리 생성:\", categoryData);\n    return { \n      id: `cat_${Date.now()}`, \n      ...categoryData, \n      createdAt: new Date().toISOString() \n    };\n  },\n\n  updateCategory: async (categoryId, categoryData) => {\n    console.log(\"📝 카테고리 수정:\", categoryId, categoryData);\n    return { success: true };\n  },\n\n  deleteCategory: async (categoryId) => {\n    console.log(\"🗑️ 카테고리 삭제:\", categoryId);\n    return { success: true };\n  },\n};\n\nexport const projectCategoryAPI = {\n  updateProjectCategory: async (projectId, categoryId) => {\n    console.log(\"📂 프로젝트 카테고리 변경:\", projectId, categoryId);\n    return { success: true };\n  },\n};\n\n// =============================================================================\n// 7. 오케스트레이션 API\n// =============================================================================\nexport const orchestrationAPI = {\n  startExecution: async (projectId, data) => {\n    console.log(\"🚀 오케스트레이션 시작:\", projectId, data);\n    return { \n      executionArn: `exec_${Date.now()}`, \n      status: \"RUNNING\" \n    };\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    console.log(\"📊 실행 상태 조회:\", executionArn);\n    return { \n      status: \"SUCCEEDED\", \n      result: { message: \"완료됨\" } \n    };\n  },\n};\n\n// =============================================================================\n// 8. 유틸리티 함수들\n// =============================================================================\nexport const getCategoryInfo = (categoryId, userCategories = DEFAULT_PROJECT_CATEGORIES) => {\n  const category = userCategories.find(cat => cat.id === categoryId);\n  return category || { \n    id: categoryId, \n    name: \"알 수 없음\", \n    color: \"gray\", \n    description: \"알 수 없는 카테고리\" \n  };\n};\n\nexport const getCategoryColorClasses = (color) => {\n  const colorMap = {\n    blue: \"bg-blue-50 text-blue-700 border-blue-200\",\n    green: \"bg-green-50 text-green-700 border-green-200\",\n    purple: \"bg-purple-50 text-purple-700 border-purple-200\",\n    orange: \"bg-orange-50 text-orange-700 border-orange-200\",\n    pink: \"bg-pink-50 text-pink-700 border-pink-200\",\n    red: \"bg-red-50 text-red-700 border-red-200\",\n    yellow: \"bg-yellow-50 text-yellow-700 border-yellow-200\",\n    indigo: \"bg-indigo-50 text-indigo-700 border-indigo-200\",\n    gray: \"bg-gray-50 text-gray-700 border-gray-200\",\n  };\n  return colorMap[color] || colorMap.gray;\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(project => project.category === filters.category);\n  }\n\n  // 검색 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project =>\n      project.name.toLowerCase().includes(query) ||\n      (project.description && project.description.toLowerCase().includes(query)) ||\n      (project.tags && project.tags.some(tag => tag.toLowerCase().includes(query)))\n    );\n  }\n\n  // 정렬\n  filtered.sort((a, b) => {\n    switch (filters.sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name, \"ko\");\n      case \"updated\":\n        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);\n      case \"created\":\n      default:\n        return new Date(b.createdAt) - new Date(a.createdAt);\n    }\n  });\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (!count || count === 0) return \"0\";\n  if (count < 1000) return count.toString();\n  if (count < 1000000) return `${(count / 1000).toFixed(1)}K`;\n  return `${(count / 1000000).toFixed(1)}M`;\n};\n\nexport const formatFileSize = (bytes) => {\n  if (!bytes || bytes === 0) return \"0 B\";\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      totalSize: 0,\n      categories: {},\n    };\n  }\n\n  const stats = {\n    totalCards: promptCards.length,\n    totalTokens: 0,\n    totalSize: 0,\n    categories: {},\n  };\n\n  promptCards.forEach(card => {\n    // 토큰 수 계산 (대략적으로 글자 수 / 4)\n    const contentLength = (card.content || \"\").length;\n    const estimatedTokens = Math.ceil(contentLength / 4);\n    stats.totalTokens += estimatedTokens;\n    \n    // 파일 크기 계산 (UTF-8 기준)\n    stats.totalSize += new Blob([card.content || \"\"]).size;\n    \n    // 카테고리별 통계\n    const category = card.category || \"uncategorized\";\n    if (!stats.categories[category]) {\n      stats.categories[category] = { count: 0, tokens: 0, size: 0 };\n    }\n    stats.categories[category].count++;\n    stats.categories[category].tokens += estimatedTokens;\n    stats.categories[category].size += new Blob([card.content || \"\"]).size;\n  });\n\n  return stats;\n};\n\n// 색상 옵션\nexport const COLOR_OPTIONS = [\n  { id: \"blue\", name: \"파란색\", class: \"bg-blue-500\" },\n  { id: \"green\", name: \"초록색\", class: \"bg-green-500\" },\n  { id: \"purple\", name: \"보라색\", class: \"bg-purple-500\" },\n  { id: \"orange\", name: \"주황색\", class: \"bg-orange-500\" },\n  { id: \"pink\", name: \"분홍색\", class: \"bg-pink-500\" },\n  { id: \"red\", name: \"빨간색\", class: \"bg-red-500\" },\n  { id: \"yellow\", name: \"노란색\", class: \"bg-yellow-500\" },\n  { id: \"indigo\", name: \"남색\", class: \"bg-indigo-500\" },\n  { id: \"gray\", name: \"회색\", class: \"bg-gray-500\" },\n];\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}