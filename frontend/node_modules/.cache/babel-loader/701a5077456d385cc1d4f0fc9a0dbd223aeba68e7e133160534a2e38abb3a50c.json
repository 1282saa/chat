{"ast":null,"code":"import '../../../../types/errors.mjs';\nimport '../../../../errors/errorHelpers.mjs';\nimport '../../../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../../../utils/retry/retry.mjs';\nimport '../../../../parseAWSExports.mjs';\nimport 'uuid';\nimport '../../../../singleton/Auth/utils/errorHelpers.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { getAmplifyUserAgent } from '../../../../Platform/index.mjs';\nimport '../../../../Platform/types.mjs';\nimport '../../../../BackgroundProcessManager/types.mjs';\nimport '../../../../Reachability/Reachability.mjs';\nimport '../../../../Hub/index.mjs';\nimport '../../../../utils/sessionListener/index.mjs';\nimport { parseMetadata } from '../../../../clients/serde/responseInfo.mjs';\nimport { parseJsonError, parseJsonBody } from '../../../../clients/serde/json.mjs';\nimport { composeServiceApi } from '../../../../clients/internal/composeServiceApi.mjs';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\nimport { cognitoIdentityTransferHandler } from './handler/cognitoIdentityTransferHandler.mjs';\nimport { createClientSerializer } from './serde/createClientSerializer.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createGetCredentialsForIdentityClient = config => composeServiceApi(cognitoIdentityTransferHandler, createClientSerializer('GetCredentialsForIdentity'), getCredentialsForIdentityDeserializer, {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config,\n  userAgentValue: getAmplifyUserAgent()\n});\nconst getCredentialsForIdentityDeserializer = async response => {\n  if (response.statusCode >= 300) {\n    const error = await parseJsonError(response);\n    throw error;\n  }\n  const body = await parseJsonBody(response);\n  return {\n    IdentityId: body.IdentityId,\n    Credentials: deserializeCredentials(body.Credentials),\n    $metadata: parseMetadata(response)\n  };\n};\nconst deserializeCredentials = function () {\n  let {\n    Expiration,\n    ...rest\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...rest,\n    Expiration: Expiration && new Date(Expiration * 1000)\n  };\n};\nexport { createGetCredentialsForIdentityClient };","map":{"version":3,"names":["createGetCredentialsForIdentityClient","config","composeServiceApi","cognitoIdentityTransferHandler","createClientSerializer","getCredentialsForIdentityDeserializer","DEFAULT_SERVICE_CLIENT_API_CONFIG","userAgentValue","getAmplifyUserAgent","response","statusCode","error","parseJsonError","body","parseJsonBody","IdentityId","Credentials","deserializeCredentials","$metadata","parseMetadata","Expiration","rest","arguments","length","undefined","Date"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/node_modules/@aws-amplify/core/src/foundation/factories/serviceClients/cognitoIdentity/createGetCredentialsForIdentityClient.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseJsonBody, parseJsonError, parseMetadata, } from '../../../../clients';\nimport { composeServiceApi } from '../../../../clients/internal';\nimport { getAmplifyUserAgent } from '../../../../Platform';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nimport { cognitoIdentityTransferHandler } from './handler';\nimport { createClientSerializer } from './serde';\nexport const createGetCredentialsForIdentityClient = (config) => composeServiceApi(cognitoIdentityTransferHandler, createClientSerializer('GetCredentialsForIdentity'), getCredentialsForIdentityDeserializer, {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n    userAgentValue: getAmplifyUserAgent(),\n});\nconst getCredentialsForIdentityDeserializer = async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await parseJsonError(response);\n        throw error;\n    }\n    const body = await parseJsonBody(response);\n    return {\n        IdentityId: body.IdentityId,\n        Credentials: deserializeCredentials(body.Credentials),\n        $metadata: parseMetadata(response),\n    };\n};\nconst deserializeCredentials = ({ Expiration, ...rest } = {}) => ({\n    ...rest,\n    Expiration: Expiration && new Date(Expiration * 1000),\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAOY,MAACA,qCAAqC,GAAIC,MAAM,IAAKC,iBAAiB,CAACC,8BAA8B,EAAEC,sBAAsB,CAAC,2BAA2B,CAAC,EAAEC,qCAAqC,EAAE;EAC3M,GAAGC,iCAAiC;EACpC,GAAGL,MAAM;EACTM,cAAc,EAAEC,mBAAmB;AACvC,CAAC;AACD,MAAMH,qCAAqC,GAAG,MAAOI,QAAQ,IAAK;EAC9D,IAAIA,QAAQ,CAACC,UAAU,IAAI,GAAG,EAAE;IAC5B,MAAMC,KAAK,GAAG,MAAMC,cAAc,CAACH,QAAQ,CAAC;IAC5C,MAAME,KAAK;EACnB;EACI,MAAME,IAAI,GAAG,MAAMC,aAAa,CAACL,QAAQ,CAAC;EAC1C,OAAO;IACHM,UAAU,EAAEF,IAAI,CAACE,UAAU;IAC3BC,WAAW,EAAEC,sBAAsB,CAACJ,IAAI,CAACG,WAAW,CAAC;IACrDE,SAAS,EAAEC,aAAa,CAACV,QAAQ;EACzC,CAAK;AACL,CAAC;AACD,MAAMQ,sBAAsB,GAAG,SAAAA,CAAA;EAAA,IAAC;IAAEG,UAAU;IAAE,GAAGC;EAAI,CAAE,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,OAAM;IAC9D,GAAGD,IAAI;IACPD,UAAU,EAAEA,UAAU,IAAI,IAAIK,IAAI,CAACL,UAAU,GAAG,IAAI;EACxD,CAAC;AAAA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}