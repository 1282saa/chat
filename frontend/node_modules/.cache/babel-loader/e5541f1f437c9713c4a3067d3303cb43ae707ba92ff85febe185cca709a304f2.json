{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { orchestrationAPI } from \"../services/api\";\n\n/**\n * Îã®ÏàúÌôîÎêú Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÌõÖ\n * ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ ‚Üí ÌîÑÎ°¨ÌîÑÌä∏ ÌÉêÏÉâ ‚Üí Bedrock Ï∂úÎ†• ÌîåÎ°úÏö∞Ïóê ÏßëÏ§ë\n */\nexport const useOrchestration = projectId => {\n  _s();\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * ÌïµÏã¨ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ\n   * @param {string} content - Í∏∞ÏÇ¨ ÎÇ¥Ïö©\n   * @param {Object} config - ÏÑ§Ï†ï (ÏÑ†ÌÉùÏÇ¨Ìï≠)\n   * @param {string} userRequest - ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä ÏöîÏ≤≠\n   * @returns {Promise<Object>} - Ï†úÎ™© ÏÉùÏÑ± Í≤∞Í≥º\n   */\n  const executeOrchestration = useCallback(async (content, config = {}, userRequest = \"\") => {\n    if (!content.trim()) {\n      toast.error(\"Í∏∞ÏÇ¨ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\");\n      return null;\n    }\n    try {\n      setIsExecuting(true);\n      setExecutionStatus(\"PROCESSING\");\n      console.log(\"üöÄ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏãúÏûë:\", {\n        projectId,\n        contentLength: content.length,\n        userRequest\n      });\n\n      // Îã®ÏàúÌôîÎêú API Ìò∏Ï∂ú\n      const response = await orchestrationAPI.executeOrchestration(projectId, content, config, userRequest);\n      console.log(\"‚úÖ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏôÑÎ£å:\", response);\n      setExecutionStatus(\"COMPLETED\");\n      return response;\n    } catch (error) {\n      var _error$message, _error$response;\n      console.error(\"‚ùå Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìå®:\", error);\n      setExecutionStatus(\"FAILED\");\n\n      // ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†Å ÏóêÎü¨ Î©îÏãúÏßÄ\n      if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"Network Error\")) {\n        toast.error(\"ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî\");\n      } else if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 504) {\n        toast.error(\"ÏÑúÎ≤Ñ ÏùëÎãµ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî\");\n      } else {\n        toast.error(\"Ï†úÎ™© ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§\");\n      }\n      throw error;\n    } finally {\n      setIsExecuting(false);\n    }\n  }, [projectId]);\n\n  /**\n   * Ïã§Ìñâ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî\n   */\n  const resetExecution = useCallback(() => {\n    setIsExecuting(false);\n    setExecutionStatus(null);\n  }, []);\n  return {\n    // ÏÉÅÌÉú\n    isExecuting,\n    executionStatus,\n    // Ìï®Ïàò\n    executeOrchestration,\n    resetExecution\n  };\n};\n_s(useOrchestration, \"mh0DnZPDAybT6UYX65ySEggOdZM=\");","map":{"version":3,"names":["useState","useCallback","toast","orchestrationAPI","useOrchestration","projectId","_s","isExecuting","setIsExecuting","executionStatus","setExecutionStatus","executeOrchestration","content","config","userRequest","trim","error","console","log","contentLength","length","response","_error$message","_error$response","message","includes","status","resetExecution"],"sources":["/Users/yeong-gwang/Documents/work/·Ñâ·Ö•·Ñã·ÖÆ·ÜØ·ÑÄ·Öß·Üº·Ñå·Ö¶·Ñâ·Öµ·Ü´·ÑÜ·ÖÆ·Ü´/ai_·Ñå·Ö¶·ÑÜ·Ö©·Ü®·ÑÉ·Ö°·ÜØ·ÑÄ·Öµ/frontend/src/hooks/useOrchestration.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { orchestrationAPI } from \"../services/api\";\n\n/**\n * Îã®ÏàúÌôîÎêú Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÌõÖ\n * ÏÇ¨Ïö©Ïûê ÏßàÎ¨∏ ‚Üí ÌîÑÎ°¨ÌîÑÌä∏ ÌÉêÏÉâ ‚Üí Bedrock Ï∂úÎ†• ÌîåÎ°úÏö∞Ïóê ÏßëÏ§ë\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * ÌïµÏã¨ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìñâ\n   * @param {string} content - Í∏∞ÏÇ¨ ÎÇ¥Ïö©\n   * @param {Object} config - ÏÑ§Ï†ï (ÏÑ†ÌÉùÏÇ¨Ìï≠)\n   * @param {string} userRequest - ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä ÏöîÏ≤≠\n   * @returns {Promise<Object>} - Ï†úÎ™© ÏÉùÏÑ± Í≤∞Í≥º\n   */\n  const executeOrchestration = useCallback(\n    async (content, config = {}, userRequest = \"\") => {\n      if (!content.trim()) {\n        toast.error(\"Í∏∞ÏÇ¨ ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"PROCESSING\");\n\n        console.log(\"üöÄ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏãúÏûë:\", {\n          projectId,\n          contentLength: content.length,\n          userRequest,\n        });\n\n        // Îã®ÏàúÌôîÎêú API Ìò∏Ï∂ú\n        const response = await orchestrationAPI.executeOrchestration(\n          projectId,\n          content,\n          config,\n          userRequest\n        );\n\n        console.log(\"‚úÖ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò ÏôÑÎ£å:\", response);\n\n        setExecutionStatus(\"COMPLETED\");\n        return response;\n      } catch (error) {\n        console.error(\"‚ùå Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Ïã§Ìå®:\", error);\n        setExecutionStatus(\"FAILED\");\n\n        // ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†Å ÏóêÎü¨ Î©îÏãúÏßÄ\n        if (error.message?.includes(\"Network Error\")) {\n          toast.error(\"ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî\");\n        } else if (error.response?.status === 504) {\n          toast.error(\n            \"ÏÑúÎ≤Ñ ÏùëÎãµ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî\"\n          );\n        } else {\n          toast.error(\"Ï†úÎ™© ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§\");\n        }\n\n        throw error;\n      } finally {\n        setIsExecuting(false);\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * Ïã§Ìñâ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî\n   */\n  const resetExecution = useCallback(() => {\n    setIsExecuting(false);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    // ÏÉÅÌÉú\n    isExecuting,\n    executionStatus,\n\n    // Ìï®Ïàò\n    executeOrchestration,\n    resetExecution,\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAE5D;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMW,oBAAoB,GAAGV,WAAW,CACtC,OAAOW,OAAO,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAEC,WAAW,GAAG,EAAE,KAAK;IAChD,IAAI,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC,EAAE;MACnBb,KAAK,CAACc,KAAK,CAAC,eAAe,CAAC;MAC5B,OAAO,IAAI;IACb;IAEA,IAAI;MACFR,cAAc,CAAC,IAAI,CAAC;MACpBE,kBAAkB,CAAC,YAAY,CAAC;MAEhCO,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;QAC5Bb,SAAS;QACTc,aAAa,EAAEP,OAAO,CAACQ,MAAM;QAC7BN;MACF,CAAC,CAAC;;MAEF;MACA,MAAMO,QAAQ,GAAG,MAAMlB,gBAAgB,CAACQ,oBAAoB,CAC1DN,SAAS,EACTO,OAAO,EACPC,MAAM,EACNC,WACF,CAAC;MAEDG,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAAC;MAEtCX,kBAAkB,CAAC,WAAW,CAAC;MAC/B,OAAOW,QAAQ;IACjB,CAAC,CAAC,OAAOL,KAAK,EAAE;MAAA,IAAAM,cAAA,EAAAC,eAAA;MACdN,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCN,kBAAkB,CAAC,QAAQ,CAAC;;MAE5B;MACA,KAAAY,cAAA,GAAIN,KAAK,CAACQ,OAAO,cAAAF,cAAA,eAAbA,cAAA,CAAeG,QAAQ,CAAC,eAAe,CAAC,EAAE;QAC5CvB,KAAK,CAACc,KAAK,CAAC,iBAAiB,CAAC;MAChC,CAAC,MAAM,IAAI,EAAAO,eAAA,GAAAP,KAAK,CAACK,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,EAAE;QACzCxB,KAAK,CAACc,KAAK,CACT,mCACF,CAAC;MACH,CAAC,MAAM;QACLd,KAAK,CAACc,KAAK,CAAC,oBAAoB,CAAC;MACnC;MAEA,MAAMA,KAAK;IACb,CAAC,SAAS;MACRR,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC,EACD,CAACH,SAAS,CACZ,CAAC;;EAED;AACF;AACA;EACE,MAAMsB,cAAc,GAAG1B,WAAW,CAAC,MAAM;IACvCO,cAAc,CAAC,KAAK,CAAC;IACrBE,kBAAkB,CAAC,IAAI,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACL;IACAH,WAAW;IACXE,eAAe;IAEf;IACAE,oBAAoB;IACpBgB;EACF,CAAC;AACH,CAAC;AAACrB,EAAA,CAhFWF,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}