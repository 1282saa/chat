{"ast":null,"code":"import axios from\"axios\";import React from\"react\";// Added for useDebounce\n// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL=process.env.REACT_APP_API_URL||\"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";// Axios 인스턴스 생성\nconst api=axios.create({baseURL:API_BASE_URL,headers:{\"Content-Type\":\"application/json\"}});// 요청 인터셉터\napi.interceptors.request.use(config=>{var _config$method;console.log(\"API 요청:\",(_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),config.url);// 인증 토큰 추가 (API Gateway Cognito Authorizer는 ID Token을 요구)\nconst token=localStorage.getItem(\"idToken\")||localStorage.getItem(\"accessToken\");if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// 응답 인터셉터\napi.interceptors.response.use(response=>{console.log(\"API 응답:\",response.status,response.config.url);return response;},error=>{var _error$response,_error$response2,_error$response3;console.error(\"API 오류:\",(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||error.message);// 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\nif(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===401){// 토큰 만료 처리\nlocalStorage.removeItem(\"accessToken\");localStorage.removeItem(\"idToken\");localStorage.removeItem(\"refreshToken\");// 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\nwindow.location.href=\"/login\";}return Promise.reject(error);});// 프로젝트 관련 API\nexport const projectAPI={// 프로젝트 목록 조회\ngetProjects:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const response=await api.get(\"/projects\",{params});return response.data;},// 프로젝트 생성\ncreateProject:async projectData=>{const response=await api.post(\"/projects\",projectData);return response.data;},// 프로젝트 상세 조회\ngetProject:async projectId=>{const response=await api.get(`/projects/${projectId}`);return response.data;},// 프로젝트 업데이트\nupdateProject:async(projectId,projectData)=>{const response=await api.put(`/projects/${projectId}`,projectData);return response.data;},// 프로젝트 삭제\ndeleteProject:async projectId=>{const response=await api.delete(`/projects/${projectId}`);return response.data;},// 업로드 URL 요청\ngetUploadUrl:async(projectId,category,filename)=>{const response=await api.get(`/projects/${projectId}/upload-url`,{params:{category,filename}});return response.data;}};// 제목 생성 API (Step Functions 기반)\nexport const generateAPI={// 제목 생성 시작 (Step Functions 실행)\nstartTitleGeneration:async(projectId,article,aiSettings)=>{const payload={article};// AI 설정이 있으면 추가\nif(aiSettings){payload.aiSettings=aiSettings;}const response=await api.post(`/projects/${projectId}/generate`,payload);return response.data;},// 실행 상태 조회\ngetExecutionStatus:async executionArn=>{const encodedArn=encodeURIComponent(executionArn);const response=await api.get(`/executions/${encodedArn}`);return response.data;},// 폴링을 통한 결과 대기\npollForResult:async function(executionArn){let maxRetries=arguments.length>1&&arguments[1]!==undefined?arguments[1]:30;let interval=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2000;if(!executionArn||executionArn===\"undefined\"){return{success:false,error:\"실행 ARN이 없습니다. 직접 모드에서는 폴링이 필요하지 않습니다.\"};}let retries=0;while(retries<maxRetries){try{const status=await generateAPI.getExecutionStatus(executionArn);if(status.status===\"SUCCEEDED\"){return{success:true,data:status};}else if(status.status===\"FAILED\"){return{success:false,error:status.error||\"실행이 실패했습니다\"};}else if(status.status===\"TIMED_OUT\"){return{success:false,error:\"실행 시간이 초과되었습니다\"};}else if(status.status===\"ABORTED\"){return{success:false,error:\"실행이 중단되었습니다\"};}// 아직 실행 중이면 대기\nawait new Promise(resolve=>setTimeout(resolve,interval));retries++;}catch(error){console.error(\"폴링 중 오류:\",error);retries++;if(retries>=maxRetries){return{success:false,error:\"상태 조회 중 오류가 발생했습니다\"};}await new Promise(resolve=>setTimeout(resolve,interval));}}return{success:false,error:\"실행 시간이 초과되었습니다\"};},// 제목 생성 (직접 모드 + Step Functions 모드 지원)\ngenerateTitle:async(projectId,article,onProgress,aiSettings)=>{try{// 제목 생성 시작\nconst startResponse=await generateAPI.startTitleGeneration(projectId,article,aiSettings);// 직접 모드인 경우 (mode가 'direct'이거나 result가 바로 있는 경우)\nif(startResponse.mode===\"direct\"||startResponse.result){if(onProgress){onProgress({status:\"completed\",message:\"제목 생성이 완료되었습니다!\",result:startResponse.result});}return{conversationId:startResponse.executionId||\"direct-\"+Date.now(),projectId:projectId,result:startResponse.result,usage:startResponse.usage||{},timestamp:startResponse.timestamp||new Date().toISOString(),mode:\"direct\",debug:startResponse.debug||{}};}// Step Functions 모드인 경우\nif(startResponse.executionArn){if(onProgress){onProgress({status:\"started\",message:\"제목 생성이 시작되었습니다...\",executionArn:startResponse.executionArn});}// 폴링을 통한 결과 대기\nconst pollResponse=await generateAPI.pollForResult(startResponse.executionArn);if(pollResponse.success){return{conversationId:pollResponse.data.conversationId,projectId:projectId,result:pollResponse.data.result,usage:pollResponse.data.usage,timestamp:pollResponse.data.completedAt||new Date().toISOString(),executionArn:startResponse.executionArn,mode:\"stepfunctions\"};}else{throw new Error(pollResponse.error);}}throw new Error(\"알 수 없는 응답 형식입니다\");}catch(error){console.error(\"제목 생성 실패:\",error);throw error;}}};// 🆕 프롬프트 카드 관리 API\nexport const promptCardAPI={// 프롬프트 카드 목록 조회 (step_order 순으로 정렬)\ngetPromptCards:async function(projectId){let includeContent=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let includeDisabled=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const params={};if(includeContent)params.include_content=\"true\";if(includeDisabled)params.include_disabled=\"true\";const response=await api.get(`/prompts/${projectId}`,{params});return response.data;},// 새 프롬프트 카드 생성\ncreatePromptCard:async(projectId,promptData)=>{const response=await api.post(`/prompts/${projectId}`,promptData);return response.data;},// 프롬프트 카드 수정\nupdatePromptCard:async(projectId,promptId,promptData)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,promptData);return response.data;},// 프롬프트 카드 삭제\ndeletePromptCard:async(projectId,promptId)=>{const response=await api.delete(`/prompts/${projectId}/${promptId}`);return response.data;},// 프롬프트 카드 순서 변경\nreorderPromptCard:async(projectId,promptId,newStepOrder)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,{step_order:newStepOrder});return response.data;},// 프롬프트 카드 활성/비활성 토글\ntogglePromptCard:async(projectId,promptId,enabled)=>{const response=await api.put(`/prompts/${projectId}/${promptId}`,{enabled:enabled});return response.data;}};// 🆕 인증 API\nexport const authAPI={// 회원가입\nsignup:async userData=>{const response=await api.post(\"/auth/signup\",userData);return response.data;},// 로그인\nsignin:async credentials=>{const response=await api.post(\"/auth/signin\",credentials);const{accessToken,idToken,refreshToken}=response.data;// 토큰 저장\nlocalStorage.setItem(\"accessToken\",accessToken);localStorage.setItem(\"idToken\",idToken);localStorage.setItem(\"refreshToken\",refreshToken);return response.data;},// 로그아웃\nsignout:async()=>{try{await api.post(\"/auth/signout\");}finally{// 로컬 토큰 삭제\nlocalStorage.removeItem(\"accessToken\");localStorage.removeItem(\"idToken\");localStorage.removeItem(\"refreshToken\");}},// 토큰 갱신\nrefreshToken:async()=>{const refreshToken=localStorage.getItem(\"refreshToken\");if(!refreshToken){throw new Error(\"리프레시 토큰이 없습니다\");}const response=await api.post(\"/auth/refresh\",{refreshToken});const{accessToken,idToken}=response.data;// 새 토큰 저장\nlocalStorage.setItem(\"accessToken\",accessToken);localStorage.setItem(\"idToken\",idToken);return response.data;},// 이메일 인증\nverifyEmail:async verificationData=>{const response=await api.post(\"/auth/verify\",verificationData);return response.data;},// 비밀번호 찾기\nforgotPassword:async email=>{const response=await api.post(\"/auth/forgot-password\",{email});return response.data;},// 비밀번호 재설정\nconfirmPassword:async resetData=>{const response=await api.post(\"/auth/confirm-password\",resetData);return response.data;},// 현재 사용자 정보 (토큰에서 추출)\ngetCurrentUser:()=>{const token=localStorage.getItem(\"idToken\");if(!token)return null;try{// JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\nconst payload=JSON.parse(atob(token.split(\".\")[1]));return{email:payload.email,name:payload.name,sub:payload.sub};}catch(error){console.error(\"토큰 디코딩 오류:\",error);return null;}},// 로그인 상태 확인\nisAuthenticated:()=>{const token=localStorage.getItem(\"accessToken\");if(!token)return false;try{// 토큰 만료 시간 확인\nconst payload=JSON.parse(atob(token.split(\".\")[1]));const currentTime=Date.now()/1000;return payload.exp>currentTime;}catch(error){return false;}}};// 파일 업로드 API\nexport const uploadAPI={// S3 Pre-signed URL로 파일 업로드\nuploadFile:async(uploadUrl,file)=>{const response=await axios.put(uploadUrl,file,{headers:{\"Content-Type\":\"text/plain\"}});return response;}};// 🆕 프롬프트 카테고리 정의 (레거시 - 기존 파일 업로드용)\nexport const PROMPT_CATEGORIES=[{id:\"title_type_guidelines\",name:\"제목 유형 가이드라인\",description:\"제목의 다양한 유형과 작성 원칙\",required:true},{id:\"stylebook_guidelines\",name:\"스타일북 가이드라인\",description:\"서울경제신문의 스타일북 규정\",required:true},{id:\"workflow\",name:\"워크플로우\",description:\"제목 생성 6단계 워크플로우\",required:true},{id:\"audience_optimization\",name:\"독자 최적화\",description:\"대상 독자층별 최적화 전략\",required:true},{id:\"seo_optimization\",name:\"SEO 최적화\",description:\"검색 엔진 최적화 가이드라인\",required:false},{id:\"digital_elements_guidelines\",name:\"디지털 요소 가이드라인\",description:\"온라인 매체 특성에 맞는 제목 작성법\",required:true},{id:\"quality_assessment\",name:\"품질 평가\",description:\"제목 품질 평가 기준\",required:true},{id:\"uncertainty_handling\",name:\"불확실성 처리\",description:\"불확실한 정보 처리 가이드라인\",required:true},{id:\"output_format\",name:\"출력 형식\",description:\"결과 출력 형식 정의\",required:true},{id:\"description\",name:\"프로젝트 설명\",description:\"TITLE-NOMICS 시스템 설명\",required:true},{id:\"knowledge\",name:\"핵심 지식\",description:\"제목 작성 핵심 지식\",required:true}];// 🆕 프롬프트 카드 카테고리 정의 (새로운 카드 시스템용)\nexport const PROMPT_CARD_CATEGORIES=[{id:\"instruction\",name:\"지시사항\",description:\"기본 작업 지시 및 목표 설정\",color:\"blue\",icon:\"📋\"},{id:\"knowledge\",name:\"지식 기반\",description:\"도메인 지식 및 참고 정보\",color:\"purple\",icon:\"📚\"},{id:\"summary\",name:\"요약 규칙\",description:\"내용 요약 및 압축 가이드라인\",color:\"green\",icon:\"📝\"},{id:\"style_guide\",name:\"스타일 가이드\",description:\"브랜드 톤앤매너 및 작성 스타일\",color:\"orange\",icon:\"🎨\"},{id:\"validation\",name:\"검증 기준\",description:\"품질 확인 및 검증 룰\",color:\"red\",icon:\"✅\"},{id:\"enhancement\",name:\"개선 지침\",description:\"결과 향상 및 최적화 방법\",color:\"yellow\",icon:\"⚡\"}];// 사용 가능한 AI 모델 목록\nexport const AVAILABLE_MODELS=[{id:\"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",name:\"Claude 3.5 Sonnet (최신)\",description:\"가장 최신이고 성능이 뛰어난 모델\",maxTokens:200000},{id:\"us.anthropic.claude-3-sonnet-20240229-v1:0\",name:\"Claude 3 Sonnet\",description:\"균형잡힌 성능과 속도\",maxTokens:200000},{id:\"us.anthropic.claude-3-haiku-20240307-v1:0\",name:\"Claude 3 Haiku\",description:\"빠른 속도, 효율적인 처리\",maxTokens:200000},{id:\"anthropic.claude-instant-v1\",name:\"Claude Instant\",description:\"즉시 응답, 간단한 작업용\",maxTokens:100000},{id:\"amazon.titan-text-lite-v1\",name:\"Titan Text Lite\",description:\"가벼운 텍스트 처리\",maxTokens:4000},{id:\"amazon.titan-text-express-v1\",name:\"Titan Text Express\",description:\"빠른 텍스트 생성\",maxTokens:8000}];// 에러 핸들링 유틸리티\nexport const handleAPIError=error=>{if(error.response){// 서버 응답 오류\nconst{status,data}=error.response;return{message:(data===null||data===void 0?void 0:data.error)||`서버 오류 (${status})`,status};}else if(error.request){// 네트워크 오류\nreturn{message:\"네트워크 연결을 확인해주세요\",status:0};}else{// 기타 오류\nreturn{message:error.message||\"알 수 없는 오류가 발생했습니다\",status:-1};}};// 기본 프로젝트 카테고리 정의 (이모지 제거, 전문적 디자인)\nexport const DEFAULT_PROJECT_CATEGORIES=[{id:\"news\",name:\"뉴스/언론\",color:\"blue\",description:\"뉴스 기사, 언론 보도 제목 생성\",isDefault:true},{id:\"business\",name:\"비즈니스\",color:\"green\",description:\"비즈니스 문서, 기업 커뮤니케이션\",isDefault:true},{id:\"corporate\",name:\"기업 홍보\",color:\"purple\",description:\"기업 홍보, 마케팅 콘텐츠\",isDefault:true},{id:\"education\",name:\"교육/연구\",color:\"orange\",description:\"교육 자료, 연구 논문, 학술 자료\",isDefault:true},{id:\"marketing\",name:\"마케팅/광고\",color:\"yellow\",description:\"광고 카피, 마케팅 캠페인\",isDefault:true},{id:\"social\",name:\"소셜미디어\",color:\"indigo\",description:\"SNS 포스팅, 소셜 콘텐츠\",isDefault:true},{id:\"tech\",name:\"기술/IT\",color:\"cyan\",description:\"기술 문서, IT 뉴스, 개발 관련\",isDefault:true}];// 사용자 정의 카테고리 API\nexport const categoryAPI={// 사용자 카테고리 목록 조회\ngetUserCategories:async()=>{try{const response=await api.get(\"/categories\");return response.data;}catch(error){// 백엔드 API가 없는 경우 로컬 스토리지 사용\nconst savedCategories=localStorage.getItem(\"userCategories\");if(savedCategories){return JSON.parse(savedCategories);}return{categories:DEFAULT_PROJECT_CATEGORIES};}},// 사용자 카테고리 생성\ncreateCategory:async categoryData=>{try{const response=await api.post(\"/categories\",categoryData);return response.data;}catch(error){// 로컬 스토리지 사용\nconst savedCategories=localStorage.getItem(\"userCategories\");const categories=savedCategories?JSON.parse(savedCategories):{categories:[...DEFAULT_PROJECT_CATEGORIES]};const newCategory={...categoryData,id:`custom_${Date.now()}`,isDefault:false,createdAt:new Date().toISOString()};categories.categories.push(newCategory);localStorage.setItem(\"userCategories\",JSON.stringify(categories));return newCategory;}},// 사용자 카테고리 수정\nupdateCategory:async(categoryId,categoryData)=>{try{const response=await api.put(`/categories/${categoryId}`,categoryData);return response.data;}catch(error){// 로컬 스토리지 사용\nconst savedCategories=localStorage.getItem(\"userCategories\");const categories=savedCategories?JSON.parse(savedCategories):{categories:[...DEFAULT_PROJECT_CATEGORIES]};const categoryIndex=categories.categories.findIndex(cat=>cat.id===categoryId);if(categoryIndex!==-1){categories.categories[categoryIndex]={...categories.categories[categoryIndex],...categoryData,updatedAt:new Date().toISOString()};localStorage.setItem(\"userCategories\",JSON.stringify(categories));return categories.categories[categoryIndex];}throw new Error(\"카테고리를 찾을 수 없습니다\");}},// 사용자 카테고리 삭제\ndeleteCategory:async categoryId=>{try{const response=await api.delete(`/categories/${categoryId}`);return response.data;}catch(error){// 로컬 스토리지 사용\nconst savedCategories=localStorage.getItem(\"userCategories\");const categories=savedCategories?JSON.parse(savedCategories):{categories:[...DEFAULT_PROJECT_CATEGORIES]};const categoryIndex=categories.categories.findIndex(cat=>cat.id===categoryId);if(categoryIndex!==-1){categories.categories.splice(categoryIndex,1);localStorage.setItem(\"userCategories\",JSON.stringify(categories));return{success:true};}throw new Error(\"카테고리를 찾을 수 없습니다\");}}};// 프로젝트 카테고리 변경 API\nexport const projectCategoryAPI={// 프로젝트 카테고리 변경\nupdateProjectCategory:async(projectId,categoryId)=>{try{const response=await api.put(`/projects/${projectId}/category`,{category:categoryId});return response.data;}catch(error){// 임시로 클라이언트에서 처리 (실제로는 백엔드에서 처리해야 함)\nconsole.log(`프로젝트 ${projectId}의 카테고리를 ${categoryId}로 변경`);return{success:true,projectId,category:categoryId};}}};//프로젝트 통계 정보 API\nexport const projectStatsAPI={// 프로젝트 상세 통계 조회\ngetProjectStats:async projectId=>{const response=await api.get(`/projects/${projectId}/stats`);return response.data;},// 모든 프로젝트 통계 요약\ngetAllProjectsStats:async()=>{const response=await api.get(\"/projects/stats\");return response.data;}};// 프롬프트 통계 정보 계산 유틸리티\nexport const calculatePromptStats=promptCards=>{const stats={totalCards:promptCards.length,activeCards:promptCards.filter(card=>card.enabled!==false).length,totalTokens:0,totalSize:0,avgTokensPerCard:0,categories:new Set(),models:new Set(),temperatureRange:{min:1,max:0}};promptCards.forEach(card=>{// 카테고리 수집\nstats.categories.add(card.category);// 모델 수집\nstats.models.add(card.model);// 프롬프트 텍스트 통계\nif(card.prompt_text){const textLength=card.prompt_text.length;stats.totalSize+=textLength;// 대략적인 토큰 수 계산 (영어: 4자/토큰, 한국어: 2자/토큰)\nconst estimatedTokens=Math.ceil(textLength/2.5);stats.totalTokens+=estimatedTokens;}// 온도 범위 계산\nconst temp=parseFloat(card.temperature);if(temp<stats.temperatureRange.min)stats.temperatureRange.min=temp;if(temp>stats.temperatureRange.max)stats.temperatureRange.max=temp;});// 평균 토큰 계산\nstats.avgTokensPerCard=stats.totalCards>0?Math.round(stats.totalTokens/stats.totalCards):0;// Set을 배열로 변환\nstats.categories=Array.from(stats.categories);stats.models=Array.from(stats.models);return stats;};// 🆕 파일 크기 포맷팅 유틸리티\nexport const formatFileSize=bytes=>{if(bytes===0)return\"0 B\";const k=1024;const sizes=[\"B\",\"KB\",\"MB\",\"GB\"];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(1))+\" \"+sizes[i];};// 🆕 토큰 수 포맷팅 유틸리티\nexport const formatTokenCount=tokens=>{if(tokens<1000)return tokens.toString();if(tokens<1000000)return(tokens/1000).toFixed(1)+\"K\";return(tokens/1000000).toFixed(1)+\"M\";};// 🆕 카테고리 관련 유틸리티 (수정됨)\nexport const getCategoryInfo=function(categoryId){let userCategories=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const allCategories=[...DEFAULT_PROJECT_CATEGORIES,...userCategories];return allCategories.find(cat=>cat.id===categoryId)||DEFAULT_PROJECT_CATEGORIES.find(cat=>cat.id===\"news\");};// 🆕 카테고리별 색상 클래스 반환 (수정됨)\nexport const getCategoryColorClasses=color=>{const colors={blue:\"bg-blue-100 text-blue-800 border-blue-200\",green:\"bg-green-100 text-green-800 border-green-200\",purple:\"bg-purple-100 text-purple-800 border-purple-200\",orange:\"bg-orange-100 text-orange-800 border-orange-200\",yellow:\"bg-yellow-100 text-yellow-800 border-yellow-200\",indigo:\"bg-indigo-100 text-indigo-800 border-indigo-200\",cyan:\"bg-cyan-100 text-cyan-800 border-cyan-200\",red:\"bg-red-100 text-red-800 border-red-200\",pink:\"bg-pink-100 text-pink-800 border-pink-200\",gray:\"bg-gray-100 text-gray-800 border-gray-200\"};return colors[color]||colors.gray;};// 🆕 색상 옵션 (카테고리 생성 시 사용)\nexport const COLOR_OPTIONS=[{id:\"blue\",name:\"파란색\",class:\"bg-blue-500\"},{id:\"green\",name:\"초록색\",class:\"bg-green-500\"},{id:\"purple\",name:\"보라색\",class:\"bg-purple-500\"},{id:\"orange\",name:\"주황색\",class:\"bg-orange-500\"},{id:\"yellow\",name:\"노란색\",class:\"bg-yellow-500\"},{id:\"indigo\",name:\"남색\",class:\"bg-indigo-500\"},{id:\"cyan\",name:\"청록색\",class:\"bg-cyan-500\"},{id:\"red\",name:\"빨간색\",class:\"bg-red-500\"},{id:\"pink\",name:\"분홍색\",class:\"bg-pink-500\"},{id:\"gray\",name:\"회색\",class:\"bg-gray-500\"}];// 🆕 프로젝트 검색 및 필터링 유틸리티\nexport const filterProjects=(projects,_ref)=>{let{category,searchQuery,sortBy}=_ref;let filtered=[...projects];// 카테고리 필터링\nif(category&&category!==\"all\"){filtered=filtered.filter(project=>project.category===category);}// 검색 필터링\nif(searchQuery&&searchQuery.trim()){const query=searchQuery.toLowerCase().trim();filtered=filtered.filter(project=>project.name.toLowerCase().includes(query)||project.description&&project.description.toLowerCase().includes(query)||project.tags&&project.tags.some(tag=>tag.toLowerCase().includes(query)));}// 정렬\nswitch(sortBy){case\"name\":filtered.sort((a,b)=>a.name.localeCompare(b.name));break;case\"updated\":filtered.sort((a,b)=>new Date(b.updatedAt)-new Date(a.updatedAt));break;case\"created\":default:filtered.sort((a,b)=>new Date(b.createdAt)-new Date(a.createdAt));break;}return filtered;};// 🆕 디바운스 훅 (검색 최적화용)\nexport const useDebounce=(value,delay)=>{const[debouncedValue,setDebouncedValue]=React.useState(value);React.useEffect(()=>{const handler=setTimeout(()=>{setDebouncedValue(value);},delay);return()=>{clearTimeout(handler);};},[value,delay]);return debouncedValue;};export default api;","map":{"version":3,"names":["axios","React","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","_error$response","_error$response2","_error$response3","data","message","removeItem","window","location","href","projectAPI","getProjects","params","arguments","length","undefined","get","createProject","projectData","post","getProject","projectId","updateProject","put","deleteProject","delete","getUploadUrl","category","filename","generateAPI","startTitleGeneration","article","aiSettings","payload","getExecutionStatus","executionArn","encodedArn","encodeURIComponent","pollForResult","maxRetries","interval","success","retries","resolve","setTimeout","generateTitle","onProgress","startResponse","mode","result","conversationId","executionId","Date","now","usage","timestamp","toISOString","debug","pollResponse","completedAt","Error","promptCardAPI","getPromptCards","includeContent","includeDisabled","include_content","include_disabled","createPromptCard","promptData","updatePromptCard","promptId","deletePromptCard","reorderPromptCard","newStepOrder","step_order","togglePromptCard","enabled","authAPI","signup","userData","signin","credentials","accessToken","idToken","refreshToken","setItem","signout","verifyEmail","verificationData","forgotPassword","email","confirmPassword","resetData","getCurrentUser","JSON","parse","atob","split","name","sub","isAuthenticated","currentTime","exp","uploadAPI","uploadFile","uploadUrl","file","PROMPT_CATEGORIES","id","description","required","PROMPT_CARD_CATEGORIES","color","icon","AVAILABLE_MODELS","maxTokens","handleAPIError","DEFAULT_PROJECT_CATEGORIES","isDefault","categoryAPI","getUserCategories","savedCategories","categories","createCategory","categoryData","newCategory","createdAt","push","stringify","updateCategory","categoryId","categoryIndex","findIndex","cat","updatedAt","deleteCategory","splice","projectCategoryAPI","updateProjectCategory","projectStatsAPI","getProjectStats","getAllProjectsStats","calculatePromptStats","promptCards","stats","totalCards","activeCards","filter","card","totalTokens","totalSize","avgTokensPerCard","Set","models","temperatureRange","min","max","forEach","add","model","prompt_text","textLength","estimatedTokens","Math","ceil","temp","parseFloat","temperature","round","Array","from","formatFileSize","bytes","k","sizes","i","floor","pow","toFixed","formatTokenCount","tokens","toString","getCategoryInfo","userCategories","allCategories","find","getCategoryColorClasses","colors","blue","green","purple","orange","yellow","indigo","cyan","red","pink","gray","COLOR_OPTIONS","class","filterProjects","projects","_ref","searchQuery","sortBy","filtered","project","trim","query","toLowerCase","includes","tags","some","tag","sort","a","b","localeCompare","useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler","clearTimeout"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\nimport React from \"react\"; // Added for useDebounce\n\n// API 기본 URL (환경 변수 또는 기본값)\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n  (config) => {\n    console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n\n    // 인증 토큰 추가 (API Gateway Cognito Authorizer는 ID Token을 요구)\n    const token =\n      localStorage.getItem(\"idToken\") || localStorage.getItem(\"accessToken\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\n      \"API 오류:\",\n      error.response?.status,\n      error.response?.data || error.message\n    );\n\n    // 401 오류 시 토큰 갱신 시도 또는 로그인 페이지로 리다이렉트\n    if (error.response?.status === 401) {\n      // 토큰 만료 처리\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"idToken\");\n      localStorage.removeItem(\"refreshToken\");\n\n      // 로그인 페이지로 리다이렉트 (실제 구현 시 React Router 사용)\n      window.location.href = \"/login\";\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// 프로젝트 관련 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async (params = {}) => {\n    const response = await api.get(\"/projects\", { params });\n    return response.data;\n  },\n\n  // 프로젝트 생성\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  // 프로젝트 상세 조회\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 프로젝트 업데이트\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  // 프로젝트 삭제\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  // 업로드 URL 요청\n  getUploadUrl: async (projectId, category, filename) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { category, filename },\n    });\n    return response.data;\n  },\n};\n\n// 제목 생성 API (Step Functions 기반)\nexport const generateAPI = {\n  // 제목 생성 시작 (Step Functions 실행)\n  startTitleGeneration: async (projectId, article, aiSettings) => {\n    const payload = {\n      article,\n    };\n\n    // AI 설정이 있으면 추가\n    if (aiSettings) {\n      payload.aiSettings = aiSettings;\n    }\n\n    const response = await api.post(`/projects/${projectId}/generate`, payload);\n    return response.data;\n  },\n\n  // 실행 상태 조회\n  getExecutionStatus: async (executionArn) => {\n    const encodedArn = encodeURIComponent(executionArn);\n    const response = await api.get(`/executions/${encodedArn}`);\n    return response.data;\n  },\n\n  // 폴링을 통한 결과 대기\n  pollForResult: async (executionArn, maxRetries = 30, interval = 2000) => {\n    if (!executionArn || executionArn === \"undefined\") {\n      return {\n        success: false,\n        error: \"실행 ARN이 없습니다. 직접 모드에서는 폴링이 필요하지 않습니다.\",\n      };\n    }\n\n    let retries = 0;\n\n    while (retries < maxRetries) {\n      try {\n        const status = await generateAPI.getExecutionStatus(executionArn);\n\n        if (status.status === \"SUCCEEDED\") {\n          return {\n            success: true,\n            data: status,\n          };\n        } else if (status.status === \"FAILED\") {\n          return {\n            success: false,\n            error: status.error || \"실행이 실패했습니다\",\n          };\n        } else if (status.status === \"TIMED_OUT\") {\n          return {\n            success: false,\n            error: \"실행 시간이 초과되었습니다\",\n          };\n        } else if (status.status === \"ABORTED\") {\n          return {\n            success: false,\n            error: \"실행이 중단되었습니다\",\n          };\n        }\n\n        // 아직 실행 중이면 대기\n        await new Promise((resolve) => setTimeout(resolve, interval));\n        retries++;\n      } catch (error) {\n        console.error(\"폴링 중 오류:\", error);\n        retries++;\n\n        if (retries >= maxRetries) {\n          return {\n            success: false,\n            error: \"상태 조회 중 오류가 발생했습니다\",\n          };\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, interval));\n      }\n    }\n\n    return {\n      success: false,\n      error: \"실행 시간이 초과되었습니다\",\n    };\n  },\n\n  // 제목 생성 (직접 모드 + Step Functions 모드 지원)\n  generateTitle: async (projectId, article, onProgress, aiSettings) => {\n    try {\n      // 제목 생성 시작\n      const startResponse = await generateAPI.startTitleGeneration(\n        projectId,\n        article,\n        aiSettings\n      );\n\n      // 직접 모드인 경우 (mode가 'direct'이거나 result가 바로 있는 경우)\n      if (startResponse.mode === \"direct\" || startResponse.result) {\n        if (onProgress) {\n          onProgress({\n            status: \"completed\",\n            message: \"제목 생성이 완료되었습니다!\",\n            result: startResponse.result,\n          });\n        }\n\n        return {\n          conversationId: startResponse.executionId || \"direct-\" + Date.now(),\n          projectId: projectId,\n          result: startResponse.result,\n          usage: startResponse.usage || {},\n          timestamp: startResponse.timestamp || new Date().toISOString(),\n          mode: \"direct\",\n          debug: startResponse.debug || {}\n        };\n      }\n\n      // Step Functions 모드인 경우\n      if (startResponse.executionArn) {\n        if (onProgress) {\n          onProgress({\n            status: \"started\",\n            message: \"제목 생성이 시작되었습니다...\",\n            executionArn: startResponse.executionArn,\n          });\n        }\n\n        // 폴링을 통한 결과 대기\n        const pollResponse = await generateAPI.pollForResult(\n          startResponse.executionArn\n        );\n\n        if (pollResponse.success) {\n          return {\n            conversationId: pollResponse.data.conversationId,\n            projectId: projectId,\n            result: pollResponse.data.result,\n            usage: pollResponse.data.usage,\n            timestamp:\n              pollResponse.data.completedAt || new Date().toISOString(),\n            executionArn: startResponse.executionArn,\n            mode: \"stepfunctions\",\n          };\n        } else {\n          throw new Error(pollResponse.error);\n        }\n      }\n\n      throw new Error(\"알 수 없는 응답 형식입니다\");\n    } catch (error) {\n      console.error(\"제목 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// 🆕 프롬프트 카드 관리 API\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회 (step_order 순으로 정렬)\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeDisabled = false\n  ) => {\n    const params = {};\n    if (includeContent) params.include_content = \"true\";\n    if (includeDisabled) params.include_disabled = \"true\";\n\n    const response = await api.get(`/prompts/${projectId}`, { params });\n    return response.data;\n  },\n\n  // 새 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  // 프롬프트 카드 수정\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  // 프롬프트 카드 순서 변경\n  reorderPromptCard: async (projectId, promptId, newStepOrder) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      step_order: newStepOrder,\n    });\n    return response.data;\n  },\n\n  // 프롬프트 카드 활성/비활성 토글\n  togglePromptCard: async (projectId, promptId, enabled) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, {\n      enabled: enabled,\n    });\n    return response.data;\n  },\n};\n\n// 🆕 인증 API\nexport const authAPI = {\n  // 회원가입\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  // 로그인\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    const { accessToken, idToken, refreshToken } = response.data;\n\n    // 토큰 저장\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"idToken\", idToken);\n    localStorage.setItem(\"refreshToken\", refreshToken);\n\n    return response.data;\n  },\n\n  // 로그아웃\n  signout: async () => {\n    try {\n      await api.post(\"/auth/signout\");\n    } finally {\n      // 로컬 토큰 삭제\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"idToken\");\n      localStorage.removeItem(\"refreshToken\");\n    }\n  },\n\n  // 토큰 갱신\n  refreshToken: async () => {\n    const refreshToken = localStorage.getItem(\"refreshToken\");\n    if (!refreshToken) {\n      throw new Error(\"리프레시 토큰이 없습니다\");\n    }\n\n    const response = await api.post(\"/auth/refresh\", { refreshToken });\n    const { accessToken, idToken } = response.data;\n\n    // 새 토큰 저장\n    localStorage.setItem(\"accessToken\", accessToken);\n    localStorage.setItem(\"idToken\", idToken);\n\n    return response.data;\n  },\n\n  // 이메일 인증\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify\", verificationData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 현재 사용자 정보 (토큰에서 추출)\n  getCurrentUser: () => {\n    const token = localStorage.getItem(\"idToken\");\n    if (!token) return null;\n\n    try {\n      // JWT 토큰 디코딩 (간단한 방법 - 실제로는 jwt-decode 라이브러리 사용 권장)\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      return {\n        email: payload.email,\n        name: payload.name,\n        sub: payload.sub,\n      };\n    } catch (error) {\n      console.error(\"토큰 디코딩 오류:\", error);\n      return null;\n    }\n  },\n\n  // 로그인 상태 확인\n  isAuthenticated: () => {\n    const token = localStorage.getItem(\"accessToken\");\n    if (!token) return false;\n\n    try {\n      // 토큰 만료 시간 확인\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  },\n};\n\n// 파일 업로드 API\nexport const uploadAPI = {\n  // S3 Pre-signed URL로 파일 업로드\n  uploadFile: async (uploadUrl, file) => {\n    const response = await axios.put(uploadUrl, file, {\n      headers: {\n        \"Content-Type\": \"text/plain\",\n      },\n    });\n    return response;\n  },\n};\n\n// 🆕 프롬프트 카테고리 정의 (레거시 - 기존 파일 업로드용)\nexport const PROMPT_CATEGORIES = [\n  {\n    id: \"title_type_guidelines\",\n    name: \"제목 유형 가이드라인\",\n    description: \"제목의 다양한 유형과 작성 원칙\",\n    required: true,\n  },\n  {\n    id: \"stylebook_guidelines\",\n    name: \"스타일북 가이드라인\",\n    description: \"서울경제신문의 스타일북 규정\",\n    required: true,\n  },\n  {\n    id: \"workflow\",\n    name: \"워크플로우\",\n    description: \"제목 생성 6단계 워크플로우\",\n    required: true,\n  },\n  {\n    id: \"audience_optimization\",\n    name: \"독자 최적화\",\n    description: \"대상 독자층별 최적화 전략\",\n    required: true,\n  },\n  {\n    id: \"seo_optimization\",\n    name: \"SEO 최적화\",\n    description: \"검색 엔진 최적화 가이드라인\",\n    required: false,\n  },\n  {\n    id: \"digital_elements_guidelines\",\n    name: \"디지털 요소 가이드라인\",\n    description: \"온라인 매체 특성에 맞는 제목 작성법\",\n    required: true,\n  },\n  {\n    id: \"quality_assessment\",\n    name: \"품질 평가\",\n    description: \"제목 품질 평가 기준\",\n    required: true,\n  },\n  {\n    id: \"uncertainty_handling\",\n    name: \"불확실성 처리\",\n    description: \"불확실한 정보 처리 가이드라인\",\n    required: true,\n  },\n  {\n    id: \"output_format\",\n    name: \"출력 형식\",\n    description: \"결과 출력 형식 정의\",\n    required: true,\n  },\n  {\n    id: \"description\",\n    name: \"프로젝트 설명\",\n    description: \"TITLE-NOMICS 시스템 설명\",\n    required: true,\n  },\n  {\n    id: \"knowledge\",\n    name: \"핵심 지식\",\n    description: \"제목 작성 핵심 지식\",\n    required: true,\n  },\n];\n\n// 🆕 프롬프트 카드 카테고리 정의 (새로운 카드 시스템용)\nexport const PROMPT_CARD_CATEGORIES = [\n  {\n    id: \"instruction\",\n    name: \"지시사항\",\n    description: \"기본 작업 지시 및 목표 설정\",\n    color: \"blue\",\n    icon: \"📋\",\n  },\n  {\n    id: \"knowledge\",\n    name: \"지식 기반\",\n    description: \"도메인 지식 및 참고 정보\",\n    color: \"purple\",\n    icon: \"📚\",\n  },\n  {\n    id: \"summary\",\n    name: \"요약 규칙\",\n    description: \"내용 요약 및 압축 가이드라인\",\n    color: \"green\",\n    icon: \"📝\",\n  },\n  {\n    id: \"style_guide\",\n    name: \"스타일 가이드\",\n    description: \"브랜드 톤앤매너 및 작성 스타일\",\n    color: \"orange\",\n    icon: \"🎨\",\n  },\n  {\n    id: \"validation\",\n    name: \"검증 기준\",\n    description: \"품질 확인 및 검증 룰\",\n    color: \"red\",\n    icon: \"✅\",\n  },\n  {\n    id: \"enhancement\",\n    name: \"개선 지침\",\n    description: \"결과 향상 및 최적화 방법\",\n    color: \"yellow\",\n    icon: \"⚡\",\n  },\n];\n\n// 사용 가능한 AI 모델 목록\nexport const AVAILABLE_MODELS = [\n  {\n    id: \"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    name: \"Claude 3.5 Sonnet (최신)\",\n    description: \"가장 최신이고 성능이 뛰어난 모델\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"us.anthropic.claude-3-sonnet-20240229-v1:0\",\n    name: \"Claude 3 Sonnet\",\n    description: \"균형잡힌 성능과 속도\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"us.anthropic.claude-3-haiku-20240307-v1:0\",\n    name: \"Claude 3 Haiku\",\n    description: \"빠른 속도, 효율적인 처리\",\n    maxTokens: 200000,\n  },\n  {\n    id: \"anthropic.claude-instant-v1\",\n    name: \"Claude Instant\",\n    description: \"즉시 응답, 간단한 작업용\",\n    maxTokens: 100000,\n  },\n  {\n    id: \"amazon.titan-text-lite-v1\",\n    name: \"Titan Text Lite\",\n    description: \"가벼운 텍스트 처리\",\n    maxTokens: 4000,\n  },\n  {\n    id: \"amazon.titan-text-express-v1\",\n    name: \"Titan Text Express\",\n    description: \"빠른 텍스트 생성\",\n    maxTokens: 8000,\n  },\n];\n\n// 에러 핸들링 유틸리티\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // 서버 응답 오류\n    const { status, data } = error.response;\n    return {\n      message: data?.error || `서버 오류 (${status})`,\n      status,\n    };\n  } else if (error.request) {\n    // 네트워크 오류\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0,\n    };\n  } else {\n    // 기타 오류\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1,\n    };\n  }\n};\n\n// 기본 프로젝트 카테고리 정의 (이모지 제거, 전문적 디자인)\nexport const DEFAULT_PROJECT_CATEGORIES = [\n  {\n    id: \"news\",\n    name: \"뉴스/언론\",\n    color: \"blue\",\n    description: \"뉴스 기사, 언론 보도 제목 생성\",\n    isDefault: true,\n  },\n  {\n    id: \"business\",\n    name: \"비즈니스\",\n    color: \"green\",\n    description: \"비즈니스 문서, 기업 커뮤니케이션\",\n    isDefault: true,\n  },\n  {\n    id: \"corporate\",\n    name: \"기업 홍보\",\n    color: \"purple\",\n    description: \"기업 홍보, 마케팅 콘텐츠\",\n    isDefault: true,\n  },\n  {\n    id: \"education\",\n    name: \"교육/연구\",\n    color: \"orange\",\n    description: \"교육 자료, 연구 논문, 학술 자료\",\n    isDefault: true,\n  },\n  {\n    id: \"marketing\",\n    name: \"마케팅/광고\",\n    color: \"yellow\",\n    description: \"광고 카피, 마케팅 캠페인\",\n    isDefault: true,\n  },\n  {\n    id: \"social\",\n    name: \"소셜미디어\",\n    color: \"indigo\",\n    description: \"SNS 포스팅, 소셜 콘텐츠\",\n    isDefault: true,\n  },\n  {\n    id: \"tech\",\n    name: \"기술/IT\",\n    color: \"cyan\",\n    description: \"기술 문서, IT 뉴스, 개발 관련\",\n    isDefault: true,\n  },\n];\n\n// 사용자 정의 카테고리 API\nexport const categoryAPI = {\n  // 사용자 카테고리 목록 조회\n  getUserCategories: async () => {\n    try {\n      const response = await api.get(\"/categories\");\n      return response.data;\n    } catch (error) {\n      // 백엔드 API가 없는 경우 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      if (savedCategories) {\n        return JSON.parse(savedCategories);\n      }\n      return { categories: DEFAULT_PROJECT_CATEGORIES };\n    }\n  },\n\n  // 사용자 카테고리 생성\n  createCategory: async (categoryData) => {\n    try {\n      const response = await api.post(\"/categories\", categoryData);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories\n        ? JSON.parse(savedCategories)\n        : { categories: [...DEFAULT_PROJECT_CATEGORIES] };\n\n      const newCategory = {\n        ...categoryData,\n        id: `custom_${Date.now()}`,\n        isDefault: false,\n        createdAt: new Date().toISOString(),\n      };\n\n      categories.categories.push(newCategory);\n      localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n      return newCategory;\n    }\n  },\n\n  // 사용자 카테고리 수정\n  updateCategory: async (categoryId, categoryData) => {\n    try {\n      const response = await api.put(`/categories/${categoryId}`, categoryData);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories\n        ? JSON.parse(savedCategories)\n        : { categories: [...DEFAULT_PROJECT_CATEGORIES] };\n\n      const categoryIndex = categories.categories.findIndex(\n        (cat) => cat.id === categoryId\n      );\n      if (categoryIndex !== -1) {\n        categories.categories[categoryIndex] = {\n          ...categories.categories[categoryIndex],\n          ...categoryData,\n          updatedAt: new Date().toISOString(),\n        };\n        localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n        return categories.categories[categoryIndex];\n      }\n      throw new Error(\"카테고리를 찾을 수 없습니다\");\n    }\n  },\n\n  // 사용자 카테고리 삭제\n  deleteCategory: async (categoryId) => {\n    try {\n      const response = await api.delete(`/categories/${categoryId}`);\n      return response.data;\n    } catch (error) {\n      // 로컬 스토리지 사용\n      const savedCategories = localStorage.getItem(\"userCategories\");\n      const categories = savedCategories\n        ? JSON.parse(savedCategories)\n        : { categories: [...DEFAULT_PROJECT_CATEGORIES] };\n\n      const categoryIndex = categories.categories.findIndex(\n        (cat) => cat.id === categoryId\n      );\n      if (categoryIndex !== -1) {\n        categories.categories.splice(categoryIndex, 1);\n        localStorage.setItem(\"userCategories\", JSON.stringify(categories));\n        return { success: true };\n      }\n      throw new Error(\"카테고리를 찾을 수 없습니다\");\n    }\n  },\n};\n\n// 프로젝트 카테고리 변경 API\nexport const projectCategoryAPI = {\n  // 프로젝트 카테고리 변경\n  updateProjectCategory: async (projectId, categoryId) => {\n    try {\n      const response = await api.put(`/projects/${projectId}/category`, {\n        category: categoryId,\n      });\n      return response.data;\n    } catch (error) {\n      // 임시로 클라이언트에서 처리 (실제로는 백엔드에서 처리해야 함)\n      console.log(`프로젝트 ${projectId}의 카테고리를 ${categoryId}로 변경`);\n      return { success: true, projectId, category: categoryId };\n    }\n  },\n};\n\n//프로젝트 통계 정보 API\nexport const projectStatsAPI = {\n  // 프로젝트 상세 통계 조회\n  getProjectStats: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}/stats`);\n    return response.data;\n  },\n\n  // 모든 프로젝트 통계 요약\n  getAllProjectsStats: async () => {\n    const response = await api.get(\"/projects/stats\");\n    return response.data;\n  },\n};\n\n// 프롬프트 통계 정보 계산 유틸리티\nexport const calculatePromptStats = (promptCards) => {\n  const stats = {\n    totalCards: promptCards.length,\n    activeCards: promptCards.filter((card) => card.enabled !== false).length,\n    totalTokens: 0,\n    totalSize: 0,\n    avgTokensPerCard: 0,\n    categories: new Set(),\n    models: new Set(),\n    temperatureRange: { min: 1, max: 0 },\n  };\n\n  promptCards.forEach((card) => {\n    // 카테고리 수집\n    stats.categories.add(card.category);\n\n    // 모델 수집\n    stats.models.add(card.model);\n\n    // 프롬프트 텍스트 통계\n    if (card.prompt_text) {\n      const textLength = card.prompt_text.length;\n      stats.totalSize += textLength;\n\n      // 대략적인 토큰 수 계산 (영어: 4자/토큰, 한국어: 2자/토큰)\n      const estimatedTokens = Math.ceil(textLength / 2.5);\n      stats.totalTokens += estimatedTokens;\n    }\n\n    // 온도 범위 계산\n    const temp = parseFloat(card.temperature);\n    if (temp < stats.temperatureRange.min) stats.temperatureRange.min = temp;\n    if (temp > stats.temperatureRange.max) stats.temperatureRange.max = temp;\n  });\n\n  // 평균 토큰 계산\n  stats.avgTokensPerCard =\n    stats.totalCards > 0 ? Math.round(stats.totalTokens / stats.totalCards) : 0;\n\n  // Set을 배열로 변환\n  stats.categories = Array.from(stats.categories);\n  stats.models = Array.from(stats.models);\n\n  return stats;\n};\n\n// 🆕 파일 크기 포맷팅 유틸리티\nexport const formatFileSize = (bytes) => {\n  if (bytes === 0) return \"0 B\";\n  const k = 1024;\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + \" \" + sizes[i];\n};\n\n// 🆕 토큰 수 포맷팅 유틸리티\nexport const formatTokenCount = (tokens) => {\n  if (tokens < 1000) return tokens.toString();\n  if (tokens < 1000000) return (tokens / 1000).toFixed(1) + \"K\";\n  return (tokens / 1000000).toFixed(1) + \"M\";\n};\n\n// 🆕 카테고리 관련 유틸리티 (수정됨)\nexport const getCategoryInfo = (categoryId, userCategories = []) => {\n  const allCategories = [...DEFAULT_PROJECT_CATEGORIES, ...userCategories];\n  return (\n    allCategories.find((cat) => cat.id === categoryId) ||\n    DEFAULT_PROJECT_CATEGORIES.find((cat) => cat.id === \"news\")\n  );\n};\n\n// 🆕 카테고리별 색상 클래스 반환 (수정됨)\nexport const getCategoryColorClasses = (color) => {\n  const colors = {\n    blue: \"bg-blue-100 text-blue-800 border-blue-200\",\n    green: \"bg-green-100 text-green-800 border-green-200\",\n    purple: \"bg-purple-100 text-purple-800 border-purple-200\",\n    orange: \"bg-orange-100 text-orange-800 border-orange-200\",\n    yellow: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n    indigo: \"bg-indigo-100 text-indigo-800 border-indigo-200\",\n    cyan: \"bg-cyan-100 text-cyan-800 border-cyan-200\",\n    red: \"bg-red-100 text-red-800 border-red-200\",\n    pink: \"bg-pink-100 text-pink-800 border-pink-200\",\n    gray: \"bg-gray-100 text-gray-800 border-gray-200\",\n  };\n  return colors[color] || colors.gray;\n};\n\n// 🆕 색상 옵션 (카테고리 생성 시 사용)\nexport const COLOR_OPTIONS = [\n  { id: \"blue\", name: \"파란색\", class: \"bg-blue-500\" },\n  { id: \"green\", name: \"초록색\", class: \"bg-green-500\" },\n  { id: \"purple\", name: \"보라색\", class: \"bg-purple-500\" },\n  { id: \"orange\", name: \"주황색\", class: \"bg-orange-500\" },\n  { id: \"yellow\", name: \"노란색\", class: \"bg-yellow-500\" },\n  { id: \"indigo\", name: \"남색\", class: \"bg-indigo-500\" },\n  { id: \"cyan\", name: \"청록색\", class: \"bg-cyan-500\" },\n  { id: \"red\", name: \"빨간색\", class: \"bg-red-500\" },\n  { id: \"pink\", name: \"분홍색\", class: \"bg-pink-500\" },\n  { id: \"gray\", name: \"회색\", class: \"bg-gray-500\" },\n];\n\n// 🆕 프로젝트 검색 및 필터링 유틸리티\nexport const filterProjects = (projects, { category, searchQuery, sortBy }) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터링\n  if (category && category !== \"all\") {\n    filtered = filtered.filter((project) => project.category === category);\n  }\n\n  // 검색 필터링\n  if (searchQuery && searchQuery.trim()) {\n    const query = searchQuery.toLowerCase().trim();\n    filtered = filtered.filter(\n      (project) =>\n        project.name.toLowerCase().includes(query) ||\n        (project.description &&\n          project.description.toLowerCase().includes(query)) ||\n        (project.tags &&\n          project.tags.some((tag) => tag.toLowerCase().includes(query)))\n    );\n  }\n\n  // 정렬\n  switch (sortBy) {\n    case \"name\":\n      filtered.sort((a, b) => a.name.localeCompare(b.name));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"created\":\n    default:\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n  }\n\n  return filtered;\n};\n\n// 🆕 디바운스 훅 (검색 최적화용)\nexport const useDebounce = (value, delay) => {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}