{"ast":null,"code":"var _jsxFileName = \"/Users/yeong-gwang/Documents/work/\\u1109\\u1165\\u110B\\u116E\\u11AF\\u1100\\u1167\\u11BC\\u110C\\u1166\\u1109\\u1175\\u11AB\\u1106\\u116E\\u11AB/dev/nexus/title_generator_ver1/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { Amplify } from \"aws-amplify\";\nimport { signUp, signIn, signOut, getCurrentUser, fetchAuthSession, confirmSignUp, resendSignUpCode, resetPassword, confirmResetPassword } from \"aws-amplify/auth\";\nimport awsConfig from \"../aws-config\";\n\n// Amplify 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAmplify.configure(awsConfig);\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = async () => {\n    try {\n      var _session$tokens, _session$tokens$idTok, _session$tokens2, _session$tokens2$idTo, _session$tokens2$idTo2, _session$tokens3, _session$tokens3$idTo;\n      setLoading(true);\n\n      // 개발 모드에서 인증 스킵\n      if (process.env.REACT_APP_SKIP_AUTH === 'true') {\n        console.log(\"🔓 개발 모드: 인증 스킵 - 더미 사용자 생성\");\n        setIsAuthenticated(true);\n        setUser({\n          id: \"dev-user-001\",\n          email: \"dev@example.com\",\n          name: \"개발자\",\n          role: \"user\",\n          groups: []\n        });\n        return;\n      }\n      const currentUser = await getCurrentUser();\n      const session = await fetchAuthSession();\n\n      // 사용자 그룹 정보 가져오기\n      const groups = (session === null || session === void 0 ? void 0 : (_session$tokens = session.tokens) === null || _session$tokens === void 0 ? void 0 : (_session$tokens$idTok = _session$tokens.idToken) === null || _session$tokens$idTok === void 0 ? void 0 : _session$tokens$idTok.payload[\"cognito:groups\"]) || [];\n      const userRole = groups.includes(\"admin\") ? \"admin\" : \"user\";\n\n      // ID 토큰에서 이메일 정보 추출\n      const email = (session === null || session === void 0 ? void 0 : (_session$tokens2 = session.tokens) === null || _session$tokens2 === void 0 ? void 0 : (_session$tokens2$idTo = _session$tokens2.idToken) === null || _session$tokens2$idTo === void 0 ? void 0 : (_session$tokens2$idTo2 = _session$tokens2$idTo.payload) === null || _session$tokens2$idTo2 === void 0 ? void 0 : _session$tokens2$idTo2.email) || currentUser.username;\n      const userName = email.includes(\"@\") ? email.split(\"@\")[0] : email;\n      console.log(\"사용자 인증 정보:\", {\n        userId: currentUser.userId,\n        username: currentUser.username,\n        email: email,\n        groups: groups,\n        userRole: userRole,\n        fullPayload: session === null || session === void 0 ? void 0 : (_session$tokens3 = session.tokens) === null || _session$tokens3 === void 0 ? void 0 : (_session$tokens3$idTo = _session$tokens3.idToken) === null || _session$tokens3$idTo === void 0 ? void 0 : _session$tokens3$idTo.payload\n      });\n      setIsAuthenticated(true);\n      setUser({\n        id: currentUser.userId,\n        email: email,\n        name: userName,\n        role: userRole,\n        groups: groups\n      });\n    } catch (error) {\n      console.log(\"사용자가 인증되지 않음:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async credentials => {\n    try {\n      const {\n        email,\n        password\n      } = credentials;\n      console.log(\"로그인 시도:\", {\n        email\n      });\n\n      // 개발 모드에서 인증 스킵\n      if (process.env.REACT_APP_SKIP_AUTH === 'true') {\n        console.log(\"🔓 개발 모드: 로그인 스킵\");\n        await checkAuthStatus();\n        return {\n          success: true,\n          user: {\n            email\n          }\n        };\n      }\n      const user = await signIn({\n        username: email,\n        password\n      });\n      console.log(\"signIn 결과:\", user);\n      if (user.isSignedIn === false) {\n        var _user$nextStep, _user$nextStep2;\n        if (((_user$nextStep = user.nextStep) === null || _user$nextStep === void 0 ? void 0 : _user$nextStep.signInStep) === \"CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED\") {\n          console.log(\"새 비밀번호 필요\");\n          throw new Error(\"새 비밀번호가 필요합니다\");\n        } else if (((_user$nextStep2 = user.nextStep) === null || _user$nextStep2 === void 0 ? void 0 : _user$nextStep2.signInStep) === \"CONFIRM_SIGN_UP\") {\n          console.log(\"이메일 인증 필요\");\n          throw new Error(\"이메일 인증이 필요합니다\");\n        } else {\n          console.log(\"로그인 실패 - 알 수 없는 상태:\", user.nextStep);\n          throw new Error(\"로그인에 실패했습니다\");\n        }\n      }\n      console.log(\"인증 상태 확인 중...\");\n      await checkAuthStatus();\n      console.log(\"로그인 성공\");\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      console.error(\"로그인 오류:\", error);\n      let errorMessage = \"로그인에 실패했습니다.\";\n      if (error.name === \"NotAuthorizedException\") {\n        errorMessage = \"이메일 또는 비밀번호가 올바르지 않습니다.\";\n      } else if (error.name === \"UserNotConfirmedException\") {\n        errorMessage = \"이메일 인증이 필요합니다.\";\n      } else if (error.name === \"UserNotFoundException\") {\n        errorMessage = \"존재하지 않는 사용자입니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  };\n  const signup = async userData => {\n    try {\n      const {\n        email,\n        password,\n        fullname\n      } = userData;\n      const result = await signUp({\n        username: email,\n        password: password,\n        options: {\n          userAttributes: {\n            email: email,\n            name: fullname || email.split(\"@\")[0]\n          }\n        }\n      });\n      return {\n        success: true,\n        message: \"회원가입이 완료되었습니다. 이메일로 전송된 인증 코드를 확인해주세요.\",\n        userSub: result.userId\n      };\n    } catch (error) {\n      console.error(\"회원가입 오류:\", error);\n      let errorMessage = \"회원가입에 실패했습니다.\";\n      if (error.name === \"UsernameExistsException\") {\n        errorMessage = \"이미 존재하는 이메일입니다.\";\n      } else if (error.name === \"InvalidPasswordException\") {\n        errorMessage = \"비밀번호가 정책에 맞지 않습니다. (최소 8자, 숫자 및 특수문자 포함)\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  };\n  const logout = async () => {\n    try {\n      await signOut();\n      setIsAuthenticated(false);\n      setUser(null);\n    } catch (error) {\n      console.error(\"로그아웃 오류:\", error);\n      // 로그아웃은 항상 성공으로 처리\n      setIsAuthenticated(false);\n      setUser(null);\n    }\n  };\n  const verifyEmail = async verificationData => {\n    try {\n      const {\n        email,\n        code\n      } = verificationData;\n      await confirmSignUp({\n        username: email,\n        confirmationCode: code\n      });\n      return {\n        success: true,\n        message: \"이메일 인증이 완료되었습니다. 로그인하세요.\"\n      };\n    } catch (error) {\n      console.error(\"이메일 인증 오류:\", error);\n      let errorMessage = \"이메일 인증에 실패했습니다.\";\n      if (error.name === \"CodeMismatchException\") {\n        errorMessage = \"인증 코드가 올바르지 않습니다.\";\n      } else if (error.name === \"ExpiredCodeException\") {\n        errorMessage = \"인증 코드가 만료되었습니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  };\n  const resendVerificationCode = async email => {\n    try {\n      await resendSignUpCode({\n        username: email\n      });\n      return {\n        success: true,\n        message: \"인증 코드가 다시 전송되었습니다.\"\n      };\n    } catch (error) {\n      console.error(\"인증 코드 재전송 오류:\", error);\n      throw new Error(\"인증 코드 재전송에 실패했습니다.\");\n    }\n  };\n  const forgotPassword = async email => {\n    try {\n      await resetPassword({\n        username: email\n      });\n      return {\n        success: true,\n        message: \"비밀번호 재설정 코드가 이메일로 전송되었습니다.\"\n      };\n    } catch (error) {\n      console.error(\"비밀번호 찾기 오류:\", error);\n      throw new Error(\"비밀번호 찾기에 실패했습니다.\");\n    }\n  };\n  const confirmPassword = async resetData => {\n    try {\n      const {\n        email,\n        code,\n        newPassword\n      } = resetData;\n      await confirmResetPassword({\n        username: email,\n        confirmationCode: code,\n        newPassword: newPassword\n      });\n      return {\n        success: true,\n        message: \"비밀번호가 성공적으로 변경되었습니다.\"\n      };\n    } catch (error) {\n      console.error(\"비밀번호 재설정 오류:\", error);\n      let errorMessage = \"비밀번호 재설정에 실패했습니다.\";\n      if (error.name === \"CodeMismatchException\") {\n        errorMessage = \"인증 코드가 올바르지 않습니다.\";\n      } else if (error.name === \"ExpiredCodeException\") {\n        errorMessage = \"인증 코드가 만료되었습니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 토큰 갱신\n  const refreshToken = async () => {\n    try {\n      const session = await fetchAuthSession();\n      return session;\n    } catch (error) {\n      console.error(\"토큰 갱신 오류:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n      throw error;\n    }\n  };\n\n  // API 요청용 인증 토큰 가져오기\n  const getAuthToken = async () => {\n    try {\n      var _session$tokens4, _session$tokens4$idTo;\n      const session = await fetchAuthSession();\n      return session === null || session === void 0 ? void 0 : (_session$tokens4 = session.tokens) === null || _session$tokens4 === void 0 ? void 0 : (_session$tokens4$idTo = _session$tokens4.idToken) === null || _session$tokens4$idTo === void 0 ? void 0 : _session$tokens4$idTo.toString();\n    } catch (error) {\n      console.error(\"토큰 가져오기 오류:\", error);\n      return null;\n    }\n  };\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    signup,\n    logout,\n    verifyEmail,\n    resendVerificationCode,\n    forgotPassword,\n    confirmResetPassword: confirmPassword,\n    checkAuthStatus,\n    refreshToken,\n    getAuthToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"mKb+zX9grAar2iMVStuBBwt7fpw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Amplify","signUp","signIn","signOut","getCurrentUser","fetchAuthSession","confirmSignUp","resendSignUpCode","resetPassword","confirmResetPassword","awsConfig","jsxDEV","_jsxDEV","configure","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","checkAuthStatus","_session$tokens","_session$tokens$idTok","_session$tokens2","_session$tokens2$idTo","_session$tokens2$idTo2","_session$tokens3","_session$tokens3$idTo","process","env","REACT_APP_SKIP_AUTH","console","log","id","email","name","role","groups","currentUser","session","tokens","idToken","payload","userRole","includes","username","userName","split","userId","fullPayload","error","login","credentials","password","success","isSignedIn","_user$nextStep","_user$nextStep2","nextStep","signInStep","errorMessage","message","signup","userData","fullname","result","options","userAttributes","userSub","logout","verifyEmail","verificationData","code","confirmationCode","resendVerificationCode","forgotPassword","confirmPassword","resetData","newPassword","refreshToken","getAuthToken","_session$tokens4","_session$tokens4$idTo","toString","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { Amplify } from \"aws-amplify\";\nimport {\n  signUp,\n  signIn,\n  signOut,\n  getCurrentUser,\n  fetchAuthSession,\n  confirmSignUp,\n  resendSignUpCode,\n  resetPassword,\n  confirmResetPassword,\n} from \"aws-amplify/auth\";\nimport awsConfig from \"../aws-config\";\n\n// Amplify 설정\nAmplify.configure(awsConfig);\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      setLoading(true);\n      \n      // 개발 모드에서 인증 스킵\n      if (process.env.REACT_APP_SKIP_AUTH === 'true') {\n        console.log(\"🔓 개발 모드: 인증 스킵 - 더미 사용자 생성\");\n        setIsAuthenticated(true);\n        setUser({\n          id: \"dev-user-001\",\n          email: \"dev@example.com\",\n          name: \"개발자\",\n          role: \"user\",\n          groups: [],\n        });\n        return;\n      }\n      \n      const currentUser = await getCurrentUser();\n      const session = await fetchAuthSession();\n\n      // 사용자 그룹 정보 가져오기\n      const groups = session?.tokens?.idToken?.payload[\"cognito:groups\"] || [];\n      const userRole = groups.includes(\"admin\") ? \"admin\" : \"user\";\n\n      // ID 토큰에서 이메일 정보 추출\n      const email = session?.tokens?.idToken?.payload?.email || currentUser.username;\n      const userName = email.includes(\"@\") ? email.split(\"@\")[0] : email;\n\n      console.log(\"사용자 인증 정보:\", {\n        userId: currentUser.userId,\n        username: currentUser.username,\n        email: email,\n        groups: groups,\n        userRole: userRole,\n        fullPayload: session?.tokens?.idToken?.payload\n      });\n\n      setIsAuthenticated(true);\n      setUser({\n        id: currentUser.userId,\n        email: email,\n        name: userName,\n        role: userRole,\n        groups: groups,\n      });\n    } catch (error) {\n      console.log(\"사용자가 인증되지 않음:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      const { email, password } = credentials;\n      \n      console.log(\"로그인 시도:\", { email });\n\n      // 개발 모드에서 인증 스킵\n      if (process.env.REACT_APP_SKIP_AUTH === 'true') {\n        console.log(\"🔓 개발 모드: 로그인 스킵\");\n        await checkAuthStatus();\n        return { success: true, user: { email } };\n      }\n\n      const user = await signIn({ username: email, password });\n      \n      console.log(\"signIn 결과:\", user);\n\n      if (user.isSignedIn === false) {\n        if (user.nextStep?.signInStep === \"CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED\") {\n          console.log(\"새 비밀번호 필요\");\n          throw new Error(\"새 비밀번호가 필요합니다\");\n        } else if (user.nextStep?.signInStep === \"CONFIRM_SIGN_UP\") {\n          console.log(\"이메일 인증 필요\");\n          throw new Error(\"이메일 인증이 필요합니다\");\n        } else {\n          console.log(\"로그인 실패 - 알 수 없는 상태:\", user.nextStep);\n          throw new Error(\"로그인에 실패했습니다\");\n        }\n      }\n\n      console.log(\"인증 상태 확인 중...\");\n      await checkAuthStatus();\n\n      console.log(\"로그인 성공\");\n      return { success: true, user };\n    } catch (error) {\n      console.error(\"로그인 오류:\", error);\n\n      let errorMessage = \"로그인에 실패했습니다.\";\n\n      if (error.name === \"NotAuthorizedException\") {\n        errorMessage = \"이메일 또는 비밀번호가 올바르지 않습니다.\";\n      } else if (error.name === \"UserNotConfirmedException\") {\n        errorMessage = \"이메일 인증이 필요합니다.\";\n      } else if (error.name === \"UserNotFoundException\") {\n        errorMessage = \"존재하지 않는 사용자입니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  const signup = async (userData) => {\n    try {\n      const { email, password, fullname } = userData;\n\n      const result = await signUp({\n        username: email,\n        password: password,\n        options: {\n          userAttributes: {\n            email: email,\n            name: fullname || email.split(\"@\")[0],\n          },\n        },\n      });\n\n      return {\n        success: true,\n        message:\n          \"회원가입이 완료되었습니다. 이메일로 전송된 인증 코드를 확인해주세요.\",\n        userSub: result.userId,\n      };\n    } catch (error) {\n      console.error(\"회원가입 오류:\", error);\n\n      let errorMessage = \"회원가입에 실패했습니다.\";\n\n      if (error.name === \"UsernameExistsException\") {\n        errorMessage = \"이미 존재하는 이메일입니다.\";\n      } else if (error.name === \"InvalidPasswordException\") {\n        errorMessage =\n          \"비밀번호가 정책에 맞지 않습니다. (최소 8자, 숫자 및 특수문자 포함)\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await signOut();\n      setIsAuthenticated(false);\n      setUser(null);\n    } catch (error) {\n      console.error(\"로그아웃 오류:\", error);\n      // 로그아웃은 항상 성공으로 처리\n      setIsAuthenticated(false);\n      setUser(null);\n    }\n  };\n\n  const verifyEmail = async (verificationData) => {\n    try {\n      const { email, code } = verificationData;\n\n      await confirmSignUp({ username: email, confirmationCode: code });\n\n      return {\n        success: true,\n        message: \"이메일 인증이 완료되었습니다. 로그인하세요.\",\n      };\n    } catch (error) {\n      console.error(\"이메일 인증 오류:\", error);\n\n      let errorMessage = \"이메일 인증에 실패했습니다.\";\n\n      if (error.name === \"CodeMismatchException\") {\n        errorMessage = \"인증 코드가 올바르지 않습니다.\";\n      } else if (error.name === \"ExpiredCodeException\") {\n        errorMessage = \"인증 코드가 만료되었습니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  const resendVerificationCode = async (email) => {\n    try {\n      await resendSignUpCode({ username: email });\n      return {\n        success: true,\n        message: \"인증 코드가 다시 전송되었습니다.\",\n      };\n    } catch (error) {\n      console.error(\"인증 코드 재전송 오류:\", error);\n      throw new Error(\"인증 코드 재전송에 실패했습니다.\");\n    }\n  };\n\n  const forgotPassword = async (email) => {\n    try {\n      await resetPassword({ username: email });\n      return {\n        success: true,\n        message: \"비밀번호 재설정 코드가 이메일로 전송되었습니다.\",\n      };\n    } catch (error) {\n      console.error(\"비밀번호 찾기 오류:\", error);\n      throw new Error(\"비밀번호 찾기에 실패했습니다.\");\n    }\n  };\n\n  const confirmPassword = async (resetData) => {\n    try {\n      const { email, code, newPassword } = resetData;\n\n      await confirmResetPassword({ \n        username: email, \n        confirmationCode: code, \n        newPassword: newPassword \n      });\n\n      return {\n        success: true,\n        message: \"비밀번호가 성공적으로 변경되었습니다.\",\n      };\n    } catch (error) {\n      console.error(\"비밀번호 재설정 오류:\", error);\n\n      let errorMessage = \"비밀번호 재설정에 실패했습니다.\";\n\n      if (error.name === \"CodeMismatchException\") {\n        errorMessage = \"인증 코드가 올바르지 않습니다.\";\n      } else if (error.name === \"ExpiredCodeException\") {\n        errorMessage = \"인증 코드가 만료되었습니다.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n\n      throw new Error(errorMessage);\n    }\n  };\n\n  // 토큰 갱신\n  const refreshToken = async () => {\n    try {\n      const session = await fetchAuthSession();\n      return session;\n    } catch (error) {\n      console.error(\"토큰 갱신 오류:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n      throw error;\n    }\n  };\n\n  // API 요청용 인증 토큰 가져오기\n  const getAuthToken = async () => {\n    try {\n      const session = await fetchAuthSession();\n      return session?.tokens?.idToken?.toString();\n    } catch (error) {\n      console.error(\"토큰 가져오기 오류:\", error);\n      return null;\n    }\n  };\n\n  const value = {\n    isAuthenticated,\n    user,\n    loading,\n    login,\n    signup,\n    logout,\n    verifyEmail,\n    resendVerificationCode,\n    forgotPassword,\n    confirmResetPassword: confirmPassword,\n    checkAuthStatus,\n    refreshToken,\n    getAuthToken,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}