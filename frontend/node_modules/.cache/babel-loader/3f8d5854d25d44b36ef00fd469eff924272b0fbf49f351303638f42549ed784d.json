{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = result => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [streamingMessageId, setStreamingMessageId] = useState(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback((chunk, metadata) => {\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === streamingMessageId);\n      if (streamingMsgIndex !== -1) {\n        // 기존 스트리밍 메시지 업데이트\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: updatedMessages[streamingMsgIndex].content + chunk,\n          isLoading: true,\n          isStreaming: true\n        };\n      }\n      return updatedMessages;\n    });\n\n    // 스크롤 조정\n    scrollToBottom();\n  }, [streamingMessageId, scrollToBottom]);\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(result => {\n    var _result$result;\n    console.log(\"스트리밍 완료 처리:\", {\n      streamingMessageId,\n      resultLength: ((_result$result = result.result) === null || _result$result === void 0 ? void 0 : _result$result.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === streamingMessageId);\n      if (streamingMsgIndex !== -1) {\n        // 스트리밍 메시지 완료 처리\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: result.result,\n          isLoading: false,\n          isStreaming: false,\n          performance_metrics: result.performance_metrics,\n          model_info: result.model_info,\n          timestamp: new Date()\n        };\n      }\n      return updatedMessages;\n    });\n\n    // 스트리밍 ID 초기화\n    setStreamingMessageId(null);\n\n    // 스크롤 조정\n    scrollToBottom();\n  }, [streamingMessageId, scrollToBottom]);\n\n  /**\n   * 스트리밍 오류 처리 함수\n   */\n  const handleStreamingError = useCallback(error => {\n    console.error(\"스트리밍 오류 처리:\", error);\n\n    // 오류 메시지로 변환\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === streamingMessageId);\n      if (streamingMsgIndex !== -1) {\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          isLoading: false,\n          isStreaming: false,\n          isError: true,\n          timestamp: new Date()\n        };\n      }\n      return updatedMessages;\n    });\n    setStreamingMessageId(null);\n  }, [streamingMessageId]);\n\n  /**\n   * 메시지 전송 함수\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date()\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    setStreamingMessageId(streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n    try {\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: messages.filter(msg => !msg.isLoading && !msg.isError).map(msg => ({\n          role: msg.type === \"user\" ? \"user\" : \"assistant\",\n          content: msg.content\n        }))\n      };\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        onChunk: handleStreamingResponse,\n        onError: handleStreamingError,\n        onComplete: handleStreamingComplete\n      };\n\n      // 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      handleStreamingError(error);\n    }\n  }, [inputValue, isGenerating, executeOrchestration, handleStreamingResponse, handleStreamingComplete, handleStreamingError, streamingMessageId, messages]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화 함수\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setStreamingMessageId(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    streamingMessageId,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom\n  };\n};\n_s(useChat, \"4zwP7swkVQhT+MzBnw1jaoS2Cb4=\", false, function () {\n  return [useOrchestration];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","processAIResponse","result","console","error","id","Date","now","type","content","timestamp","isError","responseContent","performance_metrics","model_info","useChat","projectId","projectName","promptCards","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","streamingMessageId","setStreamingMessageId","messagesEndRef","inputRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleStreamingResponse","chunk","metadata","prev","updatedMessages","streamingMsgIndex","findIndex","msg","isLoading","handleStreamingComplete","_result$result","log","resultLength","length","toISOString","handleStreamingError","handleSendMessage","trim","userMessage","streamMsgId","streamingMessage","orchestrationData","userInput","chat_history","filter","map","role","streamingOptions","useStreaming","onChunk","onError","onComplete","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","success","setTimeout","handleCopyTitle","title","index","resetChat"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info,\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [streamingMessageId, setStreamingMessageId] = useState(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [streamingMessageId, scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      console.log(\"스트리밍 완료 처리:\", {\n        streamingMessageId,\n        resultLength: result.result?.length || 0,\n        timestamp: new Date().toISOString(),\n      });\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      setStreamingMessageId(null);\n\n      // 스크롤 조정\n      scrollToBottom();\n    },\n    [streamingMessageId, scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 오류 처리 함수\n   */\n  const handleStreamingError = useCallback(\n    (error) => {\n      console.error(\"스트리밍 오류 처리:\", error);\n\n      // 오류 메시지로 변환\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n            isLoading: false,\n            isStreaming: false,\n            isError: true,\n            timestamp: new Date(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      setStreamingMessageId(null);\n    },\n    [streamingMessageId]\n  );\n\n  /**\n   * 메시지 전송 함수\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    setStreamingMessageId(streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n\n    try {\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: messages\n          .filter((msg) => !msg.isLoading && !msg.isError)\n          .map((msg) => ({\n            role: msg.type === \"user\" ? \"user\" : \"assistant\",\n            content: msg.content,\n          })),\n      };\n\n      // 스트리밍 옵션 설정\n      const streamingOptions = {\n        useStreaming: true,\n        chat_history: orchestrationData.chat_history,\n        onChunk: handleStreamingResponse,\n        onError: handleStreamingError,\n        onComplete: handleStreamingComplete,\n      };\n\n      // 스트리밍 방식으로 실행\n      await executeOrchestration(userMessage.content, streamingOptions);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      handleStreamingError(error);\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    handleStreamingError,\n    streamingMessageId,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화 함수\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setStreamingMessageId(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    streamingMessageId,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAChE,SAASC,KAAK,QAAQ,iBAAiB;AACvC,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,gBAAgB,QAAQ,oBAAoB;;AAErD;AACA;AACA;AACA,MAAMC,iBAAiB,GAAIC,MAAM,IAAK;EACpC,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACA,MAAM,EAAE;IAC7BC,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEF,MAAM,CAAC;IAC3C,OAAO;MACLG,EAAE,EAAE,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MACzBC,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAE,6BAA6B;MACtCC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;MACrBK,OAAO,EAAE;IACX,CAAC;EACH;;EAEA;EACA,MAAMC,eAAe,GAAGV,MAAM,CAACA,MAAM;EAErC,OAAO;IACLG,EAAE,EAAE,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC5BC,IAAI,EAAE,WAAW;IACjBC,OAAO,EAAEG,eAAe;IACxBF,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;IACrB;IACAO,mBAAmB,EAAEX,MAAM,CAACW,mBAAmB;IAC/CC,UAAU,EAAEZ,MAAM,CAACY;EACrB,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAGA,CAACC,SAAS,EAAEC,WAAW,EAAEC,WAAW,GAAG,EAAE,KAAK;EAAAC,EAAA;EACnE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACgC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAElE,MAAMkC,cAAc,GAAGhC,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMiC,QAAQ,GAAGjC,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAM;IACJkC,WAAW,EAAEC,YAAY;IACzBC,WAAW;IACXC,oBAAoB;IACpBC,uBAAuB;IACvBC;EACF,CAAC,GAAGnC,gBAAgB,CAACgB,SAAS,CAAC;;EAE/B;EACArB,SAAS,CAAC,MAAM;IACd0B,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;;EAEjB;EACAtB,SAAS,CAAC,MAAM;IACdyC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAAChB,QAAQ,CAAC,CAAC;EAEd,MAAMgB,cAAc,GAAGvC,WAAW,CAAC,MAAM;IAAA,IAAAwC,qBAAA;IACvC,CAAAA,qBAAA,GAAAT,cAAc,CAACU,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMC,uBAAuB,GAAG5C,WAAW,CACzC,CAAC6C,KAAK,EAAEC,QAAQ,KAAK;IACnBtB,WAAW,CAAEuB,IAAI,IAAK;MACpB,MAAMC,eAAe,GAAG,CAAC,GAAGD,IAAI,CAAC;MACjC,MAAME,iBAAiB,GAAGD,eAAe,CAACE,SAAS,CAChDC,GAAG,IAAKA,GAAG,CAAC3C,EAAE,KAAKqB,kBACtB,CAAC;MAED,IAAIoB,iBAAiB,KAAK,CAAC,CAAC,EAAE;QAC5B;QACAD,eAAe,CAACC,iBAAiB,CAAC,GAAG;UACnC,GAAGD,eAAe,CAACC,iBAAiB,CAAC;UACrCrC,OAAO,EAAEoC,eAAe,CAACC,iBAAiB,CAAC,CAACrC,OAAO,GAAGiC,KAAK;UAC3DO,SAAS,EAAE,IAAI;UACfjB,WAAW,EAAE;QACf,CAAC;MACH;MAEA,OAAOa,eAAe;IACxB,CAAC,CAAC;;IAEF;IACAT,cAAc,CAAC,CAAC;EAClB,CAAC,EACD,CAACV,kBAAkB,EAAEU,cAAc,CACrC,CAAC;;EAED;AACF;AACA;EACE,MAAMc,uBAAuB,GAAGrD,WAAW,CACxCK,MAAM,IAAK;IAAA,IAAAiD,cAAA;IACVhD,OAAO,CAACiD,GAAG,CAAC,aAAa,EAAE;MACzB1B,kBAAkB;MAClB2B,YAAY,EAAE,EAAAF,cAAA,GAAAjD,MAAM,CAACA,MAAM,cAAAiD,cAAA,uBAAbA,cAAA,CAAeG,MAAM,KAAI,CAAC;MACxC5C,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC,CAACiD,WAAW,CAAC;IACpC,CAAC,CAAC;IAEFlC,WAAW,CAAEuB,IAAI,IAAK;MACpB,MAAMC,eAAe,GAAG,CAAC,GAAGD,IAAI,CAAC;MACjC,MAAME,iBAAiB,GAAGD,eAAe,CAACE,SAAS,CAChDC,GAAG,IAAKA,GAAG,CAAC3C,EAAE,KAAKqB,kBACtB,CAAC;MAED,IAAIoB,iBAAiB,KAAK,CAAC,CAAC,EAAE;QAC5B;QACAD,eAAe,CAACC,iBAAiB,CAAC,GAAG;UACnC,GAAGD,eAAe,CAACC,iBAAiB,CAAC;UACrCrC,OAAO,EAAEP,MAAM,CAACA,MAAM;UACtB+C,SAAS,EAAE,KAAK;UAChBjB,WAAW,EAAE,KAAK;UAClBnB,mBAAmB,EAAEX,MAAM,CAACW,mBAAmB;UAC/CC,UAAU,EAAEZ,MAAM,CAACY,UAAU;UAC7BJ,SAAS,EAAE,IAAIJ,IAAI,CAAC;QACtB,CAAC;MACH;MAEA,OAAOuC,eAAe;IACxB,CAAC,CAAC;;IAEF;IACAlB,qBAAqB,CAAC,IAAI,CAAC;;IAE3B;IACAS,cAAc,CAAC,CAAC;EAClB,CAAC,EACD,CAACV,kBAAkB,EAAEU,cAAc,CACrC,CAAC;;EAED;AACF;AACA;EACE,MAAMoB,oBAAoB,GAAG3D,WAAW,CACrCO,KAAK,IAAK;IACTD,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;;IAEnC;IACAiB,WAAW,CAAEuB,IAAI,IAAK;MACpB,MAAMC,eAAe,GAAG,CAAC,GAAGD,IAAI,CAAC;MACjC,MAAME,iBAAiB,GAAGD,eAAe,CAACE,SAAS,CAChDC,GAAG,IAAKA,GAAG,CAAC3C,EAAE,KAAKqB,kBACtB,CAAC;MAED,IAAIoB,iBAAiB,KAAK,CAAC,CAAC,EAAE;QAC5BD,eAAe,CAACC,iBAAiB,CAAC,GAAG;UACnC,GAAGD,eAAe,CAACC,iBAAiB,CAAC;UACrCrC,OAAO,EAAE,iCAAiC;UAC1CwC,SAAS,EAAE,KAAK;UAChBjB,WAAW,EAAE,KAAK;UAClBrB,OAAO,EAAE,IAAI;UACbD,SAAS,EAAE,IAAIJ,IAAI,CAAC;QACtB,CAAC;MACH;MAEA,OAAOuC,eAAe;IACxB,CAAC,CAAC;IAEFlB,qBAAqB,CAAC,IAAI,CAAC;EAC7B,CAAC,EACD,CAACD,kBAAkB,CACrB,CAAC;;EAED;AACF;AACA;EACE,MAAM+B,iBAAiB,GAAG5D,WAAW,CAAC,YAAY;IAChD,IAAI,CAACyB,UAAU,CAACoC,IAAI,CAAC,CAAC,IAAI3B,YAAY,EAAE;IAExC,MAAM4B,WAAW,GAAG;MAClBtD,EAAE,EAAE,OAAO,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MACxBC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAEa,UAAU,CAACoC,IAAI,CAAC,CAAC;MAC1BhD,SAAS,EAAE,IAAIJ,IAAI,CAAC;IACtB,CAAC;;IAED;IACA,MAAMsD,WAAW,GAAG,YAAY,GAAGtD,IAAI,CAACC,GAAG,CAAC,CAAC;IAC7CoB,qBAAqB,CAACiC,WAAW,CAAC;;IAElC;IACA,MAAMC,gBAAgB,GAAG;MACvBxD,EAAE,EAAEuD,WAAW;MACfpD,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,IAAIJ,IAAI,CAAC,CAAC;MACrB2C,SAAS,EAAE,IAAI;MACfjB,WAAW,EAAE;IACf,CAAC;IAEDX,WAAW,CAAEuB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEe,WAAW,EAAEE,gBAAgB,CAAC,CAAC;IAC/DtC,aAAa,CAAC,EAAE,CAAC;IAEjB,IAAI;MACF,MAAMuC,iBAAiB,GAAG;QACxBC,SAAS,EAAEJ,WAAW,CAAClD,OAAO;QAC9BuD,YAAY,EAAE5C,QAAQ,CACnB6C,MAAM,CAAEjB,GAAG,IAAK,CAACA,GAAG,CAACC,SAAS,IAAI,CAACD,GAAG,CAACrC,OAAO,CAAC,CAC/CuD,GAAG,CAAElB,GAAG,KAAM;UACbmB,IAAI,EAAEnB,GAAG,CAACxC,IAAI,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW;UAChDC,OAAO,EAAEuC,GAAG,CAACvC;QACf,CAAC,CAAC;MACN,CAAC;;MAED;MACA,MAAM2D,gBAAgB,GAAG;QACvBC,YAAY,EAAE,IAAI;QAClBL,YAAY,EAAEF,iBAAiB,CAACE,YAAY;QAC5CM,OAAO,EAAE7B,uBAAuB;QAChC8B,OAAO,EAAEf,oBAAoB;QAC7BgB,UAAU,EAAEtB;MACd,CAAC;;MAED;MACA,MAAMjB,oBAAoB,CAAC0B,WAAW,CAAClD,OAAO,EAAE2D,gBAAgB,CAAC;IACnE,CAAC,CAAC,OAAOhE,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClCoD,oBAAoB,CAACpD,KAAK,CAAC;IAC7B;EACF,CAAC,EAAE,CACDkB,UAAU,EACVS,YAAY,EACZE,oBAAoB,EACpBQ,uBAAuB,EACvBS,uBAAuB,EACvBM,oBAAoB,EACpB9B,kBAAkB,EAClBN,QAAQ,CACT,CAAC;;EAEF;AACF;AACA;EACE,MAAMqD,cAAc,GAAG5E,WAAW,CAC/B6E,CAAC,IAAK;IACL,IAAIA,CAAC,CAACC,GAAG,KAAK,OAAO,IAAI,CAACD,CAAC,CAACE,QAAQ,EAAE;MACpCF,CAAC,CAACG,cAAc,CAAC,CAAC;MAClBpB,iBAAiB,CAAC,CAAC;IACrB;EACF,CAAC,EACD,CAACA,iBAAiB,CACpB,CAAC;;EAED;AACF;AACA;EACE,MAAMqB,iBAAiB,GAAGjF,WAAW,CAAC,OAAOY,OAAO,EAAEsE,SAAS,KAAK;IAClE,MAAMC,OAAO,GAAG,MAAMjF,eAAe,CAACU,OAAO,CAAC;IAC9C,IAAIuE,OAAO,EAAE;MACXvD,gBAAgB,CAACsD,SAAS,CAAC;MAC3BE,UAAU,CAAC,MAAMxD,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;IAChD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAMyD,eAAe,GAAGrF,WAAW,CAAC,OAAOsF,KAAK,EAAEJ,SAAS,EAAEK,KAAK,KAAK;IACrE,MAAMJ,OAAO,GAAG,MAAMjF,eAAe,CAACoF,KAAK,EAAE,UAAU,CAAC;IACxD,IAAIH,OAAO,EAAE;MACXvD,gBAAgB,CAAC,GAAGsD,SAAS,UAAUK,KAAK,EAAE,CAAC;MAC/CH,UAAU,CAAC,MAAMxD,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;IAChD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF;AACA;EACE,MAAM4D,SAAS,GAAGxF,WAAW,CAAC,MAAM;IAClCwB,WAAW,CAAC,EAAE,CAAC;IACfE,aAAa,CAAC,EAAE,CAAC;IACjBE,gBAAgB,CAAC,IAAI,CAAC;IACtBE,qBAAqB,CAAC,IAAI,CAAC;IAC3BQ,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,OAAO;IACLf,QAAQ;IACRE,UAAU;IACVC,aAAa;IACbC,aAAa;IACbO,YAAY;IACZC,WAAW;IACXN,kBAAkB;IAClBE,cAAc;IACdC,QAAQ;IACR4B,iBAAiB;IACjBgB,cAAc;IACdK,iBAAiB;IACjBI,eAAe;IACfG,SAAS;IACTjD;EACF,CAAC;AACH,CAAC;AAACjB,EAAA,CA1QWJ,OAAO;EAAA,QAedf,gBAAgB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}