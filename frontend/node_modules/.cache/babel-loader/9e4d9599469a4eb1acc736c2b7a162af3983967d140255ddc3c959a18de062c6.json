{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! 저는 ${projectName}의 AI 제목 작가입니다.\\n\\n기사 내용을 입력해주시면 다양한 스타일의 제목을 제안해드릴게요. 제목을 수정하거나 다른 스타일로 바꾸고 싶으시면 언제든 말씀해주세요!`,\n      timestamp: new Date()\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"📝 메시지 전송 시도:\", {\n      inputValue: inputValue.trim(),\n      isGenerating\n    });\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"❌ 전송 차단:\", {\n        isEmpty: !inputValue.trim(),\n        isGenerating\n      });\n      return;\n    }\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content: \"AI가 제목을 생성하고 있습니다...\\n\\n단계별로 처리 중이니 잠시만 기다려주세요!\",\n        timestamp: new Date(),\n        isLoading: true\n      };\n      setMessages(prev => [...prev, loadingMessage]);\n\n      // 사용자 입력이 기사 내용인지 추가 요청인지 판단\n      const isLongContent = currentInput.length > 200;\n      const hasMultipleLines = currentInput.split('\\n').length > 3;\n      const isArticleContent = isLongContent && hasMultipleLines;\n      let articleText = \"\";\n      let userRequest = \"\";\n      if (isArticleContent) {\n        // 긴 내용이면 기사로 간주\n        articleText = currentInput;\n        userRequest = \"\";\n      } else {\n        // 짧은 내용이면 이전 대화에서 기사 찾기 또는 기본 요청으로 처리\n        const lastMessages = messages.slice(-5); // 최근 5개 메시지 확인\n        const lastArticleMessage = lastMessages.find(msg => msg.type === \"user\" && msg.content.length > 200);\n        if (lastArticleMessage) {\n          // 이전에 기사가 있었다면 현재 입력을 추가 요청으로 처리\n          articleText = lastArticleMessage.content;\n          userRequest = currentInput;\n        } else {\n          // 기사가 없으면 현재 입력을 기사로 처리\n          articleText = currentInput;\n          userRequest = \"\";\n        }\n      }\n      console.log(\"📝 입력 분석:\", {\n        isArticleContent,\n        articleLength: articleText.length,\n        userRequestLength: userRequest.length,\n        userRequest: userRequest.substring(0, 50) + \"...\"\n      });\n\n      // 오케스트레이션 실행\n      const result = await executeOrchestration(articleText, {}, userRequest);\n      console.log(\"🔍 useChat에서 받은 결과:\", result);\n      console.log(\"🔍 result 타입:\", typeof result);\n      console.log(\"🔍 result.result 존재:\", !!(result !== null && result !== void 0 && result.result));\n      if (result && result.result) {\n        // 직접 응답 처리 (폴링 불필요)\n        // 실제 API 응답에서 result 필드에 제목들이 문자열로 들어있음\n        const titleText = result.result;\n\n        // 번호가 매겨진 제목들을 파싱 (개선된 파싱 로직)\n        const lines = titleText.split('\\n').map(line => line.trim()).filter(line => line);\n        const titles = [];\n        for (const line of lines) {\n          // 다양한 제목 형식 처리 - 섹션 헤더나 분석 텍스트 제외\n          if (/^\\d+\\.\\s*/.test(line) && !line.includes('#') && !line.includes('[') && !line.includes('===') && !line.includes('분석') && !line.includes('키워드') && !line.includes('유형별') && !line.includes('추천')) {\n            let title = line.replace(/^\\d+\\.\\s*/, ''); // 번호 제거\n\n            // 다양한 따옴표 형식 제거\n            title = title.replace(/^[\"\"\\\"\\']/, '').replace(/[\"\"\\\"\\']$/, '');\n\n            // 추가 정리\n            title = title.trim();\n\n            // 유효한 제목인지 확인 (최소 5자, 최대 50자)\n            if (title && title.length >= 5 && title.length <= 50) {\n              titles.push(title);\n            }\n          }\n        }\n\n        // 제목이 없으면 전체 텍스트에서 추출 시도\n        if (titles.length === 0) {\n          console.log(\"기본 파싱으로 제목을 찾을 수 없어 전체 텍스트를 사용합니다:\", titleText);\n          titles.push(\"AI가 생성한 제목: \" + titleText.substring(0, 100) + \"...\");\n        }\n        const responseMessage = {\n          id: \"response-\" + Date.now(),\n          type: \"assistant\",\n          content: `**생성된 제목 후보들입니다:**\\n\\n${titles.map((title, i) => `**${i + 1}.** ${title}`).join(\"\\n\\n\")}\\n\\n원하시는 제목이 있으시거나 수정이 필요하시면 말씀해주세요!`,\n          timestamp: new Date(),\n          titles: titles\n        };\n\n        // 로딩 메시지 제거하고 결과 메시지 추가\n        setMessages(prev => prev.filter(msg => !msg.isLoading).concat([responseMessage]));\n        console.log(\"✅ 메시지 처리 완료, 상태 초기화\");\n      } else {\n        // 결과가 없는 경우 에러 처리\n        console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n        const errorMessage = {\n          id: \"error-\" + Date.now(),\n          type: \"assistant\",\n          content: \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          timestamp: new Date(),\n          isError: true\n        };\n        setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n        console.log(\"❌ AI 응답 오류 처리 완료\");\n      }\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: \"죄송합니다. 메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n      console.log(\"❌ 에러 처리 완료\");\n    }\n  }, [inputValue, isGenerating, executeOrchestration, pollOrchestrationResult]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"제목이 복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom\n  };\n};\n_s(useChat, \"65spPCFiJeixZY7XKNhZdn5atpw=\", false, function () {\n  return [useOrchestration];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","useChat","projectId","projectName","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","messagesEndRef","inputRef","isExecuting","isGenerating","executeOrchestration","pollOrchestrationResult","resetOrchestration","welcomeMessage","id","type","content","timestamp","Date","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","console","log","trim","isEmpty","userMessage","now","Math","random","prev","currentInput","loadingMessage","isLoading","isLongContent","length","hasMultipleLines","split","isArticleContent","articleText","userRequest","lastMessages","slice","lastArticleMessage","find","msg","articleLength","userRequestLength","substring","result","titleText","lines","map","line","filter","titles","test","includes","title","replace","push","responseMessage","i","join","concat","error","errorMessage","isError","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","success","setTimeout","handleCopyTitle","index","resetChat"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! 저는 ${projectName}의 AI 제목 작가입니다.\\n\\n기사 내용을 입력해주시면 다양한 스타일의 제목을 제안해드릴게요. 제목을 수정하거나 다른 스타일로 바꾸고 싶으시면 언제든 말씀해주세요!`,\n      timestamp: new Date(),\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"📝 메시지 전송 시도:\", { inputValue: inputValue.trim(), isGenerating });\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"❌ 전송 차단:\", { isEmpty: !inputValue.trim(), isGenerating });\n      return;\n    }\n\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          \"AI가 제목을 생성하고 있습니다...\\n\\n단계별로 처리 중이니 잠시만 기다려주세요!\",\n        timestamp: new Date(),\n        isLoading: true,\n      };\n\n      setMessages((prev) => [...prev, loadingMessage]);\n\n      // 사용자 입력이 기사 내용인지 추가 요청인지 판단\n      const isLongContent = currentInput.length > 200;\n      const hasMultipleLines = currentInput.split('\\n').length > 3;\n      const isArticleContent = isLongContent && hasMultipleLines;\n      \n      let articleText = \"\";\n      let userRequest = \"\";\n      \n      if (isArticleContent) {\n        // 긴 내용이면 기사로 간주\n        articleText = currentInput;\n        userRequest = \"\";\n      } else {\n        // 짧은 내용이면 이전 대화에서 기사 찾기 또는 기본 요청으로 처리\n        const lastMessages = messages.slice(-5); // 최근 5개 메시지 확인\n        const lastArticleMessage = lastMessages.find(msg => \n          msg.type === \"user\" && msg.content.length > 200\n        );\n        \n        if (lastArticleMessage) {\n          // 이전에 기사가 있었다면 현재 입력을 추가 요청으로 처리\n          articleText = lastArticleMessage.content;\n          userRequest = currentInput;\n        } else {\n          // 기사가 없으면 현재 입력을 기사로 처리\n          articleText = currentInput;\n          userRequest = \"\";\n        }\n      }\n\n      console.log(\"📝 입력 분석:\", { \n        isArticleContent, \n        articleLength: articleText.length, \n        userRequestLength: userRequest.length,\n        userRequest: userRequest.substring(0, 50) + \"...\"\n      });\n\n      // 오케스트레이션 실행\n      const result = await executeOrchestration(articleText, {}, userRequest);\n      \n      console.log(\"🔍 useChat에서 받은 결과:\", result);\n      console.log(\"🔍 result 타입:\", typeof result);\n      console.log(\"🔍 result.result 존재:\", !!result?.result);\n\n      if (result && result.result) {\n        // 직접 응답 처리 (폴링 불필요)\n        // 실제 API 응답에서 result 필드에 제목들이 문자열로 들어있음\n        const titleText = result.result;\n        \n        // 번호가 매겨진 제목들을 파싱 (개선된 파싱 로직)\n        const lines = titleText.split('\\n').map(line => line.trim()).filter(line => line);\n        const titles = [];\n        \n        for (const line of lines) {\n          // 다양한 제목 형식 처리 - 섹션 헤더나 분석 텍스트 제외\n          if (/^\\d+\\.\\s*/.test(line) && \n              !line.includes('#') && \n              !line.includes('[') && \n              !line.includes('===') && \n              !line.includes('분석') && \n              !line.includes('키워드') &&\n              !line.includes('유형별') &&\n              !line.includes('추천')) {\n            \n            let title = line.replace(/^\\d+\\.\\s*/, ''); // 번호 제거\n            \n            // 다양한 따옴표 형식 제거\n            title = title.replace(/^[\"\"\\\"\\']/, '').replace(/[\"\"\\\"\\']$/, '');\n            \n            // 추가 정리\n            title = title.trim();\n            \n            // 유효한 제목인지 확인 (최소 5자, 최대 50자)\n            if (title && title.length >= 5 && title.length <= 50) {\n              titles.push(title);\n            }\n          }\n        }\n        \n        // 제목이 없으면 전체 텍스트에서 추출 시도\n        if (titles.length === 0) {\n          console.log(\"기본 파싱으로 제목을 찾을 수 없어 전체 텍스트를 사용합니다:\", titleText);\n          titles.push(\"AI가 생성한 제목: \" + titleText.substring(0, 100) + \"...\");\n        }\n\n        const responseMessage = {\n          id: \"response-\" + Date.now(),\n          type: \"assistant\",\n          content: `**생성된 제목 후보들입니다:**\\n\\n${titles\n            .map((title, i) => `**${i + 1}.** ${title}`)\n            .join(\n              \"\\n\\n\"\n            )}\\n\\n원하시는 제목이 있으시거나 수정이 필요하시면 말씀해주세요!`,\n          timestamp: new Date(),\n          titles: titles,\n        };\n\n        // 로딩 메시지 제거하고 결과 메시지 추가\n        setMessages((prev) =>\n          prev.filter((msg) => !msg.isLoading).concat([responseMessage])\n        );\n        \n        console.log(\"✅ 메시지 처리 완료, 상태 초기화\");\n      } else {\n        // 결과가 없는 경우 에러 처리\n        console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n\n        const errorMessage = {\n          id: \"error-\" + Date.now(),\n          type: \"assistant\",\n          content:\n            \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          timestamp: new Date(),\n          isError: true,\n        };\n\n        setMessages((prev) =>\n          prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n        );\n        \n        console.log(\"❌ AI 응답 오류 처리 완료\");\n      }\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          \"죄송합니다. 메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n      };\n\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n      );\n      \n      console.log(\"❌ 에러 처리 완료\");\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"제목이 복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}