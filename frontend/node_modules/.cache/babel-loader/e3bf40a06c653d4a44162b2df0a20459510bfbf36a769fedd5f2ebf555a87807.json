{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';import{conversationAPI,mockConversations}from'../services/api';/**\n * 대화 목록 관리를 위한 커스텀 훅\n * 무한 스크롤과 실시간 업데이트 지원\n */export const useConversations=()=>{const[conversations,setConversations]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[hasMore,setHasMore]=useState(true);const[nextCursor,setNextCursor]=useState(null);// 대화 목록 초기 로드\nconst loadConversations=useCallback(async function(){let reset=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(loading)return;setLoading(true);setError(null);try{const cursor=reset?null:nextCursor;const response=await conversationAPI.getConversations(cursor);if(reset){setConversations(response.conversations);}else{setConversations(prev=>[...prev,...response.conversations]);}setHasMore(response.hasMore);setNextCursor(response.nextCursor);}catch(err){var _err$response,_err$response2,_err$response3,_err$response4;console.error('대화 목록 로드 실패:',err);console.error('Error details:',{message:err.message,status:(_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.status,data:(_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.data,config:err.config});// 상세한 에러 메시지 제공\nlet errorMessage='대화 목록을 불러오는데 실패했습니다.';if(err.code==='ERR_NETWORK'){errorMessage='네트워크 연결을 확인해주세요.';}else if(((_err$response3=err.response)===null||_err$response3===void 0?void 0:_err$response3.status)===403){errorMessage='접근 권한이 없습니다.';}else if(((_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.status)>=500){errorMessage='서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';}setError(errorMessage);// API 실패시 mock 데이터로 fallback\nif(reset){console.log('API 실패, mock 데이터 사용');setConversations(mockConversations);setHasMore(false);setNextCursor(null);}}finally{setLoading(false);}},[loading,nextCursor]);// 새 대화 생성\nconst createConversation=useCallback(async title=>{try{const response=await conversationAPI.createConversation(title);const newConversation={id:response.conversationId,title:response.title,startedAt:response.startedAt,lastActivityAt:response.lastActivityAt,tokenSum:0};// 새 대화를 목록 맨 앞에 추가\nsetConversations(prev=>[newConversation,...prev]);return newConversation;}catch(err){console.error('대화 생성 실패:',err);// API 실패시 mock 데이터로 fallback\nconst mockConversation={id:Date.now().toString(),title:title||'New Conversation',startedAt:new Date().toISOString(),lastActivityAt:new Date().toISOString(),tokenSum:0};setConversations(prev=>[mockConversation,...prev]);return mockConversation;}},[]);// 대화 업데이트 (마지막 활동 시간, 제목 등)\nconst updateConversation=useCallback((conversationId,updates)=>{setConversations(prev=>prev.map(conv=>conv.id===conversationId?{...conv,...updates,lastActivityAt:new Date().toISOString()}:conv));},[]);// 대화 삭제\nconst deleteConversation=useCallback(async conversationId=>{try{// API 호출로 실제 삭제 시도\nawait conversationAPI.deleteConversation(conversationId);console.log('API 삭제 성공:',conversationId);}catch(err){console.warn('API 삭제 실패, 로컬에서만 삭제:',err);// API 실패 시에도 로컬에서는 삭제 진행\n}// API 성공/실패 관계없이 UI에서 제거\nsetConversations(prev=>prev.filter(conv=>conv.id!==conversationId));return true;},[]);// 대화 삭제 (UI에서만 제거, 실제 삭제는 별도 구현)\nconst removeConversation=useCallback(conversationId=>{setConversations(prev=>prev.filter(conv=>conv.id!==conversationId));},[]);// 다음 페이지 로드 (무한 스크롤)\nconst loadMore=useCallback(()=>{if(hasMore&&!loading){loadConversations(false);}},[hasMore,loading,loadConversations]);// 새로고침\nconst refresh=useCallback(()=>{loadConversations(true);},[loadConversations]);// 초기 로드\nuseEffect(()=>{loadConversations(true);},[]);return{conversations,loading,error,hasMore,loadMore,refresh,createConversation,updateConversation,deleteConversation,removeConversation};};","map":{"version":3,"names":["useState","useEffect","useCallback","conversationAPI","mockConversations","useConversations","conversations","setConversations","loading","setLoading","error","setError","hasMore","setHasMore","nextCursor","setNextCursor","loadConversations","reset","arguments","length","undefined","cursor","response","getConversations","prev","err","_err$response","_err$response2","_err$response3","_err$response4","console","message","status","data","config","errorMessage","code","log","createConversation","title","newConversation","id","conversationId","startedAt","lastActivityAt","tokenSum","mockConversation","Date","now","toString","toISOString","updateConversation","updates","map","conv","deleteConversation","warn","filter","removeConversation","loadMore","refresh"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useConversations.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { conversationAPI, mockConversations } from '../services/api';\n\n/**\n * 대화 목록 관리를 위한 커스텀 훅\n * 무한 스크롤과 실시간 업데이트 지원\n */\nexport const useConversations = () => {\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 대화 목록 초기 로드\n  const loadConversations = useCallback(async (reset = false) => {\n    if (loading) return;\n    \n    setLoading(true);\n    setError(null);\n\n    try {\n      const cursor = reset ? null : nextCursor;\n      const response = await conversationAPI.getConversations(cursor);\n      \n      if (reset) {\n        setConversations(response.conversations);\n      } else {\n        setConversations(prev => [...prev, ...response.conversations]);\n      }\n      \n      setHasMore(response.hasMore);\n      setNextCursor(response.nextCursor);\n      \n    } catch (err) {\n      console.error('대화 목록 로드 실패:', err);\n      console.error('Error details:', {\n        message: err.message,\n        status: err.response?.status,\n        data: err.response?.data,\n        config: err.config\n      });\n      \n      // 상세한 에러 메시지 제공\n      let errorMessage = '대화 목록을 불러오는데 실패했습니다.';\n      if (err.code === 'ERR_NETWORK') {\n        errorMessage = '네트워크 연결을 확인해주세요.';\n      } else if (err.response?.status === 403) {\n        errorMessage = '접근 권한이 없습니다.';\n      } else if (err.response?.status >= 500) {\n        errorMessage = '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';\n      }\n      \n      setError(errorMessage);\n      \n      // API 실패시 mock 데이터로 fallback\n      if (reset) {\n        console.log('API 실패, mock 데이터 사용');\n        setConversations(mockConversations);\n        setHasMore(false);\n        setNextCursor(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, nextCursor]);\n\n  // 새 대화 생성\n  const createConversation = useCallback(async (title) => {\n    try {\n      const response = await conversationAPI.createConversation(title);\n      const newConversation = {\n        id: response.conversationId,\n        title: response.title,\n        startedAt: response.startedAt,\n        lastActivityAt: response.lastActivityAt,\n        tokenSum: 0\n      };\n      \n      // 새 대화를 목록 맨 앞에 추가\n      setConversations(prev => [newConversation, ...prev]);\n      \n      return newConversation;\n    } catch (err) {\n      console.error('대화 생성 실패:', err);\n      \n      // API 실패시 mock 데이터로 fallback\n      const mockConversation = {\n        id: Date.now().toString(),\n        title: title || 'New Conversation',\n        startedAt: new Date().toISOString(),\n        lastActivityAt: new Date().toISOString(),\n        tokenSum: 0\n      };\n      \n      setConversations(prev => [mockConversation, ...prev]);\n      return mockConversation;\n    }\n  }, []);\n\n  // 대화 업데이트 (마지막 활동 시간, 제목 등)\n  const updateConversation = useCallback((conversationId, updates) => {\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === conversationId \n          ? { ...conv, ...updates, lastActivityAt: new Date().toISOString() }\n          : conv\n      )\n    );\n  }, []);\n\n  // 대화 삭제\n  const deleteConversation = useCallback(async (conversationId) => {\n    try {\n      // API 호출로 실제 삭제 시도\n      await conversationAPI.deleteConversation(conversationId);\n      console.log('API 삭제 성공:', conversationId);\n    } catch (err) {\n      console.warn('API 삭제 실패, 로컬에서만 삭제:', err);\n      // API 실패 시에도 로컬에서는 삭제 진행\n    }\n    \n    // API 성공/실패 관계없이 UI에서 제거\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n    \n    return true;\n  }, []);\n\n  // 대화 삭제 (UI에서만 제거, 실제 삭제는 별도 구현)\n  const removeConversation = useCallback((conversationId) => {\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n  }, []);\n\n  // 다음 페이지 로드 (무한 스크롤)\n  const loadMore = useCallback(() => {\n    if (hasMore && !loading) {\n      loadConversations(false);\n    }\n  }, [hasMore, loading, loadConversations]);\n\n  // 새로고침\n  const refresh = useCallback(() => {\n    loadConversations(true);\n  }, [loadConversations]);\n\n  // 초기 로드\n  useEffect(() => {\n    loadConversations(true);\n  }, []);\n\n  return {\n    conversations,\n    loading,\n    error,\n    hasMore,\n    loadMore,\n    refresh,\n    createConversation,\n    updateConversation,\n    deleteConversation,\n    removeConversation\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}