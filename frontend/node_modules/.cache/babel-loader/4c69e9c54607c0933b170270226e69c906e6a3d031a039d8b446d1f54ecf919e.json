{"ast":null,"code":"var _jsxFileName = \"/Users/yeong-gwang/Documents/work/\\u1109\\u1165\\u110B\\u116E\\u11AF\\u1100\\u1167\\u11BC\\u110C\\u1166\\u1109\\u1175\\u11AB\\u1106\\u116E\\u11AB/ai_\\u110C\\u1166\\u1106\\u1169\\u11A8\\u1103\\u1161\\u11AF\\u1100\\u1175(\\u1109\\u116E)_\\u110B\\u116A\\u11AB\\u1109\\u1165\\u11BC\\u1107\\u1169\\u11AB_\\u1109\\u1173\\u1110\\u1173\\u1105\\u1175\\u1106\\u1175\\u11BC\\u1100\\u116E\\u1112\\u1167\\u11AB \\u1107\\u1169\\u11A8\\u1109\\u1161\\u1107\\u1169\\u11AB/frontend/src/components/UserView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { promptCardAPI } from \"../services/api\";\nimport ChatInterface from \"./ChatInterface\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserView = ({\n  projectId,\n  projectName\n}) => {\n  _s();\n  const [promptCards, setPromptCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const loadPromptCards = async () => {\n      try {\n        setLoading(true);\n        const promptCardsData = await promptCardAPI.getPromptCards(projectId);\n        setPromptCards(promptCardsData);\n      } catch (error) {\n        console.warn(\"프롬프트 카드 로드 실패:\", error);\n        setPromptCards([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadPromptCards();\n  }, [projectId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-full flex items-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ml-4 text-gray-600\",\n        children: \"\\uCC44\\uD305 \\uD654\\uBA74\\uC744 \\uC900\\uBE44\\uD558\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full bg-white\",\n    children: /*#__PURE__*/_jsxDEV(ChatInterface, {\n      projectId: projectId,\n      projectName: projectName,\n      promptCards: promptCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(UserView, \"TeleLBvga0acvjdjYFW9yMTAFjE=\");\n_c = UserView;\nexport default UserView;\nvar _c;\n$RefreshReg$(_c, \"UserView\");","map":{"version":3,"names":["React","useState","useEffect","promptCardAPI","ChatInterface","LoadingSpinner","jsxDEV","_jsxDEV","UserView","projectId","projectName","_s","promptCards","setPromptCards","loading","setLoading","loadPromptCards","promptCardsData","getPromptCards","error","console","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/components/UserView.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { promptCardAPI } from \"../services/api\";\nimport ChatInterface from \"./ChatInterface\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst UserView = ({ projectId, projectName }) => {\n  const [promptCards, setPromptCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadPromptCards = async () => {\n      try {\n        setLoading(true);\n        const promptCardsData = await promptCardAPI.getPromptCards(projectId);\n        setPromptCards(promptCardsData);\n      } catch (error) {\n        console.warn(\"프롬프트 카드 로드 실패:\", error);\n        setPromptCards([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPromptCards();\n  }, [projectId]);\n\n  if (loading) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <LoadingSpinner />\n        <div className=\"ml-4 text-gray-600\">\n          채팅 화면을 준비하고 있습니다...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full bg-white\">\n      <ChatInterface\n        projectId={projectId}\n        projectName={projectName}\n        promptCards={promptCards}\n      />\n    </div>\n  );\n};\n\nexport default UserView;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACFD,UAAU,CAAC,IAAI,CAAC;QAChB,MAAME,eAAe,GAAG,MAAMd,aAAa,CAACe,cAAc,CAACT,SAAS,CAAC;QACrEI,cAAc,CAACI,eAAe,CAAC;MACjC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACC,IAAI,CAAC,gBAAgB,EAAEF,KAAK,CAAC;QACrCN,cAAc,CAAC,EAAE,CAAC;MACpB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACP,SAAS,CAAC,CAAC;EAEf,IAAIK,OAAO,EAAE;IACX,oBACEP,OAAA;MAAKe,SAAS,EAAC,yCAAyC;MAAAC,QAAA,gBACtDhB,OAAA,CAACF,cAAc;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClBpB,OAAA;QAAKe,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAEpC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,oBACEpB,OAAA;IAAKe,SAAS,EAAC,iBAAiB;IAAAC,QAAA,eAC9BhB,OAAA,CAACH,aAAa;MACZK,SAAS,EAAEA,SAAU;MACrBC,WAAW,EAAEA,WAAY;MACzBE,WAAW,EAAEA;IAAY;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAChB,EAAA,CAzCIH,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AA2Cd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}