{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\nconst IS_MOCK_MODE = true; // 개발용 - 실제 배포 시 false로 변경\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 요청 인터셉터 (인증 비활성화 상태)\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response;\n  console.error(\"API 오류:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 1. 프로젝트 API (기본 CRUD만)\n// =============================================================================\nexport const projectAPI = {\n  getProjects: async () => {\n    if (IS_MOCK_MODE) {\n      return {\n        projects: [{\n          projectId: \"6cbf88e5-e295-4377-9075-be0fc469704e\",\n          name: \"서울경제신문 AI 제목 생성 시스템\",\n          description: \"뉴스 기사 제목 자동 생성을 위한 AI 시스템\",\n          category: \"news\",\n          createdAt: \"2024-01-15T10:00:00Z\",\n          status: \"active\"\n        }]\n      };\n    }\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n  getProject: async projectId => {\n    if (IS_MOCK_MODE) {\n      return {\n        projectId,\n        name: \"서울경제신문 AI 제목 생성 시스템\",\n        description: \"뉴스 기사 제목 자동 생성을 위한 AI 시스템\",\n        category: \"news\",\n        status: \"active\"\n      };\n    }\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회 - 실제 API 사용\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회 시작:\", projectId);\n    try {\n      // 실제 API 호출 (이미 작동하고 있음)\n      const params = includeContent ? {\n        include_content: \"true\"\n      } : {};\n      const response = await api.get(`/prompts/${projectId}`, {\n        params\n      });\n      console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ 프롬프트 조회 실패:\", error);\n      throw error;\n    }\n  },\n  // 프롬프트 카드 수정 - 실제 S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정:\", {\n      projectId,\n      promptId\n    });\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 3. 제목 생성 API (핵심 플로우)\n// =============================================================================\n\n// Bedrock Claude 스타일 응답 시뮬레이션 (실제 프롬프트 기반)\nconst simulateClaudeResponse = async (articleContent, prompts, userRequest = \"\") => {\n  var _prompts$promptCards, _prompts$promptCards2, _prompts$promptCards3, _prompts$promptCards4, _prompts$promptCards5, _prompts$promptCards6;\n  console.log(\"🧠 Claude 시뮬레이션 시작\");\n  console.log(\"📝 프롬프트 개수:\", ((_prompts$promptCards = prompts.promptCards) === null || _prompts$promptCards === void 0 ? void 0 : _prompts$promptCards.length) || 0);\n\n  // 실제 프롬프트 내용 활용\n  const rolePrompt = ((_prompts$promptCards2 = prompts.promptCards) === null || _prompts$promptCards2 === void 0 ? void 0 : (_prompts$promptCards3 = _prompts$promptCards2.find(p => p.category === \"instruction\")) === null || _prompts$promptCards3 === void 0 ? void 0 : _prompts$promptCards3.prompt_text) || \"당신은 서울경제신문의 전문 제목 생성 AI입니다.\";\n  const knowledgePrompt = ((_prompts$promptCards4 = prompts.promptCards) === null || _prompts$promptCards4 === void 0 ? void 0 : (_prompts$promptCards5 = _prompts$promptCards4.find(p => p.category === \"knowledge\")) === null || _prompts$promptCards5 === void 0 ? void 0 : _prompts$promptCards5.prompt_text) || \"경제 기사 제목 작성 전문가로서 독자의 관심을 끄는 제목을 생성합니다.\";\n  console.log(\"🎯 사용할 역할 프롬프트:\", rolePrompt.substring(0, 100) + \"...\");\n\n  // 기사 내용 기반 간단한 제목 생성\n  const article = articleContent.toLowerCase();\n  const titles = [];\n\n  // 기사에서 주요 키워드 추출 (간단한 방식)\n  const keywords = extractMainKeywords(article);\n  const company = extractCompany(article);\n  const action = extractAction(article);\n  console.log(\"🔑 추출된 정보:\", {\n    company,\n    action,\n    keywords: keywords.slice(0, 3)\n  });\n\n  // 제목 생성 (실제 프롬프트 스타일 반영)\n  if (company && action) {\n    titles.push(`${company} ${action}`);\n    titles.push(`${company}, ${action} 나서`);\n    titles.push(`${company}의 ${action} 전략`);\n  }\n  if (keywords.length > 0) {\n    titles.push(`${keywords[0]} 중심 ${action || \"전략\"} 주목`);\n    titles.push(`${company || \"기업\"} ${keywords[0]} 강화`);\n  }\n\n  // 기본 제목들\n  if (titles.length < 3) {\n    titles.push(\"경제 동향 주목\", \"시장 변화 예고\", \"업계 이목 집중\");\n  }\n  const finalTitles = titles.slice(0, 5);\n  const result = finalTitles.map((title, i) => `${i + 1}. ${title}`).join(\"\\n\");\n  const promptInfo = ((_prompts$promptCards6 = prompts.promptCards) === null || _prompts$promptCards6 === void 0 ? void 0 : _prompts$promptCards6.length) > 0 ? `\\n\\n🎯 적용된 프롬프트: ${prompts.promptCards.map(p => p.category).join(\", \")}` : \"\\n\\n📝 기본 프롬프트 사용\";\n  return result + promptInfo + (userRequest ? `\\n💡 \"${userRequest}\" 요청 반영` : \"\");\n};\n\n// 간단한 키워드 추출\nconst extractMainKeywords = content => {\n  const keywords = [\"AI\", \"인공지능\", \"반도체\", \"전기차\", \"배터리\", \"투자\", \"매출\", \"수익\", \"기술\", \"혁신\", \"디지털\", \"플랫폼\", \"서비스\", \"글로벌\", \"확장\"];\n  return keywords.filter(keyword => content.includes(keyword.toLowerCase()));\n};\n\n// 간단한 회사명 추출\nconst extractCompany = content => {\n  const companies = [\"삼성\", \"lg\", \"sk\", \"현대\", \"포스코\", \"네이버\", \"카카오\", \"태광산업\"];\n  return companies.find(company => content.includes(company)) || null;\n};\n\n// 간단한 액션 추출\nconst extractAction = content => {\n  const actions = [{\n    keywords: [\"출시\", \"발표\"],\n    action: \"출시\"\n  }, {\n    keywords: [\"투자\", \"인수\"],\n    action: \"투자\"\n  }, {\n    keywords: [\"확장\", \"진출\"],\n    action: \"확장\"\n  }, {\n    keywords: [\"개발\", \"연구\"],\n    action: \"개발\"\n  }];\n  const found = actions.find(actionGroup => actionGroup.keywords.some(keyword => content.includes(keyword)));\n  return found ? found.action : \"추진\";\n};\nexport const generateAPI = {\n  // 핵심 제목 생성 함수\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작:\", {\n      projectId,\n      articleLength: articleContent.length\n    });\n    try {\n      // 1. 실제 프롬프트 데이터 조회 (S3/DynamoDB)\n      const prompts = await promptCardAPI.getPromptCards(projectId, true);\n      if (IS_MOCK_MODE) {\n        var _prompts$promptCards7;\n        // 2. Mock: 실제 프롬프트 기반 시뮬레이션\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 2초 지연\n        const result = await simulateClaudeResponse(articleContent, prompts, userRequest);\n        return {\n          success: true,\n          result,\n          mode: \"mock_with_real_prompts\",\n          promptCount: ((_prompts$promptCards7 = prompts.promptCards) === null || _prompts$promptCards7 === void 0 ? void 0 : _prompts$promptCards7.length) || 0,\n          timestamp: new Date().toISOString()\n        };\n      } else {\n        // 3. 실제: Bedrock Claude 호출\n        const response = await api.post(`/projects/${projectId}/generate`, {\n          article: articleContent,\n          userRequest,\n          useStepFunction: false\n        });\n        return response.data;\n      }\n    } catch (error) {\n      console.error(\"❌ 제목 생성 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// =============================================================================\n// 4. 통합 오케스트레이션 API (단순화)\n// =============================================================================\nexport const orchestrationAPI = {\n  executeOrchestration: async (projectId, articleContent, config = {}, userRequest = \"\") => {\n    console.log(\"🎯 오케스트레이션 실행:\", {\n      projectId,\n      userRequest\n    });\n    return await generateAPI.generateTitle(projectId, articleContent, userRequest);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","IS_MOCK_MODE","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","message","Promise","reject","projectAPI","getProjects","projects","projectId","name","description","category","createdAt","get","data","getProject","promptCardAPI","getPromptCards","includeContent","params","include_content","count","updatePromptCard","promptId","promptData","put","simulateClaudeResponse","articleContent","prompts","userRequest","_prompts$promptCards","_prompts$promptCards2","_prompts$promptCards3","_prompts$promptCards4","_prompts$promptCards5","_prompts$promptCards6","promptCards","length","rolePrompt","find","p","prompt_text","knowledgePrompt","substring","article","toLowerCase","titles","keywords","extractMainKeywords","company","extractCompany","action","extractAction","slice","push","finalTitles","result","map","title","i","join","promptInfo","content","filter","keyword","includes","companies","actions","found","actionGroup","some","generateAPI","generateTitle","articleLength","_prompts$promptCards7","resolve","setTimeout","success","mode","promptCount","timestamp","Date","toISOString","post","useStepFunction","orchestrationAPI","executeOrchestration"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\nconst IS_MOCK_MODE = true; // 개발용 - 실제 배포 시 false로 변경\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n});\n\n// 요청 인터셉터 (인증 비활성화 상태)\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류:\", error.response?.status, error.message);\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 1. 프로젝트 API (기본 CRUD만)\n// =============================================================================\nexport const projectAPI = {\n  getProjects: async () => {\n    if (IS_MOCK_MODE) {\n      return {\n        projects: [\n          {\n            projectId: \"6cbf88e5-e295-4377-9075-be0fc469704e\",\n            name: \"서울경제신문 AI 제목 생성 시스템\",\n            description: \"뉴스 기사 제목 자동 생성을 위한 AI 시스템\",\n            category: \"news\",\n            createdAt: \"2024-01-15T10:00:00Z\",\n            status: \"active\",\n          },\n        ],\n      };\n    }\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    if (IS_MOCK_MODE) {\n      return {\n        projectId,\n        name: \"서울경제신문 AI 제목 생성 시스템\",\n        description: \"뉴스 기사 제목 자동 생성을 위한 AI 시스템\",\n        category: \"news\",\n        status: \"active\",\n      };\n    }\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회 - 실제 API 사용\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회 시작:\", projectId);\n\n    try {\n      // 실제 API 호출 (이미 작동하고 있음)\n      const params = includeContent ? { include_content: \"true\" } : {};\n      const response = await api.get(`/prompts/${projectId}`, { params });\n\n      console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n      return response.data;\n    } catch (error) {\n      console.error(\"❌ 프롬프트 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 프롬프트 카드 수정 - 실제 S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정:\", { projectId, promptId });\n\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 3. 제목 생성 API (핵심 플로우)\n// =============================================================================\n\n// Bedrock Claude 스타일 응답 시뮬레이션 (실제 프롬프트 기반)\nconst simulateClaudeResponse = async (\n  articleContent,\n  prompts,\n  userRequest = \"\"\n) => {\n  console.log(\"🧠 Claude 시뮬레이션 시작\");\n  console.log(\"📝 프롬프트 개수:\", prompts.promptCards?.length || 0);\n\n  // 실제 프롬프트 내용 활용\n  const rolePrompt =\n    prompts.promptCards?.find((p) => p.category === \"instruction\")\n      ?.prompt_text || \"당신은 서울경제신문의 전문 제목 생성 AI입니다.\";\n\n  const knowledgePrompt =\n    prompts.promptCards?.find((p) => p.category === \"knowledge\")?.prompt_text ||\n    \"경제 기사 제목 작성 전문가로서 독자의 관심을 끄는 제목을 생성합니다.\";\n\n  console.log(\"🎯 사용할 역할 프롬프트:\", rolePrompt.substring(0, 100) + \"...\");\n\n  // 기사 내용 기반 간단한 제목 생성\n  const article = articleContent.toLowerCase();\n  const titles = [];\n\n  // 기사에서 주요 키워드 추출 (간단한 방식)\n  const keywords = extractMainKeywords(article);\n  const company = extractCompany(article);\n  const action = extractAction(article);\n\n  console.log(\"🔑 추출된 정보:\", {\n    company,\n    action,\n    keywords: keywords.slice(0, 3),\n  });\n\n  // 제목 생성 (실제 프롬프트 스타일 반영)\n  if (company && action) {\n    titles.push(`${company} ${action}`);\n    titles.push(`${company}, ${action} 나서`);\n    titles.push(`${company}의 ${action} 전략`);\n  }\n\n  if (keywords.length > 0) {\n    titles.push(`${keywords[0]} 중심 ${action || \"전략\"} 주목`);\n    titles.push(`${company || \"기업\"} ${keywords[0]} 강화`);\n  }\n\n  // 기본 제목들\n  if (titles.length < 3) {\n    titles.push(\"경제 동향 주목\", \"시장 변화 예고\", \"업계 이목 집중\");\n  }\n\n  const finalTitles = titles.slice(0, 5);\n  const result = finalTitles.map((title, i) => `${i + 1}. ${title}`).join(\"\\n\");\n\n  const promptInfo =\n    prompts.promptCards?.length > 0\n      ? `\\n\\n🎯 적용된 프롬프트: ${prompts.promptCards\n          .map((p) => p.category)\n          .join(\", \")}`\n      : \"\\n\\n📝 기본 프롬프트 사용\";\n\n  return (\n    result + promptInfo + (userRequest ? `\\n💡 \"${userRequest}\" 요청 반영` : \"\")\n  );\n};\n\n// 간단한 키워드 추출\nconst extractMainKeywords = (content) => {\n  const keywords = [\n    \"AI\",\n    \"인공지능\",\n    \"반도체\",\n    \"전기차\",\n    \"배터리\",\n    \"투자\",\n    \"매출\",\n    \"수익\",\n    \"기술\",\n    \"혁신\",\n    \"디지털\",\n    \"플랫폼\",\n    \"서비스\",\n    \"글로벌\",\n    \"확장\",\n  ];\n  return keywords.filter((keyword) => content.includes(keyword.toLowerCase()));\n};\n\n// 간단한 회사명 추출\nconst extractCompany = (content) => {\n  const companies = [\n    \"삼성\",\n    \"lg\",\n    \"sk\",\n    \"현대\",\n    \"포스코\",\n    \"네이버\",\n    \"카카오\",\n    \"태광산업\",\n  ];\n  return companies.find((company) => content.includes(company)) || null;\n};\n\n// 간단한 액션 추출\nconst extractAction = (content) => {\n  const actions = [\n    { keywords: [\"출시\", \"발표\"], action: \"출시\" },\n    { keywords: [\"투자\", \"인수\"], action: \"투자\" },\n    { keywords: [\"확장\", \"진출\"], action: \"확장\" },\n    { keywords: [\"개발\", \"연구\"], action: \"개발\" },\n  ];\n\n  const found = actions.find((actionGroup) =>\n    actionGroup.keywords.some((keyword) => content.includes(keyword))\n  );\n  return found ? found.action : \"추진\";\n};\n\nexport const generateAPI = {\n  // 핵심 제목 생성 함수\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작:\", {\n      projectId,\n      articleLength: articleContent.length,\n    });\n\n    try {\n      // 1. 실제 프롬프트 데이터 조회 (S3/DynamoDB)\n      const prompts = await promptCardAPI.getPromptCards(projectId, true);\n\n      if (IS_MOCK_MODE) {\n        // 2. Mock: 실제 프롬프트 기반 시뮬레이션\n        await new Promise((resolve) => setTimeout(resolve, 2000)); // 2초 지연\n        const result = await simulateClaudeResponse(\n          articleContent,\n          prompts,\n          userRequest\n        );\n\n        return {\n          success: true,\n          result,\n          mode: \"mock_with_real_prompts\",\n          promptCount: prompts.promptCards?.length || 0,\n          timestamp: new Date().toISOString(),\n        };\n      } else {\n        // 3. 실제: Bedrock Claude 호출\n        const response = await api.post(`/projects/${projectId}/generate`, {\n          article: articleContent,\n          userRequest,\n          useStepFunction: false,\n        });\n\n        return response.data;\n      }\n    } catch (error) {\n      console.error(\"❌ 제목 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 4. 통합 오케스트레이션 API (단순화)\n// =============================================================================\nexport const orchestrationAPI = {\n  executeOrchestration: async (\n    projectId,\n    articleContent,\n    config = {},\n    userRequest = \"\"\n  ) => {\n    console.log(\"🎯 오케스트레이션 실행:\", { projectId, userRequest });\n\n    return await generateAPI.generateTitle(\n      projectId,\n      articleContent,\n      userRequest\n    );\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}