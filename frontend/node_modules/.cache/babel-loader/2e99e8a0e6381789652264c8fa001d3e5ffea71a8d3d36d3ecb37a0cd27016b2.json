{"ast":null,"code":"import { PinpointEventBuffer } from './PinpointEventBuffer.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Map of buffers by region -> appId\nconst eventBufferMap = {};\n/**\n * Returns a PinpointEventBuffer instance for the specified region & app ID, creating one if it does not yet exist.\n *\n * @internal\n */\nconst getEventBuffer = _ref => {\n  let {\n    appId,\n    region,\n    credentials,\n    bufferSize,\n    flushInterval,\n    flushSize,\n    resendLimit,\n    identityId,\n    userAgentValue\n  } = _ref;\n  if (eventBufferMap[region]?.[appId]) {\n    const buffer = eventBufferMap[region][appId];\n    /*\n    If the identity or credentials has changed flush out the buffer and create a new instance. The old instance will be garbage\n    collected.\n    */\n    const shouldFlushBuffer = buffer.identityHasChanged(identityId) || buffer.haveCredentialsChanged(credentials);\n    if (shouldFlushBuffer) {\n      buffer.flush();\n    } else {\n      return buffer;\n    }\n  }\n  const buffer = new PinpointEventBuffer({\n    appId,\n    bufferSize,\n    credentials,\n    flushInterval,\n    flushSize,\n    identityId,\n    region,\n    resendLimit,\n    userAgentValue\n  });\n  if (!eventBufferMap[region]) {\n    eventBufferMap[region] = {};\n  }\n  eventBufferMap[region][appId] = buffer;\n  return buffer;\n};\nexport { getEventBuffer };","map":{"version":3,"names":["eventBufferMap","getEventBuffer","_ref","appId","region","credentials","bufferSize","flushInterval","flushSize","resendLimit","identityId","userAgentValue","buffer","shouldFlushBuffer","identityHasChanged","haveCredentialsChanged","flush","PinpointEventBuffer"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/node_modules/@aws-amplify/core/src/providers/pinpoint/utils/getEventBuffer.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { PinpointEventBuffer } from './PinpointEventBuffer';\n// Map of buffers by region -> appId\nconst eventBufferMap = {};\n/**\n * Returns a PinpointEventBuffer instance for the specified region & app ID, creating one if it does not yet exist.\n *\n * @internal\n */\nexport const getEventBuffer = ({ appId, region, credentials, bufferSize, flushInterval, flushSize, resendLimit, identityId, userAgentValue, }) => {\n    if (eventBufferMap[region]?.[appId]) {\n        const buffer = eventBufferMap[region][appId];\n        /*\n        If the identity or credentials has changed flush out the buffer and create a new instance. The old instance will be garbage\n        collected.\n        */\n        const shouldFlushBuffer = buffer.identityHasChanged(identityId) ||\n            buffer.haveCredentialsChanged(credentials);\n        if (shouldFlushBuffer) {\n            buffer.flush();\n        }\n        else {\n            return buffer;\n        }\n    }\n    const buffer = new PinpointEventBuffer({\n        appId,\n        bufferSize,\n        credentials,\n        flushInterval,\n        flushSize,\n        identityId,\n        region,\n        resendLimit,\n        userAgentValue,\n    });\n    if (!eventBufferMap[region]) {\n        eventBufferMap[region] = {};\n    }\n    eventBufferMap[region][appId] = buffer;\n    return buffer;\n};\n"],"mappings":";;AAAA;AACA;AAEA;AACA,MAAMA,cAAc,GAAG,EAAE;AACzB;AACA;AACA;AACA;AACA;AACY,MAACC,cAAc,GAAGC,IAAA,IAAoH;EAAA,IAAnH;IAAEC,KAAK;IAAEC,MAAM;IAAEC,WAAW;IAAEC,UAAU;IAAEC,aAAa;IAAEC,SAAS;IAAEC,WAAW;IAAEC,UAAU;IAAEC;EAAc,CAAG,GAAAT,IAAA;EACzI,IAAIF,cAAc,CAACI,MAAM,CAAC,GAAGD,KAAK,CAAC,EAAE;IACjC,MAAMS,MAAM,GAAGZ,cAAc,CAACI,MAAM,CAAC,CAACD,KAAK,CAAC;IACpD;AACA;AACA;AACA;IACQ,MAAMU,iBAAiB,GAAGD,MAAM,CAACE,kBAAkB,CAACJ,UAAU,CAAC,IAC3DE,MAAM,CAACG,sBAAsB,CAACV,WAAW,CAAC;IAC9C,IAAIQ,iBAAiB,EAAE;MACnBD,MAAM,CAACI,KAAK,EAAE;IAC1B,OACa;MACD,OAAOJ,MAAM;IACzB;EACA;EACI,MAAMA,MAAM,GAAG,IAAIK,mBAAmB,CAAC;IACnCd,KAAK;IACLG,UAAU;IACVD,WAAW;IACXE,aAAa;IACbC,SAAS;IACTE,UAAU;IACVN,MAAM;IACNK,WAAW;IACXE;EACR,CAAK,CAAC;EACF,IAAI,CAACX,cAAc,CAACI,MAAM,CAAC,EAAE;IACzBJ,cAAc,CAACI,MAAM,CAAC,GAAG,EAAE;EACnC;EACIJ,cAAc,CAACI,MAAM,CAAC,CAACD,KAAK,CAAC,GAAGS,MAAM;EACtC,OAAOA,MAAM;AACjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}