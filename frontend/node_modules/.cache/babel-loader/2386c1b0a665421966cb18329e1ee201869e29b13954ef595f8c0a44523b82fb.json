{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from \"react\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { projectAPI, handleAPIError } from \"../services/api\";\nimport { toast } from \"react-hot-toast\";\nexport const useProjects = () => {\n  _s();\n  const {\n    state,\n    actions\n  } = useApp();\n\n  // 프로젝트 목록 로드\n  const loadProjects = useCallback(async () => {\n    try {\n      actions.setLoading(true);\n      const data = await projectAPI.getProjects();\n      actions.setProjects(data.projects || []);\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n    }\n  }, [actions]);\n\n  // 프로젝트 생성\n  const createProject = useCallback(async projectData => {\n    try {\n      actions.setLoading(true);\n      const newProject = await projectAPI.createProject(projectData);\n      actions.addProject(newProject);\n      toast.success(\"프로젝트가 생성되었습니다\");\n      return newProject;\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n      throw error;\n    }\n  }, [actions]);\n\n  // 프로젝트 조회\n  const getProject = useCallback(async projectId => {\n    try {\n      actions.setLoading(true);\n      const project = await projectAPI.getProject(projectId);\n      actions.setCurrentProject(project);\n      return project;\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n      throw error;\n    }\n  }, [actions]);\n\n  // 프로젝트 삭제\n  const deleteProject = useCallback(async projectId => {\n    try {\n      actions.setLoading(true);\n      await projectAPI.deleteProject(projectId);\n      actions.removeProject(projectId);\n      toast.success(\"프로젝트가 삭제되었습니다\");\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n    }\n  }, [actions]);\n  return {\n    projects: state.projects,\n    currentProject: state.currentProject,\n    loading: state.loading,\n    error: state.error,\n    loadProjects,\n    createProject,\n    getProject,\n    deleteProject\n  };\n};\n_s(useProjects, \"grL3gZ5SOoeY6umrcvZq4+QKhIQ=\", false, function () {\n  return [useApp];\n});","map":{"version":3,"names":["useCallback","useApp","projectAPI","handleAPIError","toast","useProjects","_s","state","actions","loadProjects","setLoading","data","getProjects","setProjects","projects","error","errorInfo","setError","message","createProject","projectData","newProject","addProject","success","getProject","projectId","project","setCurrentProject","deleteProject","removeProject","currentProject","loading"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useProjects.js"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { projectAPI, handleAPIError } from \"../services/api\";\nimport { toast } from \"react-hot-toast\";\n\nexport const useProjects = () => {\n  const { state, actions } = useApp();\n\n  // 프로젝트 목록 로드\n  const loadProjects = useCallback(async () => {\n    try {\n      actions.setLoading(true);\n      const data = await projectAPI.getProjects();\n      actions.setProjects(data.projects || []);\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n    }\n  }, [actions]);\n\n  // 프로젝트 생성\n  const createProject = useCallback(\n    async (projectData) => {\n      try {\n        actions.setLoading(true);\n        const newProject = await projectAPI.createProject(projectData);\n        actions.addProject(newProject);\n        toast.success(\"프로젝트가 생성되었습니다\");\n        return newProject;\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n        throw error;\n      }\n    },\n    [actions]\n  );\n\n  // 프로젝트 조회\n  const getProject = useCallback(\n    async (projectId) => {\n      try {\n        actions.setLoading(true);\n        const project = await projectAPI.getProject(projectId);\n        actions.setCurrentProject(project);\n        return project;\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n        throw error;\n      }\n    },\n    [actions]\n  );\n\n  // 프로젝트 삭제\n  const deleteProject = useCallback(\n    async (projectId) => {\n      try {\n        actions.setLoading(true);\n        await projectAPI.deleteProject(projectId);\n        actions.removeProject(projectId);\n        toast.success(\"프로젝트가 삭제되었습니다\");\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n      }\n    },\n    [actions]\n  );\n\n  return {\n    projects: state.projects,\n    currentProject: state.currentProject,\n    loading: state.loading,\n    error: state.error,\n    loadProjects,\n    createProject,\n    getProject,\n    deleteProject,\n  };\n};\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,UAAU,EAAEC,cAAc,QAAQ,iBAAiB;AAC5D,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGP,MAAM,CAAC,CAAC;;EAEnC;EACA,MAAMQ,YAAY,GAAGT,WAAW,CAAC,YAAY;IAC3C,IAAI;MACFQ,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MACxB,MAAMC,IAAI,GAAG,MAAMT,UAAU,CAACU,WAAW,CAAC,CAAC;MAC3CJ,OAAO,CAACK,WAAW,CAACF,IAAI,CAACG,QAAQ,IAAI,EAAE,CAAC;IAC1C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMC,SAAS,GAAGb,cAAc,CAACY,KAAK,CAAC;MACvCP,OAAO,CAACS,QAAQ,CAACD,SAAS,CAACE,OAAO,CAAC;MACnCd,KAAK,CAACW,KAAK,CAACC,SAAS,CAACE,OAAO,CAAC;IAChC;EACF,CAAC,EAAE,CAACV,OAAO,CAAC,CAAC;;EAEb;EACA,MAAMW,aAAa,GAAGnB,WAAW,CAC/B,MAAOoB,WAAW,IAAK;IACrB,IAAI;MACFZ,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MACxB,MAAMW,UAAU,GAAG,MAAMnB,UAAU,CAACiB,aAAa,CAACC,WAAW,CAAC;MAC9DZ,OAAO,CAACc,UAAU,CAACD,UAAU,CAAC;MAC9BjB,KAAK,CAACmB,OAAO,CAAC,eAAe,CAAC;MAC9B,OAAOF,UAAU;IACnB,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,MAAMC,SAAS,GAAGb,cAAc,CAACY,KAAK,CAAC;MACvCP,OAAO,CAACS,QAAQ,CAACD,SAAS,CAACE,OAAO,CAAC;MACnCd,KAAK,CAACW,KAAK,CAACC,SAAS,CAACE,OAAO,CAAC;MAC9B,MAAMH,KAAK;IACb;EACF,CAAC,EACD,CAACP,OAAO,CACV,CAAC;;EAED;EACA,MAAMgB,UAAU,GAAGxB,WAAW,CAC5B,MAAOyB,SAAS,IAAK;IACnB,IAAI;MACFjB,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MACxB,MAAMgB,OAAO,GAAG,MAAMxB,UAAU,CAACsB,UAAU,CAACC,SAAS,CAAC;MACtDjB,OAAO,CAACmB,iBAAiB,CAACD,OAAO,CAAC;MAClC,OAAOA,OAAO;IAChB,CAAC,CAAC,OAAOX,KAAK,EAAE;MACd,MAAMC,SAAS,GAAGb,cAAc,CAACY,KAAK,CAAC;MACvCP,OAAO,CAACS,QAAQ,CAACD,SAAS,CAACE,OAAO,CAAC;MACnCd,KAAK,CAACW,KAAK,CAACC,SAAS,CAACE,OAAO,CAAC;MAC9B,MAAMH,KAAK;IACb;EACF,CAAC,EACD,CAACP,OAAO,CACV,CAAC;;EAED;EACA,MAAMoB,aAAa,GAAG5B,WAAW,CAC/B,MAAOyB,SAAS,IAAK;IACnB,IAAI;MACFjB,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;MACxB,MAAMR,UAAU,CAAC0B,aAAa,CAACH,SAAS,CAAC;MACzCjB,OAAO,CAACqB,aAAa,CAACJ,SAAS,CAAC;MAChCrB,KAAK,CAACmB,OAAO,CAAC,eAAe,CAAC;IAChC,CAAC,CAAC,OAAOR,KAAK,EAAE;MACd,MAAMC,SAAS,GAAGb,cAAc,CAACY,KAAK,CAAC;MACvCP,OAAO,CAACS,QAAQ,CAACD,SAAS,CAACE,OAAO,CAAC;MACnCd,KAAK,CAACW,KAAK,CAACC,SAAS,CAACE,OAAO,CAAC;IAChC;EACF,CAAC,EACD,CAACV,OAAO,CACV,CAAC;EAED,OAAO;IACLM,QAAQ,EAAEP,KAAK,CAACO,QAAQ;IACxBgB,cAAc,EAAEvB,KAAK,CAACuB,cAAc;IACpCC,OAAO,EAAExB,KAAK,CAACwB,OAAO;IACtBhB,KAAK,EAAER,KAAK,CAACQ,KAAK;IAClBN,YAAY;IACZU,aAAa;IACbK,UAAU;IACVI;EACF,CAAC;AACH,CAAC;AAACtB,EAAA,CAhFWD,WAAW;EAAA,QACKJ,MAAM;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}