{"ast":null,"code":"import{useState,useCallback}from\"react\";import{toast}from\"react-hot-toast\";import{generateAPI}from\"../services/api\";/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */export const useOrchestration=projectId=>{const[isExecuting,setIsExecuting]=useState(false);const[currentExecution,setCurrentExecution]=useState(null);const[executionStatus,setExecutionStatus]=useState(null);const[isStreaming,setIsStreaming]=useState(false);/**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history, useStreaming)\n   * @returns {Promise<Object>} - 생성 결과\n   */const executeOrchestration=useCallback(async function(userInput){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!userInput.trim()){toast.error(\"메시지를 입력해주세요.\");return null;}try{setIsExecuting(true);setExecutionStatus(\"STARTING\");// chat_history, prompt_cards, userInput, modelId를 포함하는 data 객체 생성\nconst data={userInput:userInput,chat_history:options.chat_history||[],prompt_cards:options.prompt_cards||[],modelId:options.modelId||null};console.log(\"🚀 대화 생성 요청 시작:\",{projectId,inputLength:userInput.length,historyLength:data.chat_history.length,promptCardsCount:data.prompt_cards.length,useStreaming:options.useStreaming===true,modelId:data.modelId,timestamp:new Date().toISOString()});// 🔧 스트리밍 사용 여부 확인 - 더 안전한 로직\nif(options.useStreaming===true){setIsStreaming(true);// 스트리밍 콜백 함수 설정\nconst onChunk=options.onChunk||(()=>{});const onError=error=>{var _error$message,_error$message2,_error$message3,_error$message4;console.error(\"🔧 스트리밍 오류 처리:\",error);setIsExecuting(false);setIsStreaming(false);setExecutionStatus(\"FAILED\");// 🔧 개선: 오류 타입에 따른 적절한 메시지\nif((_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes(\"Gateway Timeout\")||(_error$message2=error.message)!==null&&_error$message2!==void 0&&_error$message2.includes(\"504\")||error.code===\"ECONNABORTED\"){toast.error(\"서버 응답 시간이 초과되었습니다. 요청을 간단히 하거나 잠시 후 다시 시도해주세요.\");}else if((_error$message3=error.message)!==null&&_error$message3!==void 0&&_error$message3.includes(\"CORS\")||(_error$message4=error.message)!==null&&_error$message4!==void 0&&_error$message4.includes(\"Network Error\")){toast.error(\"서버 연결에 문제가 있습니다. 새로고침 후 다시 시도해주세요.\");}else{toast.error(\"처리 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\");}if(options.onError)options.onError(error);};const onComplete=response=>{var _response$result;console.log(\"✅ 스트리밍 완료:\",{resultLength:((_response$result=response.result)===null||_response$result===void 0?void 0:_response$result.length)||0,timestamp:new Date().toISOString()});setIsExecuting(false);setIsStreaming(false);setExecutionStatus(\"COMPLETED\");if(options.onComplete)options.onComplete(response);};try{// 🔧 개선: 스트리밍 API 호출 (내부에서 폴백 처리됨)\nreturn await generateAPI.generateTitleStream(projectId,data,onChunk,onError,onComplete);}catch(streamError){console.error(\"🔧 스트리밍 최종 실패:\",streamError);// 🔧 스트리밍 완전 실패 시에도 폴백이 내부에서 처리되므로\n// 여기서는 사용자에게 알림만\nsetIsStreaming(false);setIsExecuting(false);setExecutionStatus(\"FAILED\");// 최종 실패 메시지\ntoast.error(\"서비스에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\");throw streamError;}}// 🔧 일반 API 호출 (스트리밍 미사용)\nconsole.log(\"📄 일반 API 호출 시작...\");const response=await generateAPI.generateTitle(projectId,data);console.log(\"✅ 대화 생성 완료:\",{mode:response.mode,message:response.message,timestamp:new Date().toISOString()});setIsExecuting(false);setExecutionStatus(\"COMPLETED\");return response;}catch(error){var _error$response,_error$response2,_error$message5,_error$response3,_error$response4,_error$response4$data,_error$response5,_error$response6,_error$response7;console.error(\"❌ 제목 생성 실패:\",{error:error.message,code:error.code,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,timestamp:new Date().toISOString()});setIsExecuting(false);setIsStreaming(false);setExecutionStatus(\"FAILED\");// 🔧 개선: 상세한 오류 처리\nif(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===504){toast.error(\"서버 응답 시간이 초과되었습니다. 입력을 간소화하거나 잠시 후 다시 시도해주세요.\");}else if((_error$message5=error.message)!==null&&_error$message5!==void 0&&_error$message5.includes(\"CORS\")||error.code===\"ERR_NETWORK\"){toast.error(\"서버 연결에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\");}else if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===400&&(_error$response4=error.response)!==null&&_error$response4!==void 0&&(_error$response4$data=_error$response4.data)!==null&&_error$response4$data!==void 0&&_error$response4$data.setup_required){toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");}else if(error.code===\"ECONNABORTED\"){toast.error(\"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\");}else if(((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.status)===500){toast.error(\"서버에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\");}else if(((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.status)===403){toast.error(\"권한이 없습니다. 로그인 상태를 확인해주세요.\");}else if(((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.status)===429){toast.error(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");}else{toast.error(\"처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\");}throw error;}},[projectId]);/**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */const pollOrchestrationResult=useCallback(async(executionArn,onComplete,onError)=>{// 스트리밍 모드에서는 폴링이 필요 없음\nif(isStreaming){return;}const poll=async()=>{try{const result=await generateAPI.getExecutionStatus(executionArn);setExecutionStatus(result.status);if(result.status===\"SUCCEEDED\"){setIsExecuting(false);setExecutionStatus(\"COMPLETED\");if(onComplete){onComplete(result);}}else if(result.status===\"FAILED\"){setIsExecuting(false);setExecutionStatus(\"FAILED\");if(onError){onError(new Error(\"처리 실패\"));}}else if(result.status===\"RUNNING\"){// 3초 후 다시 폴링\nsetTimeout(poll,3000);}}catch(error){console.error(\"실행 상태 조회 실패:\",error);setIsExecuting(false);setExecutionStatus(\"FAILED\");if(onError){onError(error);}}};poll();},[projectId,isStreaming]);/**\n   * 오케스트레이션 상태 초기화\n   */const resetOrchestration=useCallback(()=>{setIsExecuting(false);setIsStreaming(false);setCurrentExecution(null);setExecutionStatus(null);},[]);return{isExecuting,isStreaming,currentExecution,executionStatus,executeOrchestration,pollOrchestrationResult,resetOrchestration};};","map":{"version":3,"names":["useState","useCallback","toast","generateAPI","useOrchestration","projectId","isExecuting","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","isStreaming","setIsStreaming","executeOrchestration","userInput","options","arguments","length","undefined","trim","error","data","chat_history","prompt_cards","modelId","console","log","inputLength","historyLength","promptCardsCount","useStreaming","timestamp","Date","toISOString","onChunk","onError","_error$message","_error$message2","_error$message3","_error$message4","message","includes","code","onComplete","response","_response$result","resultLength","result","generateTitleStream","streamError","generateTitle","mode","_error$response","_error$response2","_error$message5","_error$response3","_error$response4","_error$response4$data","_error$response5","_error$response6","_error$response7","status","setup_required","pollOrchestrationResult","executionArn","poll","getExecutionStatus","Error","setTimeout","resetOrchestration"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useOrchestration.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history, useStreaming)\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(\n    async (userInput, options = {}) => {\n      if (!userInput.trim()) {\n        toast.error(\"메시지를 입력해주세요.\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        // chat_history, prompt_cards, userInput, modelId를 포함하는 data 객체 생성\n        const data = {\n          userInput: userInput,\n          chat_history: options.chat_history || [],\n          prompt_cards: options.prompt_cards || [],\n          modelId: options.modelId || null,\n        };\n\n        console.log(\"🚀 대화 생성 요청 시작:\", {\n          projectId,\n          inputLength: userInput.length,\n          historyLength: data.chat_history.length,\n          promptCardsCount: data.prompt_cards.length,\n          useStreaming: options.useStreaming === true,\n          modelId: data.modelId,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 🔧 스트리밍 사용 여부 확인 - 더 안전한 로직\n        if (options.useStreaming === true) {\n          setIsStreaming(true);\n\n          // 스트리밍 콜백 함수 설정\n          const onChunk = options.onChunk || (() => {});\n          const onError = (error) => {\n            console.error(\"🔧 스트리밍 오류 처리:\", error);\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 🔧 개선: 오류 타입에 따른 적절한 메시지\n            if (\n              error.message?.includes(\"Gateway Timeout\") ||\n              error.message?.includes(\"504\") ||\n              error.code === \"ECONNABORTED\"\n            ) {\n              toast.error(\n                \"서버 응답 시간이 초과되었습니다. 요청을 간단히 하거나 잠시 후 다시 시도해주세요.\"\n              );\n            } else if (\n              error.message?.includes(\"CORS\") ||\n              error.message?.includes(\"Network Error\")\n            ) {\n              toast.error(\n                \"서버 연결에 문제가 있습니다. 새로고침 후 다시 시도해주세요.\"\n              );\n            } else {\n              toast.error(\n                \"처리 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\"\n              );\n            }\n\n            if (options.onError) options.onError(error);\n          };\n\n          const onComplete = (response) => {\n            console.log(\"✅ 스트리밍 완료:\", {\n              resultLength: response.result?.length || 0,\n              timestamp: new Date().toISOString(),\n            });\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"COMPLETED\");\n            if (options.onComplete) options.onComplete(response);\n          };\n\n          try {\n            // 🔧 개선: 스트리밍 API 호출 (내부에서 폴백 처리됨)\n            return await generateAPI.generateTitleStream(\n              projectId,\n              data,\n              onChunk,\n              onError,\n              onComplete\n            );\n          } catch (streamError) {\n            console.error(\"🔧 스트리밍 최종 실패:\", streamError);\n\n            // 🔧 스트리밍 완전 실패 시에도 폴백이 내부에서 처리되므로\n            // 여기서는 사용자에게 알림만\n            setIsStreaming(false);\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 최종 실패 메시지\n            toast.error(\n              \"서비스에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n            );\n            throw streamError;\n          }\n        }\n\n        // 🔧 일반 API 호출 (스트리밍 미사용)\n        console.log(\"📄 일반 API 호출 시작...\");\n        const response = await generateAPI.generateTitle(projectId, data);\n\n        console.log(\"✅ 대화 생성 완료:\", {\n          mode: response.mode,\n          message: response.message,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setExecutionStatus(\"COMPLETED\");\n\n        return response;\n      } catch (error) {\n        console.error(\"❌ 제목 생성 실패:\", {\n          error: error.message,\n          code: error.code,\n          status: error.response?.status,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setIsStreaming(false);\n        setExecutionStatus(\"FAILED\");\n\n        // 🔧 개선: 상세한 오류 처리\n        if (error.response?.status === 504) {\n          toast.error(\n            \"서버 응답 시간이 초과되었습니다. 입력을 간소화하거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (\n          error.message?.includes(\"CORS\") ||\n          error.code === \"ERR_NETWORK\"\n        ) {\n          toast.error(\n            \"서버 연결에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\"\n          );\n        } else if (\n          error.response?.status === 400 &&\n          error.response?.data?.setup_required\n        ) {\n          toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");\n        } else if (error.code === \"ECONNABORTED\") {\n          toast.error(\n            \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 500) {\n          toast.error(\n            \"서버에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 403) {\n          toast.error(\"권한이 없습니다. 로그인 상태를 확인해주세요.\");\n        } else if (error.response?.status === 429) {\n          toast.error(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");\n        } else {\n          toast.error(\n            \"처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\"\n          );\n        }\n\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionArn, onComplete, onError) => {\n      // 스트리밍 모드에서는 폴링이 필요 없음\n      if (isStreaming) {\n        return;\n      }\n\n      const poll = async () => {\n        try {\n          const result = await generateAPI.getExecutionStatus(executionArn);\n\n          setExecutionStatus(result.status);\n\n          if (result.status === \"SUCCEEDED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (result.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"처리 실패\"));\n            }\n          } else if (result.status === \"RUNNING\") {\n            // 3초 후 다시 폴링\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"실행 상태 조회 실패:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId, isStreaming]\n  );\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setIsStreaming(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    isStreaming,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}