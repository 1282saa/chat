{"ast":null,"code":"import{useCallback}from\"react\";import{useApp}from\"../contexts/AppContext\";import{promptAPI,handleAPIError}from\"../services/api\";import{toast}from\"react-hot-toast\";export const usePrompts=()=>{const{state,actions}=useApp();// 프롬프트 목록 로드\nconst loadPrompts=useCallback(async projectId=>{try{actions.setLoading(true);const data=await promptAPI.getPrompts(projectId);actions.setPrompts(data.prompts||[]);}catch(error){const errorInfo=handleAPIError(error);actions.setError(errorInfo.message);toast.error(errorInfo.message);}},[actions]);// 프롬프트 생성\nconst createPrompt=useCallback(async(projectId,promptData)=>{try{actions.setLoading(true);const newPrompt=await promptAPI.createPrompt(projectId,promptData);actions.addPrompt(newPrompt);toast.success(\"프롬프트가 생성되었습니다\");return newPrompt;}catch(error){const errorInfo=handleAPIError(error);actions.setError(errorInfo.message);toast.error(errorInfo.message);throw error;}},[actions]);// 프롬프트 수정\nconst updatePrompt=useCallback(async(projectId,promptId,promptData)=>{try{actions.setLoading(true);const updatedPrompt=await promptAPI.updatePrompt(projectId,promptId,promptData);actions.updatePrompt(updatedPrompt);toast.success(\"프롬프트가 수정되었습니다\");return updatedPrompt;}catch(error){const errorInfo=handleAPIError(error);actions.setError(errorInfo.message);toast.error(errorInfo.message);throw error;}},[actions]);// 프롬프트 삭제\nconst deletePrompt=useCallback(async(projectId,promptId)=>{try{actions.setLoading(true);await promptAPI.deletePrompt(projectId,promptId);actions.removePrompt(promptId);toast.success(\"프롬프트가 삭제되었습니다\");}catch(error){const errorInfo=handleAPIError(error);actions.setError(errorInfo.message);toast.error(errorInfo.message);}},[actions]);return{prompts:state.prompts,loading:state.loading,error:state.error,loadPrompts,createPrompt,updatePrompt,deletePrompt};};","map":{"version":3,"names":["useCallback","useApp","promptAPI","handleAPIError","toast","usePrompts","state","actions","loadPrompts","projectId","setLoading","data","getPrompts","setPrompts","prompts","error","errorInfo","setError","message","createPrompt","promptData","newPrompt","addPrompt","success","updatePrompt","promptId","updatedPrompt","deletePrompt","removePrompt","loading"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/usePrompts.js"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { promptAPI, handleAPIError } from \"../services/api\";\nimport { toast } from \"react-hot-toast\";\n\nexport const usePrompts = () => {\n  const { state, actions } = useApp();\n\n  // 프롬프트 목록 로드\n  const loadPrompts = useCallback(\n    async (projectId) => {\n      try {\n        actions.setLoading(true);\n        const data = await promptAPI.getPrompts(projectId);\n        actions.setPrompts(data.prompts || []);\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n      }\n    },\n    [actions]\n  );\n\n  // 프롬프트 생성\n  const createPrompt = useCallback(\n    async (projectId, promptData) => {\n      try {\n        actions.setLoading(true);\n        const newPrompt = await promptAPI.createPrompt(projectId, promptData);\n        actions.addPrompt(newPrompt);\n        toast.success(\"프롬프트가 생성되었습니다\");\n        return newPrompt;\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n        throw error;\n      }\n    },\n    [actions]\n  );\n\n  // 프롬프트 수정\n  const updatePrompt = useCallback(\n    async (projectId, promptId, promptData) => {\n      try {\n        actions.setLoading(true);\n        const updatedPrompt = await promptAPI.updatePrompt(\n          projectId,\n          promptId,\n          promptData\n        );\n        actions.updatePrompt(updatedPrompt);\n        toast.success(\"프롬프트가 수정되었습니다\");\n        return updatedPrompt;\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n        throw error;\n      }\n    },\n    [actions]\n  );\n\n  // 프롬프트 삭제\n  const deletePrompt = useCallback(\n    async (projectId, promptId) => {\n      try {\n        actions.setLoading(true);\n        await promptAPI.deletePrompt(projectId, promptId);\n        actions.removePrompt(promptId);\n        toast.success(\"프롬프트가 삭제되었습니다\");\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n      }\n    },\n    [actions]\n  );\n\n  return {\n    prompts: state.prompts,\n    loading: state.loading,\n    error: state.error,\n    loadPrompts,\n    createPrompt,\n    updatePrompt,\n    deletePrompt,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}