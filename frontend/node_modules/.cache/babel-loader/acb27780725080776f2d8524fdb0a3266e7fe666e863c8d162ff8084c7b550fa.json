{"ast":null,"code":"import{useState,useEffect,useRef,useCallback}from\"react\";import{toast}from\"react-hot-toast\";import{copyToClipboard}from\"../utils/clipboard\";import{useOrchestration}from\"./useOrchestration\";import{useWebSocket}from\"./useWebSocket\";import{crewAPI}from\"../services/api\";import{useAuth}from\"../contexts/AuthContext\";/**\n * 멀티-에이전트 AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */const processMultiAgentResponse=result=>{if(!result){console.error(\"멀티-에이전트 응답 오류: 결과가 없습니다\",result);return{id:\"error-\"+Date.now(),type:\"assistant\",content:\"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",timestamp:new Date().toISOString(),isError:true};}// 멀티-에이전트 결과 구성\nconst agentResults=result.agentResults||{};const finalTitles=result.finalTitles||{};const tokenUsage=result.tokenUsage||0;// 에이전트별 결과를 포맷팅\nconst agentSummary=Object.keys(agentResults).map(agentType=>{const agentResult=agentResults[agentType];const titles=finalTitles[agentType]||[];return{agentType,agentName:getAgentName(agentType),result:(agentResult===null||agentResult===void 0?void 0:agentResult.content)||\"결과 없음\",titles:titles,tokenCount:(agentResult===null||agentResult===void 0?void 0:agentResult.tokenCount)||0};});// 전체 제목 목록 생성\nconst allTitles=Object.values(finalTitles).flat();return{id:\"multi-agent-\"+Date.now(),type:\"assistant\",content:formatMultiAgentContent(agentSummary,allTitles),timestamp:new Date(),// 멀티-에이전트 특화 데이터\nisMultiAgent:true,agentResults:agentSummary,allTitles:allTitles,tokenUsage:tokenUsage};};/**\n * 에이전트 타입을 한국어 이름으로 변환\n */const getAgentName=agentType=>{const agentNames={journalism:\"📰 저널리즘 충실형\",balanced:\"⚖️ 균형잡힌 후킹형\",click:\"🎯 클릭유도형\",seo:\"🔍 SEO/AEO 최적화형\",social:\"📱 소셜미디어 공유형\"};return agentNames[agentType]||`🤖 ${agentType}`;};/**\n * 멀티-에이전트 결과를 UI 표시용 텍스트로 포맷팅\n */const formatMultiAgentContent=(agentSummary,allTitles)=>{let content=\"🚀 **멀티-에이전트 분석 완료**\\n\\n\";// 전체 제목 요약\nif(allTitles.length>0){content+=\"📋 **생성된 제목 목록:**\\n\";allTitles.forEach((title,index)=>{content+=`${index+1}. ${title}\\n`;});content+=\"\\n\";}// 에이전트별 상세 결과\ncontent+=\"🔍 **에이전트별 분석 결과:**\\n\\n\";agentSummary.forEach(agent=>{content+=`### ${agent.agentName}\\n`;if(agent.titles.length>0){content+=\"**생성 제목:**\\n\";agent.titles.forEach(title=>{content+=`• ${title}\\n`;});}content+=`**토큰 사용량:** ${agent.tokenCount}개\\n\\n`;});return content;};/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */export const useChat=function(projectId,projectName){let promptCards=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let conversationId=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;const{user}=useAuth();// Add user from AuthContext\n// 디버깅 로그 (첫 번째 렌더링에만)\nconst isFirstRender=useRef(true);if(isFirstRender.current){console.log('useChat 초기화:',{projectId,projectName,promptCardsLength:promptCards===null||promptCards===void 0?void 0:promptCards.length,conversationId,userId:user===null||user===void 0?void 0:user.id});isFirstRender.current=false;}const[messages,setMessages]=useState([]);const[inputValue,setInputValue]=useState(\"\");const[copiedMessage,setCopiedMessage]=useState(null);const[canSendMessage,setCanSendMessage]=useState(true);const[inputHeight,setInputHeight]=useState(24);// 동적 높이 관리\nconst[selectedModel,setSelectedModel]=useState(\"anthropic.claude-3-5-sonnet-20241022-v2:0\");const streamingMessageIdRef=useRef(null);const currentWebSocketRef=useRef(null);const currentExecutionIdRef=useRef(null);const messagesEndRef=useRef(null);const inputRef=useRef(null);// 사용자 스크롤 상태 추적\nconst[isUserScrolling,setIsUserScrolling]=useState(false);const scrollContainerRef=useRef(null);const lastScrollTopRef=useRef(0);const{isExecuting:isGenerating,isStreaming,executeOrchestration,pollOrchestrationResult,resetOrchestration}=useOrchestration(projectId);// WebSocket 훅 추가\nconst{isConnected:wsConnected,isConnecting:wsConnecting,error:wsError,startStreaming:wsStartStreaming,addMessageListener,removeMessageListener}=useWebSocket(projectId);// 초기 메시지 설정 - projectId 변경시에만 초기화\nuseEffect(()=>{setMessages([]);// 빈 배열로 시작\n},[projectId]);// projectName 대신 projectId 사용\n// 사용자 스크롤 감지 함수\nconst handleScroll=useCallback(()=>{if(!scrollContainerRef.current)return;const container=scrollContainerRef.current;const currentScrollTop=container.scrollTop;const maxScrollTop=container.scrollHeight-container.clientHeight;// 사용자가 수동으로 스크롤했는지 감지\nif(Math.abs(currentScrollTop-lastScrollTopRef.current)>2){const isAtBottom=currentScrollTop>=maxScrollTop-20;// 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\nsetIsUserScrolling(!isAtBottom);}lastScrollTopRef.current=currentScrollTop;},[]);const scrollToBottom=useCallback(()=>{// 사용자가 스크롤 중이 아닐 때만 자동 스크롤\nif(!isUserScrolling&&messagesEndRef.current){messagesEndRef.current.scrollIntoView({behavior:\"smooth\"});}},[isUserScrolling]);// 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\nuseEffect(()=>{scrollToBottom();},[messages,scrollToBottom]);// WebSocket 메시지 리스너 설정\nuseEffect(()=>{const handleWebSocketMessage=event=>{try{const data=JSON.parse(event.data);console.log(\"WebSocket 메시지 수신:\",data);const currentStreamingId=streamingMessageIdRef.current;switch(data.type){case\"stream_start\":console.log(\"WebSocket 스트리밍 시작\");break;case\"progress\":// 진행 상황 로그만 남기고 UI 업데이트는 제거\nconsole.log(`진행 상황: ${data.step} (${data.progress}%)`);break;case\"stream_chunk\":if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);console.log(\"스트림 청크 처리:\",{currentStreamingId,streamingMsgIndex,messagesLength:prev.length,content:data.content});if(streamingMsgIndex!==-1){// 기존 내용에 새 청크 추가\nconst currentContent=updatedMessages[streamingMsgIndex].content||\"\";updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:currentContent+data.content,isLoading:true,isStreaming:true};console.log(\"메시지 업데이트됨:\",updatedMessages[streamingMsgIndex]);}else{console.log(\"스트리밍 메시지를 찾을 수 없음, 메시지 ID들:\",prev.map(m=>m.id));}return updatedMessages;});// 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\nif(!isUserScrolling){scrollToBottom();}}else{console.log(\"currentStreamingId가 null임\");}break;case\"stream_complete\":if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:data.fullContent,isLoading:false,isStreaming:false,timestamp:new Date().toISOString()};}return updatedMessages;});streamingMessageIdRef.current=null;scrollToBottom();}break;case\"error\":console.error(\"WebSocket 스트리밍 오류:\",data.message);if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:\"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",isLoading:false,isStreaming:false,isError:true,timestamp:new Date().toISOString()};}return updatedMessages;});streamingMessageIdRef.current=null;}toast.error(data.message);break;default:console.log(\"알 수 없는 WebSocket 메시지 타입:\",data.type);}}catch(error){console.error(\"WebSocket 메시지 파싱 오류:\",error);}};if(wsConnected){addMessageListener(handleWebSocketMessage);}return()=>{if(wsConnected){removeMessageListener(handleWebSocketMessage);}};},[wsConnected,addMessageListener,removeMessageListener,scrollToBottom]);/**\n   * 스트리밍 응답 처리 함수\n   */const handleStreamingResponse=useCallback((chunk,metadata)=>{const currentStreamingId=streamingMessageIdRef.current;console.log(\"청크 수신:\",chunk,\"스트리밍 ID:\",currentStreamingId);if(!currentStreamingId){console.error(\"스트리밍 ID가 없습니다!\");return;}setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){// 기존 스트리밍 메시지 업데이트\nupdatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:updatedMessages[streamingMsgIndex].content+chunk,isLoading:true,isStreaming:true};console.log(\"스트리밍 메시지 업데이트 성공:\",updatedMessages[streamingMsgIndex].content);}else{console.error(\"스트리밍 메시지를 찾을 수 없음:\",currentStreamingId);}return updatedMessages;});// 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\nif(!isUserScrolling){scrollToBottom();}},[scrollToBottom,isUserScrolling]);/**\n   * 스트리밍 완료 처리 함수\n   */const handleStreamingComplete=useCallback(result=>{const currentStreamingId=streamingMessageIdRef.current;console.log(\"스트리밍 완료:\",result,\"스트리밍 ID:\",currentStreamingId);if(!currentStreamingId){console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");return;}setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){// 스트리밍 메시지 완료 처리\nupdatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:result.result,isLoading:false,isStreaming:false,performance_metrics:result.performance_metrics,model_info:result.model_info,timestamp:new Date().toISOString()};console.log(\"스트리밍 완료 처리 성공:\",updatedMessages[streamingMsgIndex].content);}else{console.error(\"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\",currentStreamingId);}return updatedMessages;});// 스트리밍 ID 초기화\nstreamingMessageIdRef.current=null;// 입력 활성화\nconsole.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");setCanSendMessage(true);// 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\nscrollToBottom();},[scrollToBottom]);/**\n   * 스트리밍 중단 함수\n   */const handleStopGeneration=useCallback(()=>{console.log(\"생성 중단 요청\");// WebSocket 연결 종료\nif(currentWebSocketRef.current){currentWebSocketRef.current.close();currentWebSocketRef.current=null;}// 현재 실행 중인 작업 중단\nif(currentExecutionIdRef.current){// 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\ncurrentExecutionIdRef.current=null;}// 스트리밍 메시지 상태 업데이트\nconst currentStreamingId=streamingMessageIdRef.current;if(currentStreamingId){setMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===currentStreamingId);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]={...updatedMessages[streamingMsgIndex],content:updatedMessages[streamingMsgIndex].content+\"\\n\\n[생성이 중단되었습니다]\",isLoading:false,isStreaming:false,timestamp:new Date().toISOString()};}return updatedMessages;});streamingMessageIdRef.current=null;}// 입력 가능 상태로 복원\nsetCanSendMessage(true);// orchestration 상태 리셋\nresetOrchestration();toast.success(\"생성이 중단되었습니다\");},[resetOrchestration]);/**\n   * 입력창 높이 자동 조절\n   */const adjustInputHeight=useCallback(value=>{if(!value.trim()){setInputHeight(24);// 기본 높이\nreturn;}// 줄 수 계산 (대략적)\nconst lines=value.split('\\n').length;const charBasedLines=Math.ceil(value.length/80);// 80자당 1줄로 추정\nconst estimatedLines=Math.max(lines,charBasedLines);// 높이 계산 (lineHeight: 1.4, fontSize: 16px)\nlet calculatedHeight;if(estimatedLines<=3){calculatedHeight=24+(estimatedLines-1)*22;// 기본 + 추가 줄\n}else if(estimatedLines<=10){calculatedHeight=150+(estimatedLines-6)*15;// 중간 범위\n}else{calculatedHeight=Math.min(400,150+(estimatedLines-6)*12);// 최대 400px\n}setInputHeight(Math.max(24,calculatedHeight));},[]);/**\n   * 입력값 변경 처리\n   */const handleInputChange=useCallback(value=>{setInputValue(value);adjustInputHeight(value);},[adjustInputHeight]);/**\n   * 메시지 전송\n   */const handleSendMessage=useCallback(async()=>{console.log(\"해들 전송 호출:\",{inputValue:inputValue.trim(),isGenerating,canSendMessage});if(!inputValue.trim()||isGenerating){console.log(\"전송 중단: 조건 부족\");return;}// 입력 비활성화\nconsole.log(\"입력 비활성화\");setCanSendMessage(false);const userMessage={id:\"user-\"+Date.now(),type:\"user\",content:inputValue.trim(),timestamp:new Date().toISOString()};// 스트리밍 메시지 ID 생성\nconst streamMsgId=\"streaming-\"+Date.now();streamingMessageIdRef.current=streamMsgId;console.log(\"새 스트리밍 메시지 ID 생성:\",streamMsgId);// 스트리밍 응답을 위한 초기 메시지\nconst streamingMessage={id:streamMsgId,type:\"assistant\",content:\"\",timestamp:new Date().toISOString(),isLoading:true,isStreaming:true};setMessages(prev=>[...prev,userMessage,streamingMessage]);setInputValue(\"\");setInputHeight(24);// 입력창 높이 초기화\n// 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\nconst allMessages=[...messages,userMessage];const chatHistory=allMessages.filter(msg=>!msg.isLoading&&!msg.isError&&!msg.isStreaming).map(msg=>({role:msg.type===\"user\"?\"user\":\"assistant\",content:msg.content}));// 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\nconst maxHistoryLength=50;const trimmedChatHistory=chatHistory.slice(-maxHistoryLength);console.log(\"대화 히스토리 생성:\",{totalMessages:allMessages.length,fullHistoryLength:chatHistory.length,trimmedHistoryLength:trimmedChatHistory.length,maxHistoryLength:maxHistoryLength,recentHistory:trimmedChatHistory.slice(-6)// 최근 6개만 로그에 표시\n});try{// 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\nconst safePromptCards=Array.isArray(promptCards)?promptCards:[];const activePromptCards=safePromptCards.filter(card=>card.isActive!==false&&card.enabled!==false).map(card=>({promptId:card.promptId||card.prompt_id,title:card.title||\"Untitled\",prompt_text:card.prompt_text||card.content||\"\",tags:card.tags||[],isActive:card.isActive!==false,stepOrder:card.stepOrder||0})).filter(card=>card.prompt_text.trim())// 프롬프트 내용이 있는 것만\n.sort((a,b)=>(a.stepOrder||0)-(b.stepOrder||0));// stepOrder로 정렬\nconsole.log(\"대화 전송 데이터 확인:\",{messageContent:userMessage.content,chatHistoryLength:trimmedChatHistory.length,promptCardsCount:activePromptCards.length,chatHistory:trimmedChatHistory,promptCards:activePromptCards.map(card=>({id:card.promptId,title:card.title,contentLength:card.prompt_text.length,stepOrder:card.stepOrder,hasContent:!!card.prompt_text.trim()}))});// WebSocket 연결 확인 및 실시간 스트리밍 시도\nif(wsConnected){console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");console.log(\"스트리밍 매개변수 확인:\",{projectId,userInput:userMessage.content,conversationId,userSub:user===null||user===void 0?void 0:user.id,historyLength:trimmedChatHistory.length,promptCardsLength:activePromptCards.length});const success=wsStartStreaming(userMessage.content,trimmedChatHistory,activePromptCards,selectedModel,conversationId,// Add conversationId\nuser===null||user===void 0?void 0:user.id// Add userSub from AuthContext\n);if(success){// WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\nreturn;}else{console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");}}else{console.log(\"WebSocket 미연결, SSE 모드 사용\");}// 🌟 멀티-에이전트 시스템 실행\nconsole.log(\"멀티-에이전트 시스템 실행 시작\");// 1. 먼저 프롬프트 카드들을 crew 인스턴스로 생성\nif(activePromptCards.length>0){try{console.log(\"프롬프트 카드 → 크루 인스턴스 변환 시도\");await crewAPI.createCrewInstance(projectId,activePromptCards);console.log(\"크루 인스턴스 생성 완료\");}catch(instanceError){console.log(\"크루 인스턴스 생성 실패 (이미 존재하거나 기타 이유):\",instanceError.message);// 이미 생성되어 있을 수 있으므로 계속 진행\n}}// 2. 멀티-에이전트 병렬 실행\nconst multiAgentResult=await crewAPI.executeMultiAgent(projectId,userMessage.content,progress=>{// 진행상황 업데이트 (옵션)\nconsole.log(\"멀티-에이전트 진행상황:\",progress);});console.log(\"멀티-에이전트 실행 완료:\",multiAgentResult);// 3. 결과를 UI 메시지로 변환\nconst assistantMessage=processMultiAgentResponse(multiAgentResult);// 4. 스트리밍 메시지를 최종 결과로 교체\nsetMessages(prev=>{const updatedMessages=[...prev];const streamingMsgIndex=updatedMessages.findIndex(msg=>msg.id===streamingMessageIdRef.current);if(streamingMsgIndex!==-1){updatedMessages[streamingMsgIndex]=assistantMessage;}else{updatedMessages.push(assistantMessage);}return updatedMessages;});streamingMessageIdRef.current=null;setCanSendMessage(true);// 성공 토스트\ntoast.success(`${Object.keys(multiAgentResult.agentResults||{}).length}개 에이전트 분석 완료!`);}catch(error){var _error$response;console.error(\"메시지 전송 실패:\",error);// 개선된 오류 메시지\nconst errorType=error.code===\"ECONNABORTED\"?\"timeout\":\"general\";const errorMessage={id:\"error-\"+Date.now(),type:\"assistant\",content:errorType===\"timeout\"?\"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\":\"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",timestamp:new Date().toISOString(),isError:true,errorDetails:{type:errorType,message:error.message,status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status}};setMessages(prev=>{// 스트리밍 메시지를 찾아 제거\nconst currentStreamingId=streamingMessageIdRef.current;const filteredMessages=prev.filter(msg=>msg.id!==currentStreamingId);return[...filteredMessages,errorMessage];});streamingMessageIdRef.current=null;// 오류 발생 시도 입력 활성화\nsetCanSendMessage(true);}// 전체 전송 과정 완료 후 입력 활성화 (보험용)\nsetCanSendMessage(true);},[inputValue,isGenerating,executeOrchestration,handleStreamingResponse,handleStreamingComplete,messages]);/**\n   * Enter 키로 전송\n   */const handleKeyPress=useCallback(e=>{if(e.key===\"Enter\"&&!e.shiftKey){e.preventDefault();handleSendMessage();}},[handleSendMessage]);/**\n   * 메시지 복사\n   */const handleCopyMessage=useCallback(async(content,messageId)=>{const success=await copyToClipboard(content);if(success){setCopiedMessage(messageId);setTimeout(()=>setCopiedMessage(null),2000);}},[]);/**\n   * 개별 제목 복사\n   */const handleCopyTitle=useCallback(async(title,messageId,index)=>{const success=await copyToClipboard(title,\"복사되었습니다!\");if(success){setCopiedMessage(`${messageId}_title_${index}`);setTimeout(()=>setCopiedMessage(null),2000);}},[]);/**\n   * 채팅 초기화\n   */const resetChat=useCallback(()=>{setMessages([]);setInputValue(\"\");setCopiedMessage(null);setCanSendMessage(true);streamingMessageIdRef.current=null;currentWebSocketRef.current=null;currentExecutionIdRef.current=null;resetOrchestration();},[resetOrchestration]);return{messages,inputValue,setInputValue,handleInputChange,// 새로운 입력 핸들러\ncopiedMessage,isGenerating,isStreaming,canSendMessage,streamingMessageId:streamingMessageIdRef.current,messagesEndRef,inputRef,inputHeight,// 동적 높이\nhandleSendMessage,handleStopGeneration,handleKeyPress,handleCopyMessage,handleCopyTitle,resetChat,scrollToBottom,// WebSocket 상태 추가\nwsConnected,wsConnecting,wsError,// 스크롤 관련 추가\nscrollContainerRef,handleScroll,isUserScrolling,// 모델 선택 관련 추가\nselectedModel,setSelectedModel};};","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","useWebSocket","crewAPI","useAuth","processMultiAgentResponse","result","console","error","id","Date","now","type","content","timestamp","toISOString","isError","agentResults","finalTitles","tokenUsage","agentSummary","Object","keys","map","agentType","agentResult","titles","agentName","getAgentName","tokenCount","allTitles","values","flat","formatMultiAgentContent","isMultiAgent","agentNames","journalism","balanced","click","seo","social","length","forEach","title","index","agent","useChat","projectId","projectName","promptCards","arguments","undefined","conversationId","user","isFirstRender","current","log","promptCardsLength","userId","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","canSendMessage","setCanSendMessage","inputHeight","setInputHeight","selectedModel","setSelectedModel","streamingMessageIdRef","currentWebSocketRef","currentExecutionIdRef","messagesEndRef","inputRef","isUserScrolling","setIsUserScrolling","scrollContainerRef","lastScrollTopRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","isConnected","wsConnected","isConnecting","wsConnecting","wsError","startStreaming","wsStartStreaming","addMessageListener","removeMessageListener","handleScroll","container","currentScrollTop","scrollTop","maxScrollTop","scrollHeight","clientHeight","Math","abs","isAtBottom","scrollToBottom","scrollIntoView","behavior","handleWebSocketMessage","event","data","JSON","parse","currentStreamingId","step","progress","prev","updatedMessages","streamingMsgIndex","findIndex","msg","messagesLength","currentContent","isLoading","m","fullContent","message","handleStreamingResponse","chunk","metadata","handleStreamingComplete","performance_metrics","model_info","handleStopGeneration","close","success","adjustInputHeight","value","trim","lines","split","charBasedLines","ceil","estimatedLines","max","calculatedHeight","min","handleInputChange","handleSendMessage","userMessage","streamMsgId","streamingMessage","allMessages","chatHistory","filter","role","maxHistoryLength","trimmedChatHistory","slice","totalMessages","fullHistoryLength","trimmedHistoryLength","recentHistory","safePromptCards","Array","isArray","activePromptCards","card","isActive","enabled","promptId","prompt_id","prompt_text","tags","stepOrder","sort","a","b","messageContent","chatHistoryLength","promptCardsCount","contentLength","hasContent","userInput","userSub","historyLength","createCrewInstance","instanceError","multiAgentResult","executeMultiAgent","assistantMessage","push","_error$response","errorType","code","errorMessage","errorDetails","status","response","filteredMessages","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","setTimeout","handleCopyTitle","resetChat","streamingMessageId"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\nimport { crewAPI } from \"../services/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\n/**\n * 멀티-에이전트 AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processMultiAgentResponse = (result) => {\n  if (!result) {\n    console.error(\"멀티-에이전트 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date().toISOString(),\n      isError: true,\n    };\n  }\n\n  // 멀티-에이전트 결과 구성\n  const agentResults = result.agentResults || {};\n  const finalTitles = result.finalTitles || {};\n  const tokenUsage = result.tokenUsage || 0;\n\n  // 에이전트별 결과를 포맷팅\n  const agentSummary = Object.keys(agentResults).map(agentType => {\n    const agentResult = agentResults[agentType];\n    const titles = finalTitles[agentType] || [];\n    \n    return {\n      agentType,\n      agentName: getAgentName(agentType),\n      result: agentResult?.content || \"결과 없음\",\n      titles: titles,\n      tokenCount: agentResult?.tokenCount || 0\n    };\n  });\n\n  // 전체 제목 목록 생성\n  const allTitles = Object.values(finalTitles).flat();\n\n  return {\n    id: \"multi-agent-\" + Date.now(),\n    type: \"assistant\",\n    content: formatMultiAgentContent(agentSummary, allTitles),\n    timestamp: new Date(),\n    // 멀티-에이전트 특화 데이터\n    isMultiAgent: true,\n    agentResults: agentSummary,\n    allTitles: allTitles,\n    tokenUsage: tokenUsage,\n  };\n};\n\n/**\n * 에이전트 타입을 한국어 이름으로 변환\n */\nconst getAgentName = (agentType) => {\n  const agentNames = {\n    journalism: \"📰 저널리즘 충실형\",\n    balanced: \"⚖️ 균형잡힌 후킹형\", \n    click: \"🎯 클릭유도형\",\n    seo: \"🔍 SEO/AEO 최적화형\",\n    social: \"📱 소셜미디어 공유형\"\n  };\n  return agentNames[agentType] || `🤖 ${agentType}`;\n};\n\n/**\n * 멀티-에이전트 결과를 UI 표시용 텍스트로 포맷팅\n */\nconst formatMultiAgentContent = (agentSummary, allTitles) => {\n  let content = \"🚀 **멀티-에이전트 분석 완료**\\n\\n\";\n  \n  // 전체 제목 요약\n  if (allTitles.length > 0) {\n    content += \"📋 **생성된 제목 목록:**\\n\";\n    allTitles.forEach((title, index) => {\n      content += `${index + 1}. ${title}\\n`;\n    });\n    content += \"\\n\";\n  }\n\n  // 에이전트별 상세 결과\n  content += \"🔍 **에이전트별 분석 결과:**\\n\\n\";\n  agentSummary.forEach(agent => {\n    content += `### ${agent.agentName}\\n`;\n    if (agent.titles.length > 0) {\n      content += \"**생성 제목:**\\n\";\n      agent.titles.forEach(title => {\n        content += `• ${title}\\n`;\n      });\n    }\n    content += `**토큰 사용량:** ${agent.tokenCount}개\\n\\n`;\n  });\n\n  return content;\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = [], conversationId = null) => {\n  const { user } = useAuth(); // Add user from AuthContext\n  \n  // 디버깅 로그 (첫 번째 렌더링에만)\n  const isFirstRender = useRef(true);\n  if (isFirstRender.current) {\n    console.log('useChat 초기화:', {\n      projectId,\n      projectName,\n      promptCardsLength: promptCards?.length,\n      conversationId,\n      userId: user?.id\n    });\n    isFirstRender.current = false;\n  }\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const [inputHeight, setInputHeight] = useState(24); // 동적 높이 관리\n  const [selectedModel, setSelectedModel] = useState(\"anthropic.claude-3-5-sonnet-20241022-v2:0\");\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n  \n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 사용자 스크롤 상태 추적\n  const [isUserScrolling, setIsUserScrolling] = useState(false);\n  const scrollContainerRef = useRef(null);\n  const lastScrollTopRef = useRef(0);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener,\n  } = useWebSocket(projectId);\n\n  // 초기 메시지 설정 - projectId 변경시에만 초기화\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectId]); // projectName 대신 projectId 사용\n\n  // 사용자 스크롤 감지 함수\n  const handleScroll = useCallback(() => {\n    if (!scrollContainerRef.current) return;\n\n    const container = scrollContainerRef.current;\n    const currentScrollTop = container.scrollTop;\n    const maxScrollTop = container.scrollHeight - container.clientHeight;\n\n    // 사용자가 수동으로 스크롤했는지 감지\n    if (Math.abs(currentScrollTop - lastScrollTopRef.current) > 2) {\n      const isAtBottom = currentScrollTop >= maxScrollTop - 20;\n\n      // 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\n      setIsUserScrolling(!isAtBottom);\n    }\n\n    lastScrollTopRef.current = currentScrollTop;\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    // 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n    if (!isUserScrolling && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [isUserScrolling]);\n\n  // 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log(\"WebSocket 메시지 수신:\", data);\n\n        const currentStreamingId = streamingMessageIdRef.current;\n\n        switch (data.type) {\n          case \"stream_start\":\n            console.log(\"WebSocket 스트리밍 시작\");\n            break;\n\n          case \"progress\":\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n\n          case \"stream_chunk\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                console.log(\"스트림 청크 처리:\", {\n                  currentStreamingId,\n                  streamingMsgIndex,\n                  messagesLength: prev.length,\n                  content: data.content\n                });\n\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent =\n                    updatedMessages[streamingMsgIndex].content || \"\";\n\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true,\n                  };\n                  \n                  console.log(\"메시지 업데이트됨:\", updatedMessages[streamingMsgIndex]);\n                } else {\n                  console.log(\"스트리밍 메시지를 찾을 수 없음, 메시지 ID들:\", prev.map(m => m.id));\n                }\n\n                return updatedMessages;\n              });\n              // 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n              if (!isUserScrolling) {\n                scrollToBottom();\n              }\n            } else {\n              console.log(\"currentStreamingId가 null임\");\n            }\n            break;\n\n          case \"stream_complete\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date().toISOString(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n\n          case \"error\":\n            console.error(\"WebSocket 스트리밍 오류:\", data.message);\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content:\n                      \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date().toISOString(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n            toast.error(data.message);\n            break;\n\n          default:\n            console.log(\"알 수 없는 WebSocket 메시지 타입:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"WebSocket 메시지 파싱 오류:\", error);\n      }\n    };\n\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n          console.log(\n            \"스트리밍 메시지 업데이트 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\n      if (!isUserScrolling) {\n        scrollToBottom();\n      }\n    },\n    [scrollToBottom, isUserScrolling]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date().toISOString(),\n          };\n          console.log(\n            \"스트리밍 완료 처리 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\n            \"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\",\n            currentStreamingId\n          );\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n\n      // 입력 활성화\n      console.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");\n      setCanSendMessage(true);\n\n      // 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\n      scrollToBottom();\n    },\n    [scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log(\"생성 중단 요청\");\n\n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n\n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n\n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content:\n              updatedMessages[streamingMsgIndex].content +\n              \"\\n\\n[생성이 중단되었습니다]\",\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date().toISOString(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n    }\n\n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n\n    // orchestration 상태 리셋\n    resetOrchestration();\n\n    toast.success(\"생성이 중단되었습니다\");\n  }, [resetOrchestration]);\n\n  /**\n   * 입력창 높이 자동 조절\n   */\n  const adjustInputHeight = useCallback((value) => {\n    if (!value.trim()) {\n      setInputHeight(24); // 기본 높이\n      return;\n    }\n    \n    // 줄 수 계산 (대략적)\n    const lines = value.split('\\n').length;\n    const charBasedLines = Math.ceil(value.length / 80); // 80자당 1줄로 추정\n    const estimatedLines = Math.max(lines, charBasedLines);\n    \n    // 높이 계산 (lineHeight: 1.4, fontSize: 16px)\n    let calculatedHeight;\n    if (estimatedLines <= 3) {\n      calculatedHeight = 24 + (estimatedLines - 1) * 22; // 기본 + 추가 줄\n    } else if (estimatedLines <= 10) {\n      calculatedHeight = 150 + (estimatedLines - 6) * 15; // 중간 범위\n    } else {\n      calculatedHeight = Math.min(400, 150 + (estimatedLines - 6) * 12); // 최대 400px\n    }\n    \n    setInputHeight(Math.max(24, calculatedHeight));\n  }, []);\n  \n  /**\n   * 입력값 변경 처리\n   */\n  const handleInputChange = useCallback((value) => {\n    setInputValue(value);\n    adjustInputHeight(value);\n  }, [adjustInputHeight]);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"해들 전송 호출:\", {\n      inputValue: inputValue.trim(),\n      isGenerating,\n      canSendMessage,\n    });\n\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"전송 중단: 조건 부족\");\n      return;\n    }\n\n    // 입력 비활성화\n    console.log(\"입력 비활성화\");\n    setCanSendMessage(false);\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date().toISOString(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date().toISOString(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n    setInputHeight(24); // 입력창 높이 초기화\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages\n      .filter((msg) => !msg.isLoading && !msg.isError && !msg.isStreaming)\n      .map((msg) => ({\n        role: msg.type === \"user\" ? \"user\" : \"assistant\",\n        content: msg.content,\n      }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n\n    console.log(\"대화 히스토리 생성:\", {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6), // 최근 6개만 로그에 표시\n    });\n\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const safePromptCards = Array.isArray(promptCards) ? promptCards : [];\n      const activePromptCards = safePromptCards\n        .filter((card) => card.isActive !== false && card.enabled !== false)\n        .map((card) => ({\n          promptId: card.promptId || card.prompt_id,\n          title: card.title || \"Untitled\",\n          prompt_text: card.prompt_text || card.content || \"\",\n          tags: card.tags || [],\n          isActive: card.isActive !== false,\n          stepOrder: card.stepOrder || 0,\n        }))\n        .filter((card) => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n        .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n\n      console.log(\"대화 전송 데이터 확인:\", {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map((card) => ({\n          id: card.promptId,\n          title: card.title,\n          contentLength: card.prompt_text.length,\n          stepOrder: card.stepOrder,\n          hasContent: !!card.prompt_text.trim(),\n        })),\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");\n        console.log(\"스트리밍 매개변수 확인:\", {\n          projectId,\n          userInput: userMessage.content,\n          conversationId,\n          userSub: user?.id,\n          historyLength: trimmedChatHistory.length,\n          promptCardsLength: activePromptCards.length\n        });\n\n        const success = wsStartStreaming(\n          userMessage.content,\n          trimmedChatHistory,\n          activePromptCards,\n          selectedModel,\n          conversationId, // Add conversationId\n          user?.id // Add userSub from AuthContext\n        );\n\n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");\n        }\n      } else {\n        console.log(\"WebSocket 미연결, SSE 모드 사용\");\n      }\n\n      // 🌟 멀티-에이전트 시스템 실행\n      console.log(\"멀티-에이전트 시스템 실행 시작\");\n\n      // 1. 먼저 프롬프트 카드들을 crew 인스턴스로 생성\n      if (activePromptCards.length > 0) {\n        try {\n          console.log(\"프롬프트 카드 → 크루 인스턴스 변환 시도\");\n          await crewAPI.createCrewInstance(projectId, activePromptCards);\n          console.log(\"크루 인스턴스 생성 완료\");\n        } catch (instanceError) {\n          console.log(\"크루 인스턴스 생성 실패 (이미 존재하거나 기타 이유):\", instanceError.message);\n          // 이미 생성되어 있을 수 있으므로 계속 진행\n        }\n      }\n\n      // 2. 멀티-에이전트 병렬 실행\n      const multiAgentResult = await crewAPI.executeMultiAgent(\n        projectId, \n        userMessage.content,\n        (progress) => {\n          // 진행상황 업데이트 (옵션)\n          console.log(\"멀티-에이전트 진행상황:\", progress);\n        }\n      );\n\n      console.log(\"멀티-에이전트 실행 완료:\", multiAgentResult);\n\n      // 3. 결과를 UI 메시지로 변환\n      const assistantMessage = processMultiAgentResponse(multiAgentResult);\n      \n      // 4. 스트리밍 메시지를 최종 결과로 교체\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageIdRef.current\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = assistantMessage;\n        } else {\n          updatedMessages.push(assistantMessage);\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n      setCanSendMessage(true);\n      \n      // 성공 토스트\n      toast.success(`${Object.keys(multiAgentResult.agentResults || {}).length}개 에이전트 분석 완료!`);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          errorType === \"timeout\"\n            ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\"\n            : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date().toISOString(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: error.response?.status,\n        },\n      };\n\n      setMessages((prev) => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(\n          (msg) => msg.id !== currentStreamingId\n        );\n        return [...filteredMessages, errorMessage];\n      });\n\n      streamingMessageIdRef.current = null;\n\n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n\n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    handleInputChange, // 새로운 입력 핸들러\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    inputHeight, // 동적 높이\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError,\n    // 스크롤 관련 추가\n    scrollContainerRef,\n    handleScroll,\n    isUserScrolling,\n    // 모델 선택 관련 추가\n    selectedModel,\n    setSelectedModel,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}