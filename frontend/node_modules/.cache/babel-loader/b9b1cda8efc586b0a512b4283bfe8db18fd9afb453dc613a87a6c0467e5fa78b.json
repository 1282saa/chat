{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Mock data for development\nconst mockUsageData = {\n  todayRequests: 127,\n  todayTokens: 45320,\n  monthlyLimit: 1000000,\n  monthlyUsed: 523400,\n  plan: {\n    name: 'Professional',\n    expiresAt: '2025-02-28',\n    features: ['월 100만 토큰', '우선 지원', 'API 액세스']\n  },\n  chartData: Array.from({\n    length: 30\n  }, (_, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    tokens: Math.floor(Math.random() * 30000) + 10000,\n    requests: Math.floor(Math.random() * 100) + 50\n  })),\n  recentLogs: Array.from({\n    length: 20\n  }, (_, i) => ({\n    id: `log-${i}`,\n    timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n    model: ['Claude 3 Sonnet', 'Claude 3.5 Haiku', 'Claude 3 Opus'][Math.floor(Math.random() * 3)],\n    tokens: Math.floor(Math.random() * 5000) + 1000,\n    duration: Math.floor(Math.random() * 3000) + 500,\n    status: Math.random() > 0.1 ? 'success' : 'error'\n  }))\n};\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 300000 // 5분\n});\n\n// 요청 인터셉터 - 인증 토큰 자동 추가\napi.interceptors.request.use(async config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n\n  // 인증이 필요한 요청에 토큰 추가\n  try {\n    var _session$tokens, _session$tokens$idTok;\n    // AuthContext에서 토큰 가져오기 (동적 import 사용)\n    const {\n      fetchAuthSession\n    } = await import('aws-amplify/auth');\n    const session = await fetchAuthSession();\n    const token = session === null || session === void 0 ? void 0 : (_session$tokens = session.tokens) === null || _session$tokens === void 0 ? void 0 : (_session$tokens$idTok = _session$tokens.idToken) === null || _session$tokens$idTok === void 0 ? void 0 : _session$tokens$idTok.toString();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log(\"✅ 인증 토큰 추가됨\");\n    } else {\n      console.log(\"⚠️ 인증 토큰 없음\");\n    }\n  } catch (error) {\n    console.log(\"📝 인증 토큰 가져오기 실패:\", error.message);\n    // 인증 오류가 있어도 요청은 계속 진행 (public API도 있을 수 있음)\n  }\n  return config;\n});\n\n// 응답 인터셉터 - 401 오류 시 리다이렉션 처리\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, async error => {\n  var _error$response, _error$config, _error$response2, _error$response3;\n  console.error(\"API 오류 상세:\", {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: error.message,\n    code: error.code,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n\n  // 401 Unauthorized 오류 처리\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n    console.log(\"🔐 인증 오류 발생 - 로그인 페이지로 리다이렉션\");\n    try {\n      // 로그아웃 처리\n      const {\n        signOut\n      } = await import('aws-amplify/auth');\n      await signOut();\n\n      // 로그인 페이지로 리다이렉션\n      window.location.href = '/login';\n    } catch (signOutError) {\n      console.error(\"로그아웃 처리 실패:\", signOutError);\n      // 강제 리다이렉션\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 🔄 데이터 매핑 유틸리티 함수들\n// =============================================================================\n\n/**\n * 프론트엔드 → 백엔드 데이터 변환\n */\nconst mapFrontendToBackend = {\n  // 채팅 메시지 데이터 변환\n  chatMessage: frontendData => ({\n    userInput: frontendData.userInput || frontendData.message,\n    chat_history: frontendData.chat_history || frontendData.messages || [],\n    prompt_cards: frontendData.promptCards || frontendData.prompt_cards || [],\n    modelId: frontendData.selectedModel || frontendData.modelId,\n    conversationId: frontendData.conversationId || frontendData.conversation_id,\n    userSub: frontendData.userId || frontendData.user_id\n  }),\n  // 프롬프트 카드 데이터 변환\n  promptCard: frontendData => ({\n    title: frontendData.title,\n    prompt_text: frontendData.prompt_text || frontendData.content,\n    tags: frontendData.tags || [],\n    isActive: frontendData.enabled !== false && frontendData.isActive !== false,\n    stepOrder: frontendData.stepOrder || 1\n  }),\n  // 프로젝트 데이터 변환\n  project: frontendData => ({\n    name: frontendData.name,\n    description: frontendData.description || '',\n    tags: frontendData.tags || [],\n    aiRole: frontendData.aiRole || '',\n    aiInstructions: frontendData.aiInstructions || '',\n    targetAudience: frontendData.targetAudience || '일반독자',\n    outputFormat: frontendData.outputFormat || 'multiple',\n    styleGuidelines: frontendData.styleGuidelines || ''\n  })\n};\n\n/**\n * 백엔드 → 프론트엔드 데이터 변환\n */\nconst mapBackendToFrontend = {\n  // 채팅 메시지 변환\n  chatMessage: backendData => ({\n    id: backendData.id || backendData.messageId || Date.now().toString(),\n    role: backendData.role,\n    content: backendData.content || backendData.text,\n    timestamp: backendData.timestamp || backendData.createdAt || new Date().toISOString(),\n    tokenCount: backendData.tokenCount || backendData.tokens_used\n  }),\n  // 프롬프트 카드 변환\n  promptCard: backendData => ({\n    promptId: backendData.promptId || backendData.prompt_id,\n    title: backendData.title,\n    prompt_text: backendData.prompt_text || backendData.content,\n    tags: backendData.tags || [],\n    isActive: backendData.isActive !== false,\n    enabled: backendData.isActive !== false,\n    stepOrder: backendData.stepOrder || 1,\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt\n  }),\n  // 프로젝트 변환\n  project: backendData => ({\n    projectId: backendData.projectId,\n    name: backendData.name,\n    description: backendData.description || '',\n    status: backendData.status,\n    tags: backendData.tags || [],\n    aiRole: backendData.aiRole || '',\n    aiInstructions: backendData.aiInstructions || '',\n    targetAudience: backendData.targetAudience || '일반독자',\n    outputFormat: backendData.outputFormat || 'multiple',\n    styleGuidelines: backendData.styleGuidelines || '',\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt,\n    promptCount: backendData.promptCount || 0,\n    conversationCount: backendData.conversationCount || 0\n  }),\n  // 대화 목록 변환\n  conversation: backendData => ({\n    id: backendData.id || backendData.conversationId,\n    title: backendData.title,\n    startedAt: backendData.startedAt || backendData.createdAt,\n    lastActivityAt: backendData.lastActivityAt || backendData.updatedAt,\n    tokenSum: backendData.tokenSum || backendData.totalTokens || 0\n  })\n};\n\n/**\n * Mock 데이터와 실제 API 간 전환을 위한 플래그\n */\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    try {\n      const response = await api.get(\"/projects\");\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      const projects = response.data.projects || response.data;\n      return {\n        projects: Array.isArray(projects) ? projects.map(mapBackendToFrontend.project) : [],\n        count: response.data.count || projects.length,\n        hasMore: response.data.hasMore || false,\n        nextKey: response.data.nextKey\n      };\n    } catch (error) {\n      console.error(\"프로젝트 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n  getProject: async projectId => {\n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 상세 조회 실패:\", error);\n      throw error;\n    }\n  },\n  createProject: async projectData => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.post(\"/projects\", backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 생성 실패:\", error);\n      throw error;\n    }\n  },\n  updateProject: async (projectId, projectData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.put(`/projects/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n  deleteProject: async projectId => {\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프로젝트 삭제 실패:\", error);\n      throw error;\n    }\n  },\n  getUploadUrl: async (projectId, fileName) => {\n    try {\n      const response = await api.get(`/projects/${projectId}/upload-url`, {\n        params: {\n          fileName\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"업로드 URL 생성 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (projectId, includeContent = false, includeStats = false) => {\n    try {\n      const response = await api.get(`/prompts/${projectId}`, {\n        params: {\n          includeContent,\n          includeStats\n        }\n      });\n\n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const promptCards = response.data.promptCards || response.data.prompts || response.data;\n      return {\n        promptCards: Array.isArray(promptCards) ? promptCards.map(mapBackendToFrontend.promptCard) : [],\n        count: response.data.count || promptCards.length\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n  createPromptCard: async (projectId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.post(`/prompts/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 생성 실패:\", error);\n      throw error;\n    }\n  },\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.put(`/prompts/${projectId}/${promptId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n  getPromptContent: async (projectId, promptId) => {\n    try {\n      const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 내용 조회 실패:\", error);\n      throw error;\n    }\n  },\n  deletePromptCard: async (projectId, promptId) => {\n    try {\n      const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 카드 삭제 실패:\", error);\n      throw error;\n    }\n  },\n  reorderPromptCards: async (projectId, reorderData) => {\n    try {\n      const updatePromises = reorderData.map(({\n        promptId,\n        stepOrder\n      }) => api.put(`/prompts/${projectId}/${promptId}`, {\n        stepOrder\n      }));\n      const responses = await Promise.all(updatePromises);\n      return {\n        message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n        updatedCards: responses.map(r => mapBackendToFrontend.promptCard(r.data))\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 순서 변경 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    var _data$chat_history;\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history = data.chat_history) === null || _data$chat_history === void 0 ? void 0 : _data$chat_history.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response5;\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n        responseData: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (projectId, data, onChunk, onError, onComplete) => {\n    var _data$chat_history2;\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history2 = data.chat_history) === null || _data$chat_history2 === void 0 ? void 0 : _data$chat_history2.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n      try {\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          buffer += decoder.decode(value, {\n            stream: true\n          });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, {\n                      content: eventData.response\n                    });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString()\n                    });\n                  }\n                  return {\n                    result: eventData.fullResponse || fullResponse\n                  };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n      return {\n        result: fullResponse\n      };\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n\n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(`/projects/${projectId}/generate`, data);\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString()\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, {\n              content: word\n            });\n            await new Promise(resolve => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString()\n          });\n        }\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\"));\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n  getExecutionStatus: async executionArn => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\"\n    };\n  }\n};\n\n// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\n\nexport const crewAPI = {\n  // 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\n  createCrewInstance: async (projectId, promptCards) => {\n    console.log(\"크루 인스턴스 생성 요청:\", {\n      projectId,\n      promptCardsCount: promptCards.length\n    });\n    const response = await api.post(\"/crew/instances\", {\n      projectId,\n      promptCards: promptCards.map(card => ({\n        promptId: card.promptId,\n        prompt_text: card.prompt_text,\n        stepOrder: card.stepOrder,\n        isActive: card.isActive\n      }))\n    });\n    console.log(\"크루 인스턴스 생성 완료:\", response.data);\n    return response.data;\n  },\n  // 프로젝트의 크루 인스턴스 조회\n  getCrewInstances: async projectId => {\n    console.log(\"크루 인스턴스 조회:\", {\n      projectId\n    });\n    const response = await api.get(`/crew/instances/${projectId}`);\n    return response.data;\n  },\n  // 크루 설정 조회\n  getCrewConfig: async projectId => {\n    console.log(\"크루 설정 조회:\", {\n      projectId\n    });\n    const response = await api.get(`/crew/config/${projectId}`);\n    return response.data;\n  },\n  // 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\n  executeMultiAgent: async (projectId, userInput, onProgress = null) => {\n    console.log(\"멀티-에이전트 실행 시작:\", {\n      projectId,\n      inputLength: userInput.length,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(\"/crew/execute\", {\n        projectId,\n        userInput,\n        mode: \"parallel\" // 병렬 처리 모드 명시\n      });\n      console.log(\"멀티-에이전트 실행 완료:\", {\n        agentCount: Object.keys(response.data.agentResults || {}).length,\n        titleCount: Object.keys(response.data.finalTitles || {}).length,\n        tokenUsage: response.data.tokenUsage,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response7;\n      console.error(\"멀티-에이전트 실행 실패:\", {\n        error: error.message,\n        status: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status,\n        data: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n  // 에이전트별 상세 결과 조회\n  getAgentResults: async (projectId, executionId) => {\n    console.log(\"에이전트 결과 조회:\", {\n      projectId,\n      executionId\n    });\n    const response = await api.get(`/crew/results/${projectId}/${executionId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId\n    });\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: []\n      });\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\"\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message: \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"\n    };\n  },\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", {\n      projectId,\n      userId\n    });\n    return {\n      sessions: [],\n      message: \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"\n    };\n  },\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId\n    };\n  }\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\"\n    };\n  },\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n  // 비밀번호 찾기 - 인증번호 발송\n  requestPasswordReset: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  // 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\n  resetPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", {\n      email: resetData.email,\n      code: resetData.code,\n      newPassword: resetData.newPassword\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = error => {\n  var _error$response8, _error$response9, _error$response0, _error$response1, _error$response10, _error$message, _error$message2;\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status,\n    statusText: (_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.statusText,\n    data: (_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data,\n    timestamp: new Date().toISOString()\n  });\n\n  // 403 Forbidden 특별 처리\n  if (((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.status) === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\"\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.status) === 504) {\n    return {\n      message: \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\"\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"CORS\") || error.code === \"ERR_NETWORK\" || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"Access-Control-Allow-Origin\")) {\n    return {\n      message: \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\"\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message: \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\"\n    };\n  }\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || \"서버 오류가 발생했습니다\";\n    switch (status) {\n      case 400:\n        return {\n          message: `잘못된 요청: ${message}`,\n          statusCode: 400\n        };\n      case 401:\n        return {\n          message: \"인증이 필요합니다\",\n          statusCode: 401\n        };\n      case 404:\n        return {\n          message: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404\n        };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429\n        };\n      case 500:\n        return {\n          message: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500\n        };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\"\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\"\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message: \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1\n};\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파랑\",\n  bgClass: \"bg-blue-100\",\n  textClass: \"text-blue-800\",\n  borderClass: \"border-blue-200\"\n}, {\n  id: \"green\",\n  name: \"초록\",\n  bgClass: \"bg-green-100\",\n  textClass: \"text-green-800\",\n  borderClass: \"border-green-200\"\n}, {\n  id: \"purple\",\n  name: \"보라\",\n  bgClass: \"bg-purple-100\",\n  textClass: \"text-purple-800\",\n  borderClass: \"border-purple-200\"\n}, {\n  id: \"orange\",\n  name: \"주황\",\n  bgClass: \"bg-orange-100\",\n  textClass: \"text-orange-800\",\n  borderClass: \"border-orange-200\"\n}, {\n  id: \"red\",\n  name: \"빨강\",\n  bgClass: \"bg-red-100\",\n  textClass: \"text-red-800\",\n  borderClass: \"border-red-200\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  bgClass: \"bg-indigo-100\",\n  textClass: \"text-indigo-800\",\n  borderClass: \"border-indigo-200\"\n}, {\n  id: \"pink\",\n  name: \"분홍\",\n  bgClass: \"bg-pink-100\",\n  textClass: \"text-pink-800\",\n  borderClass: \"border-pink-200\"\n}, {\n  id: \"yellow\",\n  name: \"노랑\",\n  bgClass: \"bg-yellow-100\",\n  textClass: \"text-yellow-800\",\n  borderClass: \"border-yellow-200\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  bgClass: \"bg-gray-100\",\n  textClass: \"text-gray-800\",\n  borderClass: \"border-gray-200\"\n}];\nexport const getPromptCardInfo = promptCard => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false\n  };\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => {\n      var _project$name, _project$description, _project$tags;\n      return ((_project$name = project.name) === null || _project$name === void 0 ? void 0 : _project$name.toLowerCase().includes(query)) || ((_project$description = project.description) === null || _project$description === void 0 ? void 0 : _project$description.toLowerCase().includes(query)) || ((_project$tags = project.tags) === null || _project$tags === void 0 ? void 0 : _project$tags.some(tag => tag.toLowerCase().includes(query)));\n    });\n  }\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => {\n        var _a$name;\n        return (_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b.name);\n      });\n      break;\n    default:\n      break;\n  }\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\nexport const formatFileSize = bytes => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false\n    };\n  }\n  const activeCards = promptCards.filter(card => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n  const stepOrders = activeCards.map(card => card.stepOrder || 0).filter(step => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens: activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder\n    }\n  };\n};\n\n// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\n\nexport const getUsage = async (range = 'month') => {\n  console.log(\"사용량 데이터 조회 요청:\", {\n    range\n  });\n\n  // Development mode - return mock data\n  if (process.env.NODE_ENV === 'development') {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockUsageData;\n  }\n  try {\n    const response = await api.get(`/usage?range=${range}`);\n    return response.data;\n  } catch (error) {\n    console.warn(\"사용량 API 호출 실패, 목 데이터 반환:\", error.message);\n    // Fallback to mock data\n    return mockUsageData;\n  }\n};\n\n// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\n\nexport const conversationAPI = {\n  // 대화 목록 조회 (무한 스크롤)\n  getConversations: async (cursor, limit = 20) => {\n    console.log(\"대화 목록 조회 시작:\", {\n      cursor,\n      limit,\n      API_BASE_URL\n    });\n    const params = new URLSearchParams({\n      limit: limit.toString()\n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    const url = `/conversations?${params}`;\n    console.log(\"API 요청 URL:\", `${API_BASE_URL}${url}`);\n    try {\n      const response = await api.get(url);\n      console.log(\"대화 목록 조회 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 목록 조회 실패:\", error);\n      console.error(\"Error response:\", error.response);\n      console.error(\"Error config:\", error.config);\n      throw error;\n    }\n  },\n  // 새 대화 생성\n  createConversation: async (title = 'New Conversation') => {\n    console.log(\"새 대화 생성:\", {\n      title\n    });\n    try {\n      const response = await api.post('/conversations', {\n        title\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", error);\n      throw error;\n    }\n  },\n  // 특정 대화의 메시지 조회 (페이징)\n  getMessages: async (conversationId, cursor, limit = 50) => {\n    console.log(\"메시지 조회:\", {\n      conversationId,\n      cursor,\n      limit\n    });\n    const params = new URLSearchParams({\n      convId: conversationId,\n      limit: limit.toString()\n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    try {\n      const response = await api.get(`/messages?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"메시지 조회 실패:\", error);\n      throw error;\n    }\n  },\n  // 대화 삭제\n  deleteConversation: async conversationId => {\n    console.log(\"대화 삭제:\", {\n      conversationId\n    });\n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      console.log(\"대화 삭제 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 삭제 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// Mock data for conversation development\nexport const mockConversations = [{\n  id: '1',\n  title: '서울경제신문 AI 제목 생성 테스트',\n  startedAt: '2025-01-20T10:30:00Z',\n  lastActivityAt: '2025-01-20T15:45:00Z',\n  tokenSum: 1250\n}, {\n  id: '2',\n  title: '경제 뉴스 헤드라인 최적화',\n  startedAt: '2025-01-19T14:20:00Z',\n  lastActivityAt: '2025-01-19T16:30:00Z',\n  tokenSum: 890\n}, {\n  id: '3',\n  title: '부동산 시장 분석 제목 생성',\n  startedAt: '2025-01-18T09:15:00Z',\n  lastActivityAt: '2025-01-18T11:45:00Z',\n  tokenSum: 2150\n}];\nexport const mockMessages = {\n  '1': [{\n    id: '2025-01-20T10:30:00.000Z',\n    role: 'user',\n    content: '오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.',\n    tokenCount: 25,\n    timestamp: '2025-01-20T10:30:00.000Z'\n  }, {\n    id: '2025-01-20T10:30:05.000Z',\n    role: 'assistant',\n    content: '서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',\n    tokenCount: 95,\n    timestamp: '2025-01-20T10:30:05.000Z'\n  }],\n  '2': [{\n    id: '2025-01-19T14:20:00.000Z',\n    role: 'user',\n    content: '반도체 산업 관련 경제 뉴스 제목을 생성해주세요.',\n    tokenCount: 20,\n    timestamp: '2025-01-19T14:20:00.000Z'\n  }, {\n    id: '2025-01-19T14:20:03.000Z',\n    role: 'assistant',\n    content: '반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',\n    tokenCount: 78,\n    timestamp: '2025-01-19T14:20:03.000Z'\n  }]\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","mockUsageData","todayRequests","todayTokens","monthlyLimit","monthlyUsed","plan","name","expiresAt","features","chartData","Array","from","length","_","i","date","Date","now","toISOString","split","tokens","Math","floor","random","requests","recentLogs","id","timestamp","model","duration","status","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","_session$tokens","_session$tokens$idTok","fetchAuthSession","session","token","idToken","toString","Authorization","error","message","response","_error$response","_error$config","_error$response2","_error$response3","code","data","signOut","window","location","href","signOutError","Promise","reject","mapFrontendToBackend","chatMessage","frontendData","userInput","chat_history","messages","prompt_cards","promptCards","modelId","selectedModel","conversationId","conversation_id","userSub","userId","user_id","promptCard","title","prompt_text","content","tags","isActive","enabled","stepOrder","project","description","aiRole","aiInstructions","targetAudience","outputFormat","styleGuidelines","mapBackendToFrontend","backendData","messageId","role","text","createdAt","tokenCount","tokens_used","promptId","prompt_id","updatedAt","projectId","promptCount","conversationCount","conversation","startedAt","lastActivityAt","tokenSum","totalTokens","USE_MOCK_DATA","REACT_APP_USE_MOCK_DATA","projectAPI","getProjects","get","projects","isArray","map","count","hasMore","nextKey","getProject","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","includeStats","prompts","createPromptCard","promptData","updatePromptCard","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","responses","all","updatedCards","r","generateAPI","generateTitle","_data$chat_history","inputLength","historyLength","mode","_error$response4","_error$response5","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","streamingUrl","fetch","body","JSON","stringify","ok","Error","statusText","contentType","includes","reader","getReader","decoder","TextDecoder","buffer","fullResponse","done","value","read","decode","stream","lines","pop","line","startsWith","eventData","parse","slice","type","result","parseError","releaseLock","streamError","fallbackResponse","fullText","words","word","resolve","setTimeout","model_info","performance_metrics","fallbackError","getExecutionStatus","executionArn","output","crewAPI","createCrewInstance","promptCardsCount","card","getCrewInstances","getCrewConfig","executeMultiAgent","onProgress","agentCount","Object","keys","agentResults","titleCount","finalTitles","tokenUsage","_error$response6","_error$response7","getAgentResults","executionId","chatAPI","sendMessage","sessionId","userRequest","getChatHistory","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","requestPasswordReset","resetPassword","newPassword","handleAPIError","_error$response8","_error$response9","_error$response0","_error$response1","_error$response10","_error$message","_error$message2","statusCode","errorType","_error$response$data","_error$response$data2","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","color","filterProjects","filters","filtered","searchQuery","query","toLowerCase","filter","_project$name","_project$description","_project$tags","some","tag","sortBy","sort","a","b","_a$name","localeCompare","formatTokenCount","toFixed","formatFileSize","bytes","calculatePromptStats","totalCards","averageTokens","activeCards","maxStepOrder","hasCustomOrder","reduce","sum","contentLength","stepOrders","step","max","round","stepOrderRange","min","getUsage","range","NODE_ENV","warn","conversationAPI","getConversations","cursor","limit","URLSearchParams","append","createConversation","getMessages","convId","deleteConversation","mockConversations","mockMessages"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Mock data for development\nconst mockUsageData = {\n  todayRequests: 127,\n  todayTokens: 45320,\n  monthlyLimit: 1000000,\n  monthlyUsed: 523400,\n  plan: {\n    name: 'Professional',\n    expiresAt: '2025-02-28',\n    features: ['월 100만 토큰', '우선 지원', 'API 액세스']\n  },\n  chartData: Array.from({ length: 30 }, (_, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    tokens: Math.floor(Math.random() * 30000) + 10000,\n    requests: Math.floor(Math.random() * 100) + 50\n  })),\n  recentLogs: Array.from({ length: 20 }, (_, i) => ({\n    id: `log-${i}`,\n    timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n    model: ['Claude 3 Sonnet', 'Claude 3.5 Haiku', 'Claude 3 Opus'][Math.floor(Math.random() * 3)],\n    tokens: Math.floor(Math.random() * 5000) + 1000,\n    duration: Math.floor(Math.random() * 3000) + 500,\n    status: Math.random() > 0.1 ? 'success' : 'error'\n  }))\n};\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터 - 인증 토큰 자동 추가\napi.interceptors.request.use(async (config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  \n  // 인증이 필요한 요청에 토큰 추가\n  try {\n    // AuthContext에서 토큰 가져오기 (동적 import 사용)\n    const { fetchAuthSession } = await import('aws-amplify/auth');\n    const session = await fetchAuthSession();\n    const token = session?.tokens?.idToken?.toString();\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log(\"✅ 인증 토큰 추가됨\");\n    } else {\n      console.log(\"⚠️ 인증 토큰 없음\");\n    }\n  } catch (error) {\n    console.log(\"📝 인증 토큰 가져오기 실패:\", error.message);\n    // 인증 오류가 있어도 요청은 계속 진행 (public API도 있을 수 있음)\n  }\n  \n  return config;\n});\n\n// 응답 인터셉터 - 401 오류 시 리다이렉션 처리\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  async (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n\n    // 401 Unauthorized 오류 처리\n    if (error.response?.status === 401) {\n      console.log(\"🔐 인증 오류 발생 - 로그인 페이지로 리다이렉션\");\n      \n      try {\n        // 로그아웃 처리\n        const { signOut } = await import('aws-amplify/auth');\n        await signOut();\n        \n        // 로그인 페이지로 리다이렉션\n        window.location.href = '/login';\n      } catch (signOutError) {\n        console.error(\"로그아웃 처리 실패:\", signOutError);\n        // 강제 리다이렉션\n        window.location.href = '/login';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 🔄 데이터 매핑 유틸리티 함수들\n// =============================================================================\n\n/**\n * 프론트엔드 → 백엔드 데이터 변환\n */\nconst mapFrontendToBackend = {\n  // 채팅 메시지 데이터 변환\n  chatMessage: (frontendData) => ({\n    userInput: frontendData.userInput || frontendData.message,\n    chat_history: frontendData.chat_history || frontendData.messages || [],\n    prompt_cards: frontendData.promptCards || frontendData.prompt_cards || [],\n    modelId: frontendData.selectedModel || frontendData.modelId,\n    conversationId: frontendData.conversationId || frontendData.conversation_id,\n    userSub: frontendData.userId || frontendData.user_id,\n  }),\n\n  // 프롬프트 카드 데이터 변환\n  promptCard: (frontendData) => ({\n    title: frontendData.title,\n    prompt_text: frontendData.prompt_text || frontendData.content,\n    tags: frontendData.tags || [],\n    isActive: frontendData.enabled !== false && frontendData.isActive !== false,\n    stepOrder: frontendData.stepOrder || 1,\n  }),\n\n  // 프로젝트 데이터 변환\n  project: (frontendData) => ({\n    name: frontendData.name,\n    description: frontendData.description || '',\n    tags: frontendData.tags || [],\n    aiRole: frontendData.aiRole || '',\n    aiInstructions: frontendData.aiInstructions || '',\n    targetAudience: frontendData.targetAudience || '일반독자',\n    outputFormat: frontendData.outputFormat || 'multiple',\n    styleGuidelines: frontendData.styleGuidelines || '',\n  }),\n};\n\n/**\n * 백엔드 → 프론트엔드 데이터 변환\n */\nconst mapBackendToFrontend = {\n  // 채팅 메시지 변환\n  chatMessage: (backendData) => ({\n    id: backendData.id || backendData.messageId || Date.now().toString(),\n    role: backendData.role,\n    content: backendData.content || backendData.text,\n    timestamp: backendData.timestamp || backendData.createdAt || new Date().toISOString(),\n    tokenCount: backendData.tokenCount || backendData.tokens_used,\n  }),\n\n  // 프롬프트 카드 변환\n  promptCard: (backendData) => ({\n    promptId: backendData.promptId || backendData.prompt_id,\n    title: backendData.title,\n    prompt_text: backendData.prompt_text || backendData.content,\n    tags: backendData.tags || [],\n    isActive: backendData.isActive !== false,\n    enabled: backendData.isActive !== false,\n    stepOrder: backendData.stepOrder || 1,\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt,\n  }),\n\n  // 프로젝트 변환\n  project: (backendData) => ({\n    projectId: backendData.projectId,\n    name: backendData.name,\n    description: backendData.description || '',\n    status: backendData.status,\n    tags: backendData.tags || [],\n    aiRole: backendData.aiRole || '',\n    aiInstructions: backendData.aiInstructions || '',\n    targetAudience: backendData.targetAudience || '일반독자',\n    outputFormat: backendData.outputFormat || 'multiple',\n    styleGuidelines: backendData.styleGuidelines || '',\n    createdAt: backendData.createdAt,\n    updatedAt: backendData.updatedAt,\n    promptCount: backendData.promptCount || 0,\n    conversationCount: backendData.conversationCount || 0,\n  }),\n\n  // 대화 목록 변환\n  conversation: (backendData) => ({\n    id: backendData.id || backendData.conversationId,\n    title: backendData.title,\n    startedAt: backendData.startedAt || backendData.createdAt,\n    lastActivityAt: backendData.lastActivityAt || backendData.updatedAt,\n    tokenSum: backendData.tokenSum || backendData.totalTokens || 0,\n  }),\n};\n\n/**\n * Mock 데이터와 실제 API 간 전환을 위한 플래그\n */\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA === 'true';\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    try {\n      const response = await api.get(\"/projects\");\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      const projects = response.data.projects || response.data;\n      return {\n        projects: Array.isArray(projects) ? projects.map(mapBackendToFrontend.project) : [],\n        count: response.data.count || projects.length,\n        hasMore: response.data.hasMore || false,\n        nextKey: response.data.nextKey,\n      };\n    } catch (error) {\n      console.error(\"프로젝트 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  getProject: async (projectId) => {\n    try {\n      const response = await api.get(`/projects/${projectId}`);\n      // 백엔드 데이터를 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 상세 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  createProject: async (projectData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.post(\"/projects\", backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  updateProject: async (projectId, projectData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.project(projectData);\n      const response = await api.put(`/projects/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.project(response.data);\n    } catch (error) {\n      console.error(\"프로젝트 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n\n  deleteProject: async (projectId) => {\n    try {\n      const response = await api.delete(`/projects/${projectId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프로젝트 삭제 실패:\", error);\n      throw error;\n    }\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    try {\n      const response = await api.get(`/projects/${projectId}/upload-url`, {\n        params: { fileName },\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"업로드 URL 생성 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    try {\n      const response = await api.get(`/prompts/${projectId}`, {\n        params: { includeContent, includeStats },\n      });\n      \n      // 백엔드 응답을 프론트엔드 형식으로 변환\n      const promptCards = response.data.promptCards || response.data.prompts || response.data;\n      return {\n        promptCards: Array.isArray(promptCards) ? promptCards.map(mapBackendToFrontend.promptCard) : [],\n        count: response.data.count || promptCards.length,\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 목록 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.post(`/prompts/${projectId}`, backendData);\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    try {\n      // 프론트엔드 데이터를 백엔드 형식으로 변환\n      const backendData = mapFrontendToBackend.promptCard(promptData);\n      const response = await api.put(\n        `/prompts/${projectId}/${promptId}`,\n        backendData\n      );\n      // 응답을 프론트엔드 형식으로 변환\n      return mapBackendToFrontend.promptCard(response.data);\n    } catch (error) {\n      console.error(\"프롬프트 카드 업데이트 실패:\", error);\n      throw error;\n    }\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    try {\n      const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 내용 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    try {\n      const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"프롬프트 카드 삭제 실패:\", error);\n      throw error;\n    }\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    try {\n      const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n        api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n      );\n\n      const responses = await Promise.all(updatePromises);\n      return {\n        message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n        updatedCards: responses.map((r) => mapBackendToFrontend.promptCard(r.data)),\n      };\n    } catch (error) {\n      console.error(\"프롬프트 카드 순서 변경 실패:\", error);\n      throw error;\n    }\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      \n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                \n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, { content: eventData.response });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString(),\n                    });\n                  }\n                  return { result: eventData.fullResponse || fullResponse };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return { result: fullResponse };\n\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n      \n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          data\n        );\n\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n            await new Promise((resolve) => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n          );\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\n\nexport const crewAPI = {\n  // 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\n  createCrewInstance: async (projectId, promptCards) => {\n    console.log(\"크루 인스턴스 생성 요청:\", { projectId, promptCardsCount: promptCards.length });\n    \n    const response = await api.post(\"/crew/instances\", {\n      projectId,\n      promptCards: promptCards.map(card => ({\n        promptId: card.promptId,\n        prompt_text: card.prompt_text,\n        stepOrder: card.stepOrder,\n        isActive: card.isActive\n      }))\n    });\n    \n    console.log(\"크루 인스턴스 생성 완료:\", response.data);\n    return response.data;\n  },\n\n  // 프로젝트의 크루 인스턴스 조회\n  getCrewInstances: async (projectId) => {\n    console.log(\"크루 인스턴스 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/instances/${projectId}`);\n    return response.data;\n  },\n\n  // 크루 설정 조회\n  getCrewConfig: async (projectId) => {\n    console.log(\"크루 설정 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/config/${projectId}`);\n    return response.data;\n  },\n\n  // 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\n  executeMultiAgent: async (projectId, userInput, onProgress = null) => {\n    console.log(\"멀티-에이전트 실행 시작:\", { \n      projectId, \n      inputLength: userInput.length,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      const response = await api.post(\"/crew/execute\", {\n        projectId,\n        userInput,\n        mode: \"parallel\" // 병렬 처리 모드 명시\n      });\n\n      console.log(\"멀티-에이전트 실행 완료:\", {\n        agentCount: Object.keys(response.data.agentResults || {}).length,\n        titleCount: Object.keys(response.data.finalTitles || {}).length,\n        tokenUsage: response.data.tokenUsage,\n        timestamp: new Date().toISOString()\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"멀티-에이전트 실행 실패:\", {\n        error: error.message,\n        status: error.response?.status,\n        data: error.response?.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n\n  // 에이전트별 상세 결과 조회\n  getAgentResults: async (projectId, executionId) => {\n    console.log(\"에이전트 결과 조회:\", { projectId, executionId });\n    \n    const response = await api.get(`/crew/results/${projectId}/${executionId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기 - 인증번호 발송\n  requestPasswordReset: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\n  resetPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", {\n      email: resetData.email,\n      code: resetData.code,\n      newPassword: resetData.newPassword\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n\n// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\n\nexport const getUsage = async (range = 'month') => {\n  console.log(\"사용량 데이터 조회 요청:\", { range });\n  \n  // Development mode - return mock data\n  if (process.env.NODE_ENV === 'development') {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockUsageData;\n  }\n  \n  try {\n    const response = await api.get(`/usage?range=${range}`);\n    return response.data;\n  } catch (error) {\n    console.warn(\"사용량 API 호출 실패, 목 데이터 반환:\", error.message);\n    // Fallback to mock data\n    return mockUsageData;\n  }\n};\n\n// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\n\nexport const conversationAPI = {\n  // 대화 목록 조회 (무한 스크롤)\n  getConversations: async (cursor, limit = 20) => {\n    console.log(\"대화 목록 조회 시작:\", { cursor, limit, API_BASE_URL });\n    \n    const params = new URLSearchParams({ limit: limit.toString() });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    const url = `/conversations?${params}`;\n    console.log(\"API 요청 URL:\", `${API_BASE_URL}${url}`);\n    \n    try {\n      const response = await api.get(url);\n      console.log(\"대화 목록 조회 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 목록 조회 실패:\", error);\n      console.error(\"Error response:\", error.response);\n      console.error(\"Error config:\", error.config);\n      throw error;\n    }\n  },\n\n  // 새 대화 생성\n  createConversation: async (title = 'New Conversation') => {\n    console.log(\"새 대화 생성:\", { title });\n    \n    try {\n      const response = await api.post('/conversations', { title });\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 특정 대화의 메시지 조회 (페이징)\n  getMessages: async (conversationId, cursor, limit = 50) => {\n    console.log(\"메시지 조회:\", { conversationId, cursor, limit });\n    \n    const params = new URLSearchParams({ \n      convId: conversationId,\n      limit: limit.toString() \n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    try {\n      const response = await api.get(`/messages?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"메시지 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 대화 삭제\n  deleteConversation: async (conversationId) => {\n    console.log(\"대화 삭제:\", { conversationId });\n    \n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      console.log(\"대화 삭제 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 삭제 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// Mock data for conversation development\nexport const mockConversations = [\n  {\n    id: '1',\n    title: '서울경제신문 AI 제목 생성 테스트',\n    startedAt: '2025-01-20T10:30:00Z',\n    lastActivityAt: '2025-01-20T15:45:00Z',\n    tokenSum: 1250\n  },\n  {\n    id: '2', \n    title: '경제 뉴스 헤드라인 최적화',\n    startedAt: '2025-01-19T14:20:00Z',\n    lastActivityAt: '2025-01-19T16:30:00Z',\n    tokenSum: 890\n  },\n  {\n    id: '3',\n    title: '부동산 시장 분석 제목 생성',\n    startedAt: '2025-01-18T09:15:00Z',\n    lastActivityAt: '2025-01-18T11:45:00Z',\n    tokenSum: 2150\n  }\n];\n\nexport const mockMessages = {\n  '1': [\n    {\n      id: '2025-01-20T10:30:00.000Z',\n      role: 'user',\n      content: '오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.',\n      tokenCount: 25,\n      timestamp: '2025-01-20T10:30:00.000Z'\n    },\n    {\n      id: '2025-01-20T10:30:05.000Z',\n      role: 'assistant', \n      content: '서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',\n      tokenCount: 95,\n      timestamp: '2025-01-20T10:30:05.000Z'\n    }\n  ],\n  '2': [\n    {\n      id: '2025-01-19T14:20:00.000Z',\n      role: 'user',\n      content: '반도체 산업 관련 경제 뉴스 제목을 생성해주세요.',\n      tokenCount: 20,\n      timestamp: '2025-01-19T14:20:00.000Z'\n    },\n    {\n      id: '2025-01-19T14:20:03.000Z',\n      role: 'assistant',\n      content: '반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',\n      tokenCount: 78,\n      timestamp: '2025-01-19T14:20:03.000Z'\n    }\n  ]\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}