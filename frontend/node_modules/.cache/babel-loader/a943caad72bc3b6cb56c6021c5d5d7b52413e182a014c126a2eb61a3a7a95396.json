{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from \"react\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { promptAPI, handleAPIError } from \"../services/api\";\nimport { toast } from \"react-hot-toast\";\nexport const usePrompts = () => {\n  _s();\n  const {\n    state,\n    actions\n  } = useApp();\n\n  // 프롬프트 목록 로드\n  const loadPrompts = useCallback(async projectId => {\n    try {\n      actions.setLoading(true);\n      const data = await promptAPI.getPrompts(projectId);\n      actions.setPrompts(data.prompts || []);\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n    }\n  }, [actions]);\n\n  // 프롬프트 생성\n  const createPrompt = useCallback(async (projectId, promptData) => {\n    try {\n      actions.setLoading(true);\n      const newPrompt = await promptAPI.createPrompt(projectId, promptData);\n      actions.addPrompt(newPrompt);\n      toast.success(\"프롬프트가 생성되었습니다\");\n      return newPrompt;\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n      throw error;\n    }\n  }, [actions]);\n\n  // 프롬프트 수정\n  const updatePrompt = useCallback(async (projectId, promptId, promptData) => {\n    try {\n      actions.setLoading(true);\n      const updatedPrompt = await promptAPI.updatePrompt(projectId, promptId, promptData);\n      actions.updatePrompt(updatedPrompt);\n      toast.success(\"프롬프트가 수정되었습니다\");\n      return updatedPrompt;\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n      throw error;\n    }\n  }, [actions]);\n\n  // 프롬프트 삭제\n  const deletePrompt = useCallback(async (projectId, promptId) => {\n    try {\n      actions.setLoading(true);\n      await promptAPI.deletePrompt(projectId, promptId);\n      actions.removePrompt(promptId);\n      toast.success(\"프롬프트가 삭제되었습니다\");\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      actions.setError(errorInfo.message);\n      toast.error(errorInfo.message);\n    }\n  }, [actions]);\n  return {\n    prompts: state.prompts,\n    loading: state.loading,\n    error: state.error,\n    loadPrompts,\n    createPrompt,\n    updatePrompt,\n    deletePrompt\n  };\n};\n_s(usePrompts, \"wtStoBWnEVNooluSqJlxPmx1L+k=\", false, function () {\n  return [useApp];\n});","map":{"version":3,"names":["useCallback","useApp","promptAPI","handleAPIError","toast","usePrompts","_s","state","actions","loadPrompts","projectId","setLoading","data","getPrompts","setPrompts","prompts","error","errorInfo","setError","message","createPrompt","promptData","newPrompt","addPrompt","success","updatePrompt","promptId","updatedPrompt","deletePrompt","removePrompt","loading"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/usePrompts.js"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { promptAPI, handleAPIError } from \"../services/api\";\nimport { toast } from \"react-hot-toast\";\n\nexport const usePrompts = () => {\n  const { state, actions } = useApp();\n\n  // 프롬프트 목록 로드\n  const loadPrompts = useCallback(\n    async (projectId) => {\n      try {\n        actions.setLoading(true);\n        const data = await promptAPI.getPrompts(projectId);\n        actions.setPrompts(data.prompts || []);\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n      }\n    },\n    [actions]\n  );\n\n  // 프롬프트 생성\n  const createPrompt = useCallback(\n    async (projectId, promptData) => {\n      try {\n        actions.setLoading(true);\n        const newPrompt = await promptAPI.createPrompt(projectId, promptData);\n        actions.addPrompt(newPrompt);\n        toast.success(\"프롬프트가 생성되었습니다\");\n        return newPrompt;\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n        throw error;\n      }\n    },\n    [actions]\n  );\n\n  // 프롬프트 수정\n  const updatePrompt = useCallback(\n    async (projectId, promptId, promptData) => {\n      try {\n        actions.setLoading(true);\n        const updatedPrompt = await promptAPI.updatePrompt(\n          projectId,\n          promptId,\n          promptData\n        );\n        actions.updatePrompt(updatedPrompt);\n        toast.success(\"프롬프트가 수정되었습니다\");\n        return updatedPrompt;\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n        throw error;\n      }\n    },\n    [actions]\n  );\n\n  // 프롬프트 삭제\n  const deletePrompt = useCallback(\n    async (projectId, promptId) => {\n      try {\n        actions.setLoading(true);\n        await promptAPI.deletePrompt(projectId, promptId);\n        actions.removePrompt(promptId);\n        toast.success(\"프롬프트가 삭제되었습니다\");\n      } catch (error) {\n        const errorInfo = handleAPIError(error);\n        actions.setError(errorInfo.message);\n        toast.error(errorInfo.message);\n      }\n    },\n    [actions]\n  );\n\n  return {\n    prompts: state.prompts,\n    loading: state.loading,\n    error: state.error,\n    loadPrompts,\n    createPrompt,\n    updatePrompt,\n    deletePrompt,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}