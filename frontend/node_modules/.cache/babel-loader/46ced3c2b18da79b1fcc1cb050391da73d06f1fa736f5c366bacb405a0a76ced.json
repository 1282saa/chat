{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || \"https://your-api-gateway-url\";\n\n// API 에러 처리\nexport const handleAPIError = error => {\n  console.error(\"API Error:\", error);\n  if (error.response) {\n    var _error$response$data;\n    return {\n      message: ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"서버 오류가 발생했습니다\",\n      status: error.response.status\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: null\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: null\n    };\n  }\n};\n\n// 공통 fetch 함수\nconst apiFetch = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || `HTTP error! status: ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 프로젝트 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async () => {\n    return await apiFetch(\"/projects\");\n  },\n  // 프로젝트 생성\n  createProject: async projectData => {\n    return await apiFetch(\"/projects\", {\n      method: \"POST\",\n      body: JSON.stringify(projectData)\n    });\n  },\n  // 프로젝트 조회\n  getProject: async projectId => {\n    return await apiFetch(`/projects/${projectId}`);\n  },\n  // 프로젝트 삭제\n  deleteProject: async projectId => {\n    return await apiFetch(`/projects/${projectId}`, {\n      method: \"DELETE\"\n    });\n  }\n};\n\n// 프롬프트 API\nexport const promptAPI = {\n  // 프롬프트 목록 조회\n  getPrompts: async projectId => {\n    return await apiFetch(`/projects/${projectId}/prompts`);\n  },\n  // 프롬프트 생성\n  createPrompt: async (projectId, promptData) => {\n    return await apiFetch(`/projects/${projectId}/prompts`, {\n      method: \"POST\",\n      body: JSON.stringify(promptData)\n    });\n  },\n  // 프롬프트 수정\n  updatePrompt: async (projectId, promptId, promptData) => {\n    return await apiFetch(`/projects/${projectId}/prompts/${promptId}`, {\n      method: \"PUT\",\n      body: JSON.stringify(promptData)\n    });\n  },\n  // 프롬프트 삭제\n  deletePrompt: async (projectId, promptId) => {\n    return await apiFetch(`/projects/${projectId}/prompts/${promptId}`, {\n      method: \"DELETE\"\n    });\n  }\n};\n\n// AI 제목 생성 API\nexport const aiAPI = {\n  // 제목 생성\n  generateTitle: async (projectId, content) => {\n    return await apiFetch(`/projects/${projectId}/generate-title`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        content\n      })\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","handleAPIError","error","console","response","_error$response$data","message","data","status","request","apiFetch","endpoint","options","url","config","headers","fetch","json","ok","Error","projectAPI","getProjects","createProject","projectData","method","body","JSON","stringify","getProject","projectId","deleteProject","promptAPI","getPrompts","createPrompt","promptData","updatePrompt","promptId","deletePrompt","aiAPI","generateTitle","content"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL =\n  process.env.REACT_APP_API_URL || \"https://your-api-gateway-url\";\n\n// API 에러 처리\nexport const handleAPIError = (error) => {\n  console.error(\"API Error:\", error);\n\n  if (error.response) {\n    return {\n      message: error.response.data?.message || \"서버 오류가 발생했습니다\",\n      status: error.response.status,\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: null,\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: null,\n    };\n  }\n};\n\n// 공통 fetch 함수\nconst apiFetch = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options.headers,\n    },\n    ...options,\n  };\n\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.message || `HTTP error! status: ${response.status}`);\n    }\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 프로젝트 API\nexport const projectAPI = {\n  // 프로젝트 목록 조회\n  getProjects: async () => {\n    return await apiFetch(\"/projects\");\n  },\n\n  // 프로젝트 생성\n  createProject: async (projectData) => {\n    return await apiFetch(\"/projects\", {\n      method: \"POST\",\n      body: JSON.stringify(projectData),\n    });\n  },\n\n  // 프로젝트 조회\n  getProject: async (projectId) => {\n    return await apiFetch(`/projects/${projectId}`);\n  },\n\n  // 프로젝트 삭제\n  deleteProject: async (projectId) => {\n    return await apiFetch(`/projects/${projectId}`, {\n      method: \"DELETE\",\n    });\n  },\n};\n\n// 프롬프트 API\nexport const promptAPI = {\n  // 프롬프트 목록 조회\n  getPrompts: async (projectId) => {\n    return await apiFetch(`/projects/${projectId}/prompts`);\n  },\n\n  // 프롬프트 생성\n  createPrompt: async (projectId, promptData) => {\n    return await apiFetch(`/projects/${projectId}/prompts`, {\n      method: \"POST\",\n      body: JSON.stringify(promptData),\n    });\n  },\n\n  // 프롬프트 수정\n  updatePrompt: async (projectId, promptId, promptData) => {\n    return await apiFetch(`/projects/${projectId}/prompts/${promptId}`, {\n      method: \"PUT\",\n      body: JSON.stringify(promptData),\n    });\n  },\n\n  // 프롬프트 삭제\n  deletePrompt: async (projectId, promptId) => {\n    return await apiFetch(`/projects/${projectId}/prompts/${promptId}`, {\n      method: \"DELETE\",\n    });\n  },\n};\n\n// AI 제목 생성 API\nexport const aiAPI = {\n  // 제목 생성\n  generateTitle: async (projectId, content) => {\n    return await apiFetch(`/projects/${projectId}/generate-title`, {\n      method: \"POST\",\n      body: JSON.stringify({ content }),\n    });\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}