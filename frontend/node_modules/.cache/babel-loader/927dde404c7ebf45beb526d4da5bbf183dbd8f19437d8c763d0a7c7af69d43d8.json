{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\nimport { crewAPI } from \"../services/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\n/**\n * 멀티-에이전트 AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processMultiAgentResponse = result => {\n  if (!result) {\n    console.error(\"멀티-에이전트 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date().toISOString(),\n      isError: true\n    };\n  }\n\n  // 멀티-에이전트 결과 구성\n  const agentResults = result.agentResults || {};\n  const finalTitles = result.finalTitles || {};\n  const tokenUsage = result.tokenUsage || 0;\n\n  // 에이전트별 결과를 포맷팅\n  const agentSummary = Object.keys(agentResults).map(agentType => {\n    const agentResult = agentResults[agentType];\n    const titles = finalTitles[agentType] || [];\n    return {\n      agentType,\n      agentName: getAgentName(agentType),\n      result: (agentResult === null || agentResult === void 0 ? void 0 : agentResult.content) || \"결과 없음\",\n      titles: titles,\n      tokenCount: (agentResult === null || agentResult === void 0 ? void 0 : agentResult.tokenCount) || 0\n    };\n  });\n\n  // 전체 제목 목록 생성\n  const allTitles = Object.values(finalTitles).flat();\n  return {\n    id: \"multi-agent-\" + Date.now(),\n    type: \"assistant\",\n    content: formatMultiAgentContent(agentSummary, allTitles),\n    timestamp: new Date(),\n    // 멀티-에이전트 특화 데이터\n    isMultiAgent: true,\n    agentResults: agentSummary,\n    allTitles: allTitles,\n    tokenUsage: tokenUsage\n  };\n};\n\n/**\n * 에이전트 타입을 한국어 이름으로 변환\n */\nconst getAgentName = agentType => {\n  const agentNames = {\n    journalism: \"📰 저널리즘 충실형\",\n    balanced: \"⚖️ 균형잡힌 후킹형\",\n    click: \"🎯 클릭유도형\",\n    seo: \"🔍 SEO/AEO 최적화형\",\n    social: \"📱 소셜미디어 공유형\"\n  };\n  return agentNames[agentType] || `🤖 ${agentType}`;\n};\n\n/**\n * 멀티-에이전트 결과를 UI 표시용 텍스트로 포맷팅\n */\nconst formatMultiAgentContent = (agentSummary, allTitles) => {\n  let content = \"🚀 **멀티-에이전트 분석 완료**\\n\\n\";\n\n  // 전체 제목 요약\n  if (allTitles.length > 0) {\n    content += \"📋 **생성된 제목 목록:**\\n\";\n    allTitles.forEach((title, index) => {\n      content += `${index + 1}. ${title}\\n`;\n    });\n    content += \"\\n\";\n  }\n\n  // 에이전트별 상세 결과\n  content += \"🔍 **에이전트별 분석 결과:**\\n\\n\";\n  agentSummary.forEach(agent => {\n    content += `### ${agent.agentName}\\n`;\n    if (agent.titles.length > 0) {\n      content += \"**생성 제목:**\\n\";\n      agent.titles.forEach(title => {\n        content += `• ${title}\\n`;\n      });\n    }\n    content += `**토큰 사용량:** ${agent.tokenCount}개\\n\\n`;\n  });\n  return content;\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = [], conversationId = null) => {\n  _s();\n  const {\n    user\n  } = useAuth(); // Add user from AuthContext\n\n  // 디버깅 로그 (첫 번째 렌더링에만)\n  const isFirstRender = useRef(true);\n  if (isFirstRender.current) {\n    console.log('useChat 초기화:', {\n      projectId,\n      projectName,\n      promptCardsLength: promptCards === null || promptCards === void 0 ? void 0 : promptCards.length,\n      conversationId,\n      userId: user === null || user === void 0 ? void 0 : user.id\n    });\n    isFirstRender.current = false;\n  }\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const [inputHeight, setInputHeight] = useState(24); // 동적 높이 관리\n  const [selectedModel, setSelectedModel] = useState(\"anthropic.claude-3-5-sonnet-20241022-v2:0\");\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 사용자 스크롤 상태 추적\n  const [isUserScrolling, setIsUserScrolling] = useState(false);\n  const scrollContainerRef = useRef(null);\n  const lastScrollTopRef = useRef(0);\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener\n  } = useWebSocket(projectId);\n\n  // 초기 메시지 설정 - projectId 변경시에만 초기화\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectId]); // projectName 대신 projectId 사용\n\n  // 사용자 스크롤 감지 함수\n  const handleScroll = useCallback(() => {\n    if (!scrollContainerRef.current) return;\n    const container = scrollContainerRef.current;\n    const currentScrollTop = container.scrollTop;\n    const maxScrollTop = container.scrollHeight - container.clientHeight;\n\n    // 사용자가 수동으로 스크롤했는지 감지\n    if (Math.abs(currentScrollTop - lastScrollTopRef.current) > 2) {\n      const isAtBottom = currentScrollTop >= maxScrollTop - 20;\n\n      // 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\n      setIsUserScrolling(!isAtBottom);\n    }\n    lastScrollTopRef.current = currentScrollTop;\n  }, []);\n  const scrollToBottom = useCallback(() => {\n    // 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n    if (!isUserScrolling && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [isUserScrolling]);\n\n  // 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log(\"WebSocket 메시지 수신:\", data);\n        const currentStreamingId = streamingMessageIdRef.current;\n        switch (data.type) {\n          case \"stream_start\":\n            console.log(\"WebSocket 스트리밍 시작\");\n            break;\n          case \"progress\":\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n          case \"stream_chunk\":\n            if (currentStreamingId) {\n              setMessages(prev => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n                console.log(\"스트림 청크 처리:\", {\n                  currentStreamingId,\n                  streamingMsgIndex,\n                  messagesLength: prev.length,\n                  content: data.content\n                });\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent = updatedMessages[streamingMsgIndex].content || \"\";\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true\n                  };\n                  console.log(\"메시지 업데이트됨:\", updatedMessages[streamingMsgIndex]);\n                } else {\n                  console.log(\"스트리밍 메시지를 찾을 수 없음, 메시지 ID들:\", prev.map(m => m.id));\n                }\n                return updatedMessages;\n              });\n              // 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n              if (!isUserScrolling) {\n                scrollToBottom();\n              }\n            } else {\n              console.log(\"currentStreamingId가 null임\");\n            }\n            break;\n          case \"stream_complete\":\n            if (currentStreamingId) {\n              setMessages(prev => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date().toISOString()\n                  };\n                }\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n          case \"error\":\n            console.error(\"WebSocket 스트리밍 오류:\", data.message);\n            if (currentStreamingId) {\n              setMessages(prev => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date().toISOString()\n                  };\n                }\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n            toast.error(data.message);\n            break;\n          default:\n            console.log(\"알 수 없는 WebSocket 메시지 타입:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"WebSocket 메시지 파싱 오류:\", error);\n      }\n    };\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback((chunk, metadata) => {\n    const currentStreamingId = streamingMessageIdRef.current;\n    console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n    if (!currentStreamingId) {\n      console.error(\"스트리밍 ID가 없습니다!\");\n      return;\n    }\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n      if (streamingMsgIndex !== -1) {\n        // 기존 스트리밍 메시지 업데이트\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: updatedMessages[streamingMsgIndex].content + chunk,\n          isLoading: true,\n          isStreaming: true\n        };\n        console.log(\"스트리밍 메시지 업데이트 성공:\", updatedMessages[streamingMsgIndex].content);\n      } else {\n        console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n      }\n      return updatedMessages;\n    });\n\n    // 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\n    if (!isUserScrolling) {\n      scrollToBottom();\n    }\n  }, [scrollToBottom, isUserScrolling]);\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(result => {\n    const currentStreamingId = streamingMessageIdRef.current;\n    console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n    if (!currentStreamingId) {\n      console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n      return;\n    }\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n      if (streamingMsgIndex !== -1) {\n        // 스트리밍 메시지 완료 처리\n        updatedMessages[streamingMsgIndex] = {\n          ...updatedMessages[streamingMsgIndex],\n          content: result.result,\n          isLoading: false,\n          isStreaming: false,\n          performance_metrics: result.performance_metrics,\n          model_info: result.model_info,\n          timestamp: new Date().toISOString()\n        };\n        console.log(\"스트리밍 완료 처리 성공:\", updatedMessages[streamingMsgIndex].content);\n      } else {\n        console.error(\"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\", currentStreamingId);\n      }\n      return updatedMessages;\n    });\n\n    // 스트리밍 ID 초기화\n    streamingMessageIdRef.current = null;\n\n    // 입력 활성화\n    console.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");\n    setCanSendMessage(true);\n\n    // 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log(\"생성 중단 요청\");\n\n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n\n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n\n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages(prev => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === currentStreamingId);\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + \"\\n\\n[생성이 중단되었습니다]\",\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date().toISOString()\n          };\n        }\n        return updatedMessages;\n      });\n      streamingMessageIdRef.current = null;\n    }\n\n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n\n    // orchestration 상태 리셋\n    resetOrchestration();\n    toast.success(\"생성이 중단되었습니다\");\n  }, [resetOrchestration]);\n\n  /**\n   * 입력창 높이 자동 조절\n   */\n  const adjustInputHeight = useCallback(value => {\n    if (!value.trim()) {\n      setInputHeight(24); // 기본 높이\n      return;\n    }\n\n    // 줄 수 계산 (대략적)\n    const lines = value.split('\\n').length;\n    const charBasedLines = Math.ceil(value.length / 80); // 80자당 1줄로 추정\n    const estimatedLines = Math.max(lines, charBasedLines);\n\n    // 높이 계산 (lineHeight: 1.4, fontSize: 16px)\n    let calculatedHeight;\n    if (estimatedLines <= 3) {\n      calculatedHeight = 24 + (estimatedLines - 1) * 22; // 기본 + 추가 줄\n    } else if (estimatedLines <= 10) {\n      calculatedHeight = 150 + (estimatedLines - 6) * 15; // 중간 범위\n    } else {\n      calculatedHeight = Math.min(400, 150 + (estimatedLines - 6) * 12); // 최대 400px\n    }\n    setInputHeight(Math.max(24, calculatedHeight));\n  }, []);\n\n  /**\n   * 입력값 변경 처리\n   */\n  const handleInputChange = useCallback(value => {\n    setInputValue(value);\n    adjustInputHeight(value);\n  }, [adjustInputHeight]);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"해들 전송 호출:\", {\n      inputValue: inputValue.trim(),\n      isGenerating,\n      canSendMessage\n    });\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"전송 중단: 조건 부족\");\n      return;\n    }\n\n    // 입력 비활성화\n    console.log(\"입력 비활성화\");\n    setCanSendMessage(false);\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date().toISOString()\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date().toISOString(),\n      isLoading: true,\n      isStreaming: true\n    };\n    setMessages(prev => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n    setInputHeight(24); // 입력창 높이 초기화\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages.filter(msg => !msg.isLoading && !msg.isError && !msg.isStreaming).map(msg => ({\n      role: msg.type === \"user\" ? \"user\" : \"assistant\",\n      content: msg.content\n    }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n    console.log(\"대화 히스토리 생성:\", {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6) // 최근 6개만 로그에 표시\n    });\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const safePromptCards = Array.isArray(promptCards) ? promptCards : [];\n      const activePromptCards = safePromptCards.filter(card => card.isActive !== false && card.enabled !== false).map(card => ({\n        promptId: card.promptId || card.prompt_id,\n        title: card.title || \"Untitled\",\n        prompt_text: card.prompt_text || card.content || \"\",\n        tags: card.tags || [],\n        isActive: card.isActive !== false,\n        stepOrder: card.stepOrder || 0\n      })).filter(card => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n      .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n\n      console.log(\"대화 전송 데이터 확인:\", {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map(card => ({\n          id: card.promptId,\n          title: card.title,\n          contentLength: card.prompt_text.length,\n          stepOrder: card.stepOrder,\n          hasContent: !!card.prompt_text.trim()\n        }))\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");\n        console.log(\"스트리밍 매개변수 확인:\", {\n          projectId,\n          userInput: userMessage.content,\n          conversationId,\n          userSub: user === null || user === void 0 ? void 0 : user.id,\n          historyLength: trimmedChatHistory.length,\n          promptCardsLength: activePromptCards.length\n        });\n        const success = wsStartStreaming(userMessage.content, trimmedChatHistory, activePromptCards, selectedModel, conversationId, // Add conversationId\n        user === null || user === void 0 ? void 0 : user.id // Add userSub from AuthContext\n        );\n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");\n        }\n      } else {\n        console.log(\"WebSocket 미연결, SSE 모드 사용\");\n      }\n\n      // 🌟 멀티-에이전트 시스템 실행\n      console.log(\"멀티-에이전트 시스템 실행 시작\");\n\n      // 1. 먼저 프롬프트 카드들을 crew 인스턴스로 생성\n      if (activePromptCards.length > 0) {\n        try {\n          console.log(\"프롬프트 카드 → 크루 인스턴스 변환 시도\");\n          await crewAPI.createCrewInstance(projectId, activePromptCards);\n          console.log(\"크루 인스턴스 생성 완료\");\n        } catch (instanceError) {\n          console.log(\"크루 인스턴스 생성 실패 (이미 존재하거나 기타 이유):\", instanceError.message);\n          // 이미 생성되어 있을 수 있으므로 계속 진행\n        }\n      }\n\n      // 2. 멀티-에이전트 병렬 실행\n      const multiAgentResult = await crewAPI.executeMultiAgent(projectId, userMessage.content, progress => {\n        // 진행상황 업데이트 (옵션)\n        console.log(\"멀티-에이전트 진행상황:\", progress);\n      });\n      console.log(\"멀티-에이전트 실행 완료:\", multiAgentResult);\n\n      // 3. 결과를 UI 메시지로 변환\n      const assistantMessage = processMultiAgentResponse(multiAgentResult);\n\n      // 4. 스트리밍 메시지를 최종 결과로 교체\n      setMessages(prev => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(msg => msg.id === streamingMessageIdRef.current);\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = assistantMessage;\n        } else {\n          updatedMessages.push(assistantMessage);\n        }\n        return updatedMessages;\n      });\n      streamingMessageIdRef.current = null;\n      setCanSendMessage(true);\n\n      // 성공 토스트\n      toast.success(`${Object.keys(multiAgentResult.agentResults || {}).length}개 에이전트 분석 완료!`);\n    } catch (error) {\n      var _error$response;\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: errorType === \"timeout\" ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\" : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date().toISOString(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status\n        }\n      };\n      setMessages(prev => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(msg => msg.id !== currentStreamingId);\n        return [...filteredMessages, errorMessage];\n      });\n      streamingMessageIdRef.current = null;\n\n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n\n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [inputValue, isGenerating, executeOrchestration, handleStreamingResponse, handleStreamingComplete, messages]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    handleInputChange,\n    // 새로운 입력 핸들러\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    inputHeight,\n    // 동적 높이\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError,\n    // 스크롤 관련 추가\n    scrollContainerRef,\n    handleScroll,\n    isUserScrolling,\n    // 모델 선택 관련 추가\n    selectedModel,\n    setSelectedModel\n  };\n};\n_s(useChat, \"hDgifrPKuat87mVTvBmqdEfFaQ8=\", false, function () {\n  return [useAuth, useOrchestration, useWebSocket];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","useWebSocket","crewAPI","useAuth","processMultiAgentResponse","result","console","error","id","Date","now","type","content","timestamp","toISOString","isError","agentResults","finalTitles","tokenUsage","agentSummary","Object","keys","map","agentType","agentResult","titles","agentName","getAgentName","tokenCount","allTitles","values","flat","formatMultiAgentContent","isMultiAgent","agentNames","journalism","balanced","click","seo","social","length","forEach","title","index","agent","useChat","projectId","projectName","promptCards","conversationId","_s","user","isFirstRender","current","log","promptCardsLength","userId","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","canSendMessage","setCanSendMessage","inputHeight","setInputHeight","selectedModel","setSelectedModel","streamingMessageIdRef","currentWebSocketRef","currentExecutionIdRef","messagesEndRef","inputRef","isUserScrolling","setIsUserScrolling","scrollContainerRef","lastScrollTopRef","isExecuting","isGenerating","isStreaming","executeOrchestration","pollOrchestrationResult","resetOrchestration","isConnected","wsConnected","isConnecting","wsConnecting","wsError","startStreaming","wsStartStreaming","addMessageListener","removeMessageListener","handleScroll","container","currentScrollTop","scrollTop","maxScrollTop","scrollHeight","clientHeight","Math","abs","isAtBottom","scrollToBottom","scrollIntoView","behavior","handleWebSocketMessage","event","data","JSON","parse","currentStreamingId","step","progress","prev","updatedMessages","streamingMsgIndex","findIndex","msg","messagesLength","currentContent","isLoading","m","fullContent","message","handleStreamingResponse","chunk","metadata","handleStreamingComplete","performance_metrics","model_info","handleStopGeneration","close","success","adjustInputHeight","value","trim","lines","split","charBasedLines","ceil","estimatedLines","max","calculatedHeight","min","handleInputChange","handleSendMessage","userMessage","streamMsgId","streamingMessage","allMessages","chatHistory","filter","role","maxHistoryLength","trimmedChatHistory","slice","totalMessages","fullHistoryLength","trimmedHistoryLength","recentHistory","safePromptCards","Array","isArray","activePromptCards","card","isActive","enabled","promptId","prompt_id","prompt_text","tags","stepOrder","sort","a","b","messageContent","chatHistoryLength","promptCardsCount","contentLength","hasContent","userInput","userSub","historyLength","createCrewInstance","instanceError","multiAgentResult","executeMultiAgent","assistantMessage","push","_error$response","errorType","code","errorMessage","errorDetails","status","response","filteredMessages","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","setTimeout","handleCopyTitle","resetChat","streamingMessageId"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\nimport { useWebSocket } from \"./useWebSocket\";\nimport { crewAPI } from \"../services/api\";\nimport { useAuth } from \"../contexts/AuthContext\";\n\n/**\n * 멀티-에이전트 AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processMultiAgentResponse = (result) => {\n  if (!result) {\n    console.error(\"멀티-에이전트 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date().toISOString(),\n      isError: true,\n    };\n  }\n\n  // 멀티-에이전트 결과 구성\n  const agentResults = result.agentResults || {};\n  const finalTitles = result.finalTitles || {};\n  const tokenUsage = result.tokenUsage || 0;\n\n  // 에이전트별 결과를 포맷팅\n  const agentSummary = Object.keys(agentResults).map(agentType => {\n    const agentResult = agentResults[agentType];\n    const titles = finalTitles[agentType] || [];\n    \n    return {\n      agentType,\n      agentName: getAgentName(agentType),\n      result: agentResult?.content || \"결과 없음\",\n      titles: titles,\n      tokenCount: agentResult?.tokenCount || 0\n    };\n  });\n\n  // 전체 제목 목록 생성\n  const allTitles = Object.values(finalTitles).flat();\n\n  return {\n    id: \"multi-agent-\" + Date.now(),\n    type: \"assistant\",\n    content: formatMultiAgentContent(agentSummary, allTitles),\n    timestamp: new Date(),\n    // 멀티-에이전트 특화 데이터\n    isMultiAgent: true,\n    agentResults: agentSummary,\n    allTitles: allTitles,\n    tokenUsage: tokenUsage,\n  };\n};\n\n/**\n * 에이전트 타입을 한국어 이름으로 변환\n */\nconst getAgentName = (agentType) => {\n  const agentNames = {\n    journalism: \"📰 저널리즘 충실형\",\n    balanced: \"⚖️ 균형잡힌 후킹형\", \n    click: \"🎯 클릭유도형\",\n    seo: \"🔍 SEO/AEO 최적화형\",\n    social: \"📱 소셜미디어 공유형\"\n  };\n  return agentNames[agentType] || `🤖 ${agentType}`;\n};\n\n/**\n * 멀티-에이전트 결과를 UI 표시용 텍스트로 포맷팅\n */\nconst formatMultiAgentContent = (agentSummary, allTitles) => {\n  let content = \"🚀 **멀티-에이전트 분석 완료**\\n\\n\";\n  \n  // 전체 제목 요약\n  if (allTitles.length > 0) {\n    content += \"📋 **생성된 제목 목록:**\\n\";\n    allTitles.forEach((title, index) => {\n      content += `${index + 1}. ${title}\\n`;\n    });\n    content += \"\\n\";\n  }\n\n  // 에이전트별 상세 결과\n  content += \"🔍 **에이전트별 분석 결과:**\\n\\n\";\n  agentSummary.forEach(agent => {\n    content += `### ${agent.agentName}\\n`;\n    if (agent.titles.length > 0) {\n      content += \"**생성 제목:**\\n\";\n      agent.titles.forEach(title => {\n        content += `• ${title}\\n`;\n      });\n    }\n    content += `**토큰 사용량:** ${agent.tokenCount}개\\n\\n`;\n  });\n\n  return content;\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = [], conversationId = null) => {\n  const { user } = useAuth(); // Add user from AuthContext\n  \n  // 디버깅 로그 (첫 번째 렌더링에만)\n  const isFirstRender = useRef(true);\n  if (isFirstRender.current) {\n    console.log('useChat 초기화:', {\n      projectId,\n      projectName,\n      promptCardsLength: promptCards?.length,\n      conversationId,\n      userId: user?.id\n    });\n    isFirstRender.current = false;\n  }\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [canSendMessage, setCanSendMessage] = useState(true);\n  const [inputHeight, setInputHeight] = useState(24); // 동적 높이 관리\n  const [selectedModel, setSelectedModel] = useState(\"anthropic.claude-3-5-sonnet-20241022-v2:0\");\n  const streamingMessageIdRef = useRef(null);\n  const currentWebSocketRef = useRef(null);\n  const currentExecutionIdRef = useRef(null);\n  \n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // 사용자 스크롤 상태 추적\n  const [isUserScrolling, setIsUserScrolling] = useState(false);\n  const scrollContainerRef = useRef(null);\n  const lastScrollTopRef = useRef(0);\n\n  const {\n    isExecuting: isGenerating,\n    isStreaming,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // WebSocket 훅 추가\n  const {\n    isConnected: wsConnected,\n    isConnecting: wsConnecting,\n    error: wsError,\n    startStreaming: wsStartStreaming,\n    addMessageListener,\n    removeMessageListener,\n  } = useWebSocket(projectId);\n\n  // 초기 메시지 설정 - projectId 변경시에만 초기화\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectId]); // projectName 대신 projectId 사용\n\n  // 사용자 스크롤 감지 함수\n  const handleScroll = useCallback(() => {\n    if (!scrollContainerRef.current) return;\n\n    const container = scrollContainerRef.current;\n    const currentScrollTop = container.scrollTop;\n    const maxScrollTop = container.scrollHeight - container.clientHeight;\n\n    // 사용자가 수동으로 스크롤했는지 감지\n    if (Math.abs(currentScrollTop - lastScrollTopRef.current) > 2) {\n      const isAtBottom = currentScrollTop >= maxScrollTop - 20;\n\n      // 하단에 있을 때만 자동 스크롤 허용, 그 외는 사용자 스크롤 모드\n      setIsUserScrolling(!isAtBottom);\n    }\n\n    lastScrollTopRef.current = currentScrollTop;\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    // 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n    if (!isUserScrolling && messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [isUserScrolling]);\n\n  // 메시지 추가 시 스크롤 하단으로 (사용자 스크롤 중이 아닐 때만)\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  // WebSocket 메시지 리스너 설정\n  useEffect(() => {\n    const handleWebSocketMessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log(\"WebSocket 메시지 수신:\", data);\n\n        const currentStreamingId = streamingMessageIdRef.current;\n\n        switch (data.type) {\n          case \"stream_start\":\n            console.log(\"WebSocket 스트리밍 시작\");\n            break;\n\n          case \"progress\":\n            // 진행 상황 로그만 남기고 UI 업데이트는 제거\n            console.log(`진행 상황: ${data.step} (${data.progress}%)`);\n            break;\n\n          case \"stream_chunk\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                console.log(\"스트림 청크 처리:\", {\n                  currentStreamingId,\n                  streamingMsgIndex,\n                  messagesLength: prev.length,\n                  content: data.content\n                });\n\n                if (streamingMsgIndex !== -1) {\n                  // 기존 내용에 새 청크 추가\n                  const currentContent =\n                    updatedMessages[streamingMsgIndex].content || \"\";\n\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: currentContent + data.content,\n                    isLoading: true,\n                    isStreaming: true,\n                  };\n                  \n                  console.log(\"메시지 업데이트됨:\", updatedMessages[streamingMsgIndex]);\n                } else {\n                  console.log(\"스트리밍 메시지를 찾을 수 없음, 메시지 ID들:\", prev.map(m => m.id));\n                }\n\n                return updatedMessages;\n              });\n              // 스트리밍 중에는 사용자가 스크롤 중이 아닐 때만 자동 스크롤\n              if (!isUserScrolling) {\n                scrollToBottom();\n              }\n            } else {\n              console.log(\"currentStreamingId가 null임\");\n            }\n            break;\n\n          case \"stream_complete\":\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content: data.fullContent,\n                    isLoading: false,\n                    isStreaming: false,\n                    timestamp: new Date().toISOString(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n              scrollToBottom();\n            }\n            break;\n\n          case \"error\":\n            console.error(\"WebSocket 스트리밍 오류:\", data.message);\n            if (currentStreamingId) {\n              setMessages((prev) => {\n                const updatedMessages = [...prev];\n                const streamingMsgIndex = updatedMessages.findIndex(\n                  (msg) => msg.id === currentStreamingId\n                );\n\n                if (streamingMsgIndex !== -1) {\n                  updatedMessages[streamingMsgIndex] = {\n                    ...updatedMessages[streamingMsgIndex],\n                    content:\n                      \"메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n                    isLoading: false,\n                    isStreaming: false,\n                    isError: true,\n                    timestamp: new Date().toISOString(),\n                  };\n                }\n\n                return updatedMessages;\n              });\n              streamingMessageIdRef.current = null;\n            }\n            toast.error(data.message);\n            break;\n\n          default:\n            console.log(\"알 수 없는 WebSocket 메시지 타입:\", data.type);\n        }\n      } catch (error) {\n        console.error(\"WebSocket 메시지 파싱 오류:\", error);\n      }\n    };\n\n    if (wsConnected) {\n      addMessageListener(handleWebSocketMessage);\n    }\n\n    return () => {\n      if (wsConnected) {\n        removeMessageListener(handleWebSocketMessage);\n      }\n    };\n  }, [wsConnected, addMessageListener, removeMessageListener, scrollToBottom]);\n\n  /**\n   * 스트리밍 응답 처리 함수\n   */\n  const handleStreamingResponse = useCallback(\n    (chunk, metadata) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"청크 수신:\", chunk, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 기존 스트리밍 메시지 업데이트\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: updatedMessages[streamingMsgIndex].content + chunk,\n            isLoading: true,\n            isStreaming: true,\n          };\n          console.log(\n            \"스트리밍 메시지 업데이트 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\"스트리밍 메시지를 찾을 수 없음:\", currentStreamingId);\n        }\n\n        return updatedMessages;\n      });\n\n      // 스크롤 조정 (사용자가 스크롤 중이 아닐 때만)\n      if (!isUserScrolling) {\n        scrollToBottom();\n      }\n    },\n    [scrollToBottom, isUserScrolling]\n  );\n\n  /**\n   * 스트리밍 완료 처리 함수\n   */\n  const handleStreamingComplete = useCallback(\n    (result) => {\n      const currentStreamingId = streamingMessageIdRef.current;\n\n      console.log(\"스트리밍 완료:\", result, \"스트리밍 ID:\", currentStreamingId);\n\n      if (!currentStreamingId) {\n        console.error(\"스트리밍 완료 처리 중 ID가 없습니다!\");\n        return;\n      }\n\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          // 스트리밍 메시지 완료 처리\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content: result.result,\n            isLoading: false,\n            isStreaming: false,\n            performance_metrics: result.performance_metrics,\n            model_info: result.model_info,\n            timestamp: new Date().toISOString(),\n          };\n          console.log(\n            \"스트리밍 완료 처리 성공:\",\n            updatedMessages[streamingMsgIndex].content\n          );\n        } else {\n          console.error(\n            \"스트리밍 완료 처리 중 메시지를 찾을 수 없음:\",\n            currentStreamingId\n          );\n        }\n\n        return updatedMessages;\n      });\n\n      // 스트리밍 ID 초기화\n      streamingMessageIdRef.current = null;\n\n      // 입력 활성화\n      console.log(\"WebSocket 스트리밍 완료 - 입력 활성화\");\n      setCanSendMessage(true);\n\n      // 스크롤 조정 (스트리밍 완료 시에는 항상 하단으로)\n      scrollToBottom();\n    },\n    [scrollToBottom]\n  );\n\n  /**\n   * 스트리밍 중단 함수\n   */\n  const handleStopGeneration = useCallback(() => {\n    console.log(\"생성 중단 요청\");\n\n    // WebSocket 연결 종료\n    if (currentWebSocketRef.current) {\n      currentWebSocketRef.current.close();\n      currentWebSocketRef.current = null;\n    }\n\n    // 현재 실행 중인 작업 중단\n    if (currentExecutionIdRef.current) {\n      // 여기서 실제 API 호출 중단 로직을 추가할 수 있습니다\n      currentExecutionIdRef.current = null;\n    }\n\n    // 스트리밍 메시지 상태 업데이트\n    const currentStreamingId = streamingMessageIdRef.current;\n    if (currentStreamingId) {\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === currentStreamingId\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = {\n            ...updatedMessages[streamingMsgIndex],\n            content:\n              updatedMessages[streamingMsgIndex].content +\n              \"\\n\\n[생성이 중단되었습니다]\",\n            isLoading: false,\n            isStreaming: false,\n            timestamp: new Date().toISOString(),\n          };\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n    }\n\n    // 입력 가능 상태로 복원\n    setCanSendMessage(true);\n\n    // orchestration 상태 리셋\n    resetOrchestration();\n\n    toast.success(\"생성이 중단되었습니다\");\n  }, [resetOrchestration]);\n\n  /**\n   * 입력창 높이 자동 조절\n   */\n  const adjustInputHeight = useCallback((value) => {\n    if (!value.trim()) {\n      setInputHeight(24); // 기본 높이\n      return;\n    }\n    \n    // 줄 수 계산 (대략적)\n    const lines = value.split('\\n').length;\n    const charBasedLines = Math.ceil(value.length / 80); // 80자당 1줄로 추정\n    const estimatedLines = Math.max(lines, charBasedLines);\n    \n    // 높이 계산 (lineHeight: 1.4, fontSize: 16px)\n    let calculatedHeight;\n    if (estimatedLines <= 3) {\n      calculatedHeight = 24 + (estimatedLines - 1) * 22; // 기본 + 추가 줄\n    } else if (estimatedLines <= 10) {\n      calculatedHeight = 150 + (estimatedLines - 6) * 15; // 중간 범위\n    } else {\n      calculatedHeight = Math.min(400, 150 + (estimatedLines - 6) * 12); // 최대 400px\n    }\n    \n    setInputHeight(Math.max(24, calculatedHeight));\n  }, []);\n  \n  /**\n   * 입력값 변경 처리\n   */\n  const handleInputChange = useCallback((value) => {\n    setInputValue(value);\n    adjustInputHeight(value);\n  }, [adjustInputHeight]);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"해들 전송 호출:\", {\n      inputValue: inputValue.trim(),\n      isGenerating,\n      canSendMessage,\n    });\n\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"전송 중단: 조건 부족\");\n      return;\n    }\n\n    // 입력 비활성화\n    console.log(\"입력 비활성화\");\n    setCanSendMessage(false);\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date().toISOString(),\n    };\n\n    // 스트리밍 메시지 ID 생성\n    const streamMsgId = \"streaming-\" + Date.now();\n    streamingMessageIdRef.current = streamMsgId;\n\n    console.log(\"새 스트리밍 메시지 ID 생성:\", streamMsgId);\n\n    // 스트리밍 응답을 위한 초기 메시지\n    const streamingMessage = {\n      id: streamMsgId,\n      type: \"assistant\",\n      content: \"\",\n      timestamp: new Date().toISOString(),\n      isLoading: true,\n      isStreaming: true,\n    };\n\n    setMessages((prev) => [...prev, userMessage, streamingMessage]);\n    setInputValue(\"\");\n    setInputHeight(24); // 입력창 높이 초기화\n\n    // 기존 메시지 + 현재 사용자 메시지를 포함한 대화 히스토리 생성\n    const allMessages = [...messages, userMessage];\n    const chatHistory = allMessages\n      .filter((msg) => !msg.isLoading && !msg.isError && !msg.isStreaming)\n      .map((msg) => ({\n        role: msg.type === \"user\" ? \"user\" : \"assistant\",\n        content: msg.content,\n      }));\n\n    // 최대 대화 기억 설정 (최근 50개 메시지로 최대 메모리 유지)\n    const maxHistoryLength = 50;\n    const trimmedChatHistory = chatHistory.slice(-maxHistoryLength);\n\n    console.log(\"대화 히스토리 생성:\", {\n      totalMessages: allMessages.length,\n      fullHistoryLength: chatHistory.length,\n      trimmedHistoryLength: trimmedChatHistory.length,\n      maxHistoryLength: maxHistoryLength,\n      recentHistory: trimmedChatHistory.slice(-6), // 최근 6개만 로그에 표시\n    });\n\n    try {\n      // 프롬프트 카드 정보 추가 - 활성화된 카드만 필터링하고 백엔드 형식에 맞게 변환\n      const safePromptCards = Array.isArray(promptCards) ? promptCards : [];\n      const activePromptCards = safePromptCards\n        .filter((card) => card.isActive !== false && card.enabled !== false)\n        .map((card) => ({\n          promptId: card.promptId || card.prompt_id,\n          title: card.title || \"Untitled\",\n          prompt_text: card.prompt_text || card.content || \"\",\n          tags: card.tags || [],\n          isActive: card.isActive !== false,\n          stepOrder: card.stepOrder || 0,\n        }))\n        .filter((card) => card.prompt_text.trim()) // 프롬프트 내용이 있는 것만\n        .sort((a, b) => (a.stepOrder || 0) - (b.stepOrder || 0)); // stepOrder로 정렬\n\n      console.log(\"대화 전송 데이터 확인:\", {\n        messageContent: userMessage.content,\n        chatHistoryLength: trimmedChatHistory.length,\n        promptCardsCount: activePromptCards.length,\n        chatHistory: trimmedChatHistory,\n        promptCards: activePromptCards.map((card) => ({\n          id: card.promptId,\n          title: card.title,\n          contentLength: card.prompt_text.length,\n          stepOrder: card.stepOrder,\n          hasContent: !!card.prompt_text.trim(),\n        })),\n      });\n\n      // WebSocket 연결 확인 및 실시간 스트리밍 시도\n      if (wsConnected) {\n        console.log(\"WebSocket을 통한 실시간 스트리밍 시작\");\n        console.log(\"스트리밍 매개변수 확인:\", {\n          projectId,\n          userInput: userMessage.content,\n          conversationId,\n          userSub: user?.id,\n          historyLength: trimmedChatHistory.length,\n          promptCardsLength: activePromptCards.length\n        });\n\n        const success = wsStartStreaming(\n          userMessage.content,\n          trimmedChatHistory,\n          activePromptCards,\n          selectedModel,\n          conversationId, // Add conversationId\n          user?.id // Add userSub from AuthContext\n        );\n\n        if (success) {\n          // WebSocket 스트리밍 성공, 나머지는 리스너에서 처리\n          return;\n        } else {\n          console.log(\"WebSocket 전송 실패, SSE 폴백 모드로 전환\");\n        }\n      } else {\n        console.log(\"WebSocket 미연결, SSE 모드 사용\");\n      }\n\n      // 🌟 멀티-에이전트 시스템 실행\n      console.log(\"멀티-에이전트 시스템 실행 시작\");\n\n      // 1. 먼저 프롬프트 카드들을 crew 인스턴스로 생성\n      if (activePromptCards.length > 0) {\n        try {\n          console.log(\"프롬프트 카드 → 크루 인스턴스 변환 시도\");\n          await crewAPI.createCrewInstance(projectId, activePromptCards);\n          console.log(\"크루 인스턴스 생성 완료\");\n        } catch (instanceError) {\n          console.log(\"크루 인스턴스 생성 실패 (이미 존재하거나 기타 이유):\", instanceError.message);\n          // 이미 생성되어 있을 수 있으므로 계속 진행\n        }\n      }\n\n      // 2. 멀티-에이전트 병렬 실행\n      const multiAgentResult = await crewAPI.executeMultiAgent(\n        projectId, \n        userMessage.content,\n        (progress) => {\n          // 진행상황 업데이트 (옵션)\n          console.log(\"멀티-에이전트 진행상황:\", progress);\n        }\n      );\n\n      console.log(\"멀티-에이전트 실행 완료:\", multiAgentResult);\n\n      // 3. 결과를 UI 메시지로 변환\n      const assistantMessage = processMultiAgentResponse(multiAgentResult);\n      \n      // 4. 스트리밍 메시지를 최종 결과로 교체\n      setMessages((prev) => {\n        const updatedMessages = [...prev];\n        const streamingMsgIndex = updatedMessages.findIndex(\n          (msg) => msg.id === streamingMessageIdRef.current\n        );\n\n        if (streamingMsgIndex !== -1) {\n          updatedMessages[streamingMsgIndex] = assistantMessage;\n        } else {\n          updatedMessages.push(assistantMessage);\n        }\n\n        return updatedMessages;\n      });\n\n      streamingMessageIdRef.current = null;\n      setCanSendMessage(true);\n      \n      // 성공 토스트\n      toast.success(`${Object.keys(multiAgentResult.agentResults || {}).length}개 에이전트 분석 완료!`);\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          errorType === \"timeout\"\n            ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\"\n            : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date().toISOString(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: error.response?.status,\n        },\n      };\n\n      setMessages((prev) => {\n        // 스트리밍 메시지를 찾아 제거\n        const currentStreamingId = streamingMessageIdRef.current;\n        const filteredMessages = prev.filter(\n          (msg) => msg.id !== currentStreamingId\n        );\n        return [...filteredMessages, errorMessage];\n      });\n\n      streamingMessageIdRef.current = null;\n\n      // 오류 발생 시도 입력 활성화\n      setCanSendMessage(true);\n    }\n\n    // 전체 전송 과정 완료 후 입력 활성화 (보험용)\n    setCanSendMessage(true);\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    handleStreamingResponse,\n    handleStreamingComplete,\n    messages,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setCanSendMessage(true);\n    streamingMessageIdRef.current = null;\n    currentWebSocketRef.current = null;\n    currentExecutionIdRef.current = null;\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    handleInputChange, // 새로운 입력 핸들러\n    copiedMessage,\n    isGenerating,\n    isStreaming,\n    canSendMessage,\n    streamingMessageId: streamingMessageIdRef.current,\n    messagesEndRef,\n    inputRef,\n    inputHeight, // 동적 높이\n    handleSendMessage,\n    handleStopGeneration,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    // WebSocket 상태 추가\n    wsConnected,\n    wsConnecting,\n    wsError,\n    // 스크롤 관련 추가\n    scrollContainerRef,\n    handleScroll,\n    isUserScrolling,\n    // 모델 선택 관련 추가\n    selectedModel,\n    setSelectedModel,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}