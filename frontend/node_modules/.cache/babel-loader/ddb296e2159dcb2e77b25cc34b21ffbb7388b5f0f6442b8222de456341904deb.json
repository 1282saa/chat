{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = projectId => {\n  _s();\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} content - 입력 내용 (기사 텍스트)\n   * @param {Object} config - 생성 설정\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(async (content, config = {}) => {\n    if (!content.trim()) {\n      toast.error(\"기사 내용을 입력해주세요\");\n      return null;\n    }\n    try {\n      setIsExecuting(true);\n      setExecutionStatus(\"STARTING\");\n      const userRequest = config.userRequest || \"\";\n      const response = await generateAPI.generateTitle(projectId, content, userRequest);\n      setIsExecuting(false);\n      setExecutionStatus(\"COMPLETED\");\n      return response;\n    } catch (error) {\n      console.error(\"제목 생성 실패:\", error);\n      setIsExecuting(false);\n      setExecutionStatus(\"FAILED\");\n      throw error;\n    }\n  }, [projectId]);\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(async (executionArn, onComplete, onError) => {\n    const poll = async () => {\n      try {\n        const result = await generateAPI.getExecutionStatus(executionArn);\n        setExecutionStatus(result.status);\n        if (result.status === \"SUCCEEDED\") {\n          setIsExecuting(false);\n          setExecutionStatus(\"COMPLETED\");\n          if (onComplete) {\n            onComplete(result);\n          }\n        } else if (result.status === \"FAILED\") {\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n          if (onError) {\n            onError(new Error(\"제목 생성 실패\"));\n          }\n        } else if (result.status === \"RUNNING\") {\n          // 3초 후 다시 폴링\n          setTimeout(poll, 3000);\n        }\n      } catch (error) {\n        console.error(\"실행 상태 조회 실패:\", error);\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n        if (onError) {\n          onError(error);\n        }\n      }\n    };\n    poll();\n  }, [projectId]);\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n  return {\n    isExecuting,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  };\n};\n_s(useOrchestration, \"K+BNpOj7OFZjdBwrogtQ3usZzys=\");","map":{"version":3,"names":["useState","useCallback","toast","generateAPI","useOrchestration","projectId","_s","isExecuting","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","executeOrchestration","content","config","trim","error","userRequest","response","generateTitle","console","pollOrchestrationResult","executionArn","onComplete","onError","poll","result","getExecutionStatus","status","Error","setTimeout","resetOrchestration"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useOrchestration.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} content - 입력 내용 (기사 텍스트)\n   * @param {Object} config - 생성 설정\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(\n    async (content, config = {}) => {\n      if (!content.trim()) {\n        toast.error(\"기사 내용을 입력해주세요\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        const userRequest = config.userRequest || \"\";\n\n        const response = await generateAPI.generateTitle(\n          projectId,\n          content,\n          userRequest\n        );\n\n        setIsExecuting(false);\n        setExecutionStatus(\"COMPLETED\");\n\n        return response;\n      } catch (error) {\n        console.error(\"제목 생성 실패:\", error);\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionArn, onComplete, onError) => {\n      const poll = async () => {\n        try {\n          const result = await generateAPI.getExecutionStatus(executionArn);\n\n          setExecutionStatus(result.status);\n\n          if (result.status === \"SUCCEEDED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (result.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"제목 생성 실패\"));\n            }\n          } else if (result.status === \"RUNNING\") {\n            // 3초 후 다시 폴링\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"실행 상태 조회 실패:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId]\n  );\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}