{"ast":null,"code":"import{toast}from\"react-hot-toast\";/**\n * 텍스트를 클립보드에 복사하는 유틸리티 함수\n * @param {string} text - 복사할 텍스트\n * @param {string} successMessage - 성공 시 표시할 메시지\n * @param {string} errorMessage - 실패 시 표시할 메시지\n * @returns {Promise<boolean>} - 성공 여부\n */export const copyToClipboard=async function(text){let successMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:\"클립보드에 복사되었습니다!\";let errorMessage=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"복사에 실패했습니다.\";try{await navigator.clipboard.writeText(text);toast.success(successMessage);return true;}catch(error){console.error(\"복사 실패:\",error);toast.error(errorMessage);return false;}};/**\n * 제목만 추출하여 복사하는 함수\n * @param {string} text - 전체 텍스트\n * @returns {Promise<boolean>} - 성공 여부\n */export const copyTitlesOnly=async text=>{const extractedTitles=extractTitles(text);const textToCopy=extractedTitles.length>0?extractedTitles.join(\"\\n\"):text;return copyToClipboard(textToCopy,\"제목이 클립보드에 복사되었습니다!\");};/**\n * 텍스트에서 제목을 추출하는 함수\n * @param {string} text - 원본 텍스트\n * @returns {Array<string>} - 추출된 제목 배열\n */export const extractTitles=text=>{const titles=[];// 1. 번호 형식: \"1. [제목]\"\nconst numberedMatches=text.match(/^\\d+\\.\\s+(.+?)(?=\\n\\s*-|$)/gm);if(numberedMatches){numberedMatches.forEach(match=>{const title=match.replace(/^\\d+\\.\\s+/,\"\").trim();if(title&&!title.includes(\"품질 평가\")){titles.push(title);}});}// 2. Bullet 형식: \"• [제목]\"\nif(titles.length===0){const bulletMatches=text.match(/• \"([^\"]+)\"/g);if(bulletMatches){bulletMatches.forEach(match=>{const title=match.replace(/• \"(.+)\"/,\"$1\").trim();if(title){titles.push(title);}});}}// 3. 일반 Bullet 형식\nif(titles.length===0){const simpleBulletMatches=text.match(/• ([^\\n]+)/g);if(simpleBulletMatches){simpleBulletMatches.forEach(match=>{const title=match.replace(\"• \",\"\").trim();if(title&&!title.includes(\"이유:\")&&title.length<100){titles.push(title);}});}}return titles;};","map":{"version":3,"names":["toast","copyToClipboard","text","successMessage","arguments","length","undefined","errorMessage","navigator","clipboard","writeText","success","error","console","copyTitlesOnly","extractedTitles","extractTitles","textToCopy","join","titles","numberedMatches","match","forEach","title","replace","trim","includes","push","bulletMatches","simpleBulletMatches"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/utils/clipboard.js"],"sourcesContent":["import { toast } from \"react-hot-toast\";\n\n/**\n * 텍스트를 클립보드에 복사하는 유틸리티 함수\n * @param {string} text - 복사할 텍스트\n * @param {string} successMessage - 성공 시 표시할 메시지\n * @param {string} errorMessage - 실패 시 표시할 메시지\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyToClipboard = async (\n  text,\n  successMessage = \"클립보드에 복사되었습니다!\",\n  errorMessage = \"복사에 실패했습니다.\"\n) => {\n  try {\n    await navigator.clipboard.writeText(text);\n    toast.success(successMessage);\n    return true;\n  } catch (error) {\n    console.error(\"복사 실패:\", error);\n    toast.error(errorMessage);\n    return false;\n  }\n};\n\n/**\n * 제목만 추출하여 복사하는 함수\n * @param {string} text - 전체 텍스트\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyTitlesOnly = async (text) => {\n  const extractedTitles = extractTitles(text);\n  const textToCopy =\n    extractedTitles.length > 0 ? extractedTitles.join(\"\\n\") : text;\n  return copyToClipboard(textToCopy, \"제목이 클립보드에 복사되었습니다!\");\n};\n\n/**\n * 텍스트에서 제목을 추출하는 함수\n * @param {string} text - 원본 텍스트\n * @returns {Array<string>} - 추출된 제목 배열\n */\nexport const extractTitles = (text) => {\n  const titles = [];\n\n  // 1. 번호 형식: \"1. [제목]\"\n  const numberedMatches = text.match(/^\\d+\\.\\s+(.+?)(?=\\n\\s*-|$)/gm);\n  if (numberedMatches) {\n    numberedMatches.forEach((match) => {\n      const title = match.replace(/^\\d+\\.\\s+/, \"\").trim();\n      if (title && !title.includes(\"품질 평가\")) {\n        titles.push(title);\n      }\n    });\n  }\n\n  // 2. Bullet 형식: \"• [제목]\"\n  if (titles.length === 0) {\n    const bulletMatches = text.match(/• \"([^\"]+)\"/g);\n    if (bulletMatches) {\n      bulletMatches.forEach((match) => {\n        const title = match.replace(/• \"(.+)\"/, \"$1\").trim();\n        if (title) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  // 3. 일반 Bullet 형식\n  if (titles.length === 0) {\n    const simpleBulletMatches = text.match(/• ([^\\n]+)/g);\n    if (simpleBulletMatches) {\n      simpleBulletMatches.forEach((match) => {\n        const title = match.replace(\"• \", \"\").trim();\n        if (title && !title.includes(\"이유:\") && title.length < 100) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  return titles;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}