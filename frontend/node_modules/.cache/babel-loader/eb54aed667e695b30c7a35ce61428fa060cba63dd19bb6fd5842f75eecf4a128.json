{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = projectId => {\n  _s();\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history, useStreaming)\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(async (userInput, options = {}) => {\n    if (!userInput.trim()) {\n      toast.error(\"메시지를 입력해주세요.\");\n      return null;\n    }\n    try {\n      setIsExecuting(true);\n      setExecutionStatus(\"STARTING\");\n\n      // chat_history와 userInput을 포함하는 data 객체 생성\n      const data = {\n        userInput: userInput,\n        chat_history: options.chat_history || []\n      };\n      console.log(\"🚀 대화 생성 요청 시작:\", {\n        projectId,\n        inputLength: userInput.length,\n        historyLength: data.chat_history.length,\n        useStreaming: options.useStreaming === true,\n        timestamp: new Date().toISOString()\n      });\n\n      // 🔧 스트리밍 사용 여부 확인 - 더 안전한 로직\n      if (options.useStreaming === true) {\n        setIsStreaming(true);\n\n        // 스트리밍 콜백 함수 설정\n        const onChunk = options.onChunk || (() => {});\n        const onError = error => {\n          var _error$message, _error$message2, _error$message3, _error$message4;\n          console.error(\"🔧 스트리밍 오류 처리:\", error);\n          setIsExecuting(false);\n          setIsStreaming(false);\n          setExecutionStatus(\"FAILED\");\n\n          // 🔧 개선: 오류 타입에 따른 적절한 메시지\n          if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"Gateway Timeout\") || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"504\") || error.code === \"ECONNABORTED\") {\n            toast.error(\"서버 응답 시간이 초과되었습니다. 요청을 간단히 하거나 잠시 후 다시 시도해주세요.\");\n          } else if ((_error$message3 = error.message) !== null && _error$message3 !== void 0 && _error$message3.includes(\"CORS\") || (_error$message4 = error.message) !== null && _error$message4 !== void 0 && _error$message4.includes(\"Network Error\")) {\n            toast.error(\"서버 연결에 문제가 있습니다. 새로고침 후 다시 시도해주세요.\");\n          } else {\n            toast.error(\"처리 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\");\n          }\n          if (options.onError) options.onError(error);\n        };\n        const onComplete = response => {\n          var _response$result;\n          console.log(\"✅ 스트리밍 완료:\", {\n            resultLength: ((_response$result = response.result) === null || _response$result === void 0 ? void 0 : _response$result.length) || 0,\n            timestamp: new Date().toISOString()\n          });\n          setIsExecuting(false);\n          setIsStreaming(false);\n          setExecutionStatus(\"COMPLETED\");\n          if (options.onComplete) options.onComplete(response);\n        };\n        try {\n          // 🔧 개선: 스트리밍 API 호출 (내부에서 폴백 처리됨)\n          return await generateAPI.generateTitleStream(projectId, data, onChunk, onError, onComplete);\n        } catch (streamError) {\n          console.error(\"🔧 스트리밍 최종 실패:\", streamError);\n\n          // 🔧 스트리밍 완전 실패 시에도 폴백이 내부에서 처리되므로\n          // 여기서는 사용자에게 알림만\n          setIsStreaming(false);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          // 최종 실패 메시지\n          toast.error(\"서비스에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\");\n          throw streamError;\n        }\n      }\n\n      // 🔧 일반 API 호출 (스트리밍 미사용)\n      console.log(\"📄 일반 API 호출 시작...\");\n      const response = await generateAPI.generateTitle(projectId, data);\n      console.log(\"✅ 대화 생성 완료:\", {\n        mode: response.mode,\n        message: response.message,\n        timestamp: new Date().toISOString()\n      });\n      setIsExecuting(false);\n      setExecutionStatus(\"COMPLETED\");\n      return response;\n    } catch (error) {\n      var _error$response, _error$response2, _error$message5, _error$response3, _error$response4, _error$response4$data, _error$response5, _error$response6, _error$response7;\n      console.error(\"❌ 제목 생성 실패:\", {\n        error: error.message,\n        code: error.code,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        timestamp: new Date().toISOString()\n      });\n      setIsExecuting(false);\n      setIsStreaming(false);\n      setExecutionStatus(\"FAILED\");\n\n      // 🔧 개선: 상세한 오류 처리\n      if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 504) {\n        toast.error(\"서버 응답 시간이 초과되었습니다. 입력을 간소화하거나 잠시 후 다시 시도해주세요.\");\n      } else if ((_error$message5 = error.message) !== null && _error$message5 !== void 0 && _error$message5.includes(\"CORS\") || error.code === \"ERR_NETWORK\") {\n        toast.error(\"서버 연결에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\");\n      } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 400 && (_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && _error$response4$data.setup_required) {\n        toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");\n      } else if (error.code === \"ECONNABORTED\") {\n        toast.error(\"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\");\n      } else if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 500) {\n        toast.error(\"서버에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\");\n      } else if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 403) {\n        toast.error(\"권한이 없습니다. 로그인 상태를 확인해주세요.\");\n      } else if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) === 429) {\n        toast.error(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");\n      } else {\n        toast.error(\"처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\");\n      }\n      throw error;\n    }\n  }, [projectId]);\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(async (executionArn, onComplete, onError) => {\n    // 스트리밍 모드에서는 폴링이 필요 없음\n    if (isStreaming) {\n      return;\n    }\n    const poll = async () => {\n      try {\n        const result = await generateAPI.getExecutionStatus(executionArn);\n        setExecutionStatus(result.status);\n        if (result.status === \"SUCCEEDED\") {\n          setIsExecuting(false);\n          setExecutionStatus(\"COMPLETED\");\n          if (onComplete) {\n            onComplete(result);\n          }\n        } else if (result.status === \"FAILED\") {\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n          if (onError) {\n            onError(new Error(\"처리 실패\"));\n          }\n        } else if (result.status === \"RUNNING\") {\n          // 3초 후 다시 폴링\n          setTimeout(poll, 3000);\n        }\n      } catch (error) {\n        console.error(\"실행 상태 조회 실패:\", error);\n        setIsExecuting(false);\n        setExecutionStatus(\"FAILED\");\n        if (onError) {\n          onError(error);\n        }\n      }\n    };\n    poll();\n  }, [projectId, isStreaming]);\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setIsStreaming(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n  return {\n    isExecuting,\n    isStreaming,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  };\n};\n_s(useOrchestration, \"dycC0VGflW0bdLmxCDlLdpde9RQ=\");","map":{"version":3,"names":["useState","useCallback","toast","generateAPI","useOrchestration","projectId","_s","isExecuting","setIsExecuting","currentExecution","setCurrentExecution","executionStatus","setExecutionStatus","isStreaming","setIsStreaming","executeOrchestration","userInput","options","trim","error","data","chat_history","console","log","inputLength","length","historyLength","useStreaming","timestamp","Date","toISOString","onChunk","onError","_error$message","_error$message2","_error$message3","_error$message4","message","includes","code","onComplete","response","_response$result","resultLength","result","generateTitleStream","streamError","generateTitle","mode","_error$response","_error$response2","_error$message5","_error$response3","_error$response4","_error$response4$data","_error$response5","_error$response6","_error$response7","status","setup_required","pollOrchestrationResult","executionArn","poll","getExecutionStatus","Error","setTimeout","resetOrchestration"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useOrchestration.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { generateAPI } from \"../services/api\";\n\n/**\n * 제목 생성 실행 및 결과 폴링을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @returns {Object} - 제목 생성 관련 상태와 함수들\n */\nexport const useOrchestration = (projectId) => {\n  const [isExecuting, setIsExecuting] = useState(false);\n  const [currentExecution, setCurrentExecution] = useState(null);\n  const [executionStatus, setExecutionStatus] = useState(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  /**\n   * 제목 생성 실행\n   * @param {string} userInput - 사용자 입력\n   * @param {Object} options - 추가 옵션 (예: chat_history, useStreaming)\n   * @returns {Promise<Object>} - 생성 결과\n   */\n  const executeOrchestration = useCallback(\n    async (userInput, options = {}) => {\n      if (!userInput.trim()) {\n        toast.error(\"메시지를 입력해주세요.\");\n        return null;\n      }\n\n      try {\n        setIsExecuting(true);\n        setExecutionStatus(\"STARTING\");\n\n        // chat_history와 userInput을 포함하는 data 객체 생성\n        const data = {\n          userInput: userInput,\n          chat_history: options.chat_history || [],\n        };\n\n        console.log(\"🚀 대화 생성 요청 시작:\", {\n          projectId,\n          inputLength: userInput.length,\n          historyLength: data.chat_history.length,\n          useStreaming: options.useStreaming === true,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 🔧 스트리밍 사용 여부 확인 - 더 안전한 로직\n        if (options.useStreaming === true) {\n          setIsStreaming(true);\n\n          // 스트리밍 콜백 함수 설정\n          const onChunk = options.onChunk || (() => {});\n          const onError = (error) => {\n            console.error(\"🔧 스트리밍 오류 처리:\", error);\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 🔧 개선: 오류 타입에 따른 적절한 메시지\n            if (\n              error.message?.includes(\"Gateway Timeout\") ||\n              error.message?.includes(\"504\") ||\n              error.code === \"ECONNABORTED\"\n            ) {\n              toast.error(\n                \"서버 응답 시간이 초과되었습니다. 요청을 간단히 하거나 잠시 후 다시 시도해주세요.\"\n              );\n            } else if (\n              error.message?.includes(\"CORS\") ||\n              error.message?.includes(\"Network Error\")\n            ) {\n              toast.error(\n                \"서버 연결에 문제가 있습니다. 새로고침 후 다시 시도해주세요.\"\n              );\n            } else {\n              toast.error(\n                \"처리 중 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\"\n              );\n            }\n\n            if (options.onError) options.onError(error);\n          };\n\n          const onComplete = (response) => {\n            console.log(\"✅ 스트리밍 완료:\", {\n              resultLength: response.result?.length || 0,\n              timestamp: new Date().toISOString(),\n            });\n            setIsExecuting(false);\n            setIsStreaming(false);\n            setExecutionStatus(\"COMPLETED\");\n            if (options.onComplete) options.onComplete(response);\n          };\n\n          try {\n            // 🔧 개선: 스트리밍 API 호출 (내부에서 폴백 처리됨)\n            return await generateAPI.generateTitleStream(\n              projectId,\n              data,\n              onChunk,\n              onError,\n              onComplete\n            );\n          } catch (streamError) {\n            console.error(\"🔧 스트리밍 최종 실패:\", streamError);\n\n            // 🔧 스트리밍 완전 실패 시에도 폴백이 내부에서 처리되므로\n            // 여기서는 사용자에게 알림만\n            setIsStreaming(false);\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            // 최종 실패 메시지\n            toast.error(\n              \"서비스에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n            );\n            throw streamError;\n          }\n        }\n\n        // 🔧 일반 API 호출 (스트리밍 미사용)\n        console.log(\"📄 일반 API 호출 시작...\");\n        const response = await generateAPI.generateTitle(projectId, data);\n\n        console.log(\"✅ 대화 생성 완료:\", {\n          mode: response.mode,\n          message: response.message,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setExecutionStatus(\"COMPLETED\");\n\n        return response;\n      } catch (error) {\n        console.error(\"❌ 제목 생성 실패:\", {\n          error: error.message,\n          code: error.code,\n          status: error.response?.status,\n          timestamp: new Date().toISOString(),\n        });\n\n        setIsExecuting(false);\n        setIsStreaming(false);\n        setExecutionStatus(\"FAILED\");\n\n        // 🔧 개선: 상세한 오류 처리\n        if (error.response?.status === 504) {\n          toast.error(\n            \"서버 응답 시간이 초과되었습니다. 입력을 간소화하거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (\n          error.message?.includes(\"CORS\") ||\n          error.code === \"ERR_NETWORK\"\n        ) {\n          toast.error(\n            \"서버 연결에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\"\n          );\n        } else if (\n          error.response?.status === 400 &&\n          error.response?.data?.setup_required\n        ) {\n          toast.error(\"프롬프트 카드를 먼저 설정해주세요!\");\n        } else if (error.code === \"ECONNABORTED\") {\n          toast.error(\n            \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 500) {\n          toast.error(\n            \"서버에 일시적인 문제가 있습니다. 잠시 후 다시 시도해주세요.\"\n          );\n        } else if (error.response?.status === 403) {\n          toast.error(\"권한이 없습니다. 로그인 상태를 확인해주세요.\");\n        } else if (error.response?.status === 429) {\n          toast.error(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");\n        } else {\n          toast.error(\n            \"처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\"\n          );\n        }\n\n        throw error;\n      }\n    },\n    [projectId]\n  );\n\n  /**\n   * 실행 상태 조회 (Step Functions 사용 시)\n   * @param {string} executionArn - 실행 ARN\n   * @param {Function} onComplete - 완료 시 콜백\n   * @param {Function} onError - 에러 시 콜백\n   */\n  const pollOrchestrationResult = useCallback(\n    async (executionArn, onComplete, onError) => {\n      // 스트리밍 모드에서는 폴링이 필요 없음\n      if (isStreaming) {\n        return;\n      }\n\n      const poll = async () => {\n        try {\n          const result = await generateAPI.getExecutionStatus(executionArn);\n\n          setExecutionStatus(result.status);\n\n          if (result.status === \"SUCCEEDED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"COMPLETED\");\n\n            if (onComplete) {\n              onComplete(result);\n            }\n          } else if (result.status === \"FAILED\") {\n            setIsExecuting(false);\n            setExecutionStatus(\"FAILED\");\n\n            if (onError) {\n              onError(new Error(\"처리 실패\"));\n            }\n          } else if (result.status === \"RUNNING\") {\n            // 3초 후 다시 폴링\n            setTimeout(poll, 3000);\n          }\n        } catch (error) {\n          console.error(\"실행 상태 조회 실패:\", error);\n          setIsExecuting(false);\n          setExecutionStatus(\"FAILED\");\n\n          if (onError) {\n            onError(error);\n          }\n        }\n      };\n\n      poll();\n    },\n    [projectId, isStreaming]\n  );\n\n  /**\n   * 오케스트레이션 상태 초기화\n   */\n  const resetOrchestration = useCallback(() => {\n    setIsExecuting(false);\n    setIsStreaming(false);\n    setCurrentExecution(null);\n    setExecutionStatus(null);\n  }, []);\n\n  return {\n    isExecuting,\n    isStreaming,\n    currentExecution,\n    executionStatus,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}