{"ast":null,"code":"import React,{useState}from\"react\";import{useNavigate}from\"react-router-dom\";import Login from\"./Login\";import Signup from\"./Signup\";import EmailVerification from\"./EmailVerification\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContainer=_ref=>{let{onAuthSuccess}=_ref;const[currentView,setCurrentView]=useState(\"login\");// 'login', 'signup', 'verify'\nconst[signupEmail,setSignupEmail]=useState(\"\");const navigate=useNavigate();const handleLoginSuccess=async response=>{// AuthContext의 상태가 업데이트되면 자동으로 App.js에서 인증된 화면으로 전환됨\nconsole.log(\"로그인 성공:\",response);// 명시적으로 홈페이지로 리다이렉트\nnavigate(\"/\",{replace:true});};const handleSignupSuccess=(response,email)=>{setSignupEmail(email||response.email||signupEmail);setCurrentView(\"verify\");};const handleVerificationSuccess=()=>{setCurrentView(\"login\");alert(\"이메일 인증이 완료되었습니다. 로그인해주세요.\");};const handleSwitchToSignup=()=>{setCurrentView(\"signup\");};const handleSwitchToLogin=()=>{setCurrentView(\"login\");};const renderCurrentView=()=>{switch(currentView){case\"signup\":return/*#__PURE__*/_jsx(Signup,{onSignupSuccess:handleSignupSuccess,onSwitchToLogin:handleSwitchToLogin});case\"verify\":return/*#__PURE__*/_jsx(EmailVerification,{email:signupEmail,onVerificationSuccess:handleVerificationSuccess,onBackToLogin:handleSwitchToLogin});case\"login\":default:return/*#__PURE__*/_jsx(Login,{onLoginSuccess:handleLoginSuccess,onSwitchToSignup:handleSwitchToSignup});}};return renderCurrentView();};export default AuthContainer;","map":{"version":3,"names":["React","useState","useNavigate","Login","Signup","EmailVerification","jsx","_jsx","AuthContainer","_ref","onAuthSuccess","currentView","setCurrentView","signupEmail","setSignupEmail","navigate","handleLoginSuccess","response","console","log","replace","handleSignupSuccess","email","handleVerificationSuccess","alert","handleSwitchToSignup","handleSwitchToLogin","renderCurrentView","onSignupSuccess","onSwitchToLogin","onVerificationSuccess","onBackToLogin","onLoginSuccess","onSwitchToSignup"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/components/AuthContainer.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport Signup from \"./Signup\";\nimport EmailVerification from \"./EmailVerification\";\n\nconst AuthContainer = ({ onAuthSuccess }) => {\n  const [currentView, setCurrentView] = useState(\"login\"); // 'login', 'signup', 'verify'\n  const [signupEmail, setSignupEmail] = useState(\"\");\n  const navigate = useNavigate();\n\n  const handleLoginSuccess = async (response) => {\n    // AuthContext의 상태가 업데이트되면 자동으로 App.js에서 인증된 화면으로 전환됨\n    console.log(\"로그인 성공:\", response);\n    // 명시적으로 홈페이지로 리다이렉트\n    navigate(\"/\", { replace: true });\n  };\n\n  const handleSignupSuccess = (response, email) => {\n    setSignupEmail(email || response.email || signupEmail);\n    setCurrentView(\"verify\");\n  };\n\n  const handleVerificationSuccess = () => {\n    setCurrentView(\"login\");\n    alert(\"이메일 인증이 완료되었습니다. 로그인해주세요.\");\n  };\n\n  const handleSwitchToSignup = () => {\n    setCurrentView(\"signup\");\n  };\n\n  const handleSwitchToLogin = () => {\n    setCurrentView(\"login\");\n  };\n\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case \"signup\":\n        return (\n          <Signup\n            onSignupSuccess={handleSignupSuccess}\n            onSwitchToLogin={handleSwitchToLogin}\n          />\n        );\n      case \"verify\":\n        return (\n          <EmailVerification\n            email={signupEmail}\n            onVerificationSuccess={handleVerificationSuccess}\n            onBackToLogin={handleSwitchToLogin}\n          />\n        );\n      case \"login\":\n      default:\n        return (\n          <Login\n            onLoginSuccess={handleLoginSuccess}\n            onSwitchToSignup={handleSwitchToSignup}\n          />\n        );\n    }\n  };\n\n  return renderCurrentView();\n};\n\nexport default AuthContainer;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpD,KAAM,CAAAC,aAAa,CAAGC,IAAA,EAAuB,IAAtB,CAAEC,aAAc,CAAC,CAAAD,IAAA,CACtC,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAC,OAAO,CAAC,CAAE;AACzD,KAAM,CAACY,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAAAc,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAc,kBAAkB,CAAG,KAAO,CAAAC,QAAQ,EAAK,CAC7C;AACAC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEF,QAAQ,CAAC,CAChC;AACAF,QAAQ,CAAC,GAAG,CAAE,CAAEK,OAAO,CAAE,IAAK,CAAC,CAAC,CAClC,CAAC,CAED,KAAM,CAAAC,mBAAmB,CAAGA,CAACJ,QAAQ,CAAEK,KAAK,GAAK,CAC/CR,cAAc,CAACQ,KAAK,EAAIL,QAAQ,CAACK,KAAK,EAAIT,WAAW,CAAC,CACtDD,cAAc,CAAC,QAAQ,CAAC,CAC1B,CAAC,CAED,KAAM,CAAAW,yBAAyB,CAAGA,CAAA,GAAM,CACtCX,cAAc,CAAC,OAAO,CAAC,CACvBY,KAAK,CAAC,2BAA2B,CAAC,CACpC,CAAC,CAED,KAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAAM,CACjCb,cAAc,CAAC,QAAQ,CAAC,CAC1B,CAAC,CAED,KAAM,CAAAc,mBAAmB,CAAGA,CAAA,GAAM,CAChCd,cAAc,CAAC,OAAO,CAAC,CACzB,CAAC,CAED,KAAM,CAAAe,iBAAiB,CAAGA,CAAA,GAAM,CAC9B,OAAQhB,WAAW,EACjB,IAAK,QAAQ,CACX,mBACEJ,IAAA,CAACH,MAAM,EACLwB,eAAe,CAAEP,mBAAoB,CACrCQ,eAAe,CAAEH,mBAAoB,CACtC,CAAC,CAEN,IAAK,QAAQ,CACX,mBACEnB,IAAA,CAACF,iBAAiB,EAChBiB,KAAK,CAAET,WAAY,CACnBiB,qBAAqB,CAAEP,yBAA0B,CACjDQ,aAAa,CAAEL,mBAAoB,CACpC,CAAC,CAEN,IAAK,OAAO,CACZ,QACE,mBACEnB,IAAA,CAACJ,KAAK,EACJ6B,cAAc,CAAEhB,kBAAmB,CACnCiB,gBAAgB,CAAER,oBAAqB,CACxC,CAAC,CAER,CACF,CAAC,CAED,MAAO,CAAAE,iBAAiB,CAAC,CAAC,CAC5B,CAAC,CAED,cAAe,CAAAnB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}