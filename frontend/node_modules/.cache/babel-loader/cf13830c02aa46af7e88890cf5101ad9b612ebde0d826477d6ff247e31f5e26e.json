{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect}from\"react\";import{useAuth}from\"./AuthContext\";// 대화 상태 관리를 위한 Context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ConversationContext=/*#__PURE__*/createContext();// 초기 상태\nconst initialState={currentConversationId:null,conversations:[],currentMessages:[],isLoading:false,error:null,drawerOpen:false};// 액션 타입 정의\nconst ActionTypes={SET_CURRENT_CONVERSATION:\"SET_CURRENT_CONVERSATION\",SET_CONVERSATIONS:\"SET_CONVERSATIONS\",ADD_CONVERSATION:\"ADD_CONVERSATION\",UPDATE_CONVERSATION:\"UPDATE_CONVERSATION\",SET_MESSAGES:\"SET_MESSAGES\",ADD_MESSAGE:\"ADD_MESSAGE\",UPDATE_MESSAGE:\"UPDATE_MESSAGE\",SET_LOADING:\"SET_LOADING\",SET_ERROR:\"SET_ERROR\",TOGGLE_DRAWER:\"TOGGLE_DRAWER\",CLEAR_STATE:\"CLEAR_STATE\"};// 리듀서 함수\nconst conversationReducer=(state,action)=>{switch(action.type){case ActionTypes.SET_CURRENT_CONVERSATION:return{...state,currentConversationId:action.payload,currentMessages:[]// 새 대화 선택시 메시지 초기화\n};case ActionTypes.SET_CONVERSATIONS:return{...state,conversations:action.payload};case ActionTypes.ADD_CONVERSATION:return{...state,conversations:[action.payload,...state.conversations]};case ActionTypes.UPDATE_CONVERSATION:return{...state,conversations:state.conversations.map(conv=>conv.id===action.payload.id?{...conv,...action.payload.updates}:conv)};case ActionTypes.SET_MESSAGES:return{...state,currentMessages:action.payload};case ActionTypes.ADD_MESSAGE:return{...state,currentMessages:[...state.currentMessages,action.payload]};case ActionTypes.UPDATE_MESSAGE:return{...state,currentMessages:state.currentMessages.map(msg=>msg.id===action.payload.id?{...msg,...action.payload.updates}:msg)};case ActionTypes.SET_LOADING:return{...state,isLoading:action.payload};case ActionTypes.SET_ERROR:return{...state,error:action.payload};case ActionTypes.TOGGLE_DRAWER:return{...state,drawerOpen:action.payload!==undefined?action.payload:!state.drawerOpen};case ActionTypes.CLEAR_STATE:return initialState;default:return state;}};// Provider 컴포넌트\nexport const ConversationProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(conversationReducer,initialState);const{user}=useAuth();// 현재 대화 변경\nconst setCurrentConversation=conversationId=>{console.log(\"🔍 [DEBUG] ConversationContext - 대화 변경 요청:\",{previousConversationId:state.currentConversationId,newConversationId:conversationId,isChanged:state.currentConversationId!==conversationId,conversationIdType:typeof conversationId,isConversationIdNull:conversationId===null,isConversationIdUndefined:conversationId===undefined});dispatch({type:ActionTypes.SET_CURRENT_CONVERSATION,payload:conversationId});console.log(\"🔍 [DEBUG] ConversationContext - 대화 변경 dispatch 완료:\",conversationId);};// 대화 목록 설정\nconst setConversations=conversations=>{dispatch({type:ActionTypes.SET_CONVERSATIONS,payload:conversations});};// 새 대화 추가\nconst addConversation=conversation=>{dispatch({type:ActionTypes.ADD_CONVERSATION,payload:conversation});};// 대화 업데이트\nconst updateConversation=(conversationId,updates)=>{dispatch({type:ActionTypes.UPDATE_CONVERSATION,payload:{id:conversationId,updates}});};// 메시지 설정\nconst setMessages=messages=>{dispatch({type:ActionTypes.SET_MESSAGES,payload:messages});};// 새 메시지 추가\nconst addMessage=message=>{const newMessage={id:message.id||Date.now().toString(),role:message.role,content:message.content,tokenCount:message.tokenCount||0,timestamp:message.timestamp||new Date().toISOString()};dispatch({type:ActionTypes.ADD_MESSAGE,payload:newMessage});// 현재 대화의 마지막 활동 시간 업데이트\nif(state.currentConversationId){updateConversation(state.currentConversationId,{lastActivityAt:newMessage.timestamp});}return newMessage;};// 메시지 업데이트 (스트리밍 중)\nconst updateMessage=(messageId,updates)=>{dispatch({type:ActionTypes.UPDATE_MESSAGE,payload:{id:messageId,updates}});};// 로딩 상태 설정\nconst setLoading=loading=>{dispatch({type:ActionTypes.SET_LOADING,payload:loading});};// 에러 설정\nconst setError=error=>{dispatch({type:ActionTypes.SET_ERROR,payload:error});};// 드로어 토글\nconst toggleDrawer=open=>{dispatch({type:ActionTypes.TOGGLE_DRAWER,payload:open});};// 상태 초기화 (로그아웃시)\nconst clearState=()=>{dispatch({type:ActionTypes.CLEAR_STATE});};// 현재 대화 정보 조회\nconst getCurrentConversation=()=>{return state.conversations.find(conv=>conv.id===state.currentConversationId);};// 사용자 변경시 상태 초기화\nuseEffect(()=>{if(!user){clearState();}},[user]);const value={// 상태\n...state,// 액션 함수들\nsetCurrentConversation,setConversations,addConversation,updateConversation,setMessages,addMessage,updateMessage,setLoading,setError,toggleDrawer,clearState,getCurrentConversation};return/*#__PURE__*/_jsx(ConversationContext.Provider,{value:value,children:children});};// Hook for using conversation context\nexport const useConversationContext=()=>{const context=useContext(ConversationContext);if(!context){throw new Error(\"useConversationContext must be used within a ConversationProvider\");}return context;};","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useAuth","jsx","_jsx","ConversationContext","initialState","currentConversationId","conversations","currentMessages","isLoading","error","drawerOpen","ActionTypes","SET_CURRENT_CONVERSATION","SET_CONVERSATIONS","ADD_CONVERSATION","UPDATE_CONVERSATION","SET_MESSAGES","ADD_MESSAGE","UPDATE_MESSAGE","SET_LOADING","SET_ERROR","TOGGLE_DRAWER","CLEAR_STATE","conversationReducer","state","action","type","payload","map","conv","id","updates","msg","undefined","ConversationProvider","_ref","children","dispatch","user","setCurrentConversation","conversationId","console","log","previousConversationId","newConversationId","isChanged","conversationIdType","isConversationIdNull","isConversationIdUndefined","setConversations","addConversation","conversation","updateConversation","setMessages","messages","addMessage","message","newMessage","Date","now","toString","role","content","tokenCount","timestamp","toISOString","lastActivityAt","updateMessage","messageId","setLoading","loading","setError","toggleDrawer","open","clearState","getCurrentConversation","find","value","Provider","useConversationContext","context","Error"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/contexts/ConversationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from \"react\";\nimport { useAuth } from \"./AuthContext\";\n\n// 대화 상태 관리를 위한 Context\nconst ConversationContext = createContext();\n\n// 초기 상태\nconst initialState = {\n  currentConversationId: null,\n  conversations: [],\n  currentMessages: [],\n  isLoading: false,\n  error: null,\n  drawerOpen: false,\n};\n\n// 액션 타입 정의\nconst ActionTypes = {\n  SET_CURRENT_CONVERSATION: \"SET_CURRENT_CONVERSATION\",\n  SET_CONVERSATIONS: \"SET_CONVERSATIONS\",\n  ADD_CONVERSATION: \"ADD_CONVERSATION\",\n  UPDATE_CONVERSATION: \"UPDATE_CONVERSATION\",\n  SET_MESSAGES: \"SET_MESSAGES\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  UPDATE_MESSAGE: \"UPDATE_MESSAGE\",\n  SET_LOADING: \"SET_LOADING\",\n  SET_ERROR: \"SET_ERROR\",\n  TOGGLE_DRAWER: \"TOGGLE_DRAWER\",\n  CLEAR_STATE: \"CLEAR_STATE\",\n};\n\n// 리듀서 함수\nconst conversationReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_CURRENT_CONVERSATION:\n      return {\n        ...state,\n        currentConversationId: action.payload,\n        currentMessages: [], // 새 대화 선택시 메시지 초기화\n      };\n\n    case ActionTypes.SET_CONVERSATIONS:\n      return {\n        ...state,\n        conversations: action.payload,\n      };\n\n    case ActionTypes.ADD_CONVERSATION:\n      return {\n        ...state,\n        conversations: [action.payload, ...state.conversations],\n      };\n\n    case ActionTypes.UPDATE_CONVERSATION:\n      return {\n        ...state,\n        conversations: state.conversations.map((conv) =>\n          conv.id === action.payload.id\n            ? { ...conv, ...action.payload.updates }\n            : conv\n        ),\n      };\n\n    case ActionTypes.SET_MESSAGES:\n      return {\n        ...state,\n        currentMessages: action.payload,\n      };\n\n    case ActionTypes.ADD_MESSAGE:\n      return {\n        ...state,\n        currentMessages: [...state.currentMessages, action.payload],\n      };\n\n    case ActionTypes.UPDATE_MESSAGE:\n      return {\n        ...state,\n        currentMessages: state.currentMessages.map((msg) =>\n          msg.id === action.payload.id\n            ? { ...msg, ...action.payload.updates }\n            : msg\n        ),\n      };\n\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case ActionTypes.TOGGLE_DRAWER:\n      return {\n        ...state,\n        drawerOpen:\n          action.payload !== undefined ? action.payload : !state.drawerOpen,\n      };\n\n    case ActionTypes.CLEAR_STATE:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\n// Provider 컴포넌트\nexport const ConversationProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(conversationReducer, initialState);\n  const { user } = useAuth();\n\n  // 현재 대화 변경\n  const setCurrentConversation = (conversationId) => {\n    console.log(\"🔍 [DEBUG] ConversationContext - 대화 변경 요청:\", {\n      previousConversationId: state.currentConversationId,\n      newConversationId: conversationId,\n      isChanged: state.currentConversationId !== conversationId,\n      conversationIdType: typeof conversationId,\n      isConversationIdNull: conversationId === null,\n      isConversationIdUndefined: conversationId === undefined,\n    });\n\n    dispatch({\n      type: ActionTypes.SET_CURRENT_CONVERSATION,\n      payload: conversationId,\n    });\n\n    console.log(\n      \"🔍 [DEBUG] ConversationContext - 대화 변경 dispatch 완료:\",\n      conversationId\n    );\n  };\n\n  // 대화 목록 설정\n  const setConversations = (conversations) => {\n    dispatch({\n      type: ActionTypes.SET_CONVERSATIONS,\n      payload: conversations,\n    });\n  };\n\n  // 새 대화 추가\n  const addConversation = (conversation) => {\n    dispatch({\n      type: ActionTypes.ADD_CONVERSATION,\n      payload: conversation,\n    });\n  };\n\n  // 대화 업데이트\n  const updateConversation = (conversationId, updates) => {\n    dispatch({\n      type: ActionTypes.UPDATE_CONVERSATION,\n      payload: { id: conversationId, updates },\n    });\n  };\n\n  // 메시지 설정\n  const setMessages = (messages) => {\n    dispatch({\n      type: ActionTypes.SET_MESSAGES,\n      payload: messages,\n    });\n  };\n\n  // 새 메시지 추가\n  const addMessage = (message) => {\n    const newMessage = {\n      id: message.id || Date.now().toString(),\n      role: message.role,\n      content: message.content,\n      tokenCount: message.tokenCount || 0,\n      timestamp: message.timestamp || new Date().toISOString(),\n    };\n\n    dispatch({\n      type: ActionTypes.ADD_MESSAGE,\n      payload: newMessage,\n    });\n\n    // 현재 대화의 마지막 활동 시간 업데이트\n    if (state.currentConversationId) {\n      updateConversation(state.currentConversationId, {\n        lastActivityAt: newMessage.timestamp,\n      });\n    }\n\n    return newMessage;\n  };\n\n  // 메시지 업데이트 (스트리밍 중)\n  const updateMessage = (messageId, updates) => {\n    dispatch({\n      type: ActionTypes.UPDATE_MESSAGE,\n      payload: { id: messageId, updates },\n    });\n  };\n\n  // 로딩 상태 설정\n  const setLoading = (loading) => {\n    dispatch({\n      type: ActionTypes.SET_LOADING,\n      payload: loading,\n    });\n  };\n\n  // 에러 설정\n  const setError = (error) => {\n    dispatch({\n      type: ActionTypes.SET_ERROR,\n      payload: error,\n    });\n  };\n\n  // 드로어 토글\n  const toggleDrawer = (open) => {\n    dispatch({\n      type: ActionTypes.TOGGLE_DRAWER,\n      payload: open,\n    });\n  };\n\n  // 상태 초기화 (로그아웃시)\n  const clearState = () => {\n    dispatch({\n      type: ActionTypes.CLEAR_STATE,\n    });\n  };\n\n  // 현재 대화 정보 조회\n  const getCurrentConversation = () => {\n    return state.conversations.find(\n      (conv) => conv.id === state.currentConversationId\n    );\n  };\n\n  // 사용자 변경시 상태 초기화\n  useEffect(() => {\n    if (!user) {\n      clearState();\n    }\n  }, [user]);\n\n  const value = {\n    // 상태\n    ...state,\n\n    // 액션 함수들\n    setCurrentConversation,\n    setConversations,\n    addConversation,\n    updateConversation,\n    setMessages,\n    addMessage,\n    updateMessage,\n    setLoading,\n    setError,\n    toggleDrawer,\n    clearState,\n    getCurrentConversation,\n  };\n\n  return (\n    <ConversationContext.Provider value={value}>\n      {children}\n    </ConversationContext.Provider>\n  );\n};\n\n// Hook for using conversation context\nexport const useConversationContext = () => {\n  const context = useContext(ConversationContext);\n  if (!context) {\n    throw new Error(\n      \"useConversationContext must be used within a ConversationProvider\"\n    );\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}