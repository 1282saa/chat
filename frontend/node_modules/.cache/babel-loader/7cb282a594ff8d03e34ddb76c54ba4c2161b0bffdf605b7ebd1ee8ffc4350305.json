{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [lastProcessedData, setLastProcessedData] = useState(null); // 마지막 처리 데이터 저장\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! 저는 ${projectName}의 AI 제목 작가입니다.\\n\\n기사 내용을 입력해주시면 다양한 스타일의 제목을 제안해드릴게요. 제목을 수정하거나 다른 스타일로 바꾸고 싶으시면 언제든 말씀해주세요!`,\n      timestamp: new Date()\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"📝 메시지 전송 시도:\", {\n      inputValue: inputValue.trim(),\n      isGenerating\n    });\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"❌ 전송 차단:\", {\n        isEmpty: !inputValue.trim(),\n        isGenerating\n      });\n      return;\n    }\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content: \"AI가 제목을 생성하고 있습니다...\\n\\n단계별로 처리 중이니 잠시만 기다려주세요!\",\n        timestamp: new Date(),\n        isLoading: true\n      };\n      setMessages(prev => [...prev, loadingMessage]);\n\n      // 사용자 입력이 기사 내용인지 추가 요청인지 판단\n      const isLongContent = currentInput.length > 200;\n      const hasMultipleLines = currentInput.split(\"\\n\").length > 3;\n      const isArticleContent = isLongContent && hasMultipleLines;\n      let articleText = \"\";\n      let userRequest = \"\";\n      if (isArticleContent) {\n        // 긴 내용이면 기사로 간주\n        articleText = currentInput;\n        userRequest = \"\";\n      } else {\n        // 짧은 내용이면 이전 대화에서 기사 찾기 또는 기본 요청으로 처리\n        const lastMessages = messages.slice(-5); // 최근 5개 메시지 확인\n        const lastArticleMessage = lastMessages.find(msg => msg.type === \"user\" && msg.content.length > 200);\n        if (lastArticleMessage) {\n          // 이전에 기사가 있었다면 현재 입력을 추가 요청으로 처리\n          articleText = lastArticleMessage.content;\n          userRequest = currentInput;\n        } else {\n          // 기사가 없으면 현재 입력을 기사로 처리\n          articleText = currentInput;\n          userRequest = \"\";\n        }\n      }\n      console.log(\"📝 입력 분석:\", {\n        isArticleContent,\n        articleLength: articleText.length,\n        userRequestLength: userRequest.length,\n        userRequest: userRequest.substring(0, 50) + \"...\"\n      });\n\n      // 처리 데이터 저장 (재생성용)\n      const processedData = {\n        articleText,\n        userRequest,\n        timestamp: new Date().toISOString()\n      };\n      setLastProcessedData(processedData);\n\n      // 오케스트레이션 실행 (단순화)\n      const result = await executeOrchestration(articleText, {}, userRequest);\n      console.log(\"✅ 제목 생성 완료:\", result);\n      if (result && (result.result || result.success)) {\n        // 결과 처리 (단순화)\n        const titleText = result.result || \"제목 생성이 완료되었습니다.\";\n\n        // 간단한 제목 파싱\n        const lines = titleText.split(\"\\n\").filter(line => line.trim());\n        const titles = [];\n        for (const line of lines) {\n          // 번호가 있는 제목만 추출\n          if (/^\\d+\\.\\s*/.test(line)) {\n            const title = line.replace(/^\\d+\\.\\s*/, \"\").trim();\n            if (title && title.length > 0) {\n              titles.push(title);\n            }\n          }\n        }\n\n        // 제목이 없으면 전체 텍스트를 하나의 응답으로 처리\n        if (titles.length === 0) {\n          titles.push(titleText);\n        }\n        console.log(\"📝 파싱된 제목들:\", titles);\n\n        // 메시지 추가\n        const botMessage = {\n          id: `bot-${Date.now()}`,\n          type: \"bot\",\n          content: titleText,\n          titles: titles,\n          timestamp: new Date().toISOString(),\n          projectId,\n          metadata: {\n            mode: result.mode || \"unknown\",\n            promptCount: result.promptCount || 0,\n            userRequest: userRequest || null\n          }\n        };\n\n        // 로딩 메시지 제거하고 결과 메시지 추가\n        setMessages(prev => prev.filter(msg => !msg.isLoading).concat([botMessage]));\n        console.log(\"✅ 메시지 처리 완료, 상태 초기화\");\n      } else {\n        // 결과가 없는 경우 에러 처리\n        console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n        const errorMessage = {\n          id: \"error-\" + Date.now(),\n          type: \"assistant\",\n          content: \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          timestamp: new Date(),\n          isError: true\n        };\n        setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n        console.log(\"❌ AI 응답 오류 처리 완료\");\n      }\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: \"죄송합니다. 메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n      console.log(\"❌ 에러 처리 완료\");\n    }\n  }, [inputValue, isGenerating, executeOrchestration, pollOrchestrationResult, projectId]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"제목이 복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 재생성 (프롬프트 변경 시 자동 실행)\n   */\n  const regenerateLastResult = useCallback(async () => {\n    if (!lastProcessedData || isGenerating) {\n      console.log(\"❌ 재생성 불가:\", {\n        hasData: !!lastProcessedData,\n        isGenerating\n      });\n      return;\n    }\n    console.log(\"🔄 재생성 시작:\", lastProcessedData);\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"regenerating-\" + Date.now(),\n        type: \"assistant\",\n        content: \"🔄 프롬프트 변경사항을 반영하여 제목을 다시 생성하고 있습니다...\",\n        timestamp: new Date(),\n        isLoading: true\n      };\n      setMessages(prev => [...prev, loadingMessage]);\n\n      // 동일한 데이터로 다시 실행\n      const result = await executeOrchestration(lastProcessedData.articleText, {}, lastProcessedData.userRequest);\n      if (result && (result.result || result.success)) {\n        const titleText = result.result || \"제목 생성이 완료되었습니다.\";\n        const lines = titleText.split(\"\\n\").filter(line => line.trim());\n        const titles = [];\n        for (const line of lines) {\n          if (/^\\d+\\.\\s*/.test(line)) {\n            const title = line.replace(/^\\d+\\.\\s*/, \"\").trim();\n            if (title && title.length > 0) {\n              titles.push(title);\n            }\n          }\n        }\n        if (titles.length === 0) {\n          titles.push(titleText);\n        }\n        const responseMessage = {\n          id: \"regenerated-\" + Date.now(),\n          type: \"assistant\",\n          content: `**✨ 업데이트된 프롬프트로 재생성된 제목들:**\\n\\n${titles.map((title, i) => `**${i + 1}.** ${title}`).join(\"\\n\\n\")}\\n\\n프롬프트 변경사항이 반영되었습니다!`,\n          timestamp: new Date(),\n          titles: titles,\n          isRegenerated: true\n        };\n        setMessages(prev => prev.filter(msg => !msg.isLoading).concat([responseMessage]));\n        console.log(\"✅ 재생성 완료\");\n      }\n    } catch (error) {\n      console.error(\"재생성 실패:\", error);\n      const errorMessage = {\n        id: \"regeneration-error-\" + Date.now(),\n        type: \"assistant\",\n        content: \"재생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n    }\n  }, [lastProcessedData, isGenerating, executeOrchestration]);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setLastProcessedData(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    regenerateLastResult,\n    hasLastProcessedData: !!lastProcessedData\n  };\n};\n_s(useChat, \"vfZIK3qd6wKspHVFBc+i1OdKg1Q=\", false, function () {\n  return [useOrchestration];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","useChat","projectId","projectName","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","lastProcessedData","setLastProcessedData","messagesEndRef","inputRef","isExecuting","isGenerating","executeOrchestration","pollOrchestrationResult","resetOrchestration","welcomeMessage","id","type","content","timestamp","Date","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","console","log","trim","isEmpty","userMessage","now","Math","random","prev","currentInput","loadingMessage","isLoading","isLongContent","length","hasMultipleLines","split","isArticleContent","articleText","userRequest","lastMessages","slice","lastArticleMessage","find","msg","articleLength","userRequestLength","substring","processedData","toISOString","result","success","titleText","lines","filter","line","titles","test","title","replace","push","botMessage","metadata","mode","promptCount","concat","error","errorMessage","isError","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","setTimeout","handleCopyTitle","index","regenerateLastResult","hasData","responseMessage","map","i","join","isRegenerated","resetChat","hasLastProcessedData"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const [lastProcessedData, setLastProcessedData] = useState(null); // 마지막 처리 데이터 저장\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! 저는 ${projectName}의 AI 제목 작가입니다.\\n\\n기사 내용을 입력해주시면 다양한 스타일의 제목을 제안해드릴게요. 제목을 수정하거나 다른 스타일로 바꾸고 싶으시면 언제든 말씀해주세요!`,\n      timestamp: new Date(),\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    console.log(\"📝 메시지 전송 시도:\", {\n      inputValue: inputValue.trim(),\n      isGenerating,\n    });\n    if (!inputValue.trim() || isGenerating) {\n      console.log(\"❌ 전송 차단:\", {\n        isEmpty: !inputValue.trim(),\n        isGenerating,\n      });\n      return;\n    }\n\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          \"AI가 제목을 생성하고 있습니다...\\n\\n단계별로 처리 중이니 잠시만 기다려주세요!\",\n        timestamp: new Date(),\n        isLoading: true,\n      };\n\n      setMessages((prev) => [...prev, loadingMessage]);\n\n      // 사용자 입력이 기사 내용인지 추가 요청인지 판단\n      const isLongContent = currentInput.length > 200;\n      const hasMultipleLines = currentInput.split(\"\\n\").length > 3;\n      const isArticleContent = isLongContent && hasMultipleLines;\n\n      let articleText = \"\";\n      let userRequest = \"\";\n\n      if (isArticleContent) {\n        // 긴 내용이면 기사로 간주\n        articleText = currentInput;\n        userRequest = \"\";\n      } else {\n        // 짧은 내용이면 이전 대화에서 기사 찾기 또는 기본 요청으로 처리\n        const lastMessages = messages.slice(-5); // 최근 5개 메시지 확인\n        const lastArticleMessage = lastMessages.find(\n          (msg) => msg.type === \"user\" && msg.content.length > 200\n        );\n\n        if (lastArticleMessage) {\n          // 이전에 기사가 있었다면 현재 입력을 추가 요청으로 처리\n          articleText = lastArticleMessage.content;\n          userRequest = currentInput;\n        } else {\n          // 기사가 없으면 현재 입력을 기사로 처리\n          articleText = currentInput;\n          userRequest = \"\";\n        }\n      }\n\n      console.log(\"📝 입력 분석:\", {\n        isArticleContent,\n        articleLength: articleText.length,\n        userRequestLength: userRequest.length,\n        userRequest: userRequest.substring(0, 50) + \"...\",\n      });\n\n      // 처리 데이터 저장 (재생성용)\n      const processedData = {\n        articleText,\n        userRequest,\n        timestamp: new Date().toISOString(),\n      };\n      setLastProcessedData(processedData);\n\n      // 오케스트레이션 실행 (단순화)\n      const result = await executeOrchestration(articleText, {}, userRequest);\n\n      console.log(\"✅ 제목 생성 완료:\", result);\n\n      if (result && (result.result || result.success)) {\n        // 결과 처리 (단순화)\n        const titleText = result.result || \"제목 생성이 완료되었습니다.\";\n\n        // 간단한 제목 파싱\n        const lines = titleText.split(\"\\n\").filter((line) => line.trim());\n        const titles = [];\n\n        for (const line of lines) {\n          // 번호가 있는 제목만 추출\n          if (/^\\d+\\.\\s*/.test(line)) {\n            const title = line.replace(/^\\d+\\.\\s*/, \"\").trim();\n            if (title && title.length > 0) {\n              titles.push(title);\n            }\n          }\n        }\n\n        // 제목이 없으면 전체 텍스트를 하나의 응답으로 처리\n        if (titles.length === 0) {\n          titles.push(titleText);\n        }\n\n        console.log(\"📝 파싱된 제목들:\", titles);\n\n        // 메시지 추가\n        const botMessage = {\n          id: `bot-${Date.now()}`,\n          type: \"bot\",\n          content: titleText,\n          titles: titles,\n          timestamp: new Date().toISOString(),\n          projectId,\n          metadata: {\n            mode: result.mode || \"unknown\",\n            promptCount: result.promptCount || 0,\n            userRequest: userRequest || null,\n          },\n        };\n\n        // 로딩 메시지 제거하고 결과 메시지 추가\n        setMessages((prev) =>\n          prev.filter((msg) => !msg.isLoading).concat([botMessage])\n        );\n\n        console.log(\"✅ 메시지 처리 완료, 상태 초기화\");\n      } else {\n        // 결과가 없는 경우 에러 처리\n        console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n\n        const errorMessage = {\n          id: \"error-\" + Date.now(),\n          type: \"assistant\",\n          content:\n            \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          timestamp: new Date(),\n          isError: true,\n        };\n\n        setMessages((prev) =>\n          prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n        );\n\n        console.log(\"❌ AI 응답 오류 처리 완료\");\n      }\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          \"죄송합니다. 메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n      };\n\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n      );\n\n      console.log(\"❌ 에러 처리 완료\");\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    projectId,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"제목이 복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 재생성 (프롬프트 변경 시 자동 실행)\n   */\n  const regenerateLastResult = useCallback(async () => {\n    if (!lastProcessedData || isGenerating) {\n      console.log(\"❌ 재생성 불가:\", {\n        hasData: !!lastProcessedData,\n        isGenerating,\n      });\n      return;\n    }\n\n    console.log(\"🔄 재생성 시작:\", lastProcessedData);\n\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"regenerating-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          \"🔄 프롬프트 변경사항을 반영하여 제목을 다시 생성하고 있습니다...\",\n        timestamp: new Date(),\n        isLoading: true,\n      };\n\n      setMessages((prev) => [...prev, loadingMessage]);\n\n      // 동일한 데이터로 다시 실행\n      const result = await executeOrchestration(\n        lastProcessedData.articleText,\n        {},\n        lastProcessedData.userRequest\n      );\n\n      if (result && (result.result || result.success)) {\n        const titleText = result.result || \"제목 생성이 완료되었습니다.\";\n        const lines = titleText.split(\"\\n\").filter((line) => line.trim());\n        const titles = [];\n\n        for (const line of lines) {\n          if (/^\\d+\\.\\s*/.test(line)) {\n            const title = line.replace(/^\\d+\\.\\s*/, \"\").trim();\n            if (title && title.length > 0) {\n              titles.push(title);\n            }\n          }\n        }\n\n        if (titles.length === 0) {\n          titles.push(titleText);\n        }\n\n        const responseMessage = {\n          id: \"regenerated-\" + Date.now(),\n          type: \"assistant\",\n          content: `**✨ 업데이트된 프롬프트로 재생성된 제목들:**\\n\\n${titles\n            .map((title, i) => `**${i + 1}.** ${title}`)\n            .join(\"\\n\\n\")}\\n\\n프롬프트 변경사항이 반영되었습니다!`,\n          timestamp: new Date(),\n          titles: titles,\n          isRegenerated: true,\n        };\n\n        setMessages((prev) =>\n          prev.filter((msg) => !msg.isLoading).concat([responseMessage])\n        );\n\n        console.log(\"✅ 재생성 완료\");\n      }\n    } catch (error) {\n      console.error(\"재생성 실패:\", error);\n\n      const errorMessage = {\n        id: \"regeneration-error-\" + Date.now(),\n        type: \"assistant\",\n        content: \"재생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n      };\n\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n      );\n    }\n  }, [lastProcessedData, isGenerating, executeOrchestration]);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    setLastProcessedData(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n    regenerateLastResult,\n    hasLastProcessedData: !!lastProcessedData,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}