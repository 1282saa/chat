{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from 'react';\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = projectId => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(() => {\n    const wsUrl = process.env.REACT_APP_WS_URL || 'wss://your-websocket-api-url/prod';\n    return wsUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    var _wsRef$current;\n    if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.OPEN) {\n      return;\n    }\n    setIsConnecting(true);\n    setError(null);\n    try {\n      const wsUrl = getWebSocketUrl();\n      console.log('WebSocket 연결 시도:', wsUrl);\n      wsRef.current = new WebSocket(wsUrl);\n      wsRef.current.onopen = () => {\n        console.log('WebSocket 연결 성공');\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n      wsRef.current.onclose = event => {\n        console.log('WebSocket 연결 종료:', event.code, event.reason);\n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          console.log(`${delay}ms 후 재연결 시도 (${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        }\n      };\n      wsRef.current.onerror = error => {\n        console.error('WebSocket 오류:', error);\n        setError('WebSocket 연결 오류가 발생했습니다');\n        setIsConnecting(false);\n      };\n    } catch (err) {\n      console.error('WebSocket 연결 실패:', err);\n      setError('WebSocket 연결에 실패했습니다');\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    if (wsRef.current) {\n      wsRef.current.close(1000, 'Manual disconnect');\n      wsRef.current = null;\n    }\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback(message => {\n    var _wsRef$current2;\n    if (((_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.readyState) === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error('WebSocket이 연결되지 않았습니다');\n      setError('WebSocket 연결이 필요합니다');\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback((userInput, chatHistory = []) => {\n    if (!isConnected) {\n      setError('WebSocket 연결이 필요합니다');\n      return false;\n    }\n    const message = {\n      action: 'stream',\n      projectId,\n      userInput,\n      chat_history: chatHistory\n    };\n    return sendMessage(message);\n  }, [isConnected, projectId, sendMessage]);\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback(listener => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener('message', listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback(listener => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener('message', listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  // projectId 변경 시 재연결\n  useEffect(() => {\n    if (isConnected) {\n      disconnect();\n      setTimeout(connect, 100);\n    }\n  }, [projectId, isConnected, connect, disconnect]);\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener\n  };\n};\n_s(useWebSocket, \"VEvFLvd1lfAENuW3bGY3DDszaKQ=\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebSocket","projectId","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","error","setError","wsRef","reconnectTimeoutRef","reconnectAttempts","maxReconnectAttempts","getWebSocketUrl","wsUrl","process","env","REACT_APP_WS_URL","connect","_wsRef$current","current","readyState","WebSocket","OPEN","console","log","onopen","onclose","event","code","reason","delay","Math","min","pow","setTimeout","onerror","err","disconnect","clearTimeout","close","sendMessage","message","_wsRef$current2","send","JSON","stringify","startStreaming","userInput","chatHistory","action","chat_history","addMessageListener","listener","addEventListener","removeMessageListener","removeEventListener"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = (projectId) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(() => {\n    const wsUrl = process.env.REACT_APP_WS_URL || 'wss://your-websocket-api-url/prod';\n    return wsUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const wsUrl = getWebSocketUrl();\n      console.log('WebSocket 연결 시도:', wsUrl);\n      \n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log('WebSocket 연결 성공');\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onclose = (event) => {\n        console.log('WebSocket 연결 종료:', event.code, event.reason);\n        setIsConnected(false);\n        setIsConnecting(false);\n        \n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          console.log(`${delay}ms 후 재연결 시도 (${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket 오류:', error);\n        setError('WebSocket 연결 오류가 발생했습니다');\n        setIsConnecting(false);\n      };\n\n    } catch (err) {\n      console.error('WebSocket 연결 실패:', err);\n      setError('WebSocket 연결에 실패했습니다');\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, 'Manual disconnect');\n      wsRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error('WebSocket이 연결되지 않았습니다');\n      setError('WebSocket 연결이 필요합니다');\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback((userInput, chatHistory = []) => {\n    if (!isConnected) {\n      setError('WebSocket 연결이 필요합니다');\n      return false;\n    }\n\n    const message = {\n      action: 'stream',\n      projectId,\n      userInput,\n      chat_history: chatHistory\n    };\n\n    return sendMessage(message);\n  }, [isConnected, projectId, sendMessage]);\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener('message', listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener('message', listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  // projectId 변경 시 재연결\n  useEffect(() => {\n    if (isConnected) {\n      disconnect();\n      setTimeout(connect, 100);\n    }\n  }, [projectId, isConnected, connect, disconnect]);\n\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}