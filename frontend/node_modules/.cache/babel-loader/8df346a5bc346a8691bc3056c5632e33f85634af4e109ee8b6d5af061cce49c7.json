{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from\"react\";import{authAPI}from\"../services/api\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[isAuthenticated,setIsAuthenticated]=useState(false);// 컴포넌트 마운트 시 인증 상태 확인\nuseEffect(()=>{checkAuthStatus();},[]);const checkAuthStatus=()=>{try{const authenticated=authAPI.isAuthenticated();setIsAuthenticated(authenticated);if(authenticated){const currentUser=authAPI.getCurrentUser();setUser(currentUser);}else{setUser(null);}}catch(error){console.error(\"인증 상태 확인 오류:\",error);setIsAuthenticated(false);setUser(null);}finally{setLoading(false);}};const login=async credentials=>{try{const response=await authAPI.signin(credentials);const currentUser=authAPI.getCurrentUser();setUser(currentUser);setIsAuthenticated(true);return response;}catch(error){setUser(null);setIsAuthenticated(false);throw error;}};const logout=async()=>{try{await authAPI.signout();}catch(error){console.error(\"로그아웃 오류:\",error);}finally{setUser(null);setIsAuthenticated(false);}};const signup=async userData=>{return await authAPI.signup(userData);};const verifyEmail=async verificationData=>{return await authAPI.verifyEmail(verificationData);};const refreshToken=async()=>{try{await authAPI.refreshToken();const currentUser=authAPI.getCurrentUser();setUser(currentUser);setIsAuthenticated(true);}catch(error){setUser(null);setIsAuthenticated(false);throw error;}};const value={user,loading,isAuthenticated,login,logout,signup,verifyEmail,refreshToken,checkAuthStatus};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsx","_jsx","AuthContext","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuthStatus","authenticated","currentUser","getCurrentUser","error","console","login","credentials","response","signin","logout","signout","signup","userData","verifyEmail","verificationData","refreshToken","value","Provider"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { authAPI } from \"../services/api\";\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // 컴포넌트 마운트 시 인증 상태 확인\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = () => {\n    try {\n      const authenticated = authAPI.isAuthenticated();\n      setIsAuthenticated(authenticated);\n      \n      if (authenticated) {\n        const currentUser = authAPI.getCurrentUser();\n        setUser(currentUser);\n      } else {\n        setUser(null);\n      }\n    } catch (error) {\n      console.error(\"인증 상태 확인 오류:\", error);\n      setIsAuthenticated(false);\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (credentials) => {\n    try {\n      const response = await authAPI.signin(credentials);\n      const currentUser = authAPI.getCurrentUser();\n      \n      setUser(currentUser);\n      setIsAuthenticated(true);\n      \n      return response;\n    } catch (error) {\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await authAPI.signout();\n    } catch (error) {\n      console.error(\"로그아웃 오류:\", error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  const signup = async (userData) => {\n    return await authAPI.signup(userData);\n  };\n\n  const verifyEmail = async (verificationData) => {\n    return await authAPI.verifyEmail(verificationData);\n  };\n\n  const refreshToken = async () => {\n    try {\n      await authAPI.refreshToken();\n      const currentUser = authAPI.getCurrentUser();\n      setUser(currentUser);\n      setIsAuthenticated(true);\n    } catch (error) {\n      setUser(null);\n      setIsAuthenticated(false);\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    logout,\n    signup,\n    verifyEmail,\n    refreshToken,\n    checkAuthStatus,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}