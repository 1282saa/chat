{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { conversationAPI, mockConversations } from '../services/api';\n\n/**\n * 대화 목록 관리를 위한 커스텀 훅\n * 무한 스크롤과 실시간 업데이트 지원\n */\nexport const useConversations = () => {\n  _s();\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 대화 목록 초기 로드\n  const loadConversations = useCallback(async (reset = false) => {\n    if (loading) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const cursor = reset ? null : nextCursor;\n      const response = await conversationAPI.getConversations(cursor);\n      if (reset) {\n        setConversations(response.conversations);\n      } else {\n        setConversations(prev => [...prev, ...response.conversations]);\n      }\n      setHasMore(response.hasMore);\n      setNextCursor(response.nextCursor);\n    } catch (err) {\n      var _err$response, _err$response2, _err$response3, _err$response4;\n      console.error('대화 목록 로드 실패:', err);\n      console.error('Error details:', {\n        message: err.message,\n        status: (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status,\n        data: (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data,\n        config: err.config\n      });\n\n      // 상세한 에러 메시지 제공\n      let errorMessage = '대화 목록을 불러오는데 실패했습니다.';\n      if (err.code === 'ERR_NETWORK') {\n        errorMessage = '네트워크 연결을 확인해주세요.';\n      } else if (((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.status) === 403) {\n        errorMessage = '접근 권한이 없습니다.';\n      } else if (((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.status) >= 500) {\n        errorMessage = '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';\n      }\n      setError(errorMessage);\n\n      // API 실패시 mock 데이터로 fallback\n      if (reset) {\n        console.log('API 실패, mock 데이터 사용');\n        setConversations(mockConversations);\n        setHasMore(false);\n        setNextCursor(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, nextCursor]);\n\n  // 새 대화 생성\n  const createConversation = useCallback(async title => {\n    console.log(\"🔍 [DEBUG] createConversation 호출:\", {\n      title\n    });\n    try {\n      console.log(\"🔍 [DEBUG] API 호출 시도:\", title);\n      const response = await conversationAPI.createConversation(title);\n      console.log(\"🔍 [DEBUG] API 응답:\", response);\n      const newConversation = {\n        id: response.conversationId,\n        title: response.title,\n        startedAt: response.startedAt,\n        lastActivityAt: response.lastActivityAt,\n        tokenSum: 0\n      };\n      console.log(\"🔍 [DEBUG] 새 대화 객체 생성:\", newConversation);\n\n      // 새 대화를 목록 맨 앞에 추가\n      setConversations(prev => {\n        console.log(\"🔍 [DEBUG] 대화 목록 업데이트 - 이전:\", prev.length, \"새로 추가:\", newConversation.id);\n        console.log(\"🔍 [DEBUG] 이전 대화 목록:\", prev.map(c => ({\n          id: c.id,\n          title: c.title\n        })));\n        const updated = [newConversation, ...prev];\n        console.log(\"🔍 [DEBUG] 대화 목록 업데이트 - 이후:\", updated.length);\n        console.log(\"🔍 [DEBUG] 업데이트된 대화 목록:\", updated.map(c => ({\n          id: c.id,\n          title: c.title\n        })));\n        return updated;\n      });\n      return newConversation;\n    } catch (err) {\n      console.error('🔍 [DEBUG] 대화 생성 API 실패:', err);\n\n      // API 실패시 mock 데이터로 fallback\n      const mockConversation = {\n        id: Date.now().toString(),\n        title: title || 'New Conversation',\n        startedAt: new Date().toISOString(),\n        lastActivityAt: new Date().toISOString(),\n        tokenSum: 0\n      };\n      console.log(\"🔍 [DEBUG] Mock 대화 생성:\", mockConversation);\n      setConversations(prev => {\n        console.log(\"🔍 [DEBUG] Mock 대화 목록 업데이트 - 이전:\", prev.length);\n        const updated = [mockConversation, ...prev];\n        console.log(\"🔍 [DEBUG] Mock 대화 목록 업데이트 - 이후:\", updated.length);\n        return updated;\n      });\n      return mockConversation;\n    }\n  }, []);\n\n  // 대화 업데이트 (마지막 활동 시간, 제목 등)\n  const updateConversation = useCallback(async (conversationId, updates) => {\n    try {\n      // API 호출로 실제 업데이트 시도\n      console.log(\"대화 업데이트 API 호출:\", conversationId, updates);\n      await conversationAPI.updateConversation(conversationId, updates);\n      console.log(\"대화 업데이트 API 성공\");\n    } catch (err) {\n      console.warn(\"대화 업데이트 API 실패, 로컬에서만 업데이트:\", err);\n      // API 실패 시에도 로컬에서는 업데이트 진행\n    }\n\n    // API 성공/실패 관계없이 로컬 상태 업데이트\n    setConversations(prev => prev.map(conv => conv.id === conversationId ? {\n      ...conv,\n      ...updates,\n      lastActivityAt: new Date().toISOString()\n    } : conv));\n  }, []);\n\n  // 대화 삭제\n  const deleteConversation = useCallback(async conversationId => {\n    try {\n      // API 호출로 실제 삭제 시도\n      await conversationAPI.deleteConversation(conversationId);\n      console.log('API 삭제 성공:', conversationId);\n    } catch (err) {\n      console.warn('API 삭제 실패, 로컬에서만 삭제:', err);\n      // API 실패 시에도 로컬에서는 삭제 진행\n    }\n\n    // API 성공/실패 관계없이 UI에서 제거\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n    return true;\n  }, []);\n\n  // 대화 삭제 (UI에서만 제거, 실제 삭제는 별도 구현)\n  const removeConversation = useCallback(conversationId => {\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n  }, []);\n\n  // 다음 페이지 로드 (무한 스크롤)\n  const loadMore = useCallback(() => {\n    if (hasMore && !loading) {\n      loadConversations(false);\n    }\n  }, [hasMore, loading, loadConversations]);\n\n  // 새로고침\n  const refresh = useCallback(() => {\n    loadConversations(true);\n  }, [loadConversations]);\n\n  // 초기 로드\n  useEffect(() => {\n    loadConversations(true);\n  }, []);\n  return {\n    conversations,\n    loading,\n    error,\n    hasMore,\n    loadMore,\n    refresh,\n    createConversation,\n    updateConversation,\n    deleteConversation,\n    removeConversation\n  };\n};\n_s(useConversations, \"bfRlAuB7RBfyom/AliS0RQoM5N8=\");","map":{"version":3,"names":["useState","useEffect","useCallback","conversationAPI","mockConversations","useConversations","_s","conversations","setConversations","loading","setLoading","error","setError","hasMore","setHasMore","nextCursor","setNextCursor","loadConversations","reset","cursor","response","getConversations","prev","err","_err$response","_err$response2","_err$response3","_err$response4","console","message","status","data","config","errorMessage","code","log","createConversation","title","newConversation","id","conversationId","startedAt","lastActivityAt","tokenSum","length","map","c","updated","mockConversation","Date","now","toString","toISOString","updateConversation","updates","warn","conv","deleteConversation","filter","removeConversation","loadMore","refresh"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useConversations.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { conversationAPI, mockConversations } from '../services/api';\n\n/**\n * 대화 목록 관리를 위한 커스텀 훅\n * 무한 스크롤과 실시간 업데이트 지원\n */\nexport const useConversations = () => {\n  const [conversations, setConversations] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [hasMore, setHasMore] = useState(true);\n  const [nextCursor, setNextCursor] = useState(null);\n\n  // 대화 목록 초기 로드\n  const loadConversations = useCallback(async (reset = false) => {\n    if (loading) return;\n    \n    setLoading(true);\n    setError(null);\n\n    try {\n      const cursor = reset ? null : nextCursor;\n      const response = await conversationAPI.getConversations(cursor);\n      \n      if (reset) {\n        setConversations(response.conversations);\n      } else {\n        setConversations(prev => [...prev, ...response.conversations]);\n      }\n      \n      setHasMore(response.hasMore);\n      setNextCursor(response.nextCursor);\n      \n    } catch (err) {\n      console.error('대화 목록 로드 실패:', err);\n      console.error('Error details:', {\n        message: err.message,\n        status: err.response?.status,\n        data: err.response?.data,\n        config: err.config\n      });\n      \n      // 상세한 에러 메시지 제공\n      let errorMessage = '대화 목록을 불러오는데 실패했습니다.';\n      if (err.code === 'ERR_NETWORK') {\n        errorMessage = '네트워크 연결을 확인해주세요.';\n      } else if (err.response?.status === 403) {\n        errorMessage = '접근 권한이 없습니다.';\n      } else if (err.response?.status >= 500) {\n        errorMessage = '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';\n      }\n      \n      setError(errorMessage);\n      \n      // API 실패시 mock 데이터로 fallback\n      if (reset) {\n        console.log('API 실패, mock 데이터 사용');\n        setConversations(mockConversations);\n        setHasMore(false);\n        setNextCursor(null);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [loading, nextCursor]);\n\n  // 새 대화 생성\n  const createConversation = useCallback(async (title) => {\n    console.log(\"🔍 [DEBUG] createConversation 호출:\", { title });\n    \n    try {\n      console.log(\"🔍 [DEBUG] API 호출 시도:\", title);\n      const response = await conversationAPI.createConversation(title);\n      console.log(\"🔍 [DEBUG] API 응답:\", response);\n      \n      const newConversation = {\n        id: response.conversationId,\n        title: response.title,\n        startedAt: response.startedAt,\n        lastActivityAt: response.lastActivityAt,\n        tokenSum: 0\n      };\n      \n      console.log(\"🔍 [DEBUG] 새 대화 객체 생성:\", newConversation);\n      \n      // 새 대화를 목록 맨 앞에 추가\n      setConversations(prev => {\n        console.log(\"🔍 [DEBUG] 대화 목록 업데이트 - 이전:\", prev.length, \"새로 추가:\", newConversation.id);\n        console.log(\"🔍 [DEBUG] 이전 대화 목록:\", prev.map(c => ({id: c.id, title: c.title})));\n        const updated = [newConversation, ...prev];\n        console.log(\"🔍 [DEBUG] 대화 목록 업데이트 - 이후:\", updated.length);\n        console.log(\"🔍 [DEBUG] 업데이트된 대화 목록:\", updated.map(c => ({id: c.id, title: c.title})));\n        return updated;\n      });\n      \n      return newConversation;\n    } catch (err) {\n      console.error('🔍 [DEBUG] 대화 생성 API 실패:', err);\n      \n      // API 실패시 mock 데이터로 fallback\n      const mockConversation = {\n        id: Date.now().toString(),\n        title: title || 'New Conversation',\n        startedAt: new Date().toISOString(),\n        lastActivityAt: new Date().toISOString(),\n        tokenSum: 0\n      };\n      \n      console.log(\"🔍 [DEBUG] Mock 대화 생성:\", mockConversation);\n      \n      setConversations(prev => {\n        console.log(\"🔍 [DEBUG] Mock 대화 목록 업데이트 - 이전:\", prev.length);\n        const updated = [mockConversation, ...prev];\n        console.log(\"🔍 [DEBUG] Mock 대화 목록 업데이트 - 이후:\", updated.length);\n        return updated;\n      });\n      \n      return mockConversation;\n    }\n  }, []);\n\n  // 대화 업데이트 (마지막 활동 시간, 제목 등)\n  const updateConversation = useCallback(async (conversationId, updates) => {\n    try {\n      // API 호출로 실제 업데이트 시도\n      console.log(\"대화 업데이트 API 호출:\", conversationId, updates);\n      await conversationAPI.updateConversation(conversationId, updates);\n      console.log(\"대화 업데이트 API 성공\");\n    } catch (err) {\n      console.warn(\"대화 업데이트 API 실패, 로컬에서만 업데이트:\", err);\n      // API 실패 시에도 로컬에서는 업데이트 진행\n    }\n    \n    // API 성공/실패 관계없이 로컬 상태 업데이트\n    setConversations(prev => \n      prev.map(conv => \n        conv.id === conversationId \n          ? { ...conv, ...updates, lastActivityAt: new Date().toISOString() }\n          : conv\n      )\n    );\n  }, []);\n\n  // 대화 삭제\n  const deleteConversation = useCallback(async (conversationId) => {\n    try {\n      // API 호출로 실제 삭제 시도\n      await conversationAPI.deleteConversation(conversationId);\n      console.log('API 삭제 성공:', conversationId);\n    } catch (err) {\n      console.warn('API 삭제 실패, 로컬에서만 삭제:', err);\n      // API 실패 시에도 로컬에서는 삭제 진행\n    }\n    \n    // API 성공/실패 관계없이 UI에서 제거\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n    \n    return true;\n  }, []);\n\n  // 대화 삭제 (UI에서만 제거, 실제 삭제는 별도 구현)\n  const removeConversation = useCallback((conversationId) => {\n    setConversations(prev => prev.filter(conv => conv.id !== conversationId));\n  }, []);\n\n  // 다음 페이지 로드 (무한 스크롤)\n  const loadMore = useCallback(() => {\n    if (hasMore && !loading) {\n      loadConversations(false);\n    }\n  }, [hasMore, loading, loadConversations]);\n\n  // 새로고침\n  const refresh = useCallback(() => {\n    loadConversations(true);\n  }, [loadConversations]);\n\n  // 초기 로드\n  useEffect(() => {\n    loadConversations(true);\n  }, []);\n\n  return {\n    conversations,\n    loading,\n    error,\n    hasMore,\n    loadMore,\n    refresh,\n    createConversation,\n    updateConversation,\n    deleteConversation,\n    removeConversation\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}