{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! 저는 ${projectName}의 AI 제목 작가입니다.\\n\\n기사 내용을 입력해주시면 다양한 스타일의 제목을 제안해드릴게요. 제목을 수정하거나 다른 스타일로 바꾸고 싶으시면 언제든 말씀해주세요!`,\n      timestamp: new Date()\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content: \"AI가 제목을 생성하고 있습니다...\\n\\n단계별로 처리 중이니 잠시만 기다려주세요!\",\n        timestamp: new Date(),\n        isLoading: true\n      };\n      setMessages(prev => [...prev, loadingMessage]);\n\n      // 오케스트레이션 실행\n      const result = await executeOrchestration(currentInput, {\n        enabledSteps: promptCards.filter(card => card.enabled).map(card => card.category)\n      });\n      if (result && result.result) {\n        // guidance 모드인지 확인 (100자 미만 입력 시)\n        if (result.guidance || result.mode === \"guidance\") {\n          const guidanceMessage = {\n            id: \"guidance-\" + Date.now(),\n            type: \"assistant\",\n            content: result.result,\n            timestamp: new Date(),\n            isGuidance: true,\n            inputLength: result.input_length,\n            recommendedLength: result.recommended_length\n          };\n          setMessages(prev => prev.filter(msg => !msg.isLoading).concat([guidanceMessage]));\n          return;\n        }\n\n        // 정상적인 제목 생성 결과 처리\n        const titleText = result.result;\n\n        // 번호가 매겨진 제목들을 파싱\n        const titles = titleText.split(\"\\n\").map(line => line.trim()).filter(line => line && /^\\d+\\./.test(line)).map(line => line.replace(/^\\d+\\.\\s*/, \"\")).slice(0, 5); // 최대 5개\n\n        const responseMessage = {\n          id: \"response-\" + Date.now(),\n          type: \"assistant\",\n          content: `**생성된 제목 후보들입니다:**\\n\\n${titles.map((title, i) => `**${i + 1}.** ${title}`).join(\"\\n\\n\")}\\n\\n원하시는 제목이 있으시거나 수정이 필요하시면 말씀해주세요!`,\n          timestamp: new Date(),\n          titles: titles\n        };\n\n        // 로딩 메시지 제거하고 결과 메시지 추가\n        setMessages(prev => prev.filter(msg => !msg.isLoading).concat([responseMessage]));\n      } else {\n        // 결과가 없는 경우 에러 처리\n        console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n        const errorMessage = {\n          id: \"error-\" + Date.now(),\n          type: \"assistant\",\n          content: \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          timestamp: new Date(),\n          isError: true\n        };\n        setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n      }\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: \"죄송합니다. 메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n    }\n  }, [inputValue, isGenerating, executeOrchestration, pollOrchestrationResult, promptCards]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"제목이 복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom\n  };\n};\n_s(useChat, \"65spPCFiJeixZY7XKNhZdn5atpw=\", false, function () {\n  return [useOrchestration];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","useChat","projectId","projectName","promptCards","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","messagesEndRef","inputRef","isExecuting","isGenerating","executeOrchestration","pollOrchestrationResult","resetOrchestration","welcomeMessage","id","type","content","timestamp","Date","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","now","Math","random","prev","currentInput","loadingMessage","isLoading","result","enabledSteps","filter","card","enabled","map","category","guidance","mode","guidanceMessage","isGuidance","inputLength","input_length","recommendedLength","recommended_length","msg","concat","titleText","titles","split","line","test","replace","slice","responseMessage","title","i","join","console","error","errorMessage","isError","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","success","setTimeout","handleCopyTitle","index","resetChat"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정\n  useEffect(() => {\n    const welcomeMessage = {\n      id: \"welcome\",\n      type: \"assistant\",\n      content: `안녕하세요! 저는 ${projectName}의 AI 제목 작가입니다.\\n\\n기사 내용을 입력해주시면 다양한 스타일의 제목을 제안해드릴게요. 제목을 수정하거나 다른 스타일로 바꾸고 싶으시면 언제든 말씀해주세요!`,\n      timestamp: new Date(),\n    };\n    setMessages([welcomeMessage]);\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n\n    const userMessage = {\n      id: Date.now() + Math.random(),\n      type: \"user\",\n      content: inputValue,\n      timestamp: new Date(),\n    };\n\n    setMessages((prev) => [...prev, userMessage]);\n    const currentInput = inputValue;\n    setInputValue(\"\");\n\n    try {\n      // 로딩 메시지 추가\n      const loadingMessage = {\n        id: \"loading-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          \"AI가 제목을 생성하고 있습니다...\\n\\n단계별로 처리 중이니 잠시만 기다려주세요!\",\n        timestamp: new Date(),\n        isLoading: true,\n      };\n\n      setMessages((prev) => [...prev, loadingMessage]);\n\n      // 오케스트레이션 실행\n      const result = await executeOrchestration(currentInput, {\n        enabledSteps: promptCards\n          .filter((card) => card.enabled)\n          .map((card) => card.category),\n      });\n\n      if (result && result.result) {\n        // guidance 모드인지 확인 (100자 미만 입력 시)\n        if (result.guidance || result.mode === \"guidance\") {\n          const guidanceMessage = {\n            id: \"guidance-\" + Date.now(),\n            type: \"assistant\",\n            content: result.result,\n            timestamp: new Date(),\n            isGuidance: true,\n            inputLength: result.input_length,\n            recommendedLength: result.recommended_length,\n          };\n\n          setMessages((prev) =>\n            prev.filter((msg) => !msg.isLoading).concat([guidanceMessage])\n          );\n          return;\n        }\n\n        // 정상적인 제목 생성 결과 처리\n        const titleText = result.result;\n\n        // 번호가 매겨진 제목들을 파싱\n        const titles = titleText\n          .split(\"\\n\")\n          .map((line) => line.trim())\n          .filter((line) => line && /^\\d+\\./.test(line))\n          .map((line) => line.replace(/^\\d+\\.\\s*/, \"\"))\n          .slice(0, 5); // 최대 5개\n\n        const responseMessage = {\n          id: \"response-\" + Date.now(),\n          type: \"assistant\",\n          content: `**생성된 제목 후보들입니다:**\\n\\n${titles\n            .map((title, i) => `**${i + 1}.** ${title}`)\n            .join(\n              \"\\n\\n\"\n            )}\\n\\n원하시는 제목이 있으시거나 수정이 필요하시면 말씀해주세요!`,\n          timestamp: new Date(),\n          titles: titles,\n        };\n\n        // 로딩 메시지 제거하고 결과 메시지 추가\n        setMessages((prev) =>\n          prev.filter((msg) => !msg.isLoading).concat([responseMessage])\n        );\n      } else {\n        // 결과가 없는 경우 에러 처리\n        console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n\n        const errorMessage = {\n          id: \"error-\" + Date.now(),\n          type: \"assistant\",\n          content:\n            \"죄송합니다. 제목 생성 중 오류가 발생했습니다. 다시 시도해주세요.\",\n          timestamp: new Date(),\n          isError: true,\n        };\n\n        setMessages((prev) =>\n          prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n        );\n      }\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          \"죄송합니다. 메시지 처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n      };\n\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n      );\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    promptCards,\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"제목이 복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}