{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Mock data for development\nconst mockUsageData = {\n  todayRequests: 127,\n  todayTokens: 45320,\n  monthlyLimit: 1000000,\n  monthlyUsed: 523400,\n  plan: {\n    name: 'Professional',\n    expiresAt: '2025-02-28',\n    features: ['월 100만 토큰', '우선 지원', 'API 액세스']\n  },\n  chartData: Array.from({\n    length: 30\n  }, (_, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    tokens: Math.floor(Math.random() * 30000) + 10000,\n    requests: Math.floor(Math.random() * 100) + 50\n  })),\n  recentLogs: Array.from({\n    length: 20\n  }, (_, i) => ({\n    id: `log-${i}`,\n    timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n    model: ['Claude 3 Sonnet', 'Claude 3.5 Haiku', 'Claude 3 Opus'][Math.floor(Math.random() * 3)],\n    tokens: Math.floor(Math.random() * 5000) + 1000,\n    duration: Math.floor(Math.random() * 3000) + 500,\n    status: Math.random() > 0.1 ? 'success' : 'error'\n  }))\n};\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 300000 // 5분\n});\n\n// 요청 인터셉터 - 인증 토큰 자동 추가\napi.interceptors.request.use(async config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n\n  // 인증이 필요한 요청에 토큰 추가\n  try {\n    var _session$tokens, _session$tokens$idTok;\n    // AuthContext에서 토큰 가져오기 (동적 import 사용)\n    const {\n      fetchAuthSession\n    } = await import('aws-amplify/auth');\n    const session = await fetchAuthSession();\n    const token = session === null || session === void 0 ? void 0 : (_session$tokens = session.tokens) === null || _session$tokens === void 0 ? void 0 : (_session$tokens$idTok = _session$tokens.idToken) === null || _session$tokens$idTok === void 0 ? void 0 : _session$tokens$idTok.toString();\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log(\"✅ 인증 토큰 추가됨\");\n    } else {\n      console.log(\"⚠️ 인증 토큰 없음\");\n    }\n  } catch (error) {\n    console.log(\"📝 인증 토큰 가져오기 실패:\", error.message);\n    // 인증 오류가 있어도 요청은 계속 진행 (public API도 있을 수 있음)\n  }\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error(\"API 오류 상세:\", {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: error.message,\n    code: error.code,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n  deleteProject: async projectId => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: {\n        fileName\n      }\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (projectId, includeContent = false, includeStats = false) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: {\n        includeContent,\n        includeStats\n      }\n    });\n    return response.data;\n  },\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({\n      promptId,\n      stepOrder\n    }) => api.put(`/prompts/${projectId}/${promptId}`, {\n      stepOrder\n    }));\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map(r => r.data)\n    };\n  }\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    var _data$chat_history;\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history = data.chat_history) === null || _data$chat_history === void 0 ? void 0 : _data$chat_history.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n        responseData: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (projectId, data, onChunk, onError, onComplete) => {\n    var _data$chat_history2;\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history2 = data.chat_history) === null || _data$chat_history2 === void 0 ? void 0 : _data$chat_history2.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n      try {\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          buffer += decoder.decode(value, {\n            stream: true\n          });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, {\n                      content: eventData.response\n                    });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString()\n                    });\n                  }\n                  return {\n                    result: eventData.fullResponse || fullResponse\n                  };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n      return {\n        result: fullResponse\n      };\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n\n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(`/projects/${projectId}/generate`, data);\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString()\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, {\n              content: word\n            });\n            await new Promise(resolve => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString()\n          });\n        }\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\"));\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n  getExecutionStatus: async executionArn => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\"\n    };\n  }\n};\n\n// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\n\nexport const crewAPI = {\n  // 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\n  createCrewInstance: async (projectId, promptCards) => {\n    console.log(\"크루 인스턴스 생성 요청:\", {\n      projectId,\n      promptCardsCount: promptCards.length\n    });\n    const response = await api.post(\"/crew/instances\", {\n      projectId,\n      promptCards: promptCards.map(card => ({\n        promptId: card.promptId,\n        prompt_text: card.prompt_text,\n        stepOrder: card.stepOrder,\n        isActive: card.isActive\n      }))\n    });\n    console.log(\"크루 인스턴스 생성 완료:\", response.data);\n    return response.data;\n  },\n  // 프로젝트의 크루 인스턴스 조회\n  getCrewInstances: async projectId => {\n    console.log(\"크루 인스턴스 조회:\", {\n      projectId\n    });\n    const response = await api.get(`/crew/instances/${projectId}`);\n    return response.data;\n  },\n  // 크루 설정 조회\n  getCrewConfig: async projectId => {\n    console.log(\"크루 설정 조회:\", {\n      projectId\n    });\n    const response = await api.get(`/crew/config/${projectId}`);\n    return response.data;\n  },\n  // 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\n  executeMultiAgent: async (projectId, userInput, onProgress = null) => {\n    console.log(\"멀티-에이전트 실행 시작:\", {\n      projectId,\n      inputLength: userInput.length,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(\"/crew/execute\", {\n        projectId,\n        userInput,\n        mode: \"parallel\" // 병렬 처리 모드 명시\n      });\n      console.log(\"멀티-에이전트 실행 완료:\", {\n        agentCount: Object.keys(response.data.agentResults || {}).length,\n        titleCount: Object.keys(response.data.finalTitles || {}).length,\n        tokenUsage: response.data.tokenUsage,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response6;\n      console.error(\"멀티-에이전트 실행 실패:\", {\n        error: error.message,\n        status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n        data: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n  // 에이전트별 상세 결과 조회\n  getAgentResults: async (projectId, executionId) => {\n    console.log(\"에이전트 결과 조회:\", {\n      projectId,\n      executionId\n    });\n    const response = await api.get(`/crew/results/${projectId}/${executionId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId\n    });\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: []\n      });\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\"\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message: \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"\n    };\n  },\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", {\n      projectId,\n      userId\n    });\n    return {\n      sessions: [],\n      message: \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"\n    };\n  },\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId\n    };\n  }\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\"\n    };\n  },\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n  // 비밀번호 찾기 - 인증번호 발송\n  requestPasswordReset: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  // 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\n  resetPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", {\n      email: resetData.email,\n      code: resetData.code,\n      newPassword: resetData.newPassword\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = error => {\n  var _error$response7, _error$response8, _error$response9, _error$response0, _error$response1, _error$message, _error$message2;\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status,\n    statusText: (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.statusText,\n    data: (_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data,\n    timestamp: new Date().toISOString()\n  });\n\n  // 403 Forbidden 특별 처리\n  if (((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.status) === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\"\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.status) === 504) {\n    return {\n      message: \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\"\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"CORS\") || error.code === \"ERR_NETWORK\" || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"Access-Control-Allow-Origin\")) {\n    return {\n      message: \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\"\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message: \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\"\n    };\n  }\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || \"서버 오류가 발생했습니다\";\n    switch (status) {\n      case 400:\n        return {\n          message: `잘못된 요청: ${message}`,\n          statusCode: 400\n        };\n      case 401:\n        return {\n          message: \"인증이 필요합니다\",\n          statusCode: 401\n        };\n      case 404:\n        return {\n          message: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404\n        };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429\n        };\n      case 500:\n        return {\n          message: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500\n        };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\"\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\"\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message: \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1\n};\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파랑\",\n  bgClass: \"bg-blue-100\",\n  textClass: \"text-blue-800\",\n  borderClass: \"border-blue-200\"\n}, {\n  id: \"green\",\n  name: \"초록\",\n  bgClass: \"bg-green-100\",\n  textClass: \"text-green-800\",\n  borderClass: \"border-green-200\"\n}, {\n  id: \"purple\",\n  name: \"보라\",\n  bgClass: \"bg-purple-100\",\n  textClass: \"text-purple-800\",\n  borderClass: \"border-purple-200\"\n}, {\n  id: \"orange\",\n  name: \"주황\",\n  bgClass: \"bg-orange-100\",\n  textClass: \"text-orange-800\",\n  borderClass: \"border-orange-200\"\n}, {\n  id: \"red\",\n  name: \"빨강\",\n  bgClass: \"bg-red-100\",\n  textClass: \"text-red-800\",\n  borderClass: \"border-red-200\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  bgClass: \"bg-indigo-100\",\n  textClass: \"text-indigo-800\",\n  borderClass: \"border-indigo-200\"\n}, {\n  id: \"pink\",\n  name: \"분홍\",\n  bgClass: \"bg-pink-100\",\n  textClass: \"text-pink-800\",\n  borderClass: \"border-pink-200\"\n}, {\n  id: \"yellow\",\n  name: \"노랑\",\n  bgClass: \"bg-yellow-100\",\n  textClass: \"text-yellow-800\",\n  borderClass: \"border-yellow-200\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  bgClass: \"bg-gray-100\",\n  textClass: \"text-gray-800\",\n  borderClass: \"border-gray-200\"\n}];\nexport const getPromptCardInfo = promptCard => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false\n  };\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => {\n      var _project$name, _project$description, _project$tags;\n      return ((_project$name = project.name) === null || _project$name === void 0 ? void 0 : _project$name.toLowerCase().includes(query)) || ((_project$description = project.description) === null || _project$description === void 0 ? void 0 : _project$description.toLowerCase().includes(query)) || ((_project$tags = project.tags) === null || _project$tags === void 0 ? void 0 : _project$tags.some(tag => tag.toLowerCase().includes(query)));\n    });\n  }\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => {\n        var _a$name;\n        return (_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b.name);\n      });\n      break;\n    default:\n      break;\n  }\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\nexport const formatFileSize = bytes => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false\n    };\n  }\n  const activeCards = promptCards.filter(card => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n  const stepOrders = activeCards.map(card => card.stepOrder || 0).filter(step => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens: activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder\n    }\n  };\n};\n\n// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\n\nexport const getUsage = async (range = 'month') => {\n  console.log(\"사용량 데이터 조회 요청:\", {\n    range\n  });\n\n  // Development mode - return mock data\n  if (process.env.NODE_ENV === 'development') {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockUsageData;\n  }\n  try {\n    const response = await api.get(`/usage?range=${range}`);\n    return response.data;\n  } catch (error) {\n    console.warn(\"사용량 API 호출 실패, 목 데이터 반환:\", error.message);\n    // Fallback to mock data\n    return mockUsageData;\n  }\n};\n\n// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\n\nexport const conversationAPI = {\n  // 대화 목록 조회 (무한 스크롤)\n  getConversations: async (cursor, limit = 20) => {\n    console.log(\"대화 목록 조회 시작:\", {\n      cursor,\n      limit,\n      API_BASE_URL\n    });\n    const params = new URLSearchParams({\n      limit: limit.toString()\n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    const url = `/conversations?${params}`;\n    console.log(\"API 요청 URL:\", `${API_BASE_URL}${url}`);\n    try {\n      const response = await api.get(url);\n      console.log(\"대화 목록 조회 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 목록 조회 실패:\", error);\n      console.error(\"Error response:\", error.response);\n      console.error(\"Error config:\", error.config);\n      throw error;\n    }\n  },\n  // 새 대화 생성\n  createConversation: async (title = 'New Conversation') => {\n    console.log(\"새 대화 생성:\", {\n      title\n    });\n    try {\n      const response = await api.post('/conversations', {\n        title\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", error);\n      throw error;\n    }\n  },\n  // 특정 대화의 메시지 조회 (페이징)\n  getMessages: async (conversationId, cursor, limit = 50) => {\n    console.log(\"메시지 조회:\", {\n      conversationId,\n      cursor,\n      limit\n    });\n    const params = new URLSearchParams({\n      convId: conversationId,\n      limit: limit.toString()\n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    try {\n      const response = await api.get(`/messages?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"메시지 조회 실패:\", error);\n      throw error;\n    }\n  },\n  // 대화 삭제\n  deleteConversation: async conversationId => {\n    console.log(\"대화 삭제:\", {\n      conversationId\n    });\n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      console.log(\"대화 삭제 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 삭제 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// Mock data for conversation development\nexport const mockConversations = [{\n  id: '1',\n  title: '서울경제신문 AI 제목 생성 테스트',\n  startedAt: '2025-01-20T10:30:00Z',\n  lastActivityAt: '2025-01-20T15:45:00Z',\n  tokenSum: 1250\n}, {\n  id: '2',\n  title: '경제 뉴스 헤드라인 최적화',\n  startedAt: '2025-01-19T14:20:00Z',\n  lastActivityAt: '2025-01-19T16:30:00Z',\n  tokenSum: 890\n}, {\n  id: '3',\n  title: '부동산 시장 분석 제목 생성',\n  startedAt: '2025-01-18T09:15:00Z',\n  lastActivityAt: '2025-01-18T11:45:00Z',\n  tokenSum: 2150\n}];\nexport const mockMessages = {\n  '1': [{\n    id: '2025-01-20T10:30:00.000Z',\n    role: 'user',\n    content: '오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.',\n    tokenCount: 25,\n    timestamp: '2025-01-20T10:30:00.000Z'\n  }, {\n    id: '2025-01-20T10:30:05.000Z',\n    role: 'assistant',\n    content: '서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',\n    tokenCount: 95,\n    timestamp: '2025-01-20T10:30:05.000Z'\n  }],\n  '2': [{\n    id: '2025-01-19T14:20:00.000Z',\n    role: 'user',\n    content: '반도체 산업 관련 경제 뉴스 제목을 생성해주세요.',\n    tokenCount: 20,\n    timestamp: '2025-01-19T14:20:00.000Z'\n  }, {\n    id: '2025-01-19T14:20:03.000Z',\n    role: 'assistant',\n    content: '반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',\n    tokenCount: 78,\n    timestamp: '2025-01-19T14:20:03.000Z'\n  }]\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","mockUsageData","todayRequests","todayTokens","monthlyLimit","monthlyUsed","plan","name","expiresAt","features","chartData","Array","from","length","_","i","date","Date","now","toISOString","split","tokens","Math","floor","random","requests","recentLogs","id","timestamp","model","duration","status","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","_session$tokens","_session$tokens$idTok","fetchAuthSession","session","token","idToken","toString","Authorization","error","message","response","_error$response","_error$config","_error$response2","code","data","Promise","reject","projectAPI","getProjects","get","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","map","stepOrder","responses","all","updatedCards","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","historyLength","chat_history","mode","_error$response3","_error$response4","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","streamingUrl","fetch","body","JSON","stringify","ok","Error","statusText","contentType","includes","reader","getReader","decoder","TextDecoder","buffer","fullResponse","done","value","read","decode","stream","lines","pop","line","startsWith","eventData","parse","slice","type","content","result","parseError","releaseLock","streamError","fallbackResponse","fullText","words","word","resolve","setTimeout","model_info","performance_metrics","fallbackError","getExecutionStatus","executionArn","output","crewAPI","createCrewInstance","promptCards","promptCardsCount","card","prompt_text","isActive","getCrewInstances","getCrewConfig","executeMultiAgent","onProgress","agentCount","Object","keys","agentResults","titleCount","finalTitles","tokenUsage","_error$response5","_error$response6","getAgentResults","executionId","chatAPI","sendMessage","sessionId","userId","userRequest","getChatHistory","messages","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","email","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","requestPasswordReset","resetPassword","newPassword","handleAPIError","_error$response7","_error$response8","_error$response9","_error$response0","_error$response1","_error$message","_error$message2","statusCode","errorType","_error$response$data","_error$response$data2","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","promptCard","title","color","description","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","formatFileSize","bytes","calculatePromptStats","totalCards","totalTokens","averageTokens","activeCards","maxStepOrder","hasCustomOrder","reduce","sum","tokenCount","contentLength","stepOrders","step","max","round","stepOrderRange","min","getUsage","range","NODE_ENV","warn","conversationAPI","getConversations","cursor","limit","URLSearchParams","append","createConversation","getMessages","conversationId","convId","deleteConversation","mockConversations","startedAt","lastActivityAt","tokenSum","mockMessages","role"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://nq5qrt16lb.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Mock data for development\nconst mockUsageData = {\n  todayRequests: 127,\n  todayTokens: 45320,\n  monthlyLimit: 1000000,\n  monthlyUsed: 523400,\n  plan: {\n    name: 'Professional',\n    expiresAt: '2025-02-28',\n    features: ['월 100만 토큰', '우선 지원', 'API 액세스']\n  },\n  chartData: Array.from({ length: 30 }, (_, i) => ({\n    date: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    tokens: Math.floor(Math.random() * 30000) + 10000,\n    requests: Math.floor(Math.random() * 100) + 50\n  })),\n  recentLogs: Array.from({ length: 20 }, (_, i) => ({\n    id: `log-${i}`,\n    timestamp: new Date(Date.now() - i * 60 * 60 * 1000).toISOString(),\n    model: ['Claude 3 Sonnet', 'Claude 3.5 Haiku', 'Claude 3 Opus'][Math.floor(Math.random() * 3)],\n    tokens: Math.floor(Math.random() * 5000) + 1000,\n    duration: Math.floor(Math.random() * 3000) + 500,\n    status: Math.random() > 0.1 ? 'success' : 'error'\n  }))\n};\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 5분\n});\n\n// 요청 인터셉터 - 인증 토큰 자동 추가\napi.interceptors.request.use(async (config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  \n  // 인증이 필요한 요청에 토큰 추가\n  try {\n    // AuthContext에서 토큰 가져오기 (동적 import 사용)\n    const { fetchAuthSession } = await import('aws-amplify/auth');\n    const session = await fetchAuthSession();\n    const token = session?.tokens?.idToken?.toString();\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log(\"✅ 인증 토큰 추가됨\");\n    } else {\n      console.log(\"⚠️ 인증 토큰 없음\");\n    }\n  } catch (error) {\n    console.log(\"📝 인증 토큰 가져오기 실패:\", error.message);\n    // 인증 오류가 있어도 요청은 계속 진행 (public API도 있을 수 있음)\n  }\n  \n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 프로젝트 API (기존 유지)\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 프롬프트 카드 API (기존 유지)\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 🔧 완전 수정된 제목 생성 API\n// =============================================================================\n\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 실제 스트리밍 구현 - Server-Sent Events 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      // 1. 먼저 실제 스트리밍 API 시도\n      const streamingUrl = `${API_BASE_URL}/projects/${projectId}/generate/stream`;\n      \n      console.log(\"🚀 실제 스트리밍 API 시도:\", streamingUrl);\n\n      const response = await fetch(streamingUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      // 2. 응답이 스트리밍 형식인지 확인\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('text/event-stream')) {\n        console.log(\"❌ 스트리밍 응답이 아님, 폴백 처리\");\n        throw new Error(\"스트리밍 응답이 아닙니다\");\n      }\n\n      // 3. 실제 스트리밍 처리\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n      let fullResponse = '';\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || '';\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const eventData = JSON.parse(line.slice(6));\n                \n                if (eventData.type === 'start') {\n                  console.log(\"✅ 스트리밍 시작\");\n                } else if (eventData.type === 'chunk') {\n                  fullResponse += eventData.response;\n                  if (onChunk) {\n                    onChunk(eventData.response, { content: eventData.response });\n                  }\n                } else if (eventData.type === 'complete') {\n                  console.log(\"✅ 스트리밍 완료\");\n                  if (onComplete) {\n                    onComplete({\n                      result: eventData.fullResponse || fullResponse,\n                      timestamp: new Date().toISOString(),\n                    });\n                  }\n                  return { result: eventData.fullResponse || fullResponse };\n                } else if (eventData.type === 'error') {\n                  throw new Error(eventData.error);\n                }\n              } catch (parseError) {\n                console.error(\"JSON 파싱 오류:\", parseError);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return { result: fullResponse };\n\n    } catch (streamError) {\n      console.log(\"⚠️ 스트리밍 실패, 폴백 처리:\", streamError.message);\n      \n      // 4. 폴백: 일반 API 호출\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          data\n        );\n\n        console.log(\"✅ 폴백 API 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 폴백 응답을 스트리밍처럼 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word });\n            await new Promise((resolve) => setTimeout(resolve, 30));\n          }\n        }\n\n        // 완료 콜백 호출\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (fallbackError) {\n        console.error(\"❌ 폴백 API도 실패:\", fallbackError);\n        if (onError) {\n          onError(\n            new Error(\"서비스에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.\")\n          );\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다.\");\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 🆕 CrewAI 멀티-에이전트 API (새로 추가)\n// =============================================================================\n\nexport const crewAPI = {\n  // 프롬프트 인스턴스 생성 (프롬프트 카드들을 에이전트로 변환)\n  createCrewInstance: async (projectId, promptCards) => {\n    console.log(\"크루 인스턴스 생성 요청:\", { projectId, promptCardsCount: promptCards.length });\n    \n    const response = await api.post(\"/crew/instances\", {\n      projectId,\n      promptCards: promptCards.map(card => ({\n        promptId: card.promptId,\n        prompt_text: card.prompt_text,\n        stepOrder: card.stepOrder,\n        isActive: card.isActive\n      }))\n    });\n    \n    console.log(\"크루 인스턴스 생성 완료:\", response.data);\n    return response.data;\n  },\n\n  // 프로젝트의 크루 인스턴스 조회\n  getCrewInstances: async (projectId) => {\n    console.log(\"크루 인스턴스 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/instances/${projectId}`);\n    return response.data;\n  },\n\n  // 크루 설정 조회\n  getCrewConfig: async (projectId) => {\n    console.log(\"크루 설정 조회:\", { projectId });\n    \n    const response = await api.get(`/crew/config/${projectId}`);\n    return response.data;\n  },\n\n  // 🌟 멀티-에이전트 병렬 실행 (핵심 기능)\n  executeMultiAgent: async (projectId, userInput, onProgress = null) => {\n    console.log(\"멀티-에이전트 실행 시작:\", { \n      projectId, \n      inputLength: userInput.length,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      const response = await api.post(\"/crew/execute\", {\n        projectId,\n        userInput,\n        mode: \"parallel\" // 병렬 처리 모드 명시\n      });\n\n      console.log(\"멀티-에이전트 실행 완료:\", {\n        agentCount: Object.keys(response.data.agentResults || {}).length,\n        titleCount: Object.keys(response.data.finalTitles || {}).length,\n        tokenUsage: response.data.tokenUsage,\n        timestamp: new Date().toISOString()\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"멀티-에이전트 실행 실패:\", {\n        error: error.message,\n        status: error.response?.status,\n        data: error.response?.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n\n  // 에이전트별 상세 결과 조회\n  getAgentResults: async (projectId, executionId) => {\n    console.log(\"에이전트 결과 조회:\", { projectId, executionId });\n    \n    const response = await api.get(`/crew/results/${projectId}/${executionId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 채팅 API (기존 유지)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [],\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 인증 API (기존 유지)\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    return true;\n  },\n\n  getCurrentUser: () => {\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n\n  // 비밀번호 찾기 - 인증번호 발송\n  requestPasswordReset: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  // 비밀번호 재설정 - 인증번호와 새 비밀번호로 재설정\n  resetPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", {\n      email: resetData.email,\n      code: resetData.code,\n      newPassword: resetData.newPassword\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 🔧 개선된 오류 처리 함수\n// =============================================================================\n\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 403 Forbidden 특별 처리\n  if (error.response?.status === 403) {\n    return {\n      message: \"API 접근이 차단되었습니다. 관리자에게 문의하세요.\",\n      statusCode: 403,\n      errorType: \"FORBIDDEN\",\n    };\n  }\n\n  // Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message:\n        \"서버 연결 설정에 문제가 있습니다. 페이지를 새로고침하고 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 기타 유틸리티 함수들 (기존 유지)\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n\n// =============================================================================\n// Usage API (Dashboard용)\n// =============================================================================\n\nexport const getUsage = async (range = 'month') => {\n  console.log(\"사용량 데이터 조회 요청:\", { range });\n  \n  // Development mode - return mock data\n  if (process.env.NODE_ENV === 'development') {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return mockUsageData;\n  }\n  \n  try {\n    const response = await api.get(`/usage?range=${range}`);\n    return response.data;\n  } catch (error) {\n    console.warn(\"사용량 API 호출 실패, 목 데이터 반환:\", error.message);\n    // Fallback to mock data\n    return mockUsageData;\n  }\n};\n\n// =============================================================================\n// 🆕 Conversation History API\n// =============================================================================\n\nexport const conversationAPI = {\n  // 대화 목록 조회 (무한 스크롤)\n  getConversations: async (cursor, limit = 20) => {\n    console.log(\"대화 목록 조회 시작:\", { cursor, limit, API_BASE_URL });\n    \n    const params = new URLSearchParams({ limit: limit.toString() });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    const url = `/conversations?${params}`;\n    console.log(\"API 요청 URL:\", `${API_BASE_URL}${url}`);\n    \n    try {\n      const response = await api.get(url);\n      console.log(\"대화 목록 조회 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 목록 조회 실패:\", error);\n      console.error(\"Error response:\", error.response);\n      console.error(\"Error config:\", error.config);\n      throw error;\n    }\n  },\n\n  // 새 대화 생성\n  createConversation: async (title = 'New Conversation') => {\n    console.log(\"새 대화 생성:\", { title });\n    \n    try {\n      const response = await api.post('/conversations', { title });\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 특정 대화의 메시지 조회 (페이징)\n  getMessages: async (conversationId, cursor, limit = 50) => {\n    console.log(\"메시지 조회:\", { conversationId, cursor, limit });\n    \n    const params = new URLSearchParams({ \n      convId: conversationId,\n      limit: limit.toString() \n    });\n    if (cursor) {\n      params.append('cursor', cursor);\n    }\n    \n    try {\n      const response = await api.get(`/messages?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"메시지 조회 실패:\", error);\n      throw error;\n    }\n  },\n\n  // 대화 삭제\n  deleteConversation: async (conversationId) => {\n    console.log(\"대화 삭제:\", { conversationId });\n    \n    try {\n      const response = await api.delete(`/conversations/${conversationId}`);\n      console.log(\"대화 삭제 성공:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 삭제 실패:\", error);\n      throw error;\n    }\n  }\n};\n\n// Mock data for conversation development\nexport const mockConversations = [\n  {\n    id: '1',\n    title: '서울경제신문 AI 제목 생성 테스트',\n    startedAt: '2025-01-20T10:30:00Z',\n    lastActivityAt: '2025-01-20T15:45:00Z',\n    tokenSum: 1250\n  },\n  {\n    id: '2', \n    title: '경제 뉴스 헤드라인 최적화',\n    startedAt: '2025-01-19T14:20:00Z',\n    lastActivityAt: '2025-01-19T16:30:00Z',\n    tokenSum: 890\n  },\n  {\n    id: '3',\n    title: '부동산 시장 분석 제목 생성',\n    startedAt: '2025-01-18T09:15:00Z',\n    lastActivityAt: '2025-01-18T11:45:00Z',\n    tokenSum: 2150\n  }\n];\n\nexport const mockMessages = {\n  '1': [\n    {\n      id: '2025-01-20T10:30:00.000Z',\n      role: 'user',\n      content: '오늘 서울 부동산 시장 현황에 대한 기사 제목을 만들어주세요.',\n      tokenCount: 25,\n      timestamp: '2025-01-20T10:30:00.000Z'\n    },\n    {\n      id: '2025-01-20T10:30:05.000Z',\n      role: 'assistant', \n      content: '서울 부동산 시장 현황에 대한 몇 가지 제목 옵션을 제안해드리겠습니다:\\n\\n1. \"서울 아파트값 3개월 연속 하락세... 매수심리 위축\"\\n2. \"강남·서초구 고가 아파트 거래 급감, 시장 관망세 지속\"\\n3. \"서울 부동산 시장 \\'관망론\\' 확산... 전세시장은 여전히 불안\"',\n      tokenCount: 95,\n      timestamp: '2025-01-20T10:30:05.000Z'\n    }\n  ],\n  '2': [\n    {\n      id: '2025-01-19T14:20:00.000Z',\n      role: 'user',\n      content: '반도체 산업 관련 경제 뉴스 제목을 생성해주세요.',\n      tokenCount: 20,\n      timestamp: '2025-01-19T14:20:00.000Z'\n    },\n    {\n      id: '2025-01-19T14:20:03.000Z',\n      role: 'assistant',\n      content: '반도체 산업 관련 경제 뉴스 제목들을 제안드립니다:\\n\\n1. \"삼성전자 메모리 반도체 수요 회복 기대감... 주가 상승세\"\\n2. \"AI 칩 수요 급증에 SK하이닉스 4분기 실적 개선 전망\"\\n3. \"중국 반도체 굴기 vs 한국 기술력... 글로벌 경쟁 심화\"',\n      tokenCount: 78,\n      timestamp: '2025-01-19T14:20:03.000Z'\n    }\n  ]\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}