{"ast":null,"code":"import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response;\n  console.error(\"API 오류:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, error.message);\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회:\", projectId);\n    const params = includeContent ? {\n      include_content: \"true\"\n    } : {};\n    const response = await api.get(`/prompts/${projectId}`, {\n      params\n    });\n    console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n    return response.data;\n  },\n  // 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    console.log(\"🆕 프롬프트 생성:\", {\n      projectId,\n      promptData\n    });\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  // 프롬프트 카드 수정 - S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정:\", {\n      projectId,\n      promptId\n    });\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    console.log(\"🗑️ 프롬프트 삭제:\", {\n      projectId,\n      promptId\n    });\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 3. 제목 생성 API (Bedrock Claude 호출)\n// =============================================================================\nexport const generateAPI = {\n  // 실제 Bedrock Claude 호출\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작:\", {\n      projectId,\n      articleLength: articleContent.length,\n      userRequest\n    });\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article: articleContent,\n      userRequest\n    });\n    console.log(\"✅ 제목 생성 완료\");\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 4. 유틸리티\n// =============================================================================\nexport const handleAPIError = error => {\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    return {\n      message: (data === null || data === void 0 ? void 0 : data.error) || `서버 오류 (${status})`,\n      status\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 개발 모드: 항상 인증된 상태로 처리\n    return true;\n  },\n  getCurrentUser: () => {\n    // 개발 모드: 가짜 사용자 정보 반환\n    return {\n      id: \"dev-user\",\n      email: \"dev@example.com\",\n      name: \"개발자\"\n    };\n  },\n  signin: async credentials => {\n    // 개발 모드: 가짜 로그인\n    console.log(\"🔐 개발 모드 로그인:\", credentials);\n    return {\n      success: true,\n      message: \"로그인 성공 (개발 모드)\"\n    };\n  },\n  signup: async userData => {\n    // 개발 모드: 가짜 회원가입\n    console.log(\"📝 개발 모드 회원가입:\", userData);\n    return {\n      success: true,\n      message: \"회원가입 성공 (개발 모드)\"\n    };\n  },\n  signout: async () => {\n    // 개발 모드: 가짜 로그아웃\n    console.log(\"👋 개발 모드 로그아웃\");\n    return {\n      success: true\n    };\n  },\n  verifyEmail: async verificationData => {\n    console.log(\"✉️ 개발 모드 이메일 인증:\", verificationData);\n    return {\n      success: true,\n      message: \"이메일 인증 성공 (개발 모드)\"\n    };\n  },\n  forgotPassword: async email => {\n    console.log(\"🔄 개발 모드 비밀번호 재설정:\", email);\n    return {\n      success: true,\n      message: \"비밀번호 재설정 이메일 발송 (개발 모드)\"\n    };\n  },\n  confirmPassword: async resetData => {\n    console.log(\"🔒 개발 모드 비밀번호 확인:\", resetData);\n    return {\n      success: true,\n      message: \"비밀번호 재설정 성공 (개발 모드)\"\n    };\n  }\n};\n\n// =============================================================================\n// 6. 카테고리 API\n// =============================================================================\nexport const DEFAULT_PROJECT_CATEGORIES = [{\n  id: \"news\",\n  name: \"뉴스\",\n  color: \"blue\",\n  description: \"일반 뉴스 기사\"\n}, {\n  id: \"economy\",\n  name: \"경제\",\n  color: \"green\",\n  description: \"경제 관련 기사\"\n}, {\n  id: \"tech\",\n  name: \"기술\",\n  color: \"purple\",\n  description: \"기술 및 IT 기사\"\n}, {\n  id: \"sports\",\n  name: \"스포츠\",\n  color: \"orange\",\n  description: \"스포츠 기사\"\n}, {\n  id: \"culture\",\n  name: \"문화\",\n  color: \"pink\",\n  description: \"문화 및 예술 기사\"\n}];\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 개발 모드: 기본 카테고리 반환\n    return {\n      categories: DEFAULT_PROJECT_CATEGORIES\n    };\n  },\n  createCategory: async categoryData => {\n    console.log(\"📁 카테고리 생성:\", categoryData);\n    return {\n      id: `cat_${Date.now()}`,\n      ...categoryData,\n      createdAt: new Date().toISOString()\n    };\n  },\n  updateCategory: async (categoryId, categoryData) => {\n    console.log(\"📝 카테고리 수정:\", categoryId, categoryData);\n    return {\n      success: true\n    };\n  },\n  deleteCategory: async categoryId => {\n    console.log(\"🗑️ 카테고리 삭제:\", categoryId);\n    return {\n      success: true\n    };\n  }\n};\nexport const projectCategoryAPI = {\n  updateProjectCategory: async (projectId, categoryId) => {\n    console.log(\"📂 프로젝트 카테고리 변경:\", projectId, categoryId);\n    return {\n      success: true\n    };\n  }\n};\n\n// =============================================================================\n// 7. 오케스트레이션 API\n// =============================================================================\nexport const orchestrationAPI = {\n  startExecution: async (projectId, data) => {\n    console.log(\"🚀 오케스트레이션 시작:\", projectId, data);\n    return {\n      executionArn: `exec_${Date.now()}`,\n      status: \"RUNNING\"\n    };\n  },\n  getExecutionStatus: async executionArn => {\n    console.log(\"📊 실행 상태 조회:\", executionArn);\n    return {\n      status: \"SUCCEEDED\",\n      result: {\n        message: \"완료됨\"\n      }\n    };\n  }\n};\n\n// =============================================================================\n// 8. 유틸리티 함수들\n// =============================================================================\nexport const getCategoryInfo = (categoryId, userCategories = DEFAULT_PROJECT_CATEGORIES) => {\n  const category = userCategories.find(cat => cat.id === categoryId);\n  return category || {\n    id: categoryId,\n    name: \"알 수 없음\",\n    color: \"gray\",\n    description: \"알 수 없는 카테고리\"\n  };\n};\nexport const getCategoryColorClasses = color => {\n  const colorMap = {\n    blue: \"bg-blue-50 text-blue-700 border-blue-200\",\n    green: \"bg-green-50 text-green-700 border-green-200\",\n    purple: \"bg-purple-50 text-purple-700 border-purple-200\",\n    orange: \"bg-orange-50 text-orange-700 border-orange-200\",\n    pink: \"bg-pink-50 text-pink-700 border-pink-200\",\n    red: \"bg-red-50 text-red-700 border-red-200\",\n    yellow: \"bg-yellow-50 text-yellow-700 border-yellow-200\",\n    indigo: \"bg-indigo-50 text-indigo-700 border-indigo-200\",\n    gray: \"bg-gray-50 text-gray-700 border-gray-200\"\n  };\n  return colorMap[color] || colorMap.gray;\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(project => project.category === filters.category);\n  }\n\n  // 검색 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => project.name.toLowerCase().includes(query) || project.description && project.description.toLowerCase().includes(query) || project.tags && project.tags.some(tag => tag.toLowerCase().includes(query)));\n  }\n\n  // 정렬\n  filtered.sort((a, b) => {\n    switch (filters.sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name, \"ko\");\n      case \"updated\":\n        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);\n      case \"created\":\n      default:\n        return new Date(b.createdAt) - new Date(a.createdAt);\n    }\n  });\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (!count || count === 0) return \"0\";\n  if (count < 1000) return count.toString();\n  if (count < 1000000) return `${(count / 1000).toFixed(1)}K`;\n  return `${(count / 1000000).toFixed(1)}M`;\n};\nexport const formatFileSize = bytes => {\n  if (!bytes || bytes === 0) return \"0 B\";\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      totalSize: 0,\n      categories: {}\n    };\n  }\n  const stats = {\n    totalCards: promptCards.length,\n    totalTokens: 0,\n    totalSize: 0,\n    categories: {}\n  };\n  promptCards.forEach(card => {\n    // 토큰 수 계산 (대략적으로 글자 수 / 4)\n    const contentLength = (card.content || \"\").length;\n    const estimatedTokens = Math.ceil(contentLength / 4);\n    stats.totalTokens += estimatedTokens;\n\n    // 파일 크기 계산 (UTF-8 기준)\n    stats.totalSize += new Blob([card.content || \"\"]).size;\n\n    // 카테고리별 통계\n    const category = card.category || \"uncategorized\";\n    if (!stats.categories[category]) {\n      stats.categories[category] = {\n        count: 0,\n        tokens: 0,\n        size: 0\n      };\n    }\n    stats.categories[category].count++;\n    stats.categories[category].tokens += estimatedTokens;\n    stats.categories[category].size += new Blob([card.content || \"\"]).size;\n  });\n  return stats;\n};\n\n// 색상 옵션\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파란색\",\n  class: \"bg-blue-500\"\n}, {\n  id: \"green\",\n  name: \"초록색\",\n  class: \"bg-green-500\"\n}, {\n  id: \"purple\",\n  name: \"보라색\",\n  class: \"bg-purple-500\"\n}, {\n  id: \"orange\",\n  name: \"주황색\",\n  class: \"bg-orange-500\"\n}, {\n  id: \"pink\",\n  name: \"분홍색\",\n  class: \"bg-pink-500\"\n}, {\n  id: \"red\",\n  name: \"빨간색\",\n  class: \"bg-red-500\"\n}, {\n  id: \"yellow\",\n  name: \"노란색\",\n  class: \"bg-yellow-500\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  class: \"bg-indigo-500\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  class: \"bg-gray-500\"\n}];\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","message","Promise","reject","projectAPI","getProjects","get","data","getProject","projectId","createProject","projectData","post","promptCardAPI","getPromptCards","includeContent","params","include_content","count","createPromptCard","promptData","updatePromptCard","promptId","put","deletePromptCard","delete","generateAPI","generateTitle","articleContent","userRequest","articleLength","length","article","handleAPIError","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","success","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","DEFAULT_PROJECT_CATEGORIES","color","description","categoryAPI","getUserCategories","categories","createCategory","categoryData","Date","now","createdAt","toISOString","updateCategory","categoryId","deleteCategory","projectCategoryAPI","updateProjectCategory","orchestrationAPI","startExecution","executionArn","getExecutionStatus","result","getCategoryInfo","userCategories","category","find","cat","getCategoryColorClasses","colorMap","blue","green","purple","orange","pink","red","yellow","indigo","gray","filterProjects","projects","filters","filtered","filter","project","searchQuery","query","toLowerCase","includes","tags","some","tag","sort","a","b","sortBy","localeCompare","updatedAt","formatTokenCount","toString","toFixed","formatFileSize","bytes","sizes","i","Math","floor","pow","calculatePromptStats","promptCards","totalCards","totalTokens","totalSize","stats","forEach","card","contentLength","content","estimatedTokens","ceil","Blob","size","tokens","COLOR_OPTIONS","class"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// API 기본 설정\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://vph0fu827a.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류:\", error.response?.status, error.message);\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 2. 프롬프트 API (S3/DynamoDB 연동)\n// =============================================================================\nexport const promptCardAPI = {\n  // 프롬프트 카드 목록 조회\n  getPromptCards: async (projectId, includeContent = false) => {\n    console.log(\"🔍 프롬프트 조회:\", projectId);\n\n    const params = includeContent ? { include_content: \"true\" } : {};\n    const response = await api.get(`/prompts/${projectId}`, { params });\n\n    console.log(\"✅ 프롬프트 조회 성공:\", response.data.count, \"개\");\n    return response.data;\n  },\n\n  // 프롬프트 카드 생성\n  createPromptCard: async (projectId, promptData) => {\n    console.log(\"🆕 프롬프트 생성:\", { projectId, promptData });\n\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  // 프롬프트 카드 수정 - S3/DynamoDB 저장\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    console.log(\"💾 프롬프트 수정:\", { projectId, promptId });\n\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  // 프롬프트 카드 삭제\n  deletePromptCard: async (projectId, promptId) => {\n    console.log(\"🗑️ 프롬프트 삭제:\", { projectId, promptId });\n\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 3. 제목 생성 API (Bedrock Claude 호출)\n// =============================================================================\nexport const generateAPI = {\n  // 실제 Bedrock Claude 호출\n  generateTitle: async (projectId, articleContent, userRequest = \"\") => {\n    console.log(\"🚀 제목 생성 시작:\", {\n      projectId,\n      articleLength: articleContent.length,\n      userRequest,\n    });\n\n    const response = await api.post(`/projects/${projectId}/generate`, {\n      article: articleContent,\n      userRequest,\n    });\n\n    console.log(\"✅ 제목 생성 완료\");\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 4. 유틸리티\n// =============================================================================\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    const { status, data } = error.response;\n    return {\n      message: data?.error || `서버 오류 (${status})`,\n      status,\n    };\n  } else if (error.request) {\n    return {\n      message: \"네트워크 연결을 확인해주세요\",\n      status: 0,\n    };\n  } else {\n    return {\n      message: error.message || \"알 수 없는 오류가 발생했습니다\",\n      status: -1,\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 개발 모드: 항상 인증된 상태로 처리\n    return true;\n  },\n\n  getCurrentUser: () => {\n    // 개발 모드: 가짜 사용자 정보 반환\n    return {\n      id: \"dev-user\",\n      email: \"dev@example.com\",\n      name: \"개발자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    // 개발 모드: 가짜 로그인\n    console.log(\"🔐 개발 모드 로그인:\", credentials);\n    return { success: true, message: \"로그인 성공 (개발 모드)\" };\n  },\n\n  signup: async (userData) => {\n    // 개발 모드: 가짜 회원가입\n    console.log(\"📝 개발 모드 회원가입:\", userData);\n    return { success: true, message: \"회원가입 성공 (개발 모드)\" };\n  },\n\n  signout: async () => {\n    // 개발 모드: 가짜 로그아웃\n    console.log(\"👋 개발 모드 로그아웃\");\n    return { success: true };\n  },\n\n  verifyEmail: async (verificationData) => {\n    console.log(\"✉️ 개발 모드 이메일 인증:\", verificationData);\n    return { success: true, message: \"이메일 인증 성공 (개발 모드)\" };\n  },\n\n  forgotPassword: async (email) => {\n    console.log(\"🔄 개발 모드 비밀번호 재설정:\", email);\n    return { success: true, message: \"비밀번호 재설정 이메일 발송 (개발 모드)\" };\n  },\n\n  confirmPassword: async (resetData) => {\n    console.log(\"🔒 개발 모드 비밀번호 확인:\", resetData);\n    return { success: true, message: \"비밀번호 재설정 성공 (개발 모드)\" };\n  },\n};\n\n// =============================================================================\n// 6. 카테고리 API\n// =============================================================================\nexport const DEFAULT_PROJECT_CATEGORIES = [\n  { id: \"news\", name: \"뉴스\", color: \"blue\", description: \"일반 뉴스 기사\" },\n  { id: \"economy\", name: \"경제\", color: \"green\", description: \"경제 관련 기사\" },\n  { id: \"tech\", name: \"기술\", color: \"purple\", description: \"기술 및 IT 기사\" },\n  { id: \"sports\", name: \"스포츠\", color: \"orange\", description: \"스포츠 기사\" },\n  { id: \"culture\", name: \"문화\", color: \"pink\", description: \"문화 및 예술 기사\" },\n];\n\nexport const categoryAPI = {\n  getUserCategories: async () => {\n    // 개발 모드: 기본 카테고리 반환\n    return { categories: DEFAULT_PROJECT_CATEGORIES };\n  },\n\n  createCategory: async (categoryData) => {\n    console.log(\"📁 카테고리 생성:\", categoryData);\n    return { \n      id: `cat_${Date.now()}`, \n      ...categoryData, \n      createdAt: new Date().toISOString() \n    };\n  },\n\n  updateCategory: async (categoryId, categoryData) => {\n    console.log(\"📝 카테고리 수정:\", categoryId, categoryData);\n    return { success: true };\n  },\n\n  deleteCategory: async (categoryId) => {\n    console.log(\"🗑️ 카테고리 삭제:\", categoryId);\n    return { success: true };\n  },\n};\n\nexport const projectCategoryAPI = {\n  updateProjectCategory: async (projectId, categoryId) => {\n    console.log(\"📂 프로젝트 카테고리 변경:\", projectId, categoryId);\n    return { success: true };\n  },\n};\n\n// =============================================================================\n// 7. 오케스트레이션 API\n// =============================================================================\nexport const orchestrationAPI = {\n  startExecution: async (projectId, data) => {\n    console.log(\"🚀 오케스트레이션 시작:\", projectId, data);\n    return { \n      executionArn: `exec_${Date.now()}`, \n      status: \"RUNNING\" \n    };\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    console.log(\"📊 실행 상태 조회:\", executionArn);\n    return { \n      status: \"SUCCEEDED\", \n      result: { message: \"완료됨\" } \n    };\n  },\n};\n\n// =============================================================================\n// 8. 유틸리티 함수들\n// =============================================================================\nexport const getCategoryInfo = (categoryId, userCategories = DEFAULT_PROJECT_CATEGORIES) => {\n  const category = userCategories.find(cat => cat.id === categoryId);\n  return category || { \n    id: categoryId, \n    name: \"알 수 없음\", \n    color: \"gray\", \n    description: \"알 수 없는 카테고리\" \n  };\n};\n\nexport const getCategoryColorClasses = (color) => {\n  const colorMap = {\n    blue: \"bg-blue-50 text-blue-700 border-blue-200\",\n    green: \"bg-green-50 text-green-700 border-green-200\",\n    purple: \"bg-purple-50 text-purple-700 border-purple-200\",\n    orange: \"bg-orange-50 text-orange-700 border-orange-200\",\n    pink: \"bg-pink-50 text-pink-700 border-pink-200\",\n    red: \"bg-red-50 text-red-700 border-red-200\",\n    yellow: \"bg-yellow-50 text-yellow-700 border-yellow-200\",\n    indigo: \"bg-indigo-50 text-indigo-700 border-indigo-200\",\n    gray: \"bg-gray-50 text-gray-700 border-gray-200\",\n  };\n  return colorMap[color] || colorMap.gray;\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 카테고리 필터\n  if (filters.category && filters.category !== \"all\") {\n    filtered = filtered.filter(project => project.category === filters.category);\n  }\n\n  // 검색 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project =>\n      project.name.toLowerCase().includes(query) ||\n      (project.description && project.description.toLowerCase().includes(query)) ||\n      (project.tags && project.tags.some(tag => tag.toLowerCase().includes(query)))\n    );\n  }\n\n  // 정렬\n  filtered.sort((a, b) => {\n    switch (filters.sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name, \"ko\");\n      case \"updated\":\n        return new Date(b.updatedAt || b.createdAt) - new Date(a.updatedAt || a.createdAt);\n      case \"created\":\n      default:\n        return new Date(b.createdAt) - new Date(a.createdAt);\n    }\n  });\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (!count || count === 0) return \"0\";\n  if (count < 1000) return count.toString();\n  if (count < 1000000) return `${(count / 1000).toFixed(1)}K`;\n  return `${(count / 1000000).toFixed(1)}M`;\n};\n\nexport const formatFileSize = (bytes) => {\n  if (!bytes || bytes === 0) return \"0 B\";\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      totalSize: 0,\n      categories: {},\n    };\n  }\n\n  const stats = {\n    totalCards: promptCards.length,\n    totalTokens: 0,\n    totalSize: 0,\n    categories: {},\n  };\n\n  promptCards.forEach(card => {\n    // 토큰 수 계산 (대략적으로 글자 수 / 4)\n    const contentLength = (card.content || \"\").length;\n    const estimatedTokens = Math.ceil(contentLength / 4);\n    stats.totalTokens += estimatedTokens;\n    \n    // 파일 크기 계산 (UTF-8 기준)\n    stats.totalSize += new Blob([card.content || \"\"]).size;\n    \n    // 카테고리별 통계\n    const category = card.category || \"uncategorized\";\n    if (!stats.categories[category]) {\n      stats.categories[category] = { count: 0, tokens: 0, size: 0 };\n    }\n    stats.categories[category].count++;\n    stats.categories[category].tokens += estimatedTokens;\n    stats.categories[category].size += new Blob([card.content || \"\"]).size;\n  });\n\n  return stats;\n};\n\n// 색상 옵션\nexport const COLOR_OPTIONS = [\n  { id: \"blue\", name: \"파란색\", class: \"bg-blue-500\" },\n  { id: \"green\", name: \"초록색\", class: \"bg-green-500\" },\n  { id: \"purple\", name: \"보라색\", class: \"bg-purple-500\" },\n  { id: \"orange\", name: \"주황색\", class: \"bg-orange-500\" },\n  { id: \"pink\", name: \"분홍색\", class: \"bg-pink-500\" },\n  { id: \"red\", name: \"빨간색\", class: \"bg-red-500\" },\n  { id: \"yellow\", name: \"노란색\", class: \"bg-yellow-500\" },\n  { id: \"indigo\", name: \"남색\", class: \"bg-indigo-500\" },\n  { id: \"gray\", name: \"회색\", class: \"bg-gray-500\" },\n];\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}