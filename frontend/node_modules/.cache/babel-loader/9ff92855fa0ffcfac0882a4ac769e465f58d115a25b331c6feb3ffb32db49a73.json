{"ast":null,"code":"var _jsxFileName = \"/Users/yeong-gwang/Documents/work/\\u1109\\u1165\\u110B\\u116E\\u11AF\\u1100\\u1167\\u11BC\\u110C\\u1166\\u1109\\u1175\\u11AB\\u1106\\u116E\\u11AB/dev/nexus/title_generator_ver1/frontend/src/contexts/ConversationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useMemo } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { conversationAPI } from \"../services/api\";\n\n// 대화 상태 관리를 위한 Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationContext = /*#__PURE__*/createContext();\n\n// 초기 상태\nconst initialState = {\n  currentConversationId: null,\n  conversations: [],\n  currentMessages: [],\n  isLoading: false,\n  error: null,\n  drawerOpen: false\n};\n\n// 액션 타입 정의\nconst ActionTypes = {\n  SET_CURRENT_CONVERSATION: \"SET_CURRENT_CONVERSATION\",\n  SET_CONVERSATIONS: \"SET_CONVERSATIONS\",\n  ADD_CONVERSATION: \"ADD_CONVERSATION\",\n  UPDATE_CONVERSATION: \"UPDATE_CONVERSATION\",\n  SET_MESSAGES: \"SET_MESSAGES\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  UPDATE_MESSAGE: \"UPDATE_MESSAGE\",\n  SET_LOADING: \"SET_LOADING\",\n  SET_ERROR: \"SET_ERROR\",\n  TOGGLE_DRAWER: \"TOGGLE_DRAWER\",\n  CLEAR_STATE: \"CLEAR_STATE\"\n};\n\n// 리듀서 함수\nconst conversationReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_CURRENT_CONVERSATION:\n      return {\n        ...state,\n        currentConversationId: action.payload,\n        currentMessages: [] // 새 대화 선택시 메시지 초기화\n      };\n    case ActionTypes.SET_CONVERSATIONS:\n      return {\n        ...state,\n        conversations: action.payload\n      };\n    case ActionTypes.ADD_CONVERSATION:\n      return {\n        ...state,\n        conversations: [action.payload, ...state.conversations]\n      };\n    case ActionTypes.UPDATE_CONVERSATION:\n      return {\n        ...state,\n        conversations: state.conversations.map(conv => conv.id === action.payload.id ? {\n          ...conv,\n          ...action.payload.updates\n        } : conv)\n      };\n    case ActionTypes.SET_MESSAGES:\n      return {\n        ...state,\n        currentMessages: action.payload\n      };\n    case ActionTypes.ADD_MESSAGE:\n      return {\n        ...state,\n        currentMessages: [...state.currentMessages, action.payload]\n      };\n    case ActionTypes.UPDATE_MESSAGE:\n      return {\n        ...state,\n        currentMessages: state.currentMessages.map(msg => msg.id === action.payload.id ? {\n          ...msg,\n          ...action.payload.updates\n        } : msg)\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    case ActionTypes.TOGGLE_DRAWER:\n      return {\n        ...state,\n        drawerOpen: action.payload !== undefined ? action.payload : !state.drawerOpen\n      };\n    case ActionTypes.CLEAR_STATE:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\n// Provider 컴포넌트\nexport const ConversationProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(conversationReducer, initialState);\n  const {\n    user\n  } = useAuth();\n\n  // 현재 대화 변경\n  const setCurrentConversation = conversationId => {\n    console.log(\"🔍 [DEBUG] ConversationContext - 대화 변경 요청:\", {\n      previousConversationId: state.currentConversationId,\n      newConversationId: conversationId,\n      isChanged: state.currentConversationId !== conversationId,\n      conversationIdType: typeof conversationId,\n      isConversationIdNull: conversationId === null,\n      isConversationIdUndefined: conversationId === undefined\n    });\n    dispatch({\n      type: ActionTypes.SET_CURRENT_CONVERSATION,\n      payload: conversationId\n    });\n    console.log(\"🔍 [DEBUG] ConversationContext - 대화 변경 dispatch 완료:\", conversationId);\n  };\n\n  // 대화 목록 설정\n  const setConversations = conversations => {\n    dispatch({\n      type: ActionTypes.SET_CONVERSATIONS,\n      payload: conversations\n    });\n  };\n\n  // 새 대화 추가\n  const addConversation = conversation => {\n    dispatch({\n      type: ActionTypes.ADD_CONVERSATION,\n      payload: conversation\n    });\n  };\n\n  // 대화 업데이트\n  const updateConversation = (conversationId, updates) => {\n    dispatch({\n      type: ActionTypes.UPDATE_CONVERSATION,\n      payload: {\n        id: conversationId,\n        updates\n      }\n    });\n  };\n\n  // 메시지 설정\n  const setMessages = messages => {\n    dispatch({\n      type: ActionTypes.SET_MESSAGES,\n      payload: messages\n    });\n  };\n\n  // 새 메시지 추가\n  const addMessage = message => {\n    const newMessage = {\n      id: message.id || Date.now().toString(),\n      role: message.role,\n      content: message.content,\n      tokenCount: message.tokenCount || 0,\n      timestamp: message.timestamp || new Date().toISOString()\n    };\n    dispatch({\n      type: ActionTypes.ADD_MESSAGE,\n      payload: newMessage\n    });\n\n    // 현재 대화의 마지막 활동 시간 업데이트\n    if (state.currentConversationId) {\n      updateConversation(state.currentConversationId, {\n        lastActivityAt: newMessage.timestamp\n      });\n    }\n    return newMessage;\n  };\n\n  // 메시지 업데이트 (스트리밍 중)\n  const updateMessage = (messageId, updates) => {\n    dispatch({\n      type: ActionTypes.UPDATE_MESSAGE,\n      payload: {\n        id: messageId,\n        updates\n      }\n    });\n  };\n\n  // 로딩 상태 설정\n  const setLoading = loading => {\n    dispatch({\n      type: ActionTypes.SET_LOADING,\n      payload: loading\n    });\n  };\n\n  // 에러 설정\n  const setError = error => {\n    dispatch({\n      type: ActionTypes.SET_ERROR,\n      payload: error\n    });\n  };\n\n  // 드로어 토글\n  const toggleDrawer = open => {\n    dispatch({\n      type: ActionTypes.TOGGLE_DRAWER,\n      payload: open\n    });\n  };\n\n  // 상태 초기화 (로그아웃시)\n  const clearState = () => {\n    dispatch({\n      type: ActionTypes.CLEAR_STATE\n    });\n  };\n\n  // 현재 대화 정보 조회\n  const getCurrentConversation = () => {\n    return state.conversations.find(conv => conv.id === state.currentConversationId);\n  };\n\n  // 사용자 변경시 상태 초기화 및 대화 목록 로드\n  useEffect(() => {\n    if (user) {\n      console.log(\"🔍 [DEBUG] ConversationContext - 사용자 로그인, 초기 대화 목록 로드\");\n\n      // 초기 대화 목록 로드\n      const loadInitialConversations = async () => {\n        try {\n          var _response$conversatio;\n          console.log(\"🔍 [DEBUG] ConversationContext - 초기 대화 목록 로드 시작\");\n          const response = await conversationAPI.getConversations();\n          console.log(\"🔍 [DEBUG] ConversationContext - 초기 대화 목록 로드 완료:\", (_response$conversatio = response.conversations) === null || _response$conversatio === void 0 ? void 0 : _response$conversatio.length);\n          setConversations(response.conversations || []);\n        } catch (error) {\n          console.error(\"ConversationContext - 초기 대화 목록 로드 실패:\", error);\n          // 실패해도 기본 빈 배열 유지\n        }\n      };\n      loadInitialConversations();\n    } else {\n      clearState();\n    }\n  }, [user]);\n\n  // Context value 최적화 - useMemo로 불필요한 재렌더링 방지\n  const value = useMemo(() => ({\n    // 상태\n    ...state,\n    // 액션 함수들\n    setCurrentConversation,\n    setConversations,\n    addConversation,\n    updateConversation,\n    setMessages,\n    addMessage,\n    updateMessage,\n    setLoading,\n    setError,\n    toggleDrawer,\n    clearState,\n    getCurrentConversation\n  }), [state, setCurrentConversation, setConversations, addConversation, updateConversation, setMessages, addMessage, updateMessage, setLoading, setError, toggleDrawer, clearState, getCurrentConversation]);\n  return /*#__PURE__*/_jsxDEV(ConversationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook for using conversation context\n_s(ConversationProvider, \"a6cGREQxl6SY28zRosUDKbJ5OWE=\", false, function () {\n  return [useAuth];\n});\n_c = ConversationProvider;\nexport const useConversationContext = () => {\n  _s2();\n  const context = useContext(ConversationContext);\n  if (!context) {\n    throw new Error(\"useConversationContext must be used within a ConversationProvider\");\n  }\n  return context;\n};\n_s2(useConversationContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ConversationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useMemo","useAuth","conversationAPI","jsxDEV","_jsxDEV","ConversationContext","initialState","currentConversationId","conversations","currentMessages","isLoading","error","drawerOpen","ActionTypes","SET_CURRENT_CONVERSATION","SET_CONVERSATIONS","ADD_CONVERSATION","UPDATE_CONVERSATION","SET_MESSAGES","ADD_MESSAGE","UPDATE_MESSAGE","SET_LOADING","SET_ERROR","TOGGLE_DRAWER","CLEAR_STATE","conversationReducer","state","action","type","payload","map","conv","id","updates","msg","undefined","ConversationProvider","children","_s","dispatch","user","setCurrentConversation","conversationId","console","log","previousConversationId","newConversationId","isChanged","conversationIdType","isConversationIdNull","isConversationIdUndefined","setConversations","addConversation","conversation","updateConversation","setMessages","messages","addMessage","message","newMessage","Date","now","toString","role","content","tokenCount","timestamp","toISOString","lastActivityAt","updateMessage","messageId","setLoading","loading","setError","toggleDrawer","open","clearState","getCurrentConversation","find","loadInitialConversations","_response$conversatio","response","getConversations","length","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useConversationContext","_s2","context","Error","$RefreshReg$"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/contexts/ConversationContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useMemo } from \"react\";\nimport { useAuth } from \"./AuthContext\";\nimport { conversationAPI } from \"../services/api\";\n\n// 대화 상태 관리를 위한 Context\nconst ConversationContext = createContext();\n\n// 초기 상태\nconst initialState = {\n  currentConversationId: null,\n  conversations: [],\n  currentMessages: [],\n  isLoading: false,\n  error: null,\n  drawerOpen: false,\n};\n\n// 액션 타입 정의\nconst ActionTypes = {\n  SET_CURRENT_CONVERSATION: \"SET_CURRENT_CONVERSATION\",\n  SET_CONVERSATIONS: \"SET_CONVERSATIONS\",\n  ADD_CONVERSATION: \"ADD_CONVERSATION\",\n  UPDATE_CONVERSATION: \"UPDATE_CONVERSATION\",\n  SET_MESSAGES: \"SET_MESSAGES\",\n  ADD_MESSAGE: \"ADD_MESSAGE\",\n  UPDATE_MESSAGE: \"UPDATE_MESSAGE\",\n  SET_LOADING: \"SET_LOADING\",\n  SET_ERROR: \"SET_ERROR\",\n  TOGGLE_DRAWER: \"TOGGLE_DRAWER\",\n  CLEAR_STATE: \"CLEAR_STATE\",\n};\n\n// 리듀서 함수\nconst conversationReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_CURRENT_CONVERSATION:\n      return {\n        ...state,\n        currentConversationId: action.payload,\n        currentMessages: [], // 새 대화 선택시 메시지 초기화\n      };\n\n    case ActionTypes.SET_CONVERSATIONS:\n      return {\n        ...state,\n        conversations: action.payload,\n      };\n\n    case ActionTypes.ADD_CONVERSATION:\n      return {\n        ...state,\n        conversations: [action.payload, ...state.conversations],\n      };\n\n    case ActionTypes.UPDATE_CONVERSATION:\n      return {\n        ...state,\n        conversations: state.conversations.map((conv) =>\n          conv.id === action.payload.id\n            ? { ...conv, ...action.payload.updates }\n            : conv\n        ),\n      };\n\n    case ActionTypes.SET_MESSAGES:\n      return {\n        ...state,\n        currentMessages: action.payload,\n      };\n\n    case ActionTypes.ADD_MESSAGE:\n      return {\n        ...state,\n        currentMessages: [...state.currentMessages, action.payload],\n      };\n\n    case ActionTypes.UPDATE_MESSAGE:\n      return {\n        ...state,\n        currentMessages: state.currentMessages.map((msg) =>\n          msg.id === action.payload.id\n            ? { ...msg, ...action.payload.updates }\n            : msg\n        ),\n      };\n\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n\n    case ActionTypes.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case ActionTypes.TOGGLE_DRAWER:\n      return {\n        ...state,\n        drawerOpen:\n          action.payload !== undefined ? action.payload : !state.drawerOpen,\n      };\n\n    case ActionTypes.CLEAR_STATE:\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\n// Provider 컴포넌트\nexport const ConversationProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(conversationReducer, initialState);\n  const { user } = useAuth();\n\n  // 현재 대화 변경\n  const setCurrentConversation = (conversationId) => {\n    console.log(\"🔍 [DEBUG] ConversationContext - 대화 변경 요청:\", {\n      previousConversationId: state.currentConversationId,\n      newConversationId: conversationId,\n      isChanged: state.currentConversationId !== conversationId,\n      conversationIdType: typeof conversationId,\n      isConversationIdNull: conversationId === null,\n      isConversationIdUndefined: conversationId === undefined,\n    });\n\n    dispatch({\n      type: ActionTypes.SET_CURRENT_CONVERSATION,\n      payload: conversationId,\n    });\n\n    console.log(\n      \"🔍 [DEBUG] ConversationContext - 대화 변경 dispatch 완료:\",\n      conversationId\n    );\n  };\n\n  // 대화 목록 설정\n  const setConversations = (conversations) => {\n    dispatch({\n      type: ActionTypes.SET_CONVERSATIONS,\n      payload: conversations,\n    });\n  };\n\n  // 새 대화 추가\n  const addConversation = (conversation) => {\n    dispatch({\n      type: ActionTypes.ADD_CONVERSATION,\n      payload: conversation,\n    });\n  };\n\n  // 대화 업데이트\n  const updateConversation = (conversationId, updates) => {\n    dispatch({\n      type: ActionTypes.UPDATE_CONVERSATION,\n      payload: { id: conversationId, updates },\n    });\n  };\n\n  // 메시지 설정\n  const setMessages = (messages) => {\n    dispatch({\n      type: ActionTypes.SET_MESSAGES,\n      payload: messages,\n    });\n  };\n\n  // 새 메시지 추가\n  const addMessage = (message) => {\n    const newMessage = {\n      id: message.id || Date.now().toString(),\n      role: message.role,\n      content: message.content,\n      tokenCount: message.tokenCount || 0,\n      timestamp: message.timestamp || new Date().toISOString(),\n    };\n\n    dispatch({\n      type: ActionTypes.ADD_MESSAGE,\n      payload: newMessage,\n    });\n\n    // 현재 대화의 마지막 활동 시간 업데이트\n    if (state.currentConversationId) {\n      updateConversation(state.currentConversationId, {\n        lastActivityAt: newMessage.timestamp,\n      });\n    }\n\n    return newMessage;\n  };\n\n  // 메시지 업데이트 (스트리밍 중)\n  const updateMessage = (messageId, updates) => {\n    dispatch({\n      type: ActionTypes.UPDATE_MESSAGE,\n      payload: { id: messageId, updates },\n    });\n  };\n\n  // 로딩 상태 설정\n  const setLoading = (loading) => {\n    dispatch({\n      type: ActionTypes.SET_LOADING,\n      payload: loading,\n    });\n  };\n\n  // 에러 설정\n  const setError = (error) => {\n    dispatch({\n      type: ActionTypes.SET_ERROR,\n      payload: error,\n    });\n  };\n\n  // 드로어 토글\n  const toggleDrawer = (open) => {\n    dispatch({\n      type: ActionTypes.TOGGLE_DRAWER,\n      payload: open,\n    });\n  };\n\n  // 상태 초기화 (로그아웃시)\n  const clearState = () => {\n    dispatch({\n      type: ActionTypes.CLEAR_STATE,\n    });\n  };\n\n  // 현재 대화 정보 조회\n  const getCurrentConversation = () => {\n    return state.conversations.find(\n      (conv) => conv.id === state.currentConversationId\n    );\n  };\n\n  // 사용자 변경시 상태 초기화 및 대화 목록 로드\n  useEffect(() => {\n    if (user) {\n      console.log(\"🔍 [DEBUG] ConversationContext - 사용자 로그인, 초기 대화 목록 로드\");\n      \n      // 초기 대화 목록 로드\n      const loadInitialConversations = async () => {\n        try {\n          console.log(\"🔍 [DEBUG] ConversationContext - 초기 대화 목록 로드 시작\");\n          const response = await conversationAPI.getConversations();\n          console.log(\"🔍 [DEBUG] ConversationContext - 초기 대화 목록 로드 완료:\", response.conversations?.length);\n          setConversations(response.conversations || []);\n        } catch (error) {\n          console.error(\"ConversationContext - 초기 대화 목록 로드 실패:\", error);\n          // 실패해도 기본 빈 배열 유지\n        }\n      };\n      \n      loadInitialConversations();\n    } else {\n      clearState();\n    }\n  }, [user]);\n\n  // Context value 최적화 - useMemo로 불필요한 재렌더링 방지\n  const value = useMemo(() => ({\n    // 상태\n    ...state,\n\n    // 액션 함수들\n    setCurrentConversation,\n    setConversations,\n    addConversation,\n    updateConversation,\n    setMessages,\n    addMessage,\n    updateMessage,\n    setLoading,\n    setError,\n    toggleDrawer,\n    clearState,\n    getCurrentConversation,\n  }), [\n    state,\n    setCurrentConversation,\n    setConversations,\n    addConversation,\n    updateConversation,\n    setMessages,\n    addMessage,\n    updateMessage,\n    setLoading,\n    setError,\n    toggleDrawer,\n    clearState,\n    getCurrentConversation,\n  ]);\n\n  return (\n    <ConversationContext.Provider value={value}>\n      {children}\n    </ConversationContext.Provider>\n  );\n};\n\n// Hook for using conversation context\nexport const useConversationContext = () => {\n  const context = useContext(ConversationContext);\n  if (!context) {\n    throw new Error(\n      \"useConversationContext must be used within a ConversationProvider\"\n    );\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}