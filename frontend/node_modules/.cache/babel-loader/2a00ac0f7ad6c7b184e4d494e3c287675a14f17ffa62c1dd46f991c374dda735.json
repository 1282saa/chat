{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = result => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date()\n    };\n\n    // 개선된 로딩 메시지\n    const loadingMessage = {\n      id: \"loading-\" + Date.now(),\n      type: \"assistant\",\n      content: \"AI가 답변을 생성하고 있습니다...\",\n      timestamp: new Date(),\n      isLoading: true,\n      loadingProgress: {\n        stage: \"initializing\",\n        message: \"요청을 처리하고 있습니다...\",\n        percentage: 10\n      }\n    };\n    setMessages(prev => [...prev, userMessage, loadingMessage]);\n    setInputValue(\"\");\n    try {\n      // 프롬프트 분석 단계 표시\n      setMessages(prev => prev.map(msg => msg.isLoading ? {\n        ...msg,\n        content: \"프롬프트를 분석하고 있습니다...\",\n        loadingProgress: {\n          stage: \"analyzing\",\n          message: \"프로젝트 프롬프트를 불러오는 중...\",\n          percentage: 25\n        }\n      } : msg));\n\n      // AI 처리 단계 표시\n      setTimeout(() => {\n        setMessages(prev => prev.map(msg => msg.isLoading ? {\n          ...msg,\n          content: \"AI 모델이 응답을 생성하고 있습니다...\",\n          loadingProgress: {\n            stage: \"generating\",\n            message: \"고품질 응답을 위해 분석 중입니다. 잠시만 기다려주세요...\",\n            percentage: 60\n          }\n        } : msg));\n      }, 1000);\n\n      // 완료 단계 표시\n      setTimeout(() => {\n        setMessages(prev => prev.map(msg => msg.isLoading ? {\n          ...msg,\n          content: \"응답을 정리하고 있습니다...\",\n          loadingProgress: {\n            stage: \"finalizing\",\n            message: \"거의 완료되었습니다...\",\n            percentage: 85\n          }\n        } : msg));\n      }, 3000);\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: messages.filter(msg => !msg.isLoading && !msg.isError).map(msg => ({\n          role: msg.type === \"user\" ? \"user\" : \"assistant\",\n          content: msg.content\n        }))\n      };\n\n      // 수정된 호출 방식: 문자열과 옵션 객체로 분리\n      const result = await executeOrchestration(userMessage.content, {\n        chat_history: messages.filter(msg => !msg.isLoading && !msg.isError).map(msg => ({\n          role: msg.type === \"user\" ? \"user\" : \"assistant\",\n          content: msg.content\n        }))\n      });\n      await pollOrchestrationResult();\n\n      // 로딩 메시지 제거하고 실제 응답 추가\n      const responseMessage = processAIResponse(result);\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([responseMessage]));\n    } catch (error) {\n      var _error$response;\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content: errorType === \"timeout\" ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\" : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status\n        }\n      };\n      setMessages(prev => prev.filter(msg => !msg.isLoading).concat([errorMessage]));\n    }\n  }, [inputValue, isGenerating, executeOrchestration, pollOrchestrationResult, promptCards, messages // messages를 의존성에 추가\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(e => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom\n  };\n};\n_s(useChat, \"65spPCFiJeixZY7XKNhZdn5atpw=\", false, function () {\n  return [useOrchestration];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","toast","copyToClipboard","useOrchestration","processAIResponse","result","console","error","id","Date","now","type","content","timestamp","isError","responseContent","performance_metrics","model_info","useChat","projectId","projectName","promptCards","_s","messages","setMessages","inputValue","setInputValue","copiedMessage","setCopiedMessage","messagesEndRef","inputRef","isExecuting","isGenerating","executeOrchestration","pollOrchestrationResult","resetOrchestration","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","trim","userMessage","loadingMessage","isLoading","loadingProgress","stage","message","percentage","prev","map","msg","setTimeout","orchestrationData","userInput","chat_history","filter","role","responseMessage","concat","_error$response","errorType","code","errorMessage","errorDetails","status","response","handleKeyPress","e","key","shiftKey","preventDefault","handleCopyMessage","messageId","success","handleCopyTitle","title","index","resetChat"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useChat.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { toast } from \"react-hot-toast\";\nimport { copyToClipboard } from \"../utils/clipboard\";\nimport { useOrchestration } from \"./useOrchestration\";\n\n/**\n * AI 응답을 파싱하고 UI에 맞는 메시지 객체로 변환\n */\nconst processAIResponse = (result) => {\n  if (!result || !result.result) {\n    console.error(\"AI 응답 오류: 결과가 없습니다\", result);\n    return {\n      id: \"error-\" + Date.now(),\n      type: \"assistant\",\n      content: \"처리 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      timestamp: new Date(),\n      isError: true,\n    };\n  }\n\n  // LangChain과 직접 통신하므로, 결과가 바로 content가 됨\n  const responseContent = result.result;\n\n  return {\n    id: \"response-\" + Date.now(),\n    type: \"assistant\",\n    content: responseContent,\n    timestamp: new Date(),\n    // 성능 메트릭 포함\n    performance_metrics: result.performance_metrics,\n    model_info: result.model_info,\n  };\n};\n\n/**\n * 채팅 기능을 위한 커스텀 훅\n * @param {string} projectId - 프로젝트 ID\n * @param {string} projectName - 프로젝트 이름\n * @param {Array} promptCards - 프롬프트 카드 배열\n * @returns {Object} - 채팅 관련 상태와 함수들\n */\nexport const useChat = (projectId, projectName, promptCards = []) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [copiedMessage, setCopiedMessage] = useState(null);\n\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const {\n    isExecuting: isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    resetOrchestration,\n  } = useOrchestration(projectId);\n\n  // 초기 환영 메시지 설정 - 제거됨 (빈 상태로 시작)\n  useEffect(() => {\n    setMessages([]); // 빈 배열로 시작\n  }, [projectName]);\n\n  // 메시지 추가 시 스크롤 하단으로\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  /**\n   * 메시지 전송\n   */\n  const handleSendMessage = useCallback(async () => {\n    if (!inputValue.trim() || isGenerating) return;\n\n    const userMessage = {\n      id: \"user-\" + Date.now(),\n      type: \"user\",\n      content: inputValue.trim(),\n      timestamp: new Date(),\n    };\n\n    // 개선된 로딩 메시지\n    const loadingMessage = {\n      id: \"loading-\" + Date.now(),\n      type: \"assistant\",\n      content: \"AI가 답변을 생성하고 있습니다...\",\n      timestamp: new Date(),\n      isLoading: true,\n      loadingProgress: {\n        stage: \"initializing\",\n        message: \"요청을 처리하고 있습니다...\",\n        percentage: 10,\n      },\n    };\n\n    setMessages((prev) => [...prev, userMessage, loadingMessage]);\n    setInputValue(\"\");\n\n    try {\n      // 프롬프트 분석 단계 표시\n      setMessages((prev) =>\n        prev.map((msg) =>\n          msg.isLoading\n            ? {\n                ...msg,\n                content: \"프롬프트를 분석하고 있습니다...\",\n                loadingProgress: {\n                  stage: \"analyzing\",\n                  message: \"프로젝트 프롬프트를 불러오는 중...\",\n                  percentage: 25,\n                },\n              }\n            : msg\n        )\n      );\n\n      // AI 처리 단계 표시\n      setTimeout(() => {\n        setMessages((prev) =>\n          prev.map((msg) =>\n            msg.isLoading\n              ? {\n                  ...msg,\n                  content: \"AI 모델이 응답을 생성하고 있습니다...\",\n                  loadingProgress: {\n                    stage: \"generating\",\n                    message:\n                      \"고품질 응답을 위해 분석 중입니다. 잠시만 기다려주세요...\",\n                    percentage: 60,\n                  },\n                }\n              : msg\n          )\n        );\n      }, 1000);\n\n      // 완료 단계 표시\n      setTimeout(() => {\n        setMessages((prev) =>\n          prev.map((msg) =>\n            msg.isLoading\n              ? {\n                  ...msg,\n                  content: \"응답을 정리하고 있습니다...\",\n                  loadingProgress: {\n                    stage: \"finalizing\",\n                    message: \"거의 완료되었습니다...\",\n                    percentage: 85,\n                  },\n                }\n              : msg\n          )\n        );\n      }, 3000);\n\n      const orchestrationData = {\n        userInput: userMessage.content,\n        chat_history: messages\n          .filter((msg) => !msg.isLoading && !msg.isError)\n          .map((msg) => ({\n            role: msg.type === \"user\" ? \"user\" : \"assistant\",\n            content: msg.content,\n          })),\n      };\n\n      // 수정된 호출 방식: 문자열과 옵션 객체로 분리\n      const result = await executeOrchestration(userMessage.content, {\n        chat_history: messages\n          .filter((msg) => !msg.isLoading && !msg.isError)\n          .map((msg) => ({\n            role: msg.type === \"user\" ? \"user\" : \"assistant\",\n            content: msg.content,\n          })),\n      });\n      await pollOrchestrationResult();\n\n      // 로딩 메시지 제거하고 실제 응답 추가\n      const responseMessage = processAIResponse(result);\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([responseMessage])\n      );\n    } catch (error) {\n      console.error(\"메시지 전송 실패:\", error);\n\n      // 개선된 오류 메시지\n      const errorType = error.code === \"ECONNABORTED\" ? \"timeout\" : \"general\";\n      const errorMessage = {\n        id: \"error-\" + Date.now(),\n        type: \"assistant\",\n        content:\n          errorType === \"timeout\"\n            ? \"처리 시간이 초과되었습니다. 요청이 복잡하거나 서버가 바쁜 상태일 수 있습니다. 잠시 후 다시 시도해주세요.\"\n            : \"메시지 처리 중 오류가 발생했습니다. 네트워크 연결을 확인하고 다시 시도해주세요.\",\n        timestamp: new Date(),\n        isError: true,\n        errorDetails: {\n          type: errorType,\n          message: error.message,\n          status: error.response?.status,\n        },\n      };\n\n      setMessages((prev) =>\n        prev.filter((msg) => !msg.isLoading).concat([errorMessage])\n      );\n    }\n  }, [\n    inputValue,\n    isGenerating,\n    executeOrchestration,\n    pollOrchestrationResult,\n    promptCards,\n    messages, // messages를 의존성에 추가\n  ]);\n\n  /**\n   * Enter 키로 전송\n   */\n  const handleKeyPress = useCallback(\n    (e) => {\n      if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        handleSendMessage();\n      }\n    },\n    [handleSendMessage]\n  );\n\n  /**\n   * 메시지 복사\n   */\n  const handleCopyMessage = useCallback(async (content, messageId) => {\n    const success = await copyToClipboard(content);\n    if (success) {\n      setCopiedMessage(messageId);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 개별 제목 복사\n   */\n  const handleCopyTitle = useCallback(async (title, messageId, index) => {\n    const success = await copyToClipboard(title, \"복사되었습니다!\");\n    if (success) {\n      setCopiedMessage(`${messageId}_title_${index}`);\n      setTimeout(() => setCopiedMessage(null), 2000);\n    }\n  }, []);\n\n  /**\n   * 채팅 초기화\n   */\n  const resetChat = useCallback(() => {\n    setMessages([]);\n    setInputValue(\"\");\n    setCopiedMessage(null);\n    resetOrchestration();\n  }, [resetOrchestration]);\n\n  return {\n    messages,\n    inputValue,\n    setInputValue,\n    copiedMessage,\n    isGenerating,\n    messagesEndRef,\n    inputRef,\n    handleSendMessage,\n    handleKeyPress,\n    handleCopyMessage,\n    handleCopyTitle,\n    resetChat,\n    scrollToBottom,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}