{"ast":null,"code":"import { toast } from \"react-hot-toast\";\n\n/**\n * 텍스트를 클립보드에 복사하는 유틸리티 함수\n * @param {string} text - 복사할 텍스트\n * @param {string} successMessage - 성공 시 표시할 메시지\n * @param {string} errorMessage - 실패 시 표시할 메시지\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyToClipboard = async (text, successMessage = \"클립보드에 복사되었습니다!\", errorMessage = \"복사에 실패했습니다.\") => {\n  try {\n    await navigator.clipboard.writeText(text);\n    toast.success(successMessage);\n    return true;\n  } catch (error) {\n    console.error(\"복사 실패:\", error);\n    toast.error(errorMessage);\n    return false;\n  }\n};\n\n/**\n * 제목만 추출하여 복사하는 함수\n * @param {string} text - 전체 텍스트\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyTitlesOnly = async text => {\n  const extractedTitles = extractTitles(text);\n  const textToCopy = extractedTitles.length > 0 ? extractedTitles.join(\"\\n\") : text;\n  return copyToClipboard(textToCopy, \"제목이 클립보드에 복사되었습니다!\");\n};\n\n/**\n * 텍스트에서 제목을 추출하는 함수\n * @param {string} text - 원본 텍스트\n * @returns {Array<string>} - 추출된 제목 배열\n */\nexport const extractTitles = text => {\n  const titles = [];\n\n  // 1. 번호 형식: \"1. [제목]\"\n  const numberedMatches = text.match(/^\\d+\\.\\s+(.+?)(?=\\n\\s*-|$)/gm);\n  if (numberedMatches) {\n    numberedMatches.forEach(match => {\n      const title = match.replace(/^\\d+\\.\\s+/, \"\").trim();\n      if (title && !title.includes(\"품질 평가\")) {\n        titles.push(title);\n      }\n    });\n  }\n\n  // 2. Bullet 형식: \"• [제목]\"\n  if (titles.length === 0) {\n    const bulletMatches = text.match(/• \"([^\"]+)\"/g);\n    if (bulletMatches) {\n      bulletMatches.forEach(match => {\n        const title = match.replace(/• \"(.+)\"/, \"$1\").trim();\n        if (title) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  // 3. 일반 Bullet 형식\n  if (titles.length === 0) {\n    const simpleBulletMatches = text.match(/• ([^\\n]+)/g);\n    if (simpleBulletMatches) {\n      simpleBulletMatches.forEach(match => {\n        const title = match.replace(\"• \", \"\").trim();\n        if (title && !title.includes(\"이유:\") && title.length < 100) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n  return titles;\n};","map":{"version":3,"names":["toast","copyToClipboard","text","successMessage","errorMessage","navigator","clipboard","writeText","success","error","console","copyTitlesOnly","extractedTitles","extractTitles","textToCopy","length","join","titles","numberedMatches","match","forEach","title","replace","trim","includes","push","bulletMatches","simpleBulletMatches"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기/frontend/src/utils/clipboard.js"],"sourcesContent":["import { toast } from \"react-hot-toast\";\n\n/**\n * 텍스트를 클립보드에 복사하는 유틸리티 함수\n * @param {string} text - 복사할 텍스트\n * @param {string} successMessage - 성공 시 표시할 메시지\n * @param {string} errorMessage - 실패 시 표시할 메시지\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyToClipboard = async (\n  text,\n  successMessage = \"클립보드에 복사되었습니다!\",\n  errorMessage = \"복사에 실패했습니다.\"\n) => {\n  try {\n    await navigator.clipboard.writeText(text);\n    toast.success(successMessage);\n    return true;\n  } catch (error) {\n    console.error(\"복사 실패:\", error);\n    toast.error(errorMessage);\n    return false;\n  }\n};\n\n/**\n * 제목만 추출하여 복사하는 함수\n * @param {string} text - 전체 텍스트\n * @returns {Promise<boolean>} - 성공 여부\n */\nexport const copyTitlesOnly = async (text) => {\n  const extractedTitles = extractTitles(text);\n  const textToCopy =\n    extractedTitles.length > 0 ? extractedTitles.join(\"\\n\") : text;\n  return copyToClipboard(textToCopy, \"제목이 클립보드에 복사되었습니다!\");\n};\n\n/**\n * 텍스트에서 제목을 추출하는 함수\n * @param {string} text - 원본 텍스트\n * @returns {Array<string>} - 추출된 제목 배열\n */\nexport const extractTitles = (text) => {\n  const titles = [];\n\n  // 1. 번호 형식: \"1. [제목]\"\n  const numberedMatches = text.match(/^\\d+\\.\\s+(.+?)(?=\\n\\s*-|$)/gm);\n  if (numberedMatches) {\n    numberedMatches.forEach((match) => {\n      const title = match.replace(/^\\d+\\.\\s+/, \"\").trim();\n      if (title && !title.includes(\"품질 평가\")) {\n        titles.push(title);\n      }\n    });\n  }\n\n  // 2. Bullet 형식: \"• [제목]\"\n  if (titles.length === 0) {\n    const bulletMatches = text.match(/• \"([^\"]+)\"/g);\n    if (bulletMatches) {\n      bulletMatches.forEach((match) => {\n        const title = match.replace(/• \"(.+)\"/, \"$1\").trim();\n        if (title) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  // 3. 일반 Bullet 형식\n  if (titles.length === 0) {\n    const simpleBulletMatches = text.match(/• ([^\\n]+)/g);\n    if (simpleBulletMatches) {\n      simpleBulletMatches.forEach((match) => {\n        const title = match.replace(\"• \", \"\").trim();\n        if (title && !title.includes(\"이유:\") && title.length < 100) {\n          titles.push(title);\n        }\n      });\n    }\n  }\n\n  return titles;\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,iBAAiB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAC7BC,IAAI,EACJC,cAAc,GAAG,gBAAgB,EACjCC,YAAY,GAAG,aAAa,KACzB;EACH,IAAI;IACF,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACL,IAAI,CAAC;IACzCF,KAAK,CAACQ,OAAO,CAACL,cAAc,CAAC;IAC7B,OAAO,IAAI;EACb,CAAC,CAAC,OAAOM,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9BT,KAAK,CAACS,KAAK,CAACL,YAAY,CAAC;IACzB,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAG,MAAOT,IAAI,IAAK;EAC5C,MAAMU,eAAe,GAAGC,aAAa,CAACX,IAAI,CAAC;EAC3C,MAAMY,UAAU,GACdF,eAAe,CAACG,MAAM,GAAG,CAAC,GAAGH,eAAe,CAACI,IAAI,CAAC,IAAI,CAAC,GAAGd,IAAI;EAChE,OAAOD,eAAe,CAACa,UAAU,EAAE,oBAAoB,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMD,aAAa,GAAIX,IAAI,IAAK;EACrC,MAAMe,MAAM,GAAG,EAAE;;EAEjB;EACA,MAAMC,eAAe,GAAGhB,IAAI,CAACiB,KAAK,CAAC,8BAA8B,CAAC;EAClE,IAAID,eAAe,EAAE;IACnBA,eAAe,CAACE,OAAO,CAAED,KAAK,IAAK;MACjC,MAAME,KAAK,GAAGF,KAAK,CAACG,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;MACnD,IAAIF,KAAK,IAAI,CAACA,KAAK,CAACG,QAAQ,CAAC,OAAO,CAAC,EAAE;QACrCP,MAAM,CAACQ,IAAI,CAACJ,KAAK,CAAC;MACpB;IACF,CAAC,CAAC;EACJ;;EAEA;EACA,IAAIJ,MAAM,CAACF,MAAM,KAAK,CAAC,EAAE;IACvB,MAAMW,aAAa,GAAGxB,IAAI,CAACiB,KAAK,CAAC,cAAc,CAAC;IAChD,IAAIO,aAAa,EAAE;MACjBA,aAAa,CAACN,OAAO,CAAED,KAAK,IAAK;QAC/B,MAAME,KAAK,GAAGF,KAAK,CAACG,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAACC,IAAI,CAAC,CAAC;QACpD,IAAIF,KAAK,EAAE;UACTJ,MAAM,CAACQ,IAAI,CAACJ,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;IACJ;EACF;;EAEA;EACA,IAAIJ,MAAM,CAACF,MAAM,KAAK,CAAC,EAAE;IACvB,MAAMY,mBAAmB,GAAGzB,IAAI,CAACiB,KAAK,CAAC,aAAa,CAAC;IACrD,IAAIQ,mBAAmB,EAAE;MACvBA,mBAAmB,CAACP,OAAO,CAAED,KAAK,IAAK;QACrC,MAAME,KAAK,GAAGF,KAAK,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;QAC5C,IAAIF,KAAK,IAAI,CAACA,KAAK,CAACG,QAAQ,CAAC,KAAK,CAAC,IAAIH,KAAK,CAACN,MAAM,GAAG,GAAG,EAAE;UACzDE,MAAM,CAACQ,IAAI,CAACJ,KAAK,CAAC;QACpB;MACF,CAAC,CAAC;IACJ;EACF;EAEA,OAAOJ,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}