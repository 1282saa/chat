{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = projectId => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(async () => {\n    const wsUrl = process.env.REACT_APP_WS_URL || \"wss://your-websocket-api.execute-api.us-east-1.amazonaws.com/prod\";\n\n    // URL 형식 검증 및 정규화\n    if (!wsUrl.startsWith(\"wss://\") && !wsUrl.startsWith(\"ws://\")) {\n      console.error(\"잘못된 WebSocket URL 형식:\", wsUrl);\n      return null;\n    }\n\n    // 끝에 슬래시 제거\n    let normalizedUrl = wsUrl.replace(/\\/$/, \"\");\n\n    // 인증 토큰을 쿼리 파라미터로 추가\n    try {\n      var _session$tokens, _session$tokens$idTok;\n      const {\n        fetchAuthSession\n      } = await import('aws-amplify/auth');\n      const session = await fetchAuthSession();\n      const token = session === null || session === void 0 ? void 0 : (_session$tokens = session.tokens) === null || _session$tokens === void 0 ? void 0 : (_session$tokens$idTok = _session$tokens.idToken) === null || _session$tokens$idTok === void 0 ? void 0 : _session$tokens$idTok.toString();\n      if (token) {\n        // URL에 토큰을 쿼리 파라미터로 추가\n        normalizedUrl += `?token=${encodeURIComponent(token)}`;\n        console.log(\"✅ WebSocket URL에 인증 토큰 추가됨\");\n      } else {\n        console.log(\"⚠️ 인증 토큰이 없음 - 공개 WebSocket 연결 시도\");\n      }\n    } catch (authError) {\n      console.log(\"📝 인증 토큰 가져오기 실패:\", authError.message);\n    }\n    console.log(\"WebSocket URL 확인:\", normalizedUrl.replace(/token=[^&]+/, 'token=***'));\n    console.log(\"환경변수 REACT_APP_WS_URL:\", process.env.REACT_APP_WS_URL);\n    return normalizedUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    var _wsRef$current, _wsRef$current2;\n    // 이미 연결 중이거나 연결된 경우 중복 연결 방지\n    if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.OPEN || ((_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.readyState) === WebSocket.CONNECTING) {\n      console.log(\"이미 연결된 WebSocket이 있습니다 (readyState:\", wsRef.current.readyState, \")\");\n      return;\n    }\n\n    // 이전 연결이 있다면 정리\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n    setIsConnecting(true);\n    setError(null);\n    try {\n      const wsUrl = getWebSocketUrl();\n      if (!wsUrl) {\n        setError(\"유효하지 않은 WebSocket URL\");\n        setIsConnecting(false);\n        return;\n      }\n      console.log(\"WebSocket 연결 시도:\", wsUrl);\n      console.log(\"브라우저 WebSocket 지원:\", !!window.WebSocket);\n\n      // 연결 시도 시간 기록\n      window.wsConnectStart = Date.now();\n      wsRef.current = new WebSocket(wsUrl);\n\n      // 연결 상태 모니터링\n      const connectionTimeout = setTimeout(() => {\n        var _wsRef$current3;\n        if (((_wsRef$current3 = wsRef.current) === null || _wsRef$current3 === void 0 ? void 0 : _wsRef$current3.readyState) === WebSocket.CONNECTING) {\n          console.error(\"WebSocket 연결 시간 초과\");\n          wsRef.current.close();\n          setError(\"연결 시간이 초과되었습니다\");\n          setIsConnecting(false);\n        }\n      }, 10000); // 10초 타임아웃\n\n      wsRef.current.onopen = event => {\n        var _wsRef$current4, _wsRef$current5, _wsRef$current6;\n        clearTimeout(connectionTimeout);\n        console.log(\"🟢 WebSocket 연결 성공!\");\n        console.log(\"- Event:\", event);\n        console.log(\"- URL:\", (_wsRef$current4 = wsRef.current) === null || _wsRef$current4 === void 0 ? void 0 : _wsRef$current4.url);\n        console.log(\"- Protocol:\", (_wsRef$current5 = wsRef.current) === null || _wsRef$current5 === void 0 ? void 0 : _wsRef$current5.protocol);\n        console.log(\"- Extensions:\", (_wsRef$current6 = wsRef.current) === null || _wsRef$current6 === void 0 ? void 0 : _wsRef$current6.extensions);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n      wsRef.current.onclose = event => {\n        clearTimeout(connectionTimeout);\n        const connectionDuration = Date.now() - (window.wsConnectStart || 0);\n        console.log(\"🔴 WebSocket 연결 종료:\");\n        console.log(\"- Code:\", event.code);\n        console.log(\"- Reason:\", event.reason || \"(no reason provided)\");\n        console.log(\"- WasClean:\", event.wasClean);\n        console.log(\"- Connection duration:\", connectionDuration + \"ms\");\n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 즉시 종료된 경우 (500ms 이내) - 서버 문제\n        if (connectionDuration < 500) {\n          console.error(\"⚠️ WebSocket이 즉시 종료됨 - 서버 문제 가능성\");\n\n          // 특정 에러 코드에 따른 세분화된 에러 메시지\n          let errorMessage = \"서버 연결에 실패했습니다.\";\n          switch (event.code) {\n            case 1006:\n              errorMessage = \"비정상적인 연결 종료 (네트워크 문제 가능성)\";\n              break;\n            case 1002:\n              errorMessage = \"프로토콜 오류\";\n              break;\n            case 1003:\n              errorMessage = \"지원하지 않는 데이터 타입\";\n              break;\n            case 1011:\n              errorMessage = \"서버 내부 오류\";\n              break;\n          }\n          setError(errorMessage);\n          return;\n        }\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          console.log(`🔄 ${delay}ms 후 재연결 시도 (${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        } else if (reconnectAttempts.current >= maxReconnectAttempts) {\n          setError(\"최대 재연결 시도 횟수에 도달했습니다.\");\n        }\n      };\n      wsRef.current.onerror = error => {\n        var _wsRef$current7, _wsRef$current8;\n        clearTimeout(connectionTimeout);\n        console.error(\"💥 WebSocket 오류:\", error);\n        console.log(\"- ReadyState:\", (_wsRef$current7 = wsRef.current) === null || _wsRef$current7 === void 0 ? void 0 : _wsRef$current7.readyState);\n        console.log(\"- URL:\", (_wsRef$current8 = wsRef.current) === null || _wsRef$current8 === void 0 ? void 0 : _wsRef$current8.url);\n        setError(\"WebSocket 연결 오류가 발생했습니다\");\n        setIsConnecting(false);\n      };\n    } catch (err) {\n      console.error(\"💥 WebSocket 생성 실패:\", err);\n      setError(\"WebSocket 연결에 실패했습니다: \" + err.message);\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback(message => {\n    var _wsRef$current9;\n    if (((_wsRef$current9 = wsRef.current) === null || _wsRef$current9 === void 0 ? void 0 : _wsRef$current9.readyState) === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error(\"WebSocket이 연결되지 않았습니다\");\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback((userInput, chatHistory = [], promptCards = [], modelId = null, conversationId = null, userSub = null) => {\n    if (!isConnected) {\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n    const message = {\n      action: \"stream\",\n      projectId,\n      userInput,\n      chat_history: chatHistory,\n      prompt_cards: promptCards,\n      modelId: modelId,\n      conversationId: conversationId,\n      userSub: userSub\n    };\n    console.log('WebSocket 메시지 전송:', {\n      action: message.action,\n      projectId: message.projectId,\n      inputLength: userInput.length,\n      historyLength: chatHistory.length,\n      promptCardsCount: promptCards.length,\n      conversationId: message.conversationId,\n      userSub: message.userSub\n    });\n    return sendMessage(message);\n  }, [isConnected, projectId, sendMessage]);\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback(listener => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback(listener => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    // 초기 연결 지연을 통해 React strict mode 이슈 회피\n    const timer = setTimeout(() => {\n      connect();\n    }, 100);\n    return () => {\n      clearTimeout(timer);\n      disconnect();\n    };\n  }, []); // 의존성 배열을 빈 배열로 변경\n\n  // projectId 변경 시 재연결 (이전 값과 비교하여 실제 변경시에만)\n  const prevProjectIdRef = useRef(projectId);\n  useEffect(() => {\n    if (prevProjectIdRef.current !== projectId && isConnected && projectId) {\n      console.log('ProjectId 변경됨, 재연결 중:', prevProjectIdRef.current, '->', projectId);\n      disconnect();\n      setTimeout(connect, 200);\n    }\n    prevProjectIdRef.current = projectId;\n  }, [projectId, isConnected]); // connect, disconnect 의존성 제거\n\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener\n  };\n};\n_s(useWebSocket, \"c6rcu5OLBF/TExWDVpQfzW9e3qo=\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebSocket","projectId","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","error","setError","wsRef","reconnectTimeoutRef","reconnectAttempts","maxReconnectAttempts","getWebSocketUrl","wsUrl","process","env","REACT_APP_WS_URL","startsWith","console","normalizedUrl","replace","_session$tokens","_session$tokens$idTok","fetchAuthSession","session","token","tokens","idToken","toString","encodeURIComponent","log","authError","message","connect","_wsRef$current","_wsRef$current2","current","readyState","WebSocket","OPEN","CONNECTING","close","window","wsConnectStart","Date","now","connectionTimeout","setTimeout","_wsRef$current3","onopen","event","_wsRef$current4","_wsRef$current5","_wsRef$current6","clearTimeout","url","protocol","extensions","onclose","connectionDuration","code","reason","wasClean","errorMessage","delay","Math","min","pow","onerror","_wsRef$current7","_wsRef$current8","err","disconnect","sendMessage","_wsRef$current9","send","JSON","stringify","startStreaming","userInput","chatHistory","promptCards","modelId","conversationId","userSub","action","chat_history","prompt_cards","inputLength","length","historyLength","promptCardsCount","addMessageListener","listener","addEventListener","removeMessageListener","removeEventListener","timer","prevProjectIdRef"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/dev/nexus/title_generator_ver1/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = (projectId) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(async () => {\n    const wsUrl =\n      process.env.REACT_APP_WS_URL ||\n      \"wss://your-websocket-api.execute-api.us-east-1.amazonaws.com/prod\";\n    \n    // URL 형식 검증 및 정규화\n    if (!wsUrl.startsWith(\"wss://\") && !wsUrl.startsWith(\"ws://\")) {\n      console.error(\"잘못된 WebSocket URL 형식:\", wsUrl);\n      return null;\n    }\n    \n    // 끝에 슬래시 제거\n    let normalizedUrl = wsUrl.replace(/\\/$/, \"\");\n    \n    // 인증 토큰을 쿼리 파라미터로 추가\n    try {\n      const { fetchAuthSession } = await import('aws-amplify/auth');\n      const session = await fetchAuthSession();\n      const token = session?.tokens?.idToken?.toString();\n      \n      if (token) {\n        // URL에 토큰을 쿼리 파라미터로 추가\n        normalizedUrl += `?token=${encodeURIComponent(token)}`;\n        console.log(\"✅ WebSocket URL에 인증 토큰 추가됨\");\n      } else {\n        console.log(\"⚠️ 인증 토큰이 없음 - 공개 WebSocket 연결 시도\");\n      }\n    } catch (authError) {\n      console.log(\"📝 인증 토큰 가져오기 실패:\", authError.message);\n    }\n    \n    console.log(\"WebSocket URL 확인:\", normalizedUrl.replace(/token=[^&]+/, 'token=***'));\n    console.log(\"환경변수 REACT_APP_WS_URL:\", process.env.REACT_APP_WS_URL);\n    \n    return normalizedUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    // 이미 연결 중이거나 연결된 경우 중복 연결 방지\n    if (wsRef.current?.readyState === WebSocket.OPEN || \n        wsRef.current?.readyState === WebSocket.CONNECTING) {\n      console.log(\"이미 연결된 WebSocket이 있습니다 (readyState:\", wsRef.current.readyState, \")\");\n      return;\n    }\n\n    // 이전 연결이 있다면 정리\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const wsUrl = getWebSocketUrl();\n      \n      if (!wsUrl) {\n        setError(\"유효하지 않은 WebSocket URL\");\n        setIsConnecting(false);\n        return;\n      }\n\n      console.log(\"WebSocket 연결 시도:\", wsUrl);\n      console.log(\"브라우저 WebSocket 지원:\", !!window.WebSocket);\n\n      // 연결 시도 시간 기록\n      window.wsConnectStart = Date.now();\n\n      wsRef.current = new WebSocket(wsUrl);\n\n      // 연결 상태 모니터링\n      const connectionTimeout = setTimeout(() => {\n        if (wsRef.current?.readyState === WebSocket.CONNECTING) {\n          console.error(\"WebSocket 연결 시간 초과\");\n          wsRef.current.close();\n          setError(\"연결 시간이 초과되었습니다\");\n          setIsConnecting(false);\n        }\n      }, 10000); // 10초 타임아웃\n\n      wsRef.current.onopen = (event) => {\n        clearTimeout(connectionTimeout);\n        console.log(\"🟢 WebSocket 연결 성공!\");\n        console.log(\"- Event:\", event);\n        console.log(\"- URL:\", wsRef.current?.url);\n        console.log(\"- Protocol:\", wsRef.current?.protocol);\n        console.log(\"- Extensions:\", wsRef.current?.extensions);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onclose = (event) => {\n        clearTimeout(connectionTimeout);\n        const connectionDuration = Date.now() - (window.wsConnectStart || 0);\n        \n        console.log(\"🔴 WebSocket 연결 종료:\");\n        console.log(\"- Code:\", event.code);\n        console.log(\"- Reason:\", event.reason || \"(no reason provided)\");\n        console.log(\"- WasClean:\", event.wasClean);\n        console.log(\"- Connection duration:\", connectionDuration + \"ms\");\n        \n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 즉시 종료된 경우 (500ms 이내) - 서버 문제\n        if (connectionDuration < 500) {\n          console.error(\"⚠️ WebSocket이 즉시 종료됨 - 서버 문제 가능성\");\n          \n          // 특정 에러 코드에 따른 세분화된 에러 메시지\n          let errorMessage = \"서버 연결에 실패했습니다.\";\n          switch(event.code) {\n            case 1006:\n              errorMessage = \"비정상적인 연결 종료 (네트워크 문제 가능성)\";\n              break;\n            case 1002:\n              errorMessage = \"프로토콜 오류\";\n              break;\n            case 1003:\n              errorMessage = \"지원하지 않는 데이터 타입\";\n              break;\n            case 1011:\n              errorMessage = \"서버 내부 오류\";\n              break;\n          }\n          \n          setError(errorMessage);\n          return;\n        }\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (\n          event.code !== 1000 &&\n          reconnectAttempts.current < maxReconnectAttempts\n        ) {\n          const delay = Math.min(\n            1000 * Math.pow(2, reconnectAttempts.current),\n            30000\n          );\n          console.log(\n            `🔄 ${delay}ms 후 재연결 시도 (${\n              reconnectAttempts.current + 1\n            }/${maxReconnectAttempts})`\n          );\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        } else if (reconnectAttempts.current >= maxReconnectAttempts) {\n          setError(\"최대 재연결 시도 횟수에 도달했습니다.\");\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        clearTimeout(connectionTimeout);\n        console.error(\"💥 WebSocket 오류:\", error);\n        console.log(\"- ReadyState:\", wsRef.current?.readyState);\n        console.log(\"- URL:\", wsRef.current?.url);\n        setError(\"WebSocket 연결 오류가 발생했습니다\");\n        setIsConnecting(false);\n      };\n\n    } catch (err) {\n      console.error(\"💥 WebSocket 생성 실패:\", err);\n      setError(\"WebSocket 연결에 실패했습니다: \" + err.message);\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error(\"WebSocket이 연결되지 않았습니다\");\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback(\n    (userInput, chatHistory = [], promptCards = [], modelId = null, conversationId = null, userSub = null) => {\n      if (!isConnected) {\n        setError(\"WebSocket 연결이 필요합니다\");\n        return false;\n      }\n\n      const message = {\n        action: \"stream\",\n        projectId,\n        userInput,\n        chat_history: chatHistory,\n        prompt_cards: promptCards,\n        modelId: modelId,\n        conversationId: conversationId,\n        userSub: userSub,\n      };\n\n      console.log('WebSocket 메시지 전송:', {\n        action: message.action,\n        projectId: message.projectId,\n        inputLength: userInput.length,\n        historyLength: chatHistory.length,\n        promptCardsCount: promptCards.length,\n        conversationId: message.conversationId,\n        userSub: message.userSub\n      });\n\n      return sendMessage(message);\n    },\n    [isConnected, projectId, sendMessage]\n  );\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    // 초기 연결 지연을 통해 React strict mode 이슈 회피\n    const timer = setTimeout(() => {\n      connect();\n    }, 100);\n    \n    return () => {\n      clearTimeout(timer);\n      disconnect();\n    };\n  }, []); // 의존성 배열을 빈 배열로 변경\n\n  // projectId 변경 시 재연결 (이전 값과 비교하여 실제 변경시에만)\n  const prevProjectIdRef = useRef(projectId);\n  useEffect(() => {\n    if (prevProjectIdRef.current !== projectId && isConnected && projectId) {\n      console.log('ProjectId 변경됨, 재연결 중:', prevProjectIdRef.current, '->', projectId);\n      disconnect();\n      setTimeout(connect, 200);\n    }\n    prevProjectIdRef.current = projectId;\n  }, [projectId, isConnected]); // connect, disconnect 의존성 제거\n\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}