{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useCallback } from \"react\";\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = projectId => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(() => {\n    const wsUrl = process.env.REACT_APP_WS_URL || \"wss://na17isxiri.execute-api.us-east-1.amazonaws.com/prod\";\n\n    // URL 형식 검증 및 정규화\n    if (!wsUrl.startsWith(\"wss://\") && !wsUrl.startsWith(\"ws://\")) {\n      console.error(\"잘못된 WebSocket URL 형식:\", wsUrl);\n      return null;\n    }\n\n    // 끝에 슬래시 제거\n    const normalizedUrl = wsUrl.replace(/\\/$/, \"\");\n    console.log(\"WebSocket URL 확인:\", normalizedUrl);\n    console.log(\"환경변수 REACT_APP_WS_URL:\", process.env.REACT_APP_WS_URL);\n    return normalizedUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    var _wsRef$current;\n    if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.OPEN) {\n      console.log(\"이미 연결된 WebSocket이 있습니다\");\n      return;\n    }\n    setIsConnecting(true);\n    setError(null);\n    try {\n      const wsUrl = getWebSocketUrl();\n      if (!wsUrl) {\n        setError(\"유효하지 않은 WebSocket URL\");\n        setIsConnecting(false);\n        return;\n      }\n      console.log(\"WebSocket 연결 시도:\", wsUrl);\n      console.log(\"브라우저 WebSocket 지원:\", !!window.WebSocket);\n      wsRef.current = new WebSocket(wsUrl);\n\n      // 연결 상태 모니터링\n      const connectionTimeout = setTimeout(() => {\n        var _wsRef$current2;\n        if (((_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.readyState) === WebSocket.CONNECTING) {\n          console.error(\"WebSocket 연결 시간 초과\");\n          wsRef.current.close();\n          setError(\"연결 시간이 초과되었습니다\");\n          setIsConnecting(false);\n        }\n      }, 10000); // 10초 타임아웃\n\n      wsRef.current.onopen = event => {\n        clearTimeout(connectionTimeout);\n        console.log(\"WebSocket 연결 성공:\", event);\n        console.log(\"연결된 URL:\", wsRef.current.url);\n        console.log(\"프로토콜:\", wsRef.current.protocol);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n      wsRef.current.onclose = event => {\n        clearTimeout(connectionTimeout);\n        console.log(\"WebSocket 연결 종료 상세 정보:\");\n        console.log(\"- Code:\", event.code);\n        console.log(\"- Reason:\", event.reason);\n        console.log(\"- WasClean:\", event.wasClean);\n        console.log(\"- 즉시 종료 여부:\", Date.now() - (window.wsConnectStart || 0) < 1000);\n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 즉시 종료된 경우 (1초 이내)\n        if (Date.now() - (window.wsConnectStart || 0) < 1000) {\n          console.error(\"WebSocket이 즉시 종료됨 - 엔드포인트 문제 가능성\");\n          setError(\"서버 연결에 실패했습니다. 엔드포인트를 확인해주세요.\");\n          return;\n        }\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          console.log(`${delay}ms 후 재연결 시도 (${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        }\n      };\n      wsRef.current.onerror = error => {\n        var _wsRef$current3;\n        clearTimeout(connectionTimeout);\n        console.error(\"WebSocket 오류 상세:\", error);\n        console.log(\"오류 발생 시 readyState:\", (_wsRef$current3 = wsRef.current) === null || _wsRef$current3 === void 0 ? void 0 : _wsRef$current3.readyState);\n        setError(\"WebSocket 연결 오류가 발생했습니다\");\n        setIsConnecting(false);\n      };\n\n      // 연결 시도 시간 기록\n      window.wsConnectStart = Date.now();\n    } catch (err) {\n      console.error(\"WebSocket 연결 실패:\", err);\n      setError(\"WebSocket 연결에 실패했습니다: \" + err.message);\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback(message => {\n    var _wsRef$current4;\n    if (((_wsRef$current4 = wsRef.current) === null || _wsRef$current4 === void 0 ? void 0 : _wsRef$current4.readyState) === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error(\"WebSocket이 연결되지 않았습니다\");\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback((userInput, chatHistory = []) => {\n    if (!isConnected) {\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n    const message = {\n      action: \"stream\",\n      projectId,\n      userInput,\n      chat_history: chatHistory\n    };\n    return sendMessage(message);\n  }, [isConnected, projectId, sendMessage]);\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback(listener => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback(listener => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  // projectId 변경 시 재연결\n  useEffect(() => {\n    if (isConnected) {\n      disconnect();\n      setTimeout(connect, 100);\n    }\n  }, [projectId, isConnected, connect, disconnect]);\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener\n  };\n};\n_s(useWebSocket, \"VEvFLvd1lfAENuW3bGY3DDszaKQ=\");","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","useWebSocket","projectId","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","error","setError","wsRef","reconnectTimeoutRef","reconnectAttempts","maxReconnectAttempts","getWebSocketUrl","wsUrl","process","env","REACT_APP_WS_URL","startsWith","console","normalizedUrl","replace","log","connect","_wsRef$current","current","readyState","WebSocket","OPEN","window","connectionTimeout","setTimeout","_wsRef$current2","CONNECTING","close","onopen","event","clearTimeout","url","protocol","onclose","code","reason","wasClean","Date","now","wsConnectStart","delay","Math","min","pow","onerror","_wsRef$current3","err","message","disconnect","sendMessage","_wsRef$current4","send","JSON","stringify","startStreaming","userInput","chatHistory","action","chat_history","addMessageListener","listener","addEventListener","removeMessageListener","removeEventListener"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from \"react\";\n\n/**\n * WebSocket 실시간 스트리밍을 위한 커스텀 훅\n */\nexport const useWebSocket = (projectId) => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // WebSocket URL (환경변수나 실제 배포된 URL로 설정)\n  const getWebSocketUrl = useCallback(() => {\n    const wsUrl =\n      process.env.REACT_APP_WS_URL ||\n      \"wss://na17isxiri.execute-api.us-east-1.amazonaws.com/prod\";\n    \n    // URL 형식 검증 및 정규화\n    if (!wsUrl.startsWith(\"wss://\") && !wsUrl.startsWith(\"ws://\")) {\n      console.error(\"잘못된 WebSocket URL 형식:\", wsUrl);\n      return null;\n    }\n    \n    // 끝에 슬래시 제거\n    const normalizedUrl = wsUrl.replace(/\\/$/, \"\");\n    console.log(\"WebSocket URL 확인:\", normalizedUrl);\n    console.log(\"환경변수 REACT_APP_WS_URL:\", process.env.REACT_APP_WS_URL);\n    \n    return normalizedUrl;\n  }, []);\n\n  // WebSocket 연결\n  const connect = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      console.log(\"이미 연결된 WebSocket이 있습니다\");\n      return;\n    }\n\n    setIsConnecting(true);\n    setError(null);\n\n    try {\n      const wsUrl = getWebSocketUrl();\n      \n      if (!wsUrl) {\n        setError(\"유효하지 않은 WebSocket URL\");\n        setIsConnecting(false);\n        return;\n      }\n\n      console.log(\"WebSocket 연결 시도:\", wsUrl);\n      console.log(\"브라우저 WebSocket 지원:\", !!window.WebSocket);\n\n      wsRef.current = new WebSocket(wsUrl);\n\n      // 연결 상태 모니터링\n      const connectionTimeout = setTimeout(() => {\n        if (wsRef.current?.readyState === WebSocket.CONNECTING) {\n          console.error(\"WebSocket 연결 시간 초과\");\n          wsRef.current.close();\n          setError(\"연결 시간이 초과되었습니다\");\n          setIsConnecting(false);\n        }\n      }, 10000); // 10초 타임아웃\n\n      wsRef.current.onopen = (event) => {\n        clearTimeout(connectionTimeout);\n        console.log(\"WebSocket 연결 성공:\", event);\n        console.log(\"연결된 URL:\", wsRef.current.url);\n        console.log(\"프로토콜:\", wsRef.current.protocol);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setError(null);\n        reconnectAttempts.current = 0;\n      };\n\n      wsRef.current.onclose = (event) => {\n        clearTimeout(connectionTimeout);\n        console.log(\"WebSocket 연결 종료 상세 정보:\");\n        console.log(\"- Code:\", event.code);\n        console.log(\"- Reason:\", event.reason);\n        console.log(\"- WasClean:\", event.wasClean);\n        console.log(\"- 즉시 종료 여부:\", Date.now() - (window.wsConnectStart || 0) < 1000);\n        \n        setIsConnected(false);\n        setIsConnecting(false);\n\n        // 즉시 종료된 경우 (1초 이내)\n        if (Date.now() - (window.wsConnectStart || 0) < 1000) {\n          console.error(\"WebSocket이 즉시 종료됨 - 엔드포인트 문제 가능성\");\n          setError(\"서버 연결에 실패했습니다. 엔드포인트를 확인해주세요.\");\n          return;\n        }\n\n        // 자동 재연결 (정상 종료가 아닌 경우)\n        if (\n          event.code !== 1000 &&\n          reconnectAttempts.current < maxReconnectAttempts\n        ) {\n          const delay = Math.min(\n            1000 * Math.pow(2, reconnectAttempts.current),\n            30000\n          );\n          console.log(\n            `${delay}ms 후 재연결 시도 (${\n              reconnectAttempts.current + 1\n            }/${maxReconnectAttempts})`\n          );\n\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectAttempts.current++;\n            connect();\n          }, delay);\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        clearTimeout(connectionTimeout);\n        console.error(\"WebSocket 오류 상세:\", error);\n        console.log(\"오류 발생 시 readyState:\", wsRef.current?.readyState);\n        setError(\"WebSocket 연결 오류가 발생했습니다\");\n        setIsConnecting(false);\n      };\n\n      // 연결 시도 시간 기록\n      window.wsConnectStart = Date.now();\n\n    } catch (err) {\n      console.error(\"WebSocket 연결 실패:\", err);\n      setError(\"WebSocket 연결에 실패했습니다: \" + err.message);\n      setIsConnecting(false);\n    }\n  }, [getWebSocketUrl]);\n\n  // WebSocket 연결 해제\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, \"Manual disconnect\");\n      wsRef.current = null;\n    }\n\n    setIsConnected(false);\n    setIsConnecting(false);\n    reconnectAttempts.current = 0;\n  }, []);\n\n  // 메시지 전송\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    } else {\n      console.error(\"WebSocket이 연결되지 않았습니다\");\n      setError(\"WebSocket 연결이 필요합니다\");\n      return false;\n    }\n  }, []);\n\n  // 스트리밍 요청\n  const startStreaming = useCallback(\n    (userInput, chatHistory = []) => {\n      if (!isConnected) {\n        setError(\"WebSocket 연결이 필요합니다\");\n        return false;\n      }\n\n      const message = {\n        action: \"stream\",\n        projectId,\n        userInput,\n        chat_history: chatHistory,\n      };\n\n      return sendMessage(message);\n    },\n    [isConnected, projectId, sendMessage]\n  );\n\n  // 메시지 리스너 등록\n  const addMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.addEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 메시지 리스너 제거\n  const removeMessageListener = useCallback((listener) => {\n    if (wsRef.current) {\n      wsRef.current.removeEventListener(\"message\", listener);\n    }\n  }, []);\n\n  // 컴포넌트 마운트 시 연결, 언마운트 시 해제\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  // projectId 변경 시 재연결\n  useEffect(() => {\n    if (isConnected) {\n      disconnect();\n      setTimeout(connect, 100);\n    }\n  }, [projectId, isConnected, connect, disconnect]);\n\n  return {\n    isConnected,\n    isConnecting,\n    error,\n    connect,\n    disconnect,\n    sendMessage,\n    startStreaming,\n    addMessageListener,\n    removeMessageListener,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}