{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{promptCardAPI}from\"../services/api\";import ChatInterface from\"./ChatInterface\";import LoadingSpinner from\"./LoadingSpinner\";import{ChatInterfaceSkeleton}from\"./skeleton/SkeletonComponents\";import{jsx as _jsx}from\"react/jsx-runtime\";const UserView=_ref=>{let{projectId,projectName}=_ref;const[promptCards,setPromptCards]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{const loadPromptCards=async()=>{try{setLoading(true);// AdminView와 동일하게 includeContent=true로 설정하여 프롬프트 내용을 포함하여 로드\nconst response=await promptCardAPI.getPromptCards(projectId,true);// 응답 구조가 AdminView와 동일하게 처리\nsetPromptCards(response.promptCards||[]);}catch(error){console.warn(\"프롬프트 카드 로드 실패:\",error);setPromptCards([]);}finally{setLoading(false);}};loadPromptCards();},[projectId]);if(loading){return/*#__PURE__*/_jsx(ChatInterfaceSkeleton,{});}return/*#__PURE__*/_jsx(\"div\",{className:\"h-full bg-white\",children:/*#__PURE__*/_jsx(ChatInterface,{projectId:projectId,projectName:projectName,promptCards:promptCards})});};export default UserView;","map":{"version":3,"names":["React","useState","useEffect","promptCardAPI","ChatInterface","LoadingSpinner","ChatInterfaceSkeleton","jsx","_jsx","UserView","_ref","projectId","projectName","promptCards","setPromptCards","loading","setLoading","loadPromptCards","response","getPromptCards","error","console","warn","className","children"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/components/UserView.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { promptCardAPI } from \"../services/api\";\nimport ChatInterface from \"./ChatInterface\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { ChatInterfaceSkeleton } from \"./skeleton/SkeletonComponents\";\n\nconst UserView = ({ projectId, projectName }) => {\n  const [promptCards, setPromptCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const loadPromptCards = async () => {\n      try {\n        setLoading(true);\n        // AdminView와 동일하게 includeContent=true로 설정하여 프롬프트 내용을 포함하여 로드\n        const response = await promptCardAPI.getPromptCards(projectId, true);\n        // 응답 구조가 AdminView와 동일하게 처리\n        setPromptCards(response.promptCards || []);\n      } catch (error) {\n        console.warn(\"프롬프트 카드 로드 실패:\", error);\n        setPromptCards([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadPromptCards();\n  }, [projectId]);\n\n  if (loading) {\n    return <ChatInterfaceSkeleton />;\n  }\n\n  return (\n    <div className=\"h-full bg-white\">\n      <ChatInterface\n        projectId={projectId}\n        projectName={projectName}\n        promptCards={promptCards}\n      />\n    </div>\n  );\n};\n\nexport default UserView;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,aAAa,KAAQ,iBAAiB,CAC/C,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAC7C,OAASC,qBAAqB,KAAQ,+BAA+B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtE,KAAM,CAAAC,QAAQ,CAAGC,IAAA,EAAgC,IAA/B,CAAEC,SAAS,CAAEC,WAAY,CAAC,CAAAF,IAAA,CAC1C,KAAM,CAACG,WAAW,CAAEC,cAAc,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAe,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACFD,UAAU,CAAC,IAAI,CAAC,CAChB;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAf,aAAa,CAACgB,cAAc,CAACR,SAAS,CAAE,IAAI,CAAC,CACpE;AACAG,cAAc,CAACI,QAAQ,CAACL,WAAW,EAAI,EAAE,CAAC,CAC5C,CAAE,MAAOO,KAAK,CAAE,CACdC,OAAO,CAACC,IAAI,CAAC,gBAAgB,CAAEF,KAAK,CAAC,CACrCN,cAAc,CAAC,EAAE,CAAC,CACpB,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDC,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,CAACN,SAAS,CAAC,CAAC,CAEf,GAAII,OAAO,CAAE,CACX,mBAAOP,IAAA,CAACF,qBAAqB,GAAE,CAAC,CAClC,CAEA,mBACEE,IAAA,QAAKe,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BhB,IAAA,CAACJ,aAAa,EACZO,SAAS,CAAEA,SAAU,CACrBC,WAAW,CAAEA,WAAY,CACzBC,WAAW,CAAEA,WAAY,CAC1B,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}