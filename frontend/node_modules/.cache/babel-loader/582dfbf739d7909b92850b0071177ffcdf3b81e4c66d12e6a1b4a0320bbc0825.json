{"ast":null,"code":"import axios from \"axios\";\n\n// 🔧 API 기본 설정 개선\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 개선\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  timeout: 300000 // 🔧 수정: 5분으로 단축 (기존 15분은 너무 길어서 504 타임아웃 발생)\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(\"API 요청:\", (_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(response => {\n  console.log(\"API 응답:\", response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error(\"API 오류 상세:\", {\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    message: error.message,\n    code: error.code,\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data\n  });\n  return Promise.reject(error);\n});\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n  getProject: async projectId => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n  deleteProject: async projectId => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: {\n        fileName\n      }\n    });\n    return response.data;\n  }\n};\n\n// =============================================================================\n// 2. 프롬프트 카드 API\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (projectId, includeContent = false, includeStats = false) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: {\n        includeContent,\n        includeStats\n      }\n    });\n    return response.data;\n  },\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(`/prompts/${projectId}/${promptId}`, promptData);\n    return response.data;\n  },\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n  reorderPromptCards: async (projectId, reorderData) => {\n    // 백엔드에서 별도의 reorder API가 없으므로 개별 업데이트로 처리\n    // reorderData = [{ promptId, stepOrder }, ...]\n    const updatePromises = reorderData.map(({\n      promptId,\n      stepOrder\n    }) => api.put(`/prompts/${projectId}/${promptId}`, {\n      stepOrder\n    }));\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map(r => r.data)\n    };\n  }\n};\n\n// =============================================================================\n// 3. 제목 생성 API\n// =============================================================================\n\n// 🔧 개선된 generateAPI\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    var _data$chat_history;\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history = data.chat_history) === null || _data$chat_history === void 0 ? void 0 : _data$chat_history.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString()\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n        responseData: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n        timestamp: new Date().toISOString()\n      });\n      throw error;\n    }\n  },\n  // 🔧 SSE 스트리밍 API 완전 개선 - EventSource 사용\n  generateTitleStream: async (projectId, data, onChunk, onError, onComplete) => {\n    var _data$chat_history2;\n    console.log(\"🔄 SSE 스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: ((_data$chat_history2 = data.chat_history) === null || _data$chat_history2 === void 0 ? void 0 : _data$chat_history2.length) || 0,\n      timestamp: new Date().toISOString()\n    });\n\n    // 🔧 방법 1: EventSource를 사용한 진짜 SSE (GET 요청)\n    try {\n      const queryParams = new URLSearchParams({\n        userInput: data.userInput,\n        chat_history: JSON.stringify(data.chat_history || []),\n        projectId: projectId\n      });\n      const eventSource = new EventSource(`${API_BASE_URL}/projects/${projectId}/generate/stream?${queryParams}`);\n      let fullResponse = \"\";\n      eventSource.onmessage = function (event) {\n        try {\n          const eventData = JSON.parse(event.data);\n          if (eventData.type === \"chunk\" && eventData.response) {\n            fullResponse += eventData.response;\n            if (onChunk) {\n              onChunk(eventData.response, eventData);\n            }\n          } else if (eventData.type === \"complete\") {\n            console.log(\"✅ SSE 스트리밍 완료:\", {\n              fullResponseLength: fullResponse.length,\n              timestamp: new Date().toISOString()\n            });\n            eventSource.close();\n            if (onComplete) {\n              onComplete({\n                result: fullResponse,\n                timestamp: eventData.timestamp || new Date().toISOString()\n              });\n            }\n          } else if (eventData.type === \"error\") {\n            console.error(\"❌ SSE 스트리밍 오류:\", eventData.error);\n            eventSource.close();\n            if (onError) {\n              onError(new Error(eventData.error));\n            }\n          }\n        } catch (parseError) {\n          console.error(\"SSE 데이터 파싱 오류:\", parseError);\n        }\n      };\n      eventSource.onerror = function (error) {\n        console.error(\"SSE 연결 오류:\", error);\n        eventSource.close();\n\n        // 🔧 SSE 실패 시 폴백 - fetch 기반 스트리밍으로 전환\n        console.log(\"🔧 EventSource 실패, fetch 기반 스트리밍으로 폴백...\");\n        return generateTitleStreamFallback(projectId, data, onChunk, onError, onComplete);\n      };\n\n      // 연결 타임아웃 설정 (2분)\n      setTimeout(() => {\n        if (eventSource.readyState !== EventSource.CLOSED) {\n          console.log(\"🕐 SSE 연결 타임아웃, 폴백으로 전환\");\n          eventSource.close();\n          return generateTitleStreamFallback(projectId, data, onChunk, onError, onComplete);\n        }\n      }, 120000);\n      return {\n        eventSource\n      }; // EventSource 객체 반환하여 필요시 외부에서 제어 가능\n    } catch (sseError) {\n      console.error(\"EventSource 생성 실패:\", sseError);\n      // 즉시 폴백으로 전환\n      return generateTitleStreamFallback(projectId, data, onChunk, onError, onComplete);\n    }\n  },\n  // 🔧 폴백 함수: fetch 기반 스트리밍 (기존 방식 개선)\n  generateTitleStreamFallback: async (projectId, data, onChunk, onError, onComplete) => {\n    console.log(\"🔄 폴백 스트리밍 시작 (fetch 기반):\", {\n      projectId,\n      timestamp: new Date().toISOString()\n    });\n    try {\n      const response = await fetch(`${API_BASE_URL}/projects/${projectId}/generate/stream`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"text/event-stream\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let fullResponse = \"\";\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value, {\n          stream: true\n        });\n        const messages = chunk.split(\"\\n\\n\");\n        for (const message of messages) {\n          if (message.trim().startsWith(\"data: \")) {\n            try {\n              const jsonStr = message.trim().slice(6);\n              const eventData = JSON.parse(jsonStr);\n              if (eventData.type === \"chunk\" && eventData.response) {\n                fullResponse += eventData.response;\n                if (onChunk) {\n                  onChunk(eventData.response, eventData);\n                }\n              } else if (eventData.type === \"complete\") {\n                console.log(\"✅ 폴백 스트리밍 완료:\", {\n                  fullResponseLength: fullResponse.length,\n                  timestamp: new Date().toISOString()\n                });\n                if (onComplete) {\n                  onComplete({\n                    result: fullResponse,\n                    timestamp: eventData.timestamp || new Date().toISOString()\n                  });\n                }\n                return {\n                  result: fullResponse\n                };\n              } else if (eventData.type === \"error\") {\n                throw new Error(eventData.error);\n              }\n            } catch (parseError) {\n              console.warn(\"폴백 스트리밍 데이터 파싱 오류:\", parseError);\n            }\n          }\n        }\n      }\n    } catch (fetchError) {\n      console.error(\"폴백 스트리밍 실패:\", fetchError);\n\n      // 🔧 최종 폴백: 일반 API 호출\n      console.log(\"🔄 최종 폴백: 일반 API 호출...\");\n      try {\n        const fallbackResponse = await api.post(`/projects/${projectId}/generate`, data);\n        console.log(\"✅ 최종 폴백 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString()\n        });\n\n        // 일반 응답을 스트리밍 형태로 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, {\n              content: word,\n              type: \"simulation\"\n            });\n            await new Promise(resolve => setTimeout(resolve, 50));\n          }\n        }\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString()\n          });\n        }\n        return fallbackResponse.data;\n      } catch (finalError) {\n        console.error(\"❌ 최종 폴백도 실패:\", finalError);\n        if (onError) {\n          onError(new Error(\"모든 API 엔드포인트가 실패했습니다. 서버 상태를 확인해주세요.\"));\n        }\n        throw new Error(\"서비스를 사용할 수 없습니다. 잠시 후 다시 시도해주세요.\");\n      }\n    }\n  },\n  getExecutionStatus: async executionArn => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\"\n    };\n  }\n};\n\n// =============================================================================\n// 4. 채팅 API (generate API로 리다이렉트)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    // 채팅은 generate API를 사용하여 처리\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId\n    });\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [] // 현재 채팅 히스토리는 비워둠\n      });\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\"\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 채팅 히스토리를 별도로 저장하지 않음\n    console.log(\"채팅 히스토리 조회:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message: \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\"\n    };\n  },\n  getChatSessions: async (projectId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 목록 조회:\", {\n      projectId,\n      userId\n    });\n    return {\n      sessions: [],\n      message: \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\"\n    };\n  },\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 삭제:\", {\n      projectId,\n      sessionId,\n      userId\n    });\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId\n    };\n  }\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\"\n    };\n  },\n  signin: async credentials => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n  signup: async userData => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n  verifyEmail: async verificationData => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n  forgotPassword: async email => {\n    const response = await api.post(\"/auth/forgot-password\", {\n      email\n    });\n    return response.data;\n  },\n  confirmPassword: async resetData => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  }\n};\n\n// 🔧 개선된 오류 처리 함수\nexport const handleAPIError = error => {\n  var _error$response5, _error$response6, _error$response7, _error$response8, _error$message, _error$message2;\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status,\n    statusText: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.statusText,\n    data: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data,\n    timestamp: new Date().toISOString()\n  });\n\n  // 🔧 Gateway Timeout 특별 처리\n  if (((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) === 504) {\n    return {\n      message: \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\"\n    };\n  }\n\n  // 🔧 CORS 오류 특별 처리\n  if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes(\"CORS\") || error.code === \"ERR_NETWORK\" || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes(\"Access-Control-Allow-Origin\")) {\n    return {\n      message: \"서버 연결 설정에 문제가 있습니다. 관리자에게 문의하세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\"\n    };\n  }\n\n  // 🔧 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message: \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\"\n    };\n  }\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    const status = error.response.status;\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.error) || \"서버 오류가 발생했습니다\";\n    switch (status) {\n      case 400:\n        return {\n          message: `잘못된 요청: ${message}`,\n          statusCode: 400\n        };\n      case 401:\n        return {\n          message: \"인증이 필요합니다\",\n          statusCode: 401\n        };\n      case 403:\n        return {\n          message: \"권한이 없습니다\",\n          statusCode: 403\n        };\n      case 404:\n        return {\n          message: \"요청한 리소스를 찾을 수 없습니다\",\n          statusCode: 404\n        };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429\n        };\n      case 500:\n        return {\n          message: \"서버 내부 오류가 발생했습니다\",\n          statusCode: 500\n        };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\"\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\"\n    };\n  }\n};\n\n// =============================================================================\n// 6. 동적 프롬프트 시스템 - 기본 설정 및 헬퍼 함수들\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message: \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50,\n  // 최대 프롬프트 카드 개수 제한 (선택사항)\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1\n};\nexport const COLOR_OPTIONS = [{\n  id: \"blue\",\n  name: \"파랑\",\n  bgClass: \"bg-blue-100\",\n  textClass: \"text-blue-800\",\n  borderClass: \"border-blue-200\"\n}, {\n  id: \"green\",\n  name: \"초록\",\n  bgClass: \"bg-green-100\",\n  textClass: \"text-green-800\",\n  borderClass: \"border-green-200\"\n}, {\n  id: \"purple\",\n  name: \"보라\",\n  bgClass: \"bg-purple-100\",\n  textClass: \"text-purple-800\",\n  borderClass: \"border-purple-200\"\n}, {\n  id: \"orange\",\n  name: \"주황\",\n  bgClass: \"bg-orange-100\",\n  textClass: \"text-orange-800\",\n  borderClass: \"border-orange-200\"\n}, {\n  id: \"red\",\n  name: \"빨강\",\n  bgClass: \"bg-red-100\",\n  textClass: \"text-red-800\",\n  borderClass: \"border-red-200\"\n}, {\n  id: \"indigo\",\n  name: \"남색\",\n  bgClass: \"bg-indigo-100\",\n  textClass: \"text-indigo-800\",\n  borderClass: \"border-indigo-200\"\n}, {\n  id: \"pink\",\n  name: \"분홍\",\n  bgClass: \"bg-pink-100\",\n  textClass: \"text-pink-800\",\n  borderClass: \"border-pink-200\"\n}, {\n  id: \"yellow\",\n  name: \"노랑\",\n  bgClass: \"bg-yellow-100\",\n  textClass: \"text-yellow-800\",\n  borderClass: \"border-yellow-200\"\n}, {\n  id: \"gray\",\n  name: \"회색\",\n  bgClass: \"bg-gray-100\",\n  textClass: \"text-gray-800\",\n  borderClass: \"border-gray-200\"\n}];\nexport const getPromptCardInfo = promptCard => {\n  // 동적 프롬프트 카드 정보 반환\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false\n  };\n};\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(project => {\n      var _project$name, _project$description, _project$tags;\n      return ((_project$name = project.name) === null || _project$name === void 0 ? void 0 : _project$name.toLowerCase().includes(query)) || ((_project$description = project.description) === null || _project$description === void 0 ? void 0 : _project$description.toLowerCase().includes(query)) || ((_project$tags = project.tags) === null || _project$tags === void 0 ? void 0 : _project$tags.some(tag => tag.toLowerCase().includes(query)));\n    });\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => {\n        var _a$name;\n        return (_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b.name);\n      });\n      break;\n    default:\n      break;\n  }\n  return filtered;\n};\nexport const formatTokenCount = count => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\nexport const formatFileSize = bytes => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\nexport const calculatePromptStats = promptCards => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false\n    };\n  }\n  const activeCards = promptCards.filter(card => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n  const stepOrders = activeCards.map(card => card.stepOrder || 0).filter(step => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens: activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder\n    }\n  };\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","response","status","error","_error$response","_error$config","_error$response2","message","code","data","Promise","reject","projectAPI","getProjects","get","getProject","projectId","createProject","projectData","post","updateProject","put","deleteProject","delete","getUploadUrl","fileName","params","promptCardAPI","getPromptCards","includeContent","includeStats","createPromptCard","promptData","updatePromptCard","promptId","getPromptContent","deletePromptCard","reorderPromptCards","reorderData","updatePromises","map","stepOrder","responses","all","updatedCards","r","generateAPI","generateTitle","_data$chat_history","inputLength","userInput","length","historyLength","chat_history","timestamp","Date","toISOString","mode","_error$response3","_error$response4","responseData","generateTitleStream","onChunk","onError","onComplete","_data$chat_history2","queryParams","URLSearchParams","JSON","stringify","eventSource","EventSource","fullResponse","onmessage","event","eventData","parse","type","fullResponseLength","close","result","Error","parseError","onerror","generateTitleStreamFallback","setTimeout","readyState","CLOSED","sseError","fetch","Accept","body","ok","statusText","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","stream","messages","split","trim","startsWith","jsonStr","slice","warn","fetchError","fallbackResponse","fullText","words","i","word","content","resolve","model_info","performance_metrics","finalError","getExecutionStatus","executionArn","output","chatAPI","sendMessage","sessionId","userId","userRequest","getChatHistory","getChatSessions","sessions","deleteChatSession","authAPI","isAuthenticated","getCurrentUser","id","email","name","signin","credentials","signup","userData","signout","verifyEmail","verificationData","forgotPassword","confirmPassword","resetData","handleAPIError","_error$response5","_error$response6","_error$response7","_error$response8","_error$message","_error$message2","statusCode","errorType","includes","_error$response$data","_error$response$data2","DYNAMIC_PROMPT_SYSTEM","maxPromptCards","supportedFormats","defaultStepOrder","COLOR_OPTIONS","bgClass","textClass","borderClass","getPromptCardInfo","promptCard","title","color","description","isActive","filterProjects","projects","filters","filtered","searchQuery","query","toLowerCase","filter","project","_project$name","_project$description","_project$tags","tags","some","tag","sortBy","sort","a","b","createdAt","updatedAt","_a$name","localeCompare","formatTokenCount","count","toFixed","toString","formatFileSize","bytes","calculatePromptStats","promptCards","totalCards","totalTokens","averageTokens","activeCards","maxStepOrder","hasCustomOrder","card","reduce","sum","tokenCount","contentLength","stepOrders","step","Math","max","round","stepOrderRange","min"],"sources":["/Users/yeong-gwang/Documents/work/서울경제신문/ai_제목달기(수)_완성본_스트리밍구현 복사본/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// 🔧 API 기본 설정 개선\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL ||\n  \"https://gcm3qzoy04.execute-api.us-east-1.amazonaws.com/prod\";\n\n// Axios 인스턴스 개선\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: { \"Content-Type\": \"application/json\" },\n  timeout: 300000, // 🔧 수정: 5분으로 단축 (기존 15분은 너무 길어서 504 타임아웃 발생)\n});\n\n// 요청 인터셉터\napi.interceptors.request.use((config) => {\n  console.log(\"API 요청:\", config.method?.toUpperCase(), config.url);\n  return config;\n});\n\n// 응답 인터셉터\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"API 응답:\", response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error(\"API 오류 상세:\", {\n      status: error.response?.status,\n      message: error.message,\n      code: error.code,\n      url: error.config?.url,\n      data: error.response?.data,\n    });\n    return Promise.reject(error);\n  }\n);\n\n// =============================================================================\n// 1. 프로젝트 API\n// =============================================================================\n\nexport const projectAPI = {\n  getProjects: async () => {\n    const response = await api.get(\"/projects\");\n    return response.data;\n  },\n\n  getProject: async (projectId) => {\n    const response = await api.get(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  createProject: async (projectData) => {\n    const response = await api.post(\"/projects\", projectData);\n    return response.data;\n  },\n\n  updateProject: async (projectId, projectData) => {\n    const response = await api.put(`/projects/${projectId}`, projectData);\n    return response.data;\n  },\n\n  deleteProject: async (projectId) => {\n    const response = await api.delete(`/projects/${projectId}`);\n    return response.data;\n  },\n\n  getUploadUrl: async (projectId, fileName) => {\n    const response = await api.get(`/projects/${projectId}/upload-url`, {\n      params: { fileName },\n    });\n    return response.data;\n  },\n};\n\n// =============================================================================\n// 2. 프롬프트 카드 API\n// =============================================================================\n\nexport const promptCardAPI = {\n  getPromptCards: async (\n    projectId,\n    includeContent = false,\n    includeStats = false\n  ) => {\n    const response = await api.get(`/prompts/${projectId}`, {\n      params: { includeContent, includeStats },\n    });\n    return response.data;\n  },\n\n  createPromptCard: async (projectId, promptData) => {\n    const response = await api.post(`/prompts/${projectId}`, promptData);\n    return response.data;\n  },\n\n  updatePromptCard: async (projectId, promptId, promptData) => {\n    const response = await api.put(\n      `/prompts/${projectId}/${promptId}`,\n      promptData\n    );\n    return response.data;\n  },\n\n  getPromptContent: async (projectId, promptId) => {\n    const response = await api.get(`/prompts/${projectId}/${promptId}/content`);\n    return response.data;\n  },\n\n  deletePromptCard: async (projectId, promptId) => {\n    const response = await api.delete(`/prompts/${projectId}/${promptId}`);\n    return response.data;\n  },\n\n  reorderPromptCards: async (projectId, reorderData) => {\n    // 백엔드에서 별도의 reorder API가 없으므로 개별 업데이트로 처리\n    // reorderData = [{ promptId, stepOrder }, ...]\n    const updatePromises = reorderData.map(({ promptId, stepOrder }) =>\n      api.put(`/prompts/${projectId}/${promptId}`, { stepOrder })\n    );\n\n    const responses = await Promise.all(updatePromises);\n    return {\n      message: \"프롬프트 카드 순서가 업데이트되었습니다.\",\n      updatedCards: responses.map((r) => r.data),\n    };\n  },\n};\n\n// =============================================================================\n// 3. 제목 생성 API\n// =============================================================================\n\n// 🔧 개선된 generateAPI\nexport const generateAPI = {\n  generateTitle: async (projectId, data) => {\n    console.log(\"대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await api.post(`/projects/${projectId}/generate`, data);\n\n      console.log(\"대화 생성 성공:\", {\n        status: response.status,\n        mode: response.data.mode,\n        message: response.data.message,\n        timestamp: new Date().toISOString(),\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(\"대화 생성 실패:\", {\n        code: error.code,\n        message: error.message,\n        status: error.response?.status,\n        responseData: error.response?.data,\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  },\n\n  // 🔧 SSE 스트리밍 API 완전 개선 - EventSource 사용\n  generateTitleStream: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"🔄 SSE 스트리밍 대화 생성 요청 시작:\", {\n      projectId,\n      inputLength: data.userInput.length,\n      historyLength: data.chat_history?.length || 0,\n      timestamp: new Date().toISOString(),\n    });\n\n    // 🔧 방법 1: EventSource를 사용한 진짜 SSE (GET 요청)\n    try {\n      const queryParams = new URLSearchParams({\n        userInput: data.userInput,\n        chat_history: JSON.stringify(data.chat_history || []),\n        projectId: projectId,\n      });\n\n      const eventSource = new EventSource(\n        `${API_BASE_URL}/projects/${projectId}/generate/stream?${queryParams}`\n      );\n\n      let fullResponse = \"\";\n\n      eventSource.onmessage = function (event) {\n        try {\n          const eventData = JSON.parse(event.data);\n\n          if (eventData.type === \"chunk\" && eventData.response) {\n            fullResponse += eventData.response;\n\n            if (onChunk) {\n              onChunk(eventData.response, eventData);\n            }\n          } else if (eventData.type === \"complete\") {\n            console.log(\"✅ SSE 스트리밍 완료:\", {\n              fullResponseLength: fullResponse.length,\n              timestamp: new Date().toISOString(),\n            });\n\n            eventSource.close();\n\n            if (onComplete) {\n              onComplete({\n                result: fullResponse,\n                timestamp: eventData.timestamp || new Date().toISOString(),\n              });\n            }\n          } else if (eventData.type === \"error\") {\n            console.error(\"❌ SSE 스트리밍 오류:\", eventData.error);\n            eventSource.close();\n\n            if (onError) {\n              onError(new Error(eventData.error));\n            }\n          }\n        } catch (parseError) {\n          console.error(\"SSE 데이터 파싱 오류:\", parseError);\n        }\n      };\n\n      eventSource.onerror = function (error) {\n        console.error(\"SSE 연결 오류:\", error);\n        eventSource.close();\n\n        // 🔧 SSE 실패 시 폴백 - fetch 기반 스트리밍으로 전환\n        console.log(\"🔧 EventSource 실패, fetch 기반 스트리밍으로 폴백...\");\n        return generateTitleStreamFallback(\n          projectId,\n          data,\n          onChunk,\n          onError,\n          onComplete\n        );\n      };\n\n      // 연결 타임아웃 설정 (2분)\n      setTimeout(() => {\n        if (eventSource.readyState !== EventSource.CLOSED) {\n          console.log(\"🕐 SSE 연결 타임아웃, 폴백으로 전환\");\n          eventSource.close();\n          return generateTitleStreamFallback(\n            projectId,\n            data,\n            onChunk,\n            onError,\n            onComplete\n          );\n        }\n      }, 120000);\n\n      return { eventSource }; // EventSource 객체 반환하여 필요시 외부에서 제어 가능\n    } catch (sseError) {\n      console.error(\"EventSource 생성 실패:\", sseError);\n      // 즉시 폴백으로 전환\n      return generateTitleStreamFallback(\n        projectId,\n        data,\n        onChunk,\n        onError,\n        onComplete\n      );\n    }\n  },\n\n  // 🔧 폴백 함수: fetch 기반 스트리밍 (기존 방식 개선)\n  generateTitleStreamFallback: async (\n    projectId,\n    data,\n    onChunk,\n    onError,\n    onComplete\n  ) => {\n    console.log(\"🔄 폴백 스트리밍 시작 (fetch 기반):\", {\n      projectId,\n      timestamp: new Date().toISOString(),\n    });\n\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/projects/${projectId}/generate/stream`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"text/event-stream\",\n          },\n          body: JSON.stringify(data),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let fullResponse = \"\";\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value, { stream: true });\n        const messages = chunk.split(\"\\n\\n\");\n\n        for (const message of messages) {\n          if (message.trim().startsWith(\"data: \")) {\n            try {\n              const jsonStr = message.trim().slice(6);\n              const eventData = JSON.parse(jsonStr);\n\n              if (eventData.type === \"chunk\" && eventData.response) {\n                fullResponse += eventData.response;\n\n                if (onChunk) {\n                  onChunk(eventData.response, eventData);\n                }\n              } else if (eventData.type === \"complete\") {\n                console.log(\"✅ 폴백 스트리밍 완료:\", {\n                  fullResponseLength: fullResponse.length,\n                  timestamp: new Date().toISOString(),\n                });\n\n                if (onComplete) {\n                  onComplete({\n                    result: fullResponse,\n                    timestamp: eventData.timestamp || new Date().toISOString(),\n                  });\n                }\n                return { result: fullResponse };\n              } else if (eventData.type === \"error\") {\n                throw new Error(eventData.error);\n              }\n            } catch (parseError) {\n              console.warn(\"폴백 스트리밍 데이터 파싱 오류:\", parseError);\n            }\n          }\n        }\n      }\n    } catch (fetchError) {\n      console.error(\"폴백 스트리밍 실패:\", fetchError);\n\n      // 🔧 최종 폴백: 일반 API 호출\n      console.log(\"🔄 최종 폴백: 일반 API 호출...\");\n      try {\n        const fallbackResponse = await api.post(\n          `/projects/${projectId}/generate`,\n          data\n        );\n\n        console.log(\"✅ 최종 폴백 성공:\", {\n          mode: fallbackResponse.data.mode,\n          timestamp: new Date().toISOString(),\n        });\n\n        // 일반 응답을 스트리밍 형태로 시뮬레이션\n        if (fallbackResponse.data.result && onChunk) {\n          const fullText = fallbackResponse.data.result;\n          const words = fullText.split(\" \");\n\n          for (let i = 0; i < words.length; i++) {\n            const word = words[i] + (i < words.length - 1 ? \" \" : \"\");\n            onChunk(word, { content: word, type: \"simulation\" });\n            await new Promise((resolve) => setTimeout(resolve, 50));\n          }\n        }\n\n        if (onComplete) {\n          onComplete({\n            result: fallbackResponse.data.result,\n            model_info: fallbackResponse.data.model_info,\n            performance_metrics: fallbackResponse.data.performance_metrics,\n            timestamp: new Date().toISOString(),\n          });\n        }\n\n        return fallbackResponse.data;\n      } catch (finalError) {\n        console.error(\"❌ 최종 폴백도 실패:\", finalError);\n\n        if (onError) {\n          onError(\n            new Error(\n              \"모든 API 엔드포인트가 실패했습니다. 서버 상태를 확인해주세요.\"\n            )\n          );\n        }\n\n        throw new Error(\n          \"서비스를 사용할 수 없습니다. 잠시 후 다시 시도해주세요.\"\n        );\n      }\n    }\n  },\n\n  getExecutionStatus: async (executionArn) => {\n    return {\n      status: \"SUCCEEDED\",\n      output: \"{}\",\n    };\n  },\n};\n\n// =============================================================================\n// 4. 채팅 API (generate API로 리다이렉트)\n// =============================================================================\n\nexport const chatAPI = {\n  sendMessage: async (projectId, message, sessionId, userId = \"default\") => {\n    // 채팅은 generate API를 사용하여 처리\n    console.log(\"채팅 메시지를 generate API로 전달:\", {\n      projectId,\n      message,\n      sessionId,\n      userId,\n    });\n\n    try {\n      const response = await generateAPI.generateTitle(projectId, {\n        userInput: message,\n        userRequest: \"\",\n        chat_history: [], // 현재 채팅 히스토리는 비워둠\n      });\n\n      return {\n        response: response.result,\n        sessionId,\n        userId,\n        timestamp: new Date().toISOString(),\n        mode: response.mode || \"chat\",\n      };\n    } catch (error) {\n      console.error(\"채팅 메시지 처리 실패:\", error);\n      throw error;\n    }\n  },\n\n  getChatHistory: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 채팅 히스토리를 별도로 저장하지 않음\n    console.log(\"채팅 히스토리 조회:\", { projectId, sessionId, userId });\n\n    return {\n      messages: [],\n      sessionId,\n      userId,\n      message:\n        \"채팅 히스토리는 현재 지원되지 않습니다. 각 메시지는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  getChatSessions: async (projectId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 목록 조회:\", { projectId, userId });\n\n    return {\n      sessions: [],\n      message:\n        \"채팅 세션은 현재 지원되지 않습니다. 각 대화는 독립적으로 처리됩니다.\",\n    };\n  },\n\n  deleteChatSession: async (projectId, sessionId, userId = \"default\") => {\n    // 현재 백엔드에서 세션을 별도로 관리하지 않음\n    console.log(\"채팅 세션 삭제:\", { projectId, sessionId, userId });\n\n    return {\n      message: \"채팅 세션 삭제가 완료되었습니다.\",\n      sessionId,\n      userId,\n    };\n  },\n};\n\n// =============================================================================\n// 5. 인증 API\n// =============================================================================\n\nexport const authAPI = {\n  isAuthenticated: () => {\n    // 실제 토큰 검증 로직으로 대체 필요\n    return true;\n  },\n\n  getCurrentUser: () => {\n    // 실제 사용자 정보 가져오기 로직으로 대체 필요\n    return {\n      id: \"user\",\n      email: \"user@example.com\",\n      name: \"사용자\",\n    };\n  },\n\n  signin: async (credentials) => {\n    const response = await api.post(\"/auth/signin\", credentials);\n    return response.data;\n  },\n\n  signup: async (userData) => {\n    const response = await api.post(\"/auth/signup\", userData);\n    return response.data;\n  },\n\n  signout: async () => {\n    const response = await api.post(\"/auth/signout\");\n    return response.data;\n  },\n\n  verifyEmail: async (verificationData) => {\n    const response = await api.post(\"/auth/verify-email\", verificationData);\n    return response.data;\n  },\n\n  forgotPassword: async (email) => {\n    const response = await api.post(\"/auth/forgot-password\", { email });\n    return response.data;\n  },\n\n  confirmPassword: async (resetData) => {\n    const response = await api.post(\"/auth/confirm-password\", resetData);\n    return response.data;\n  },\n};\n\n// 🔧 개선된 오류 처리 함수\nexport const handleAPIError = (error) => {\n  console.error(\"API 오류 상세 분석:\", {\n    message: error.message,\n    code: error.code,\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    data: error.response?.data,\n    timestamp: new Date().toISOString(),\n  });\n\n  // 🔧 Gateway Timeout 특별 처리\n  if (error.response?.status === 504) {\n    return {\n      message:\n        \"서버 응답 시간이 초과되었습니다. 요청을 간소화하거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 504,\n      errorType: \"GATEWAY_TIMEOUT\",\n    };\n  }\n\n  // 🔧 CORS 오류 특별 처리\n  if (\n    error.message?.includes(\"CORS\") ||\n    error.code === \"ERR_NETWORK\" ||\n    error.message?.includes(\"Access-Control-Allow-Origin\")\n  ) {\n    return {\n      message: \"서버 연결 설정에 문제가 있습니다. 관리자에게 문의하세요.\",\n      statusCode: 0,\n      errorType: \"CORS_ERROR\",\n    };\n  }\n\n  // 🔧 타임아웃 오류 특별 처리\n  if (error.code === \"ECONNABORTED\") {\n    return {\n      message:\n        \"요청 처리 시간이 초과되었습니다. 입력을 줄이거나 잠시 후 다시 시도해주세요.\",\n      statusCode: 0,\n      errorType: \"TIMEOUT_ERROR\",\n    };\n  }\n\n  if (error.response) {\n    const status = error.response.status;\n    const message =\n      error.response.data?.message ||\n      error.response.data?.error ||\n      \"서버 오류가 발생했습니다\";\n\n    switch (status) {\n      case 400:\n        return { message: `잘못된 요청: ${message}`, statusCode: 400 };\n      case 401:\n        return { message: \"인증이 필요합니다\", statusCode: 401 };\n      case 403:\n        return { message: \"권한이 없습니다\", statusCode: 403 };\n      case 404:\n        return { message: \"요청한 리소스를 찾을 수 없습니다\", statusCode: 404 };\n      case 429:\n        return {\n          message: \"요청이 너무 많습니다. 잠시 후 다시 시도해주세요\",\n          statusCode: 429,\n        };\n      case 500:\n        return { message: \"서버 내부 오류가 발생했습니다\", statusCode: 500 };\n      default:\n        return {\n          message: `서버 오류 (${status}): ${message}`,\n          statusCode: status,\n        };\n    }\n  } else if (error.request) {\n    return {\n      message: \"서버에 연결할 수 없습니다. 네트워크 연결을 확인해주세요\",\n      statusCode: 0,\n      errorType: \"NETWORK_ERROR\",\n    };\n  } else {\n    return {\n      message: `요청 오류: ${error.message}`,\n      statusCode: -1,\n      errorType: \"REQUEST_ERROR\",\n    };\n  }\n};\n\n// =============================================================================\n// 6. 동적 프롬프트 시스템 - 기본 설정 및 헬퍼 함수들\n// =============================================================================\n\nexport const DYNAMIC_PROMPT_SYSTEM = {\n  message:\n    \"원하는 만큼 프롬프트 카드를 생성하여 나만의 AI 어시스턴트를 만들어보세요!\",\n  maxPromptCards: 50, // 최대 프롬프트 카드 개수 제한 (선택사항)\n  supportedFormats: [\"text\", \"markdown\"],\n  defaultStepOrder: 1,\n};\n\nexport const COLOR_OPTIONS = [\n  {\n    id: \"blue\",\n    name: \"파랑\",\n    bgClass: \"bg-blue-100\",\n    textClass: \"text-blue-800\",\n    borderClass: \"border-blue-200\",\n  },\n  {\n    id: \"green\",\n    name: \"초록\",\n    bgClass: \"bg-green-100\",\n    textClass: \"text-green-800\",\n    borderClass: \"border-green-200\",\n  },\n  {\n    id: \"purple\",\n    name: \"보라\",\n    bgClass: \"bg-purple-100\",\n    textClass: \"text-purple-800\",\n    borderClass: \"border-purple-200\",\n  },\n  {\n    id: \"orange\",\n    name: \"주황\",\n    bgClass: \"bg-orange-100\",\n    textClass: \"text-orange-800\",\n    borderClass: \"border-orange-200\",\n  },\n  {\n    id: \"red\",\n    name: \"빨강\",\n    bgClass: \"bg-red-100\",\n    textClass: \"text-red-800\",\n    borderClass: \"border-red-200\",\n  },\n  {\n    id: \"indigo\",\n    name: \"남색\",\n    bgClass: \"bg-indigo-100\",\n    textClass: \"text-indigo-800\",\n    borderClass: \"border-indigo-200\",\n  },\n  {\n    id: \"pink\",\n    name: \"분홍\",\n    bgClass: \"bg-pink-100\",\n    textClass: \"text-pink-800\",\n    borderClass: \"border-pink-200\",\n  },\n  {\n    id: \"yellow\",\n    name: \"노랑\",\n    bgClass: \"bg-yellow-100\",\n    textClass: \"text-yellow-800\",\n    borderClass: \"border-yellow-200\",\n  },\n  {\n    id: \"gray\",\n    name: \"회색\",\n    bgClass: \"bg-gray-100\",\n    textClass: \"text-gray-800\",\n    borderClass: \"border-gray-200\",\n  },\n];\n\nexport const getPromptCardInfo = (promptCard) => {\n  // 동적 프롬프트 카드 정보 반환\n  return {\n    id: promptCard.promptId || promptCard.id,\n    title: promptCard.title || \"새 프롬프트 카드\",\n    color: promptCard.color || \"gray\",\n    description: promptCard.description || \"\",\n    stepOrder: promptCard.stepOrder || 1,\n    isActive: promptCard.isActive !== false,\n  };\n};\n\nexport const filterProjects = (projects, filters) => {\n  let filtered = [...projects];\n\n  // 검색어 필터\n  if (filters.searchQuery) {\n    const query = filters.searchQuery.toLowerCase();\n    filtered = filtered.filter(\n      (project) =>\n        project.name?.toLowerCase().includes(query) ||\n        project.description?.toLowerCase().includes(query) ||\n        project.tags?.some((tag) => tag.toLowerCase().includes(query))\n    );\n  }\n\n  // 정렬\n  switch (filters.sortBy) {\n    case \"created\":\n      filtered.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n      break;\n    case \"updated\":\n      filtered.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n      break;\n    case \"name\":\n      filtered.sort((a, b) => a.name?.localeCompare(b.name));\n      break;\n    default:\n      break;\n  }\n\n  return filtered;\n};\n\nexport const formatTokenCount = (count) => {\n  if (count >= 1000) {\n    return `${(count / 1000).toFixed(1)}K`;\n  }\n  return count.toString();\n};\n\nexport const formatFileSize = (bytes) => {\n  if (bytes >= 1024) {\n    return `${(bytes / 1024).toFixed(1)}KB`;\n  }\n  return `${bytes}B`;\n};\n\nexport const calculatePromptStats = (promptCards) => {\n  if (!promptCards || promptCards.length === 0) {\n    return {\n      totalCards: 0,\n      totalTokens: 0,\n      averageTokens: 0,\n      activeCards: 0,\n      maxStepOrder: 0,\n      hasCustomOrder: false,\n    };\n  }\n\n  const activeCards = promptCards.filter((card) => card.isActive !== false);\n  const totalTokens = activeCards.reduce((sum, card) => {\n    return sum + (card.tokenCount || card.contentLength || 0);\n  }, 0);\n\n  const stepOrders = activeCards\n    .map((card) => card.stepOrder || 0)\n    .filter((step) => step > 0);\n  const hasCustomOrder = stepOrders.length > 0;\n  const maxStepOrder = stepOrders.length > 0 ? Math.max(...stepOrders) : 0;\n\n  return {\n    totalCards: promptCards.length,\n    activeCards: activeCards.length,\n    totalTokens,\n    averageTokens:\n      activeCards.length > 0 ? Math.round(totalTokens / activeCards.length) : 0,\n    maxStepOrder,\n    hasCustomOrder,\n    stepOrderRange: {\n      min: stepOrders.length > 0 ? Math.min(...stepOrders) : 0,\n      max: maxStepOrder,\n    },\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}