{"version":3,"file":"static/js/566.181d8c17.chunk.js","mappings":"8MAIA,MAyIA,EAzI0BA,IAAiE,IAA9DC,MAAOC,EAAS,sBAAEC,EAAqB,cAAEC,GAAeJ,EACnF,MAAMK,GAAWC,EAAAA,EAAAA,OACVC,IAAgBC,EAAAA,EAAAA,MACjBC,EAAeF,EAAaG,IAAI,SAChCT,EAAQC,GAAaO,GACpBE,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAAeC,IAAoBN,EAAAA,EAAAA,WAAS,IAEnDO,EAAAA,EAAAA,WAAU,KACHnB,GACHI,EAAS,WAEV,CAACJ,EAAOI,IAiDX,OACEgB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2EAA0EC,UACvFC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yEAAwEC,SAAC,qCAGvFC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,4DAA2DC,SAAA,EACtEF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,cAAaC,SAAEtB,IAAa,UAACoB,EAAAA,EAAAA,KAAA,SAAM,qFAKvDG,EAAAA,EAAAA,MAAA,QAAMF,UAAU,iBAAiBG,SA5DlBC,UACnBC,EAAEC,iBACFb,GAAW,GACXE,EAAS,IAET,IACE,MAAMY,QAAiBC,EAAAA,GAAQC,YAAY,CACzC9B,MAAOA,EACPU,KAAMA,IAGRqB,QAAQC,IAAI,gDAAcJ,GAEtB1B,EACFA,EAAsB0B,GAGtBxB,EAAS,SAEb,CAAE,MAAOW,GACP,MAAMkB,GAAWC,EAAAA,EAAAA,IAAenB,GAChCC,EAASiB,EAASE,QACpB,CAAC,QACCrB,GAAW,EACb,GAoC4DQ,SAAA,EACtDC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SACEgB,QAAQ,OACRf,UAAU,6DAA4DC,SACvE,+CAGDF,EAAAA,EAAAA,KAAA,SACEiB,GAAG,OACHC,KAAK,OACLC,KAAK,OACLC,UAAQ,EACRC,UAAW,EACXC,MAAOhC,EACPiC,SAAWjB,GAAMf,EAAQe,EAAEkB,OAAOF,OAClCrB,UAAU,2WACVwB,YAAY,cAIf9B,IACCK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gIAA+HC,SAC3IP,KAILQ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,UACEmB,KAAK,SACLO,SAAUjC,GAA2B,IAAhBH,EAAKqC,OAC1B1B,UAAU,gRAA+QC,SAExRT,EAAU,yBAAY,+BAGzBO,EAAAA,EAAAA,KAAA,UACEmB,KAAK,SACLS,QAvEavB,UACvBP,GAAiB,GACjBF,EAAS,IAET,UAEQa,EAAAA,GAAQoB,OAAO,CAAEjD,MAAOA,EAAOkD,SAAU,QAASC,SAAU,KAClEC,MAAM,2FACR,CAAE,MAAOrC,GACP,MAAMkB,GAAWC,EAAAA,EAAAA,IAAenB,GAC5BkB,EAASE,QAAQkB,SAAS,6BAC5BD,MAAM,4FAENpC,EAASiB,EAASE,QAEtB,CAAC,QACCjB,GAAiB,EACnB,GAuDU4B,SAAU7B,EACVI,UAAU,oWAAmWC,SAE5WL,EAAgB,yBAAY,4DAIjCG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAAA,UACEmB,KAAK,SACLS,QAAS7C,GAAa,KAAWC,EAAS,WAC1CiB,UAAU,uHAAsHC,SACjI,sE","sources":["components/EmailVerification.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { authAPI, handleAPIError } from \"../services/api\";\n\nconst EmailVerification = ({ email: propEmail, onVerificationSuccess, onBackToLogin }) => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const emailFromUrl = searchParams.get('email');\n  const email = propEmail || emailFromUrl;\n  const [code, setCode] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [resendLoading, setResendLoading] = useState(false);\n\n  useEffect(() => {\n    if (!email) {\n      navigate('/login');\n    }\n  }, [email, navigate]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n\n    try {\n      const response = await authAPI.verifyEmail({\n        email: email,\n        code: code,\n      });\n\n      console.log(\"이메일 인증 성공:\", response);\n\n      if (onVerificationSuccess) {\n        onVerificationSuccess(response);\n      } else {\n        // URL 파라미터로 접근한 경우 로그인 페이지로 이동\n        navigate('/login');\n      }\n    } catch (error) {\n      const apiError = handleAPIError(error);\n      setError(apiError.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleResendCode = async () => {\n    setResendLoading(true);\n    setError(\"\");\n\n    try {\n      // 인증 코드 재전송을 위해 회원가입 재호출\n      await authAPI.signup({ email: email, password: \"dummy\", fullname: \"\" });\n      alert(\"인증 코드가 다시 전송되었습니다.\");\n    } catch (error) {\n      const apiError = handleAPIError(error);\n      if (apiError.message.includes(\"이미 존재\")) {\n        alert(\"인증 코드가 다시 전송되었습니다.\");\n      } else {\n        setError(apiError.message);\n      }\n    } finally {\n      setResendLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white\">\n            이메일 인증\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600 dark:text-gray-300\">\n            <span className=\"font-medium\">{email}</span>로<br />\n            인증 코드가 전송되었습니다.\n          </p>\n        </div>\n\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div>\n            <label\n              htmlFor=\"code\"\n              className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n            >\n              인증 코드 (6자리)\n            </label>\n            <input\n              id=\"code\"\n              name=\"code\"\n              type=\"text\"\n              required\n              maxLength={6}\n              value={code}\n              onChange={(e) => setCode(e.target.value)}\n              className=\"mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white bg-white dark:bg-gray-700 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 text-center text-2xl font-mono tracking-widest sm:text-sm transition-colors duration-200\"\n              placeholder=\"000000\"\n            />\n          </div>\n\n          {error && (\n            <div className=\"bg-red-50 dark:bg-red-900 border border-red-200 dark:border-red-700 text-red-700 dark:text-red-300 px-4 py-3 rounded relative\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"space-y-3\">\n            <button\n              type=\"submit\"\n              disabled={loading || code.length !== 6}\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? \"인증 중...\" : \"인증 완료\"}\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={handleResendCode}\n              disabled={resendLoading}\n              className=\"w-full text-center py-2 px-4 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200\"\n            >\n              {resendLoading ? \"전송 중...\" : \"인증 코드 다시 받기\"}\n            </button>\n          </div>\n\n          <div className=\"text-center\">\n            <button\n              type=\"button\"\n              onClick={onBackToLogin || (() => navigate('/login'))}\n              className=\"text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300 text-sm transition-colors duration-200\"\n            >\n              로그인으로 돌아가기\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default EmailVerification;\n"],"names":["_ref","email","propEmail","onVerificationSuccess","onBackToLogin","navigate","useNavigate","searchParams","useSearchParams","emailFromUrl","get","code","setCode","useState","loading","setLoading","error","setError","resendLoading","setResendLoading","useEffect","_jsx","className","children","_jsxs","onSubmit","async","e","preventDefault","response","authAPI","verifyEmail","console","log","apiError","handleAPIError","message","htmlFor","id","name","type","required","maxLength","value","onChange","target","placeholder","disabled","length","onClick","signup","password","fullname","alert","includes"],"sourceRoot":""}